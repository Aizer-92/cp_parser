#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö 2024-2025
"""

import pandas as pd
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

def clean_amount(amount_str):
    """–û—á–∏—â–∞–µ—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—É–º–º—É –≤ —á–∏—Å–ª–æ"""
    if pd.isna(amount_str) or amount_str == '':
        return np.nan
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
    amount_str = str(amount_str).replace(' ', '').replace(',', '.')
    
    try:
        return float(amount_str)
    except:
        return np.nan

def clean_date(date_str):
    """–û—á–∏—â–∞–µ—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É"""
    if pd.isna(date_str) or date_str == '':
        return pd.NaT
    
    try:
        # –§–æ—Ä–º–∞—Ç: 19.08.202416:21
        date_str = str(date_str)
        if len(date_str) >= 10:
            date_part = date_str[:10]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
            return pd.to_datetime(date_part, format='%d.%m.%Y', errors='coerce')
        return pd.NaT
    except:
        return pd.NaT

def analyze_financial_data():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("=== –§–ò–ù–ê–ù–°–û–í–´–ô –ê–ù–ê–õ–ò–ó 2024-2025 ===\n")
    
    file_path = "/Users/bakirovresad/Downloads/Reshad 1/–û—Ç—á–µ—Ç —Å—á–µ—Ç–∞ –º–∞–π-—Å–µ–Ω—Ç—è–±—Ä—å 2025 (1).xlsx"
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df_2024 = pd.read_excel(file_path, sheet_name='2024')
    df_2025 = pd.read_excel(file_path, sheet_name='2025')
    
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö 2024: {len(df_2024)} —Å—Ç—Ä–æ–∫")
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö 2025: {len(df_2025)} —Å—Ç—Ä–æ–∫")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ 2024
    print("\n=== –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• 2024 ===")
    df_2024_clean = df_2024.copy()
    df_2024_clean['–°—É–º–º–∞_—á–∏—Å–ª–æ'] = df_2024_clean['–°—É–º–º–∞'].apply(clean_amount)
    df_2024_clean['–î–∞—Ç–∞_—á–∏—Å—Ç–∞—è'] = df_2024_clean['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è'].apply(clean_date)
    
    # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ —Å—É–º–º–∞–º–∏ –∏–ª–∏ –¥–∞—Ç–∞–º–∏
    df_2024_clean = df_2024_clean.dropna(subset=['–°—É–º–º–∞_—á–∏—Å–ª–æ', '–î–∞—Ç–∞_—á–∏—Å—Ç–∞—è', '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç'])
    df_2024_clean = df_2024_clean[df_2024_clean['–°—É–º–º–∞_—á–∏—Å–ª–æ'] > 0]
    
    print(f"–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ 2024: {len(df_2024_clean)} —Å—Ç—Ä–æ–∫")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ 2025
    print("\n=== –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• 2025 ===")
    df_2025_clean = df_2025.copy()
    df_2025_clean['–°—É–º–º–∞_—á–∏—Å–ª–æ'] = df_2025_clean['–°—É–º–º–∞'].apply(clean_amount)
    df_2025_clean['–î–∞—Ç–∞_—á–∏—Å—Ç–∞—è'] = df_2025_clean['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è'].apply(clean_date)
    
    # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ —Å—É–º–º–∞–º–∏ –∏–ª–∏ –¥–∞—Ç–∞–º–∏
    df_2025_clean = df_2025_clean.dropna(subset=['–°—É–º–º–∞_—á–∏—Å–ª–æ', '–î–∞—Ç–∞_—á–∏—Å—Ç–∞—è', '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç'])
    df_2025_clean = df_2025_clean[df_2025_clean['–°—É–º–º–∞_—á–∏—Å–ª–æ'] > 0]
    
    print(f"–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ 2025: {len(df_2025_clean)} —Å—Ç—Ä–æ–∫")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞
    print("\n=== –ê–ù–ê–õ–ò–ó –†–û–°–¢–ê ===")
    total_2024 = df_2024_clean['–°—É–º–º–∞_—á–∏—Å–ª–æ'].sum()
    total_2025 = df_2025_clean['–°—É–º–º–∞_—á–∏—Å–ª–æ'].sum()
    growth_percent = ((total_2025 - total_2024) / total_2024) * 100
    
    print(f"–û–±—â–∏–π –¥–æ—Ö–æ–¥ 2024: {total_2024:,.2f} —Ä—É–±.")
    print(f"–û–±—â–∏–π –¥–æ—Ö–æ–¥ 2025: {total_2025:,.2f} —Ä—É–±.")
    print(f"–†–æ—Å—Ç: {growth_percent:.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤ 2024
    print("\n=== –¢–û–ü-10 –ö–õ–ò–ï–ù–¢–û–í 2024 ===")
    clients_2024 = df_2024_clean.groupby('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç')['–°—É–º–º–∞_—á–∏—Å–ª–æ'].agg(['count', 'sum', 'mean']).round(2)
    clients_2024.columns = ['–ó–∞–∫–∞–∑–æ–≤', '–û–±—â–∞—è_—Å—É–º–º–∞', '–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫']
    clients_2024 = clients_2024.sort_values('–û–±—â–∞—è_—Å—É–º–º–∞', ascending=False)
    
    for i, (client, data) in enumerate(clients_2024.head(10).iterrows(), 1):
        print(f"{i:2d}. {client}: {data['–û–±—â–∞—è_—Å—É–º–º–∞']:,.2f} —Ä—É–±. ({data['–ó–∞–∫–∞–∑–æ–≤']} –∑–∞–∫–∞–∑–æ–≤)")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤ 2025
    print("\n=== –¢–û–ü-10 –ö–õ–ò–ï–ù–¢–û–í 2025 ===")
    clients_2025 = df_2025_clean.groupby('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç')['–°—É–º–º–∞_—á–∏—Å–ª–æ'].agg(['count', 'sum', 'mean']).round(2)
    clients_2025.columns = ['–ó–∞–∫–∞–∑–æ–≤', '–û–±—â–∞—è_—Å—É–º–º–∞', '–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫']
    clients_2025 = clients_2025.sort_values('–û–±—â–∞—è_—Å—É–º–º–∞', ascending=False)
    
    for i, (client, data) in enumerate(clients_2025.head(10).iterrows(), 1):
        print(f"{i:2d}. {client}: {data['–û–±—â–∞—è_—Å—É–º–º–∞']:,.2f} —Ä—É–±. ({data['–ó–∞–∫–∞–∑–æ–≤']} –∑–∞–∫–∞–∑–æ–≤)")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
    print("\n=== –°–†–ê–í–ù–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–û–í ===")
    common_clients = set(clients_2024.index) & set(clients_2025.index)
    new_clients_2025 = set(clients_2025.index) - set(clients_2024.index)
    lost_clients_2024 = set(clients_2024.index) - set(clients_2025.index)
    
    print(f"–û–±—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(common_clients)}")
    print(f"–ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ 2025: {len(new_clients_2025)}")
    print(f"–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(lost_clients_2024)}")
    
    # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É –æ–±—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    print("\n=== –ò–ó–ú–ï–ù–ï–ù–ò–Ø –£ –û–ë–©–ò–• –ö–õ–ò–ï–ù–¢–û–í ===")
    client_changes = []
    for client in common_clients:
        if client in clients_2024.index and client in clients_2025.index:
            revenue_2024 = clients_2024.loc[client, '–û–±—â–∞—è_—Å—É–º–º–∞']
            revenue_2025 = clients_2025.loc[client, '–û–±—â–∞—è_—Å—É–º–º–∞']
            
            if revenue_2024 > 0:
                change_percent = ((revenue_2025 - revenue_2024) / revenue_2024) * 100
                client_changes.append({
                    'client': client,
                    'revenue_2024': revenue_2024,
                    'revenue_2025': revenue_2025,
                    'change_percent': change_percent
                })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é
    client_changes.sort(key=lambda x: x['change_percent'])
    
    print("–ö–ª–∏–µ–Ω—Ç—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Å–Ω–∏–∂–µ–Ω–∏–µ–º –¥–æ—Ö–æ–¥–æ–≤:")
    for client in client_changes[:5]:
        print(f"  {client['client']}: {client['change_percent']:.1f}% ({client['revenue_2024']:,.0f} ‚Üí {client['revenue_2025']:,.0f})")
    
    print("\n–ö–ª–∏–µ–Ω—Ç—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–æ—Å—Ç–æ–º –¥–æ—Ö–æ–¥–æ–≤:")
    for client in client_changes[-5:]:
        print(f"  {client['client']}: {client['change_percent']:.1f}% ({client['revenue_2024']:,.0f} ‚Üí {client['revenue_2025']:,.0f})")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º 2025
    print("\n=== –ê–ù–ê–õ–ò–ó –ü–û –ú–ï–°–Ø–¶–ê–ú 2025 ===")
    df_2025_clean['–ú–µ—Å—è—Ü'] = df_2025_clean['–î–∞—Ç–∞_—á–∏—Å—Ç–∞—è'].dt.month
    monthly_2025 = df_2025_clean.groupby('–ú–µ—Å—è—Ü')['–°—É–º–º–∞_—á–∏—Å–ª–æ'].sum()
    
    month_names = {1: '–Ø–Ω–≤–∞—Ä—å', 2: '–§–µ–≤—Ä–∞–ª—å', 3: '–ú–∞—Ä—Ç', 4: '–ê–ø—Ä–µ–ª—å', 5: '–ú–∞–π', 
                   6: '–ò—é–Ω—å', 7: '–ò—é–ª—å', 8: '–ê–≤–≥—É—Å—Ç', 9: '–°–µ–Ω—Ç—è–±—Ä—å'}
    
    for month, amount in monthly_2025.items():
        print(f"  {month_names.get(month, month)}: {amount:,.2f} —Ä—É–±.")
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 2025
    print("\n=== –ü–†–û–ì–ù–û–ó –ù–ê 2025 –ì–û–î ===")
    avg_monthly = monthly_2025.mean()
    current_total = monthly_2025.sum()
    remaining_months = 3  # –û–∫—Ç—è–±—Ä—å-–¥–µ–∫–∞–±—Ä—å
    forecast_remaining = avg_monthly * remaining_months
    forecast_total = current_total + forecast_remaining
    
    print(f"–°—Ä–µ–¥–Ω–∏–π –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥: {avg_monthly:,.2f} —Ä—É–±.")
    print(f"–¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥ (—è–Ω–≤–∞—Ä—å-—Å–µ–Ω—Ç—è–±—Ä—å): {current_total:,.2f} —Ä—É–±.")
    print(f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–µ—Å—è—Ü—ã: {forecast_remaining:,.2f} —Ä—É–±.")
    print(f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≤–µ—Å—å 2025 –≥–æ–¥: {forecast_total:,.2f} —Ä—É–±.")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===")
    
    # –ö–ª–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã
    declining_clients = [c for c in client_changes if c['change_percent'] < -10]
    if declining_clients:
        print(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –†–∞–±–æ—Ç–∞–π—Ç–µ —Å {len(declining_clients)} –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —Å –ø–∞–¥–∞—é—â–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏:")
        for client in declining_clients:
            print(f"   - {client['client']}: —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ {client['change_percent']:.1f}%")
    
    # –ù–æ–≤—ã–µ –∫—Ä—É–ø–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
    if new_clients_2025:
        new_clients_data = clients_2025[clients_2025.index.isin(new_clients_2025)]
        new_clients_data = new_clients_data.sort_values('–û–±—â–∞—è_—Å—É–º–º–∞', ascending=False)
        
        print(f"\nüÜï –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –∫—Ä—É–ø–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏:")
        for client, data in new_clients_data.head(5).iterrows():
            print(f"   - {client}: {data['–û–±—â–∞—è_—Å—É–º–º–∞']:,.2f} —Ä—É–±.")
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if growth_percent > 50:
        print(f"\n‚úÖ –û—Ç–ª–∏—á–Ω—ã–π —Ä–æ—Å—Ç {growth_percent:.1f}%! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    elif growth_percent > 0:
        print(f"\n‚ö†Ô∏è –†–æ—Å—Ç {growth_percent:.1f}% –µ—Å—Ç—å, –Ω–æ –º–æ–∂–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å")
    else:
        print(f"\nüö® –°–Ω–∏–∂–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞ {abs(growth_percent):.1f}%! –¢—Ä–µ–±—É—é—Ç—Å—è —Å—Ä–æ—á–Ω—ã–µ –º–µ—Ä—ã")
    
    # –ê–Ω–∞–ª–∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    print("\n=== –ê–ù–ê–õ–ò–ó –ú–ï–ù–ï–î–ñ–ï–†–û–í 2025 ===")
    managers_2025 = df_2025_clean.groupby('–ú–µ–Ω–µ–¥–∂–µ—Ä')['–°—É–º–º–∞_—á–∏—Å–ª–æ'].agg(['count', 'sum', 'mean']).round(2)
    managers_2025.columns = ['–ó–∞–∫–∞–∑–æ–≤', '–û–±—â–∞—è_—Å—É–º–º–∞', '–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫']
    managers_2025 = managers_2025.sort_values('–û–±—â–∞—è_—Å—É–º–º–∞', ascending=False)
    
    for manager, data in managers_2025.iterrows():
        if pd.notna(manager):
            print(f"  {manager}: {data['–û–±—â–∞—è_—Å—É–º–º–∞']:,.2f} —Ä—É–±. ({data['–ó–∞–∫–∞–∑–æ–≤']} –∑–∞–∫–∞–∑–æ–≤)")
    
    return {
        'total_2024': total_2024,
        'total_2025': total_2025,
        'growth_percent': growth_percent,
        'clients_2024': clients_2024,
        'clients_2025': clients_2025,
        'declining_clients': declining_clients,
        'new_clients': new_clients_2025,
        'forecast_total': forecast_total
    }

if __name__ == "__main__":
    results = analyze_financial_data()
    print("\n=== –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù ===")
