#!/usr/bin/env python3
"""
HeadCorn Thanks Analyzer
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π –≤ —á–∞—Ç–µ HeadCorn

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫—Ç–æ –∫–æ–º—É —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å–∫–∞–∑–∞–ª "—Å–ø–∞—Å–∏–±–æ" —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:
- –ú–∞–∫—Å–∏–º—É–º 3 "—Å–ø–∞—Å–∏–±–æ" –æ—Ç –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∑–∞ –º–µ—Å—è—Ü
- "–°–ø–∞—Å–∏–±–æ" = —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —á–∞—Ç–µ
"""

import asyncio
import json
import re
from datetime import datetime, timedelta
from collections import defaultdict, Counter
from telethon import TelegramClient
from telethon.tl.types import User, Chat, Channel
from loguru import logger
import pandas as pd
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment, Border
from openpyxl.utils.dataframe import dataframe_to_rows
import os
from dateutil.relativedelta import relativedelta

class HeadCornThanksAnalyzer:
    def __init__(self):
        self.config = self.load_config()
        self.client = None
        self.target_chat_name = "HeadCorn"
        self.target_chat_id = None
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
        os.makedirs("output", exist_ok=True)
        os.makedirs("output/logs", exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.add("output/logs/thanks_analyzer.log", rotation="1 day", retention="7 days")
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.thanks_data = defaultdict(lambda: defaultdict(int))  # sender -> receiver -> count
        self.monthly_limits = defaultdict(lambda: defaultdict(int))  # sender -> month -> count
        self.user_names = {}  # user_id -> name
        self.mentioned_users = set()  # –í—Å–µ —É–ø–æ–º—è–Ω—É—Ç—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open("config.json", 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            raise
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            
            self.client = TelegramClient(
                self.config['session_name'],
                self.config['api_id'],
                self.config['api_hash']
            )
            
            await self.client.start()
            
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name}")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def find_headcorn_chat(self):
        """–ü–æ–∏—Å–∫ —á–∞—Ç–∞ HeadCorn"""
        try:
            print(f"üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞ '{self.target_chat_name}'...")
            
            dialogs = await self.client.get_dialogs()
            
            for dialog in dialogs:
                if self.target_chat_name.lower() in dialog.name.lower():
                    self.target_chat_id = dialog.id
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç: {dialog.name} (ID: {dialog.id})")
                    return True
            
            print(f"‚ùå –ß–∞—Ç '{self.target_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã:")
            for dialog in dialogs[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —á–∞—Ç–æ–≤
                print(f"  - {dialog.name}")
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞: {e}")
            return False
    
    async def get_sender_name(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        try:
            if message.sender_id:
                if message.sender_id in self.user_names:
                    return self.user_names[message.sender_id]
                
                sender = await self.client.get_entity(message.sender_id)
                if isinstance(sender, User):
                    name = f"{sender.first_name or ''} {sender.last_name or ''}".strip()
                    if not name:
                        name = sender.username or f"User{message.sender_id}"
                else:
                    name = getattr(sender, 'title', f"Chat{message.sender_id}")
                
                self.user_names[message.sender_id] = name
                return name
            return "Unknown"
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {e}")
            return f"User{message.sender_id}"
    
    def extract_mentions(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        mentions = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
        patterns = [
            r'@(\w+)',  # @username
            r'(\w+),?\s+—Å–ø–∞—Å–∏–±–æ',  # –∏–º—è, —Å–ø–∞—Å–∏–±–æ
            r'—Å–ø–∞—Å–∏–±–æ\s+(\w+)',  # —Å–ø–∞—Å–∏–±–æ –∏–º—è
            r'(\w+)\s+–±–ª–∞–≥–æ–¥–∞—Ä—é',  # –∏–º—è –±–ª–∞–≥–æ–¥–∞—Ä—é
            r'–±–ª–∞–≥–æ–¥–∞—Ä—é\s+(\w+)',  # –±–ª–∞–≥–æ–¥–∞—Ä—é –∏–º—è
            r'(\w+)\s+—Å–ø—Å',  # –∏–º—è —Å–ø—Å
            r'—Å–ø—Å\s+(\w+)',  # —Å–ø—Å –∏–º—è
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            mentions.extend(matches)
        
        return list(set(mentions))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    
    def is_thanks_message(self, text):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é"""
        thanks_keywords = [
            '—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '—Å–ø—Å', 'thanks', 'thank you',
            '—Å–µ–Ω–∫—Å', '—Å–µ–Ω–∫—å—é', '—Å–µ–Ω–∫', '—Å–ø–∞—Å–∏–±–æ—á–∫–∏', '—Å–ø–∞—Å–∏–±–æ—á–∫–∏'
        ]
        
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in thanks_keywords)
    
    async def analyze_messages(self):
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""
        try:
            print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ HeadCorn...")
            
            all_messages = []
            offset_id = 0
            limit = 100
            processed_count = 0
            
            while True:
                messages = await self.client.get_messages(
                    self.target_chat_id,
                    limit=limit,
                    offset_id=offset_id
                )
                
                if not messages:
                    break
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
                text_messages = []
                for msg in messages:
                    if msg.text and len(msg.text.strip()) > 2:
                        sender_name = await self.get_sender_name(msg)
                        text_messages.append({
                            'id': msg.id,
                            'sender': sender_name,
                            'sender_id': msg.sender_id,
                            'text': msg.text,
                            'date': msg.date,
                            'month': msg.date.strftime('%Y-%m')
                        })
                
                all_messages.extend(text_messages)
                processed_count += len(messages)
                
                if processed_count % 1000 == 0:
                    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {processed_count}")
                
                offset_id = messages[-1].id if messages else 0
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                if len(all_messages) >= 10000:
                    print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (10000)")
                    break
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
            await self.process_thanks(all_messages)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    async def process_thanks(self, messages):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        print("üîç –ê–Ω–∞–ª–∏–∑ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π...")
        
        thanks_count = 0
        limited_count = 0
        
        for msg in messages:
            if not self.is_thanks_message(msg['text']):
                continue
            
            sender = msg['sender']
            month = msg['month']
            mentions = self.extract_mentions(msg['text'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º
            if self.monthly_limits[sender][month] >= 3:
                limited_count += 1
                continue
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            for mention in mentions:
                # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é
                mentioned_user = await self.find_user_by_mention(mention)
                if mentioned_user:
                    self.thanks_data[sender][mentioned_user] += 1
                    self.monthly_limits[sender][month] += 1
                    self.mentioned_users.add(mentioned_user)
                    thanks_count += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                    if self.monthly_limits[sender][month] > 3:
                        self.thanks_data[sender][mentioned_user] -= 1
                        self.monthly_limits[sender][month] -= 1
                        thanks_count -= 1
                        limited_count += 1
                        break
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π: {thanks_count}")
        print(f"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –ø–æ –ª–∏–º–∏—Ç—É: {limited_count}")
    
    async def find_user_by_mention(self, mention):
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            for user_id, name in self.user_names.items():
                if mention.lower() in name.lower() or name.lower() in mention.lower():
                    return name
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
            try:
                user = await self.client.get_entity(f"@{mention}")
                if isinstance(user, User):
                    name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                    if not name:
                        name = user.username or mention
                    return name
            except:
                pass
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å
            return mention
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mention}: {e}")
            return mention
    
    def create_excel_report(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞"""
        try:
            print("üìä –°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞...")
            
            # –°–æ–∑–¥–∞–µ–º DataFrame
            data = []
            for sender, receivers in self.thanks_data.items():
                for receiver, count in receivers.items():
                    data.append({
                        '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å': sender,
                        '–ü–æ–ª—É—á–∞—Ç–µ–ª—å': receiver,
                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞—Å–∏–±–æ': count
                    })
            
            df = pd.DataFrame(data)
            
            if df.empty:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π
            df = df.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞—Å–∏–±–æ', ascending=False)
            
            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
            filename = f"output/headcorn_thanks_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                df.to_excel(writer, sheet_name='–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏', index=False)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É –∏ –ª–∏—Å—Ç
                workbook = writer.book
                worksheet = writer.sheets['–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏']
                
                # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
                self.style_worksheet(worksheet, df)
                
                # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                self.create_summary_sheet(workbook, df)
                
                # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self.create_stats_sheet(workbook)
            
            print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    def style_worksheet(self, worksheet, df):
        """–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ª–∏—Å—Ç–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        
        for cell in worksheet[1]:
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = Alignment(horizontal="center")
        
        # –ì—Ä–∞–Ω–∏—Ü—ã
        thin_border = Border(
            left=openpyxl.styles.Side(style='thin'),
            right=openpyxl.styles.Side(style='thin'),
            top=openpyxl.styles.Side(style='thin'),
            bottom=openpyxl.styles.Side(style='thin')
        )
        
        for row in worksheet.iter_rows(min_row=1, max_row=len(df)+1, min_col=1, max_col=3):
            for cell in row:
                cell.border = thin_border
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for column in worksheet.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            worksheet.column_dimensions[column_letter].width = adjusted_width
    
    def create_summary_sheet(self, workbook, df):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
        worksheet = workbook.create_sheet("–°–≤–æ–¥–∫–∞")
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π
        total_thanks = df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞—Å–∏–±–æ'].sum()
        unique_senders = df['–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å'].nunique()
        unique_receivers = df['–ü–æ–ª—É—á–∞—Ç–µ–ª—å'].nunique()
        
        # –¢–æ–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
        top_senders = df.groupby('–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞—Å–∏–±–æ'].sum().sort_values(ascending=False).head(10)
        
        # –¢–æ–ø –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        top_receivers = df.groupby('–ü–æ–ª—É—á–∞—Ç–µ–ª—å')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞—Å–∏–±–æ'].sum().sort_values(ascending=False).head(10)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        worksheet['A1'] = "–°–í–û–î–ö–ê –ü–û –ë–õ–ê–ì–û–î–ê–†–ù–û–°–¢–Ø–ú –í –ß–ê–¢–ï HEADCORN"
        worksheet['A1'].font = Font(bold=True, size=14)
        
        worksheet['A3'] = "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
        worksheet['A3'].font = Font(bold=True)
        
        worksheet['A4'] = f"–í—Å–µ–≥–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π: {total_thanks}"
        worksheet['A5'] = f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: {unique_senders}"
        worksheet['A6'] = f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {unique_receivers}"
        
        # –¢–æ–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
        worksheet['A8'] = "–¢–æ–ø-10 –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π:"
        worksheet['A8'].font = Font(bold=True)
        
        row = 9
        for sender, count in top_senders.items():
            worksheet[f'A{row}'] = sender
            worksheet[f'B{row}'] = count
            row += 1
        
        # –¢–æ–ø –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        worksheet['A20'] = "–¢–æ–ø-10 –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π:"
        worksheet['A20'].font = Font(bold=True)
        
        row = 21
        for receiver, count in top_receivers.items():
            worksheet[f'A{row}'] = receiver
            worksheet[f'B{row}'] = count
            row += 1
    
    def create_stats_sheet(self, workbook):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        worksheet = workbook.create_sheet("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        # –ú–µ—Å—è—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        worksheet['A1'] = "–ú–ï–°–Ø–ß–ù–´–ï –õ–ò–ú–ò–¢–´ –ë–õ–ê–ì–û–î–ê–†–ù–û–°–¢–ï–ô"
        worksheet['A1'].font = Font(bold=True, size=14)
        
        row = 3
        for sender, months in self.monthly_limits.items():
            for month, count in months.items():
                worksheet[f'A{row}'] = sender
                worksheet[f'B{row}'] = month
                worksheet[f'C{row}'] = count
                row += 1
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        worksheet['A3'] = "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
        worksheet['B3'] = "–ú–µ—Å—è—Ü"
        worksheet['C3'] = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
        
        for cell in worksheet[3]:
            cell.font = Font(bold=True)
    
    async def run_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π –≤ —á–∞—Ç–µ HeadCorn")
            print("=" * 50)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not await self.connect():
                return False
            
            # –ü–æ–∏—Å–∫ —á–∞—Ç–∞
            if not await self.find_headcorn_chat():
                return False
            
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
            await self.analyze_messages()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report_file = self.create_excel_report()
            
            if report_file:
                print("\n" + "=" * 50)
                print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                print(f"üìä –û—Ç—á–µ—Ç: {report_file}")
                print("\nüìà –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                sender_totals = defaultdict(int)
                for sender, receivers in self.thanks_data.items():
                    sender_totals[sender] = sum(receivers.values())
                
                top_senders = sorted(sender_totals.items(), key=lambda x: x[1], reverse=True)[:5]
                print("\nüèÜ –¢–æ–ø-5 –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π:")
                for i, (sender, count) in enumerate(top_senders, 1):
                    print(f"  {i}. {sender}: {count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                receiver_totals = defaultdict(int)
                for receivers in self.thanks_data.values():
                    for receiver, count in receivers.items():
                        receiver_totals[receiver] += count
                
                top_receivers = sorted(receiver_totals.items(), key=lambda x: x[1], reverse=True)[:5]
                print("\nüéØ –¢–æ–ø-5 –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π:")
                for i, (receiver, count) in enumerate(top_receivers, 1):
                    print(f"  {i}. {receiver}: {count}")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return False
        
        finally:
            if self.client:
                await self.client.disconnect()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = HeadCornThanksAnalyzer()
    await analyzer.run_analysis()

if __name__ == "__main__":
    asyncio.run(main())
