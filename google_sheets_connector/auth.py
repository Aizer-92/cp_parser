"""
–ú–æ–¥—É–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è Google Sheets API
"""

import os
import json
import logging
from typing import Optional, Dict, Any
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.oauth2 import service_account
import pickle

logger = logging.getLogger(__name__)

class GoogleSheetsAuth:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π Google Sheets API"""
    
    # –û–±–ª–∞—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Google Sheets API
    SCOPES = [
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive.metadata.readonly'
    ]
    
    def __init__(self, credentials_dir: str = "credentials"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        Args:
            credentials_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        self.credentials_dir = credentials_dir
        self.credentials = None
        self._ensure_credentials_dir()
    
    def _ensure_credentials_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è credentials –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        if not os.path.exists(self.credentials_dir):
            os.makedirs(self.credentials_dir)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è credentials: {self.credentials_dir}")
    
    def authenticate_service_account(self, service_account_file: str) -> bool:
        """
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Service Account (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏)
        
        Args:
            service_account_file: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –∫–ª—é—á–∞–º–∏ Service Account
            
        Returns:
            bool: True –µ—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            if not os.path.exists(service_account_file):
                logger.error(f"–§–∞–π–ª Service Account –Ω–µ –Ω–∞–π–¥–µ–Ω: {service_account_file}")
                return False
            
            self.credentials = service_account.Credentials.from_service_account_file(
                service_account_file, scopes=self.SCOPES
            )
            
            logger.info("–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Service Account")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Service Account: {e}")
            return False
    
    def authenticate_oauth(self, client_secrets_file: str, token_file: str = None) -> bool:
        """
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ OAuth2 (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
        
        Args:
            client_secrets_file: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å OAuth2 credentials
            token_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            if token_file is None:
                token_file = os.path.join(self.credentials_dir, "token.pickle")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã
            if os.path.exists(token_file):
                with open(token_file, 'rb') as token:
                    self.credentials = pickle.load(token)
            
            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
            if not self.credentials or not self.credentials.valid:
                if self.credentials and self.credentials.expired and self.credentials.refresh_token:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
                    self.credentials.refresh(Request())
                    logger.info("–¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                else:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º OAuth2 flow
                    if not os.path.exists(client_secrets_file):
                        logger.error(f"–§–∞–π–ª client secrets –Ω–µ –Ω–∞–π–¥–µ–Ω: {client_secrets_file}")
                        return False
                    
                    flow = InstalledAppFlow.from_client_secrets_file(
                        client_secrets_file, self.SCOPES
                    )
                    self.credentials = flow.run_local_server(port=0)
                    logger.info("–ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ OAuth2")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
                with open(token_file, 'wb') as token:
                    pickle.dump(self.credentials, token)
                    logger.info(f"–¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {token_file}")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OAuth2 –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False
    
    def get_credentials(self) -> Optional[Credentials]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç credentials –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API
        
        Returns:
            Credentials –æ–±—ä–µ–∫—Ç –∏–ª–∏ None –µ—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        """
        return self.credentials
    
    def is_authenticated(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        
        Returns:
            bool: True –µ—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞
        """
        return self.credentials is not None and self.credentials.valid
    
    def revoke_credentials(self, token_file: str = None):
        """
        –û—Ç–∑—ã–≤–∞–µ—Ç credentials –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        
        Args:
            token_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ç–æ–∫–µ–Ω–∞–º–∏
        """
        try:
            if self.credentials:
                # –û—Ç–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Google
                self.credentials.revoke(Request())
                self.credentials = None
                logger.info("Credentials –æ—Ç–æ–∑–≤–∞–Ω—ã")
            
            # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–∞–º–∏
            if token_file is None:
                token_file = os.path.join(self.credentials_dir, "token.pickle")
            
            if os.path.exists(token_file):
                os.remove(token_file)
                logger.info(f"–§–∞–π–ª —Ç–æ–∫–µ–Ω–æ–≤ —É–¥–∞–ª–µ–Ω: {token_file}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ credentials: {e}")

def create_service_account_info() -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è Service Account JSON —Ñ–∞–π–ª–∞
    
    Returns:
        Dict —Å –ø—Ä–∏–º–µ—Ä–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Service Account
    """
    return {
        "type": "service_account",
        "project_id": "your-project-id",
        "private_key_id": "key-id",
        "private_key": "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n",
        "client_email": "your-service-account@your-project.iam.gserviceaccount.com",
        "client_id": "123456789",
        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
        "token_uri": "https://oauth2.googleapis.com/token",
        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/your-service-account%40your-project.iam.gserviceaccount.com"
    }

def save_example_service_account(filepath: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∏–º–µ—Ä Service Account —Ñ–∞–π–ª–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    
    Args:
        filepath: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞
    """
    example_data = create_service_account_info()
    
    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(example_data, f, indent=2, ensure_ascii=False)
    
    logger.info(f"–ü—Ä–∏–º–µ—Ä Service Account —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
    print(f"\nüìã –ü—Ä–∏–º–µ—Ä Service Account —Ñ–∞–π–ª–∞ —Å–æ–∑–¥–∞–Ω: {filepath}")
    print("üîß –ó–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Cloud Console")
