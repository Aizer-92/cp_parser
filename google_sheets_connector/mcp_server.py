"""
MCP Server –¥–ª—è Google Sheets
–†–µ–∞–ª–∏–∑—É–µ—Ç Model Context Protocol –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
"""

import asyncio
import json
import logging
from datetime import datetime
from typing import Any, Dict, List, Optional, Sequence
import traceback

# MCP –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
try:
    from mcp.server import Server
    from mcp.server.models import InitializationOptions
    from mcp.server.stdio import stdio_server
    from mcp.types import (
        Resource,
        Tool,
        TextContent,
        ImageContent,
        EmbeddedResource,
        LoggingLevel
    )
except ImportError:
    print("‚ùå MCP –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install mcp")
    exit(1)

# –ù–∞—à –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
from connector import GoogleSheetsConnector
from priorities_manager import PrioritiesManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("mcp-google-sheets")

class GoogleSheetsMCPServer:
    """MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Google Sheets"""
    
    def __init__(self):
        self.server = Server("google-sheets-mcp")
        self.connector = GoogleSheetsConnector()
        self.priorities_manager = None
        self.authenticated = False
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        self._register_tools()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å—ã
        self._register_resources()
    
    def _register_tools(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        
        @self.server.list_tools()
        async def handle_list_tools() -> List[Tool]:
            """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
            return [
                Tool(
                    name="authenticate",
                    description="–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Sheets API",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "credentials_file": {
                                "type": "string",
                                "description": "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Service Account JSON",
                                "default": "credentials/service_account.json"
                            }
                        }
                    }
                ),
                Tool(
                    name="get_spreadsheet_info",
                    description="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "spreadsheet_id": {
                                "type": "string",
                                "description": "ID Google Sheets —Ç–∞–±–ª–∏—Ü—ã"
                            }
                        },
                        "required": ["spreadsheet_id"]
                    }
                ),
                Tool(
                    name="read_range",
                    description="–ü—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—á–µ–µ–∫",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "spreadsheet_id": {
                                "type": "string",
                                "description": "ID Google Sheets —Ç–∞–±–ª–∏—Ü—ã"
                            },
                            "range": {
                                "type": "string",
                                "description": "–î–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Sheet1!A1:C10)"
                            },
                            "value_render_option": {
                                "type": "string",
                                "description": "–û–ø—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π",
                                "enum": ["FORMATTED_VALUE", "UNFORMATTED_VALUE", "FORMULA"],
                                "default": "FORMATTED_VALUE"
                            }
                        },
                        "required": ["spreadsheet_id", "range"]
                    }
                ),
                Tool(
                    name="write_range",
                    description="–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "spreadsheet_id": {
                                "type": "string",
                                "description": "ID Google Sheets —Ç–∞–±–ª–∏—Ü—ã"
                            },
                            "range": {
                                "type": "string",
                                "description": "–î–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏"
                            },
                            "values": {
                                "type": "array",
                                "description": "–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ (–º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤)",
                                "items": {
                                    "type": "array",
                                    "items": {"type": "string"}
                                }
                            },
                            "value_input_option": {
                                "type": "string",
                                "description": "–ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
                                "enum": ["RAW", "USER_ENTERED"],
                                "default": "USER_ENTERED"
                            }
                        },
                        "required": ["spreadsheet_id", "range", "values"]
                    }
                ),
                Tool(
                    name="create_sheet",
                    description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ª–∏—Å—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "spreadsheet_id": {
                                "type": "string",
                                "description": "ID Google Sheets —Ç–∞–±–ª–∏—Ü—ã"
                            },
                            "sheet_title": {
                                "type": "string",
                                "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞"
                            },
                            "rows": {
                                "type": "integer",
                                "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫",
                                "default": 1000
                            },
                            "columns": {
                                "type": "integer",
                                "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫",
                                "default": 26
                            }
                        },
                        "required": ["spreadsheet_id", "sheet_title"]
                    }
                ),
                Tool(
                    name="analyze_priorities_table",
                    description="–ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "spreadsheet_id": {
                                "type": "string",
                                "description": "ID —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤",
                                "default": "1Xxx_cNb5eOi0CzRhr1X3mWwYWyltmZu_uI_02B9EfcE"
                            },
                            "analysis_type": {
                                "type": "string",
                                "description": "–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞",
                                "enum": ["status_report", "workload", "financial", "dashboard"],
                                "default": "status_report"
                            }
                        }
                    }
                ),
                Tool(
                    name="create_dashboard",
                    description="–°–æ–∑–¥–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –≤ —Ç–∞–±–ª–∏—Ü–µ",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "spreadsheet_id": {
                                "type": "string",
                                "description": "ID Google Sheets —Ç–∞–±–ª–∏—Ü—ã"
                            },
                            "dashboard_type": {
                                "type": "string",
                                "description": "–¢–∏–ø –¥–∞—à–±–æ—Ä–¥–∞",
                                "enum": ["priorities", "financial", "general"],
                                "default": "general"
                            }
                        },
                        "required": ["spreadsheet_id"]
                    }
                ),
                Tool(
                    name="search_projects",
                    description="–ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "query": {
                                "type": "string",
                                "description": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
                            },
                            "filter_by": {
                                "type": "string",
                                "description": "–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—é",
                                "enum": ["status", "executor", "client_grade", "all"],
                                "default": "all"
                            }
                        },
                        "required": ["query"]
                    }
                )
            ]
        
        @self.server.call_tool()
        async def handle_call_tool(name: str, arguments: Dict[str, Any]) -> List[TextContent]:
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
            try:
                if name == "authenticate":
                    return await self._authenticate(arguments)
                elif name == "get_spreadsheet_info":
                    return await self._get_spreadsheet_info(arguments)
                elif name == "read_range":
                    return await self._read_range(arguments)
                elif name == "write_range":
                    return await self._write_range(arguments)
                elif name == "create_sheet":
                    return await self._create_sheet(arguments)
                elif name == "analyze_priorities_table":
                    return await self._analyze_priorities_table(arguments)
                elif name == "create_dashboard":
                    return await self._create_dashboard(arguments)
                elif name == "search_projects":
                    return await self._search_projects(arguments)
                else:
                    return [TextContent(type="text", text=f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {name}")]
                    
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {name}: {str(e)}\n{traceback.format_exc()}"
                logger.error(error_msg)
                return [TextContent(type="text", text=error_msg)]
    
    def _register_resources(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"""
        
        @self.server.list_resources()
        async def handle_list_resources() -> List[Resource]:
            """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
            return [
                Resource(
                    uri="google-sheets://config",
                    name="Google Sheets Configuration",
                    description="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets",
                    mimeType="application/json"
                ),
                Resource(
                    uri="google-sheets://priorities-table",
                    name="Priorities Table",
                    description="–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤",
                    mimeType="application/json"
                ),
                Resource(
                    uri="google-sheets://help",
                    name="Google Sheets MCP Help",
                    description="–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é MCP —Å–µ—Ä–≤–µ—Ä–∞",
                    mimeType="text/markdown"
                )
            ]
        
        @self.server.read_resource()
        async def handle_read_resource(uri: str) -> str:
            """–ß—Ç–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
            if uri == "google-sheets://config":
                config = self.connector.config
                return json.dumps(config, indent=2, ensure_ascii=False)
            
            elif uri == "google-sheets://priorities-table":
                if not self.authenticated:
                    return json.dumps({"error": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"})
                
                try:
                    if not self.priorities_manager:
                        self.priorities_manager = PrioritiesManager()
                        self.priorities_manager.connector = self.connector
                    
                    df = self.priorities_manager.get_all_projects()
                    if df.empty:
                        return json.dumps({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"})
                    
                    return df.head(10).to_json(orient="records", force_ascii=False, indent=2)
                except Exception as e:
                    return json.dumps({"error": str(e)})
            
            elif uri == "google-sheets://help":
                return self._get_help_content()
            
            else:
                return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å: {uri}"
    
    async def _authenticate(self, args: Dict[str, Any]) -> List[TextContent]:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"""
        credentials_file = args.get("credentials_file", "credentials/service_account.json")
        
        try:
            success = self.connector.authenticate_service_account(credentials_file)
            if success:
                self.authenticated = True
                return [TextContent(type="text", text="‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")]
            else:
                return [TextContent(type="text", text="‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")]
        except Exception as e:
            return [TextContent(type="text", text=f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")]
    
    async def _get_spreadsheet_info(self, args: Dict[str, Any]) -> List[TextContent]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ"""
        if not self.authenticated:
            return [TextContent(type="text", text="‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")]
        
        spreadsheet_id = args["spreadsheet_id"]
        
        try:
            info = self.connector.get_spreadsheet_info(spreadsheet_id)
            result = json.dumps(info, indent=2, ensure_ascii=False)
            return [TextContent(type="text", text=f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ:\n{result}")]
        except Exception as e:
            return [TextContent(type="text", text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")]
    
    async def _read_range(self, args: Dict[str, Any]) -> List[TextContent]:
        """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.authenticated:
            return [TextContent(type="text", text="‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")]
        
        spreadsheet_id = args["spreadsheet_id"]
        range_name = args["range"]
        value_render_option = args.get("value_render_option", "FORMATTED_VALUE")
        
        try:
            data = self.connector.read_range(spreadsheet_id, range_name, value_render_option)
            result = json.dumps(data, indent=2, ensure_ascii=False)
            return [TextContent(type="text", text=f"üìñ –î–∞–Ω–Ω—ã–µ –∏–∑ {range_name}:\n{result}")]
        except Exception as e:
            return [TextContent(type="text", text=f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")]
    
    async def _write_range(self, args: Dict[str, Any]) -> List[TextContent]:
        """–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö"""
        if not self.authenticated:
            return [TextContent(type="text", text="‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")]
        
        spreadsheet_id = args["spreadsheet_id"]
        range_name = args["range"]
        values = args["values"]
        value_input_option = args.get("value_input_option", "USER_ENTERED")
        
        try:
            success = self.connector.write_range(spreadsheet_id, range_name, values, value_input_option)
            if success:
                return [TextContent(type="text", text=f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ {range_name}")]
            else:
                return [TextContent(type="text", text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö")]
        except Exception as e:
            return [TextContent(type="text", text=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")]
    
    async def _create_sheet(self, args: Dict[str, Any]) -> List[TextContent]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞"""
        if not self.authenticated:
            return [TextContent(type="text", text="‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")]
        
        spreadsheet_id = args["spreadsheet_id"]
        sheet_title = args["sheet_title"]
        rows = args.get("rows", 1000)
        columns = args.get("columns", 26)
        
        try:
            sheet_id = self.connector.create_sheet(spreadsheet_id, sheet_title, rows, columns)
            if sheet_id:
                return [TextContent(type="text", text=f"‚úÖ –õ–∏—Å—Ç '{sheet_title}' —Å–æ–∑–¥–∞–Ω —Å ID {sheet_id}")]
            else:
                return [TextContent(type="text", text="‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞")]
        except Exception as e:
            return [TextContent(type="text", text=f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞: {e}")]
    
    async def _analyze_priorities_table(self, args: Dict[str, Any]) -> List[TextContent]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
        if not self.authenticated:
            return [TextContent(type="text", text="‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")]
        
        spreadsheet_id = args.get("spreadsheet_id", "1Xxx_cNb5eOi0CzRhr1X3mWwYWyltmZu_uI_02B9EfcE")
        analysis_type = args.get("analysis_type", "status_report")
        
        try:
            if not self.priorities_manager:
                self.priorities_manager = PrioritiesManager(spreadsheet_id)
                self.priorities_manager.connector = self.connector
            
            if analysis_type == "status_report":
                report = self.priorities_manager.generate_status_report()
                return [TextContent(type="text", text=report)]
            
            elif analysis_type == "workload":
                workload = self.priorities_manager.analyze_workload()
                result = json.dumps(workload, indent=2, ensure_ascii=False)
                return [TextContent(type="text", text=f"üë• –ê–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–∫–∏:\n{result}")]
            
            elif analysis_type == "financial":
                finance = self.priorities_manager.analyze_financial_metrics()
                result = json.dumps(finance, indent=2, ensure_ascii=False)
                return [TextContent(type="text", text=f"üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n{result}")]
            
            elif analysis_type == "dashboard":
                success = self.priorities_manager.create_dashboard()
                if success:
                    return [TextContent(type="text", text="‚úÖ –î–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")]
                else:
                    return [TextContent(type="text", text="‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞")]
            
        except Exception as e:
            return [TextContent(type="text", text=f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")]
    
    async def _create_dashboard(self, args: Dict[str, Any]) -> List[TextContent]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞"""
        if not self.authenticated:
            return [TextContent(type="text", text="‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")]
        
        spreadsheet_id = args["spreadsheet_id"]
        dashboard_type = args.get("dashboard_type", "general")
        
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞—à–±–æ—Ä–¥–æ–≤
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            dashboard_data = [
                [f"üìä {dashboard_type.upper()} DASHBOARD", f"–°–æ–∑–¥–∞–Ω–æ: {current_time}"],
                ["", ""],
                ["–¢–∏–ø –¥–∞—à–±–æ—Ä–¥–∞", dashboard_type],
                ["–°—Ç–∞—Ç—É—Å", "–ê–∫—Ç–∏–≤–µ–Ω"]
            ]
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞
            sheet_title = f"Dashboard_{dashboard_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            sheet_id = self.connector.create_sheet(spreadsheet_id, sheet_title)
            
            if sheet_id:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
                success = self.connector.write_range(spreadsheet_id, f"{sheet_title}!A1", dashboard_data)
                if success:
                    return [TextContent(type="text", text=f"‚úÖ –î–∞—à–±–æ—Ä–¥ '{sheet_title}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")]
                else:
                    return [TextContent(type="text", text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞")]
            else:
                return [TextContent(type="text", text="‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –¥–∞—à–±–æ—Ä–¥–∞")]
                
        except Exception as e:
            return [TextContent(type="text", text=f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {e}")]
    
    async def _search_projects(self, args: Dict[str, Any]) -> List[TextContent]:
        """–ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        if not self.authenticated:
            return [TextContent(type="text", text="‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")]
        
        query = args["query"]
        filter_by = args.get("filter_by", "all")
        
        try:
            if not self.priorities_manager:
                self.priorities_manager = PrioritiesManager()
                self.priorities_manager.connector = self.connector
            
            df = self.priorities_manager.get_all_projects()
            if df.empty:
                return [TextContent(type="text", text="‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞")]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            if filter_by == "status":
                results = df[df['–°—Ç–∞—Ç—É—Å'].str.contains(query, case=False, na=False)]
            elif filter_by == "executor":
                results = df[df['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏'].str.contains(query, case=False, na=False)]
            elif filter_by == "client_grade":
                results = df[df['–ì—Ä–µ–π–¥ –∫–ª–∏–µ–Ω—Ç–∞'].astype(str).str.contains(query, case=False, na=False)]
            else:  # all
                mask = df.astype(str).apply(lambda x: x.str.contains(query, case=False, na=False)).any(axis=1)
                results = df[mask]
            
            if results.empty:
                return [TextContent(type="text", text=f"üîç –ü—Ä–æ–µ–∫—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            result_text = f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
            
            for idx, (_, row) in enumerate(results.head(10).iterrows(), 1):
                result_text += f"{idx}. {row['–ù–∞–∑–≤–∞–Ω–∏–µ'][:60]}...\n"
                result_text += f"   –°—Ç–∞—Ç—É—Å: {row['–°—Ç–∞—Ç—É—Å']}\n"
                result_text += f"   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {str(row['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏'])[:50]}...\n\n"
            
            if len(results) > 10:
                result_text += f"... –∏ –µ—â–µ {len(results) - 10} –ø—Ä–æ–µ–∫—Ç–æ–≤"
            
            return [TextContent(type="text", text=result_text)]
            
        except Exception as e:
            return [TextContent(type="text", text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")]
    
    def _get_help_content(self) -> str:
        """–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø—Ä–∞–≤–∫–∏"""
        return """# Google Sheets MCP Server

## –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:

### üîê authenticate
–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Sheets API
- `credentials_file` - –ø—É—Ç—å –∫ Service Account JSON —Ñ–∞–π–ª—É

### üìä get_spreadsheet_info
–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
- `spreadsheet_id` - ID Google Sheets —Ç–∞–±–ª–∏—Ü—ã

### üìñ read_range
–ü—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—á–µ–µ–∫
- `spreadsheet_id` - ID —Ç–∞–±–ª–∏—Ü—ã
- `range` - –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: Sheet1!A1:C10)
- `value_render_option` - –æ–ø—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

### ‚úçÔ∏è write_range
–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫
- `spreadsheet_id` - ID —Ç–∞–±–ª–∏—Ü—ã
- `range` - –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏
- `values` - –¥–∞–Ω–Ω—ã–µ (–º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤)

### üìã create_sheet
–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ª–∏—Å—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
- `spreadsheet_id` - ID —Ç–∞–±–ª–∏—Ü—ã
- `sheet_title` - –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
- `rows` - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
- `columns` - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫

### üéØ analyze_priorities_table
–ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤
- `spreadsheet_id` - ID —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
- `analysis_type` - —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ (status_report, workload, financial, dashboard)

### üìä create_dashboard
–°–æ–∑–¥–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –≤ —Ç–∞–±–ª–∏—Ü–µ
- `spreadsheet_id` - ID —Ç–∞–±–ª–∏—Ü—ã
- `dashboard_type` - —Ç–∏–ø –¥–∞—à–±–æ—Ä–¥–∞

### üîç search_projects
–ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
- `query` - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
- `filter_by` - —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—é

## –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:

- `google-sheets://config` - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
- `google-sheets://priorities-table` - –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
- `google-sheets://help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

## –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é:
   ```
   authenticate(credentials_file="credentials/service_account.json")
   ```

2. –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ:
   ```
   get_spreadsheet_info(spreadsheet_id="your_sheet_id")
   ```

3. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ:
   ```
   read_range(spreadsheet_id="your_sheet_id", range="Sheet1!A1:C10")
   ```
"""

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    # –°–æ–∑–¥–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
    google_sheets_server = GoogleSheetsMCPServer()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ stdio
    async with stdio_server() as (read_stream, write_stream):
        await google_sheets_server.server.run(
            read_stream,
            write_stream,
            InitializationOptions(
                server_name="google-sheets-mcp",
                server_version="1.0.0",
                capabilities=google_sheets_server.server.get_capabilities(
                    notification_options=None,
                    experimental_capabilities=None,
                ),
            ),
        )

if __name__ == "__main__":
    asyncio.run(main())
