"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ Service Account credentials –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ
"""

import json
import os
from datetime import datetime

def check_service_account():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Service Account —Ñ–∞–π–ª"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Service Account credentials")
    print("=" * 50)
    
    credentials_file = "credentials/quickstart-1591698112539-676a9e339335.json"
    
    if not os.path.exists(credentials_file):
        print("‚ùå –§–∞–π–ª quickstart-1591698112539-676a9e339335.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(credentials_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print("‚úÖ –§–∞–π–ª credentials –Ω–∞–π–¥–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω")
        print(f"üìß Client Email: {data.get('client_email', 'N/A')}")
        print(f"üÜî Project ID: {data.get('project_id', 'N/A')}")
        print(f"üîß Type: {data.get('type', 'N/A')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['type', 'project_id', 'private_key', 'client_email', 'client_id']
        missing_fields = [field for field in required_fields if field not in data]
        
        if missing_fields:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {', '.join(missing_fields)}")
            return False
        
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True, data.get('client_email')
        
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_table_access():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ")
    print("=" * 50)
    
    try:
        from connector import GoogleSheetsConnector
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
        sheets = GoogleSheetsConnector()
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        print("üîê –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...")
        success = sheets.authenticate_service_account("credentials/quickstart-1591698112539-676a9e339335.json")
        
        if not success:
            print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return False
        
        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        
        # ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ config
        spreadsheet_id = sheets.get_config_spreadsheet('priorities_table')
        
        if not spreadsheet_id:
            print("‚ùå ID —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.json")
            return False
        
        print(f"üÜî ID —Ç–∞–±–ª–∏—Ü—ã: {spreadsheet_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ...")
        info = sheets.get_spreadsheet_info(spreadsheet_id)
        
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {info['title']}")
        print(f"üìÑ –õ–∏—Å—Ç—ã: {len(info['sheets'])}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—Å—Ç—ã
        print("\nüìë –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã:")
        for i, sheet in enumerate(info['sheets'], 1):
            print(f"   {i}. {sheet['title']} ({sheet['rows']} —Å—Ç—Ä–æ–∫ √ó {sheet['columns']} –∫–æ–ª–æ–Ω–æ–∫)")
        
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        first_sheet = info['sheets'][0]['title']
        print(f"\nüìñ –¢–µ—Å—Ç–æ–≤–æ–µ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ª–∏—Å—Ç–∞ '{first_sheet}'...")
        
        # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
        sample_data = sheets.read_range(spreadsheet_id, f"{first_sheet}!A1:E3")
        
        if sample_data:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã:")
            for i, row in enumerate(sample_data):
                row_display = [cell[:30] + "..." if len(str(cell)) > 30 else str(cell) for cell in row[:5]]
                print(f"   –°—Ç—Ä–æ–∫–∞ {i+1}: {row_display}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        all_data = sheets.read_range(spreadsheet_id, f"{first_sheet}!A:A")
        if all_data:
            record_count = len([row for row in all_data if row and str(row[0]).strip()]) - 1
            print(f"\nüìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {record_count}")
        
        print(f"\nüéâ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
        print(f"üîó URL: {info['url']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ: {e}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        error_str = str(e)
        if "403" in error_str or "Forbidden" in error_str:
            print("\nüí° –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (403 Forbidden):")
            print("   ‚ùå Service Account –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ")
            print("   üîß –†–µ—à–µ–Ω–∏–µ:")
            print("      1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
            print("      2. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞' (Share)")
            print("      3. –î–æ–±–∞–≤—å—Ç–µ email Service Account")
            print("      4. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ '–†–µ–¥–∞–∫—Ç–æ—Ä'")
            
        elif "404" in error_str or "Not Found" in error_str:
            print("\nüí° –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404):")
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞")
            print("   üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã –≤ config.json")
            
        elif "401" in error_str or "Unauthorized" in error_str:
            print("\nüí° –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401):")
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å Service Account")
            print("   üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å JSON —Ñ–∞–π–ª–∞")
            
        else:
            print(f"\nüí° –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {error_str}")
        
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö GOOGLE SHEETS")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Service Account
    credentials_check = check_service_account()
    
    if not credentials_check:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å credentials —Ñ–∞–π–ª–æ–º")
        return
    
    if isinstance(credentials_check, tuple):
        success, client_email = credentials_check
        if success:
            print(f"\nüìß Service Account Email: {client_email}")
            print("üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç email –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ!")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ
    table_access = test_table_access()
    
    if table_access:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ Service Account –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —á–∏—Ç–∞—é—Ç—Å—è")
        print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:")
        print("   py priorities_manager.py")
    else:
        print("\n‚ùå –ü–†–û–í–ï–†–ö–ò –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("üîß –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º")

if __name__ == "__main__":
    main()
