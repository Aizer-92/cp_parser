"""
–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
"""

from connector import GoogleSheetsConnector
import pandas as pd
from datetime import datetime
import re

def create_comprehensive_dashboard():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
    print("üìä –°–û–ó–î–ê–ù–ò–ï –î–ê–®–ë–û–†–î–ê –¢–ê–ë–õ–ò–¶–´ –ü–†–ò–û–†–ò–¢–ï–¢–û–í")
    print("=" * 60)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    sheets = GoogleSheetsConnector()
    if not sheets.authenticate_service_account("credentials/quickstart-1591698112539-676a9e339335.json"):
        print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        return
    
    spreadsheet_id = "1Xxx_cNb5eOi0CzRhr1X3mWwYWyltmZu_uI_02B9EfcE"
    
    try:
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        print("üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        df = sheets.read_to_dataframe(spreadsheet_id, "–õ–∏—Å—Ç1!A1:M600", header_row=True)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = df.dropna(subset=['–ù–∞–∑–≤–∞–Ω–∏–µ'])  # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        df = df[df['–ù–∞–∑–≤–∞–Ω–∏–µ'].str.strip() != '']  # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
        
        # 1. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_stats = df['–°—Ç–∞—Ç—É—Å'].value_counts()
        
        # 2. –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        executor_analysis = analyze_executors(df)
        
        # 3. –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        financial_stats = analyze_finances(df)
        
        # 4. –ê–Ω–∞–ª–∏–∑ –≥—Ä–µ–π–¥–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
        grade_stats = df['–ì—Ä–µ–π–¥ –∫–ª–∏–µ–Ω—Ç–∞'].value_counts().sort_index()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥
        print("üé® –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        try:
            sheets.create_sheet(spreadsheet_id, "üìä Dashboard")
        except:
            pass  # –õ–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        dashboard_data = [
            ["üìä –î–ê–®–ë–û–†–î –¢–ê–ë–õ–ò–¶–´ –ü–†–ò–û–†–ò–¢–ï–¢–û–í", f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"],
            ["", ""],
            ["üéØ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê", ""],
            ["‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", ""],
            ["–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤", str(len(df))],
            ["–û–±—â–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–æ–∫", f"{financial_stats['total']:,.0f} —Ä—É–±." if financial_stats['total'] > 0 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"],
            ["–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏", f"{financial_stats['average']:,.0f} —Ä—É–±." if financial_stats['average'] > 0 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"],
            ["–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", str(len(executor_analysis))],
            ["", ""],
            ["üìà –°–¢–ê–¢–£–°–´ –ü–†–û–ï–ö–¢–û–í", "–ö–û–õ–ò–ß–ï–°–¢–í–û"],
            ["‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"],
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
        for status, count in status_stats.head(10).items():
            percentage = (count / len(df)) * 100
            dashboard_data.append([status, f"{count} ({percentage:.1f}%)"])
        
        dashboard_data.extend([
            ["", ""],
            ["üë• –¢–û–ü –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ò", "–ê–ö–¢–ò–í–ù–´–• –ü–†–û–ï–ö–¢–û–í"],
            ["‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"],
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        sorted_executors = sorted(executor_analysis.items(), key=lambda x: x[1], reverse=True)[:10]
        for executor, count in sorted_executors:
            dashboard_data.append([executor, str(count)])
        
        dashboard_data.extend([
            ["", ""],
            ["‚≠ê –ì–†–ï–ô–î–´ –ö–õ–ò–ï–ù–¢–û–í", "–ö–û–õ–ò–ß–ï–°–¢–í–û"],
            ["‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"],
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–µ–π–¥—ã
        for grade, count in grade_stats.items():
            if pd.notna(grade):
                dashboard_data.append([f"–ì—Ä–µ–π–¥ {grade}", str(count)])
        
        dashboard_data.extend([
            ["", ""],
            ["üí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò", ""],
            ["‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", ""],
            ["–ü—Ä–æ–µ–∫—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π", str(financial_stats['projects_with_amount'])],
            ["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞", f"{financial_stats['max']:,.0f} —Ä—É–±." if financial_stats['max'] > 0 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"],
            ["–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞", f"{financial_stats['min']:,.0f} —Ä—É–±." if financial_stats['min'] > 0 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"],
            ["", ""],
            ["üöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò", ""],
            ["‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", ""],
            ["1. –ü—Ä–æ–µ–∫—Ç—ã –≤ —Å—Ç–∞—Ç—É—Å–µ '–ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ'", f"{status_stats.get('–ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ', 0)} —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è"],
            ["2. –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", f"–£ {sorted_executors[0][0]} –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {sorted_executors[0][1]}" if sorted_executors else ""],
            ["3. –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ñ–æ–∫—É—Å", "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö"],
            ["4. –ü—Ä–æ—Ü–µ—Å—Å—ã", "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å workflow –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è"],
        ])
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥
        success = sheets.write_range(spreadsheet_id, "üìä Dashboard!A1", dashboard_data)
        
        if success:
            print("‚úÖ –î–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            create_detailed_analytics(sheets, spreadsheet_id, df, status_stats, executor_analysis)
            
            print(f"\nüéâ –î–ê–®–ë–û–†–î –ì–û–¢–û–í!")
            print(f"üìä –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É: https://docs.google.com/spreadsheets/d/{spreadsheet_id}")
            print("üìã –õ–∏—Å—Ç—ã:")
            print("   ‚Ä¢ üìä Dashboard - –æ—Å–Ω–æ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞")
            print("   ‚Ä¢ üìà Analytics - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
            
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def analyze_executors(df):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    executor_counts = {}
    
    for _, row in df.iterrows():
        executors = str(row['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏'])
        if pd.notna(executors) and executors != 'nan':
            # –†–∞–∑–¥–µ–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—è—Ç—ã–º
            names = [name.strip() for name in executors.split(',')]
            for name in names:
                # –û—á–∏—â–∞–µ–º –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                clean_name = re.sub(r'[\[\]#]', '', name).strip()
                if clean_name and len(clean_name) > 2:
                    executor_counts[clean_name] = executor_counts.get(clean_name, 0) + 1
    
    return executor_counts

def analyze_finances(df):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"""
    amounts = []
    
    for _, row in df.iterrows():
        amount_str = str(row['–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏'])
        if pd.notna(amount_str) and amount_str != 'nan':
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
            numbers = re.findall(r'\d+\.?\d*', amount_str.replace(' ', '').replace(',', ''))
            if numbers:
                try:
                    amount = float(numbers[0])
                    if amount > 0:
                        amounts.append(amount)
                except:
                    pass
    
    if amounts:
        return {
            'total': sum(amounts),
            'average': sum(amounts) / len(amounts),
            'max': max(amounts),
            'min': min(amounts),
            'projects_with_amount': len(amounts)
        }
    else:
        return {
            'total': 0,
            'average': 0,
            'max': 0,
            'min': 0,
            'projects_with_amount': 0
        }

def create_detailed_analytics(sheets, spreadsheet_id, df, status_stats, executor_analysis):
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    print("üìà –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    try:
        sheets.create_sheet(spreadsheet_id, "üìà Analytics")
    except:
        pass
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    analytics_data = [
        ["üìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê", f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"],
        ["", ""],
        ["üîç –ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–ê–¢–£–°–ê–ú", "", ""],
        ["–°—Ç–∞—Ç—É—Å", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ü—Ä–æ—Ü–µ–Ω—Ç"],
        ["‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"],
    ]
    
    for status, count in status_stats.items():
        percentage = (count / len(df)) * 100
        analytics_data.append([status, str(count), f"{percentage:.1f}%"])
    
    analytics_data.extend([
        ["", "", ""],
        ["üë• –ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø–ú", "", ""],
        ["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–ü—Ä–æ–µ–∫—Ç–æ–≤", "–ù–∞–≥—Ä—É–∑–∫–∞ %"],
        ["‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"],
    ])
    
    total_assignments = sum(executor_analysis.values())
    for executor, count in sorted(executor_analysis.items(), key=lambda x: x[1], reverse=True):
        percentage = (count / total_assignments) * 100 if total_assignments > 0 else 0
        analytics_data.append([executor, str(count), f"{percentage:.1f}%"])
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    sheets.write_range(spreadsheet_id, "üìà Analytics!A1", analytics_data)
    print("‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")

def main():
    create_comprehensive_dashboard()

if __name__ == "__main__":
    main()
