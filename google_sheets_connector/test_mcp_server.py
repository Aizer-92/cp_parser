"""
–¢–µ—Å—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞ Google Sheets
"""

import json
import asyncio
from mcp_server import GoogleSheetsMCPServer

async def test_mcp_server():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Sheets MCP —Å–µ—Ä–≤–µ—Ä–∞")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server_instance = GoogleSheetsMCPServer()
        print("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        list_tools_handler = None
        for handler in server_instance.server._tool_list_handlers:
            list_tools_handler = handler
            break
        
        if list_tools_handler:
            tools = await list_tools_handler()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
            
            for tool in tools:
                print(f"   ‚Ä¢ {tool.name}: {tool.description}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤  
        print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        list_resources_handler = None
        for handler in server_instance.server._resource_list_handlers:
            list_resources_handler = handler
            break
        
        if list_resources_handler:
            resources = await list_resources_handler()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(resources)} —Ä–µ—Å—É—Ä—Å–æ–≤:")
            
            for resource in resources:
                print(f"   ‚Ä¢ {resource.name}: {resource.description}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        print("\nüìñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —á—Ç–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        read_resource_handler = None
        for handler in server_instance.server._resource_handlers:
            read_resource_handler = handler
            break
        
        if read_resource_handler:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_content = await read_resource_handler("google-sheets://config")
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω–∞:")
            print(f"   {config_content[:100]}...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏
            help_content = await read_resource_handler("google-sheets://help")
            print("‚úÖ –°–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞:")
            print(f"   –†–∞–∑–º–µ—Ä: {len(help_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìä –°–≤–æ–¥–∫–∞:")
        print(f"   ‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {len(tools) if 'tools' in locals() else 'N/A'}")
        print(f"   ‚Ä¢ –†–µ—Å—É—Ä—Å—ã: {len(resources) if 'resources' in locals() else 'N/A'}")
        print("   ‚Ä¢ –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def create_client_example():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MCP —Å–µ—Ä–≤–µ—Ä–æ–º"""
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞...")
    
    client_example = '''
"""
–ü—Ä–∏–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets MCP —Å–µ—Ä–≤–µ—Ä–æ–º
"""

import json
import asyncio
from mcp.client.session import ClientSession
from mcp.client.stdio import stdio_client

async def example_mcp_client():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å MCP —Å–µ—Ä–≤–µ—Ä–æ–º"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ stdio
    async with stdio_client(["python", "start_mcp_server.py"]) as (read, write):
        async with ClientSession(read, write) as session:
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await session.initialize()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            tools = await session.list_tools()
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
            for tool in tools:
                print(f"  - {tool.name}: {tool.description}")
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            auth_result = await session.call_tool(
                "authenticate",
                {"credentials_file": "credentials/service_account.json"}
            )
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", auth_result)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ
            info_result = await session.call_tool(
                "get_spreadsheet_info",
                {"spreadsheet_id": "1Xxx_cNb5eOi0CzRhr1X3mWwYWyltmZu_uI_02B9EfcE"}
            )
            print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ:", info_result)
            
            # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            read_result = await session.call_tool(
                "read_range",
                {
                    "spreadsheet_id": "1Xxx_cNb5eOi0CzRhr1X3mWwYWyltmZu_uI_02B9EfcE",
                    "range": "–õ–∏—Å—Ç1!A1:C5"
                }
            )
            print("–î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:", read_result)

if __name__ == "__main__":
    asyncio.run(example_mcp_client())
'''
    
    with open("mcp_client_example.py", "w", encoding="utf-8") as f:
        f.write(client_example)
    
    print("‚úÖ –ü—Ä–∏–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω: mcp_client_example.py")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞
    result = asyncio.run(test_mcp_server())
    
    if result:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞
        create_client_example()
        
        print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        print("=" * 60)
        print("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        print()
        print("üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:")
        print("   python start_mcp_server.py")
        print()
        print("üìã –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Claude Desktop:")
        print("   –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ mcp_config.json")
        print()
        print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
        print("   MCP_USAGE_GUIDE.md")

if __name__ == "__main__":
    main()
