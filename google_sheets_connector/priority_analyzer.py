"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
"""

from connector import GoogleSheetsConnector
import pandas as pd
import re
from datetime import datetime
from collections import defaultdict

class PriorityAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    
    def __init__(self, spreadsheet_id="1Xxx_cNb5eOi0CzRhr1X3mWwYWyltmZu_uI_02B9EfcE"):
        self.connector = GoogleSheetsConnector()
        self.spreadsheet_id = spreadsheet_id
        self.df = None
    
    def authenticate(self, credentials_file="credentials/quickstart-1591698112539-676a9e339335.json"):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"""
        return self.connector.authenticate_service_account(credentials_file)
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤...")
        
        try:
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            self.df = self.connector.read_to_dataframe(
                self.spreadsheet_id, 
                "–õ–∏—Å—Ç1!A1:M600", 
                header_row=True
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.df = self.df.dropna(subset=['–ù–∞–∑–≤–∞–Ω–∏–µ'])
            self.df = self.df[self.df['–ù–∞–∑–≤–∞–Ω–∏–µ'].str.strip() != '']
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.df)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def parse_amount(self, amount_str):
        """–ü–∞—Ä—Å–∏—Ç —Å—É–º–º—É –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        if pd.isna(amount_str) or str(amount_str).strip() == '':
            return 0
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ
        cleaned = str(amount_str).replace(' ', '').replace(',', '')
        
        # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ
        numbers = re.findall(r'\d+\.?\d*', cleaned)
        if numbers:
            try:
                return float(numbers[0])
            except:
                return 0
        return 0
    
    def parse_executors(self, executors_str):
        """–ü–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        if pd.isna(executors_str):
            return []
        
        executors_str = str(executors_str)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
        names = [name.strip() for name in executors_str.split(',')]
        
        # –û—á–∏—â–∞–µ–º –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
        clean_names = []
        for name in names:
            # –£–¥–∞–ª—è–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏, # –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã
            clean_name = re.sub(r'[\[\]#]', '', name).strip()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞
            if clean_name and len(clean_name) > 2 and not clean_name.startswith('###'):
                clean_names.append(clean_name)
        
        return clean_names
    
    def analyze_priorities(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        print("\nüéØ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤...")
        
        if self.df is None:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return None
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.df['parsed_amount'] = self.df['–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏'].apply(self.parse_amount)
        self.df['parsed_executors'] = self.df['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏'].apply(self.parse_executors)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        priority_analysis = {}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        for priority in self.df['–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç'].unique():
            if pd.isna(priority):
                priority = "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            priority_projects = self.df[self.df['–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç'] == priority] if priority != "–ù–µ —É–∫–∞–∑–∞–Ω" else self.df[self.df['–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç'].isna()]
            
            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            total_amount = priority_projects['parsed_amount'].sum()
            avg_amount = priority_projects['parsed_amount'].mean() if len(priority_projects) > 0 else 0
            projects_with_amount = len(priority_projects[priority_projects['parsed_amount'] > 0])
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            all_executors = []
            for executors_list in priority_projects['parsed_executors']:
                all_executors.extend(executors_list)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            executor_counts = defaultdict(int)
            for executor in all_executors:
                executor_counts[executor] += 1
            
            # –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–∏
            top_executors = sorted(executor_counts.items(), key=lambda x: x[1], reverse=True)[:5]
            
            # –°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
            status_counts = priority_projects['–°—Ç–∞—Ç—É—Å'].value_counts()
            
            priority_analysis[str(priority)] = {
                'projects_count': len(priority_projects),
                'total_amount': total_amount,
                'average_amount': avg_amount,
                'projects_with_amount': projects_with_amount,
                'top_executors': top_executors,
                'unique_executors': len(executor_counts),
                'status_breakdown': status_counts.to_dict(),
                'projects': priority_projects[['–ù–∞–∑–≤–∞–Ω–∏–µ', '–°—Ç–∞—Ç—É—Å', '–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏']].head(3).to_dict('records')
            }
        
        return priority_analysis
    
    def create_priority_dashboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
        print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        analysis = self.analyze_priorities()
        
        if not analysis:
            return False
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        try:
            self.connector.create_sheet(self.spreadsheet_id, "üéØ Priority Dashboard")
        except:
            pass  # –õ–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        dashboard_data = [
            ["üéØ –î–ê–®–ë–û–†–î –ü–†–ò–û–†–ò–¢–ï–¢–û–í –ü–†–û–ï–ö–¢–û–í", f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"],
            ["", ""],
            ["üìä –ê–ù–ê–õ–ò–ó –ü–û –ü–†–ò–û–†–ò–¢–ï–¢–ê–ú", ""],
            ["‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê", ""],
        ]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã (—á–∏—Å–ª–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞, –∑–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ)
        sorted_priorities = []
        other_priorities = []
        
        for priority in analysis.keys():
            try:
                float(priority)
                sorted_priorities.append(priority)
            except:
                other_priorities.append(priority)
        
        sorted_priorities.sort(key=lambda x: float(x))
        all_priorities = sorted_priorities + sorted(other_priorities)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        for priority in all_priorities:
            data = analysis[priority]
            
            dashboard_data.extend([
                [f"üéØ –ü–†–ò–û–†–ò–¢–ï–¢: {priority}", ""],
                ["‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", ""],
                ["üìà –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:", ""],
                ["  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤", str(data['projects_count'])],
                ["  ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–æ–∫", f"{data['total_amount']:,.0f} —Ä—É–±." if data['total_amount'] > 0 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"],
                ["  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏", f"{data['average_amount']:,.0f} —Ä—É–±." if data['average_amount'] > 0 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"],
                ["  ‚Ä¢ –ü—Ä–æ–µ–∫—Ç–æ–≤ —Å —Å—É–º–º–æ–π", str(data['projects_with_amount'])],
                ["  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", str(data['unique_executors'])],
                ["", ""],
                ["üë• –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–∏:", "–ü—Ä–æ–µ–∫—Ç–æ–≤"],
            ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for executor, count in data['top_executors']:
                dashboard_data.append([f"  ‚Ä¢ {executor}", str(count)])
            
            if not data['top_executors']:
                dashboard_data.append(["  ‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã", "-"])
            
            dashboard_data.extend([
                ["", ""],
                ["üìä –°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–µ–∫—Ç–æ–≤:", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"],
            ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
            for status, count in data['status_breakdown'].items():
                dashboard_data.append([f"  ‚Ä¢ {status}", str(count)])
            
            dashboard_data.extend([
                ["", ""],
                ["üìù –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤:", ""],
            ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤
            for i, project in enumerate(data['projects'], 1):
                project_name = project['–ù–∞–∑–≤–∞–Ω–∏–µ'][:60] + "..." if len(project['–ù–∞–∑–≤–∞–Ω–∏–µ']) > 60 else project['–ù–∞–∑–≤–∞–Ω–∏–µ']
                dashboard_data.append([f"  {i}. {project_name}", f"({project['–°—Ç–∞—Ç—É—Å']})"])
            
            dashboard_data.extend([
                ["", ""],
                ["", ""],
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É
        total_projects = sum(data['projects_count'] for data in analysis.values())
        total_amount = sum(data['total_amount'] for data in analysis.values())
        all_executors = set()
        for data in analysis.values():
            for executor, _ in data['top_executors']:
                all_executors.add(executor)
        
        dashboard_data.extend([
            ["üéä –û–ë–©–ê–Ø –°–í–û–î–ö–ê", ""],
            ["‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê", ""],
            ["üìä –ò—Ç–æ–≥–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:", ""],
            ["  ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤", str(total_projects)],
            ["  ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤", f"{total_amount:,.0f} —Ä—É–±." if total_amount > 0 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"],
            ["  ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ", str(len(analysis))],
            ["  ‚Ä¢ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", str(len(all_executors))],
            ["", ""],
            ["üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", ""],
            ["  ‚Ä¢ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞—Ö —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º", ""],
            ["  ‚Ä¢ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏", ""],
            ["  ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞", ""],
            ["  ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ", ""],
        ])
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥
        success = self.connector.write_range(
            self.spreadsheet_id,
            "üéØ Priority Dashboard!A1",
            dashboard_data
        )
        
        if success:
            print("‚úÖ –î–∞—à–±–æ—Ä–¥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞")
            return False
    
    def create_financial_priority_summary(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–¥–∫—É –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º"""
        print("\nüí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–¥–∫–∏...")
        
        analysis = self.analyze_priorities()
        if not analysis:
            return False
        
        try:
            self.connector.create_sheet(self.spreadsheet_id, "üí∞ Financial Priority")
        except:
            pass
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        financial_data = [
            ["üí∞ –§–ò–ù–ê–ù–°–û–í–ê–Ø –°–í–û–î–ö–ê –ü–û –ü–†–ò–û–†–ò–¢–ï–¢–ê–ú", f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"],
            ["", ""],
            ["–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "–ü—Ä–æ–µ–∫—Ç–æ–≤", "–û–±—â–∞—è —Å—É–º–º–∞ (—Ä—É–±.)", "–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ (—Ä—É–±.)", "–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫", "–ü—Ä–æ–µ–∫—Ç–æ–≤ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞"],
            ["‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"],
        ]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–π —Å—É–º–º–µ
        sorted_analysis = sorted(analysis.items(), key=lambda x: x[1]['total_amount'], reverse=True)
        
        for priority, data in sorted_analysis:
            top_executor = data['top_executors'][0] if data['top_executors'] else ("–ù–µ —É–∫–∞–∑–∞–Ω", 0)
            
            financial_data.append([
                str(priority),
                str(data['projects_count']),
                f"{data['total_amount']:,.0f}" if data['total_amount'] > 0 else "0",
                f"{data['average_amount']:,.0f}" if data['average_amount'] > 0 else "0",
                top_executor[0],
                str(top_executor[1])
            ])
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–¥–∫—É
        success = self.connector.write_range(
            self.spreadsheet_id,
            "üí∞ Financial Priority!A1",
            financial_data
        )
        
        if success:
            print("‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")
        
        return success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
    print("üéØ –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–†–ò–û–†–ò–¢–ï–¢–û–í –ü–†–û–ï–ö–¢–û–í")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = PriorityAnalyzer()
    
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    if not analyzer.authenticate():
        print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        return
    
    print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if not analyzer.load_data():
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
    analysis = analyzer.analyze_priorities()
    
    if analysis:
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        print("-" * 40)
        
        for priority, data in analysis.items():
            print(f"\nüéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority}:")
            print(f"   ‚Ä¢ –ü—Ä–æ–µ–∫—Ç–æ–≤: {data['projects_count']}")
            print(f"   ‚Ä¢ –°—É–º–º–∞: {data['total_amount']:,.0f} —Ä—É–±.")
            print(f"   ‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {data['unique_executors']}")
            if data['top_executors']:
                print(f"   ‚Ä¢ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫: {data['top_executors'][0][0]} ({data['top_executors'][0][1]} –ø—Ä–æ–µ–∫—Ç–æ–≤)")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥—ã
    dashboard_success = analyzer.create_priority_dashboard()
    financial_success = analyzer.create_financial_priority_summary()
    
    if dashboard_success and financial_success:
        print(f"\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìä –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É: https://docs.google.com/spreadsheets/d/{analyzer.spreadsheet_id}")
        print("üìã –ù–æ–≤—ã–µ –ª–∏—Å—Ç—ã:")
        print("   ‚Ä¢ üéØ Priority Dashboard - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤")
        print("   ‚Ä¢ üí∞ Financial Priority - —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞")

if __name__ == "__main__":
    main()
