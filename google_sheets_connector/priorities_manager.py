"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏
"""

import sys
import os
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import re

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from connector import GoogleSheetsConnector
    
    class PrioritiesManager:
        """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        
        def __init__(self, spreadsheet_id: str = None):
            """
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            
            Args:
                spreadsheet_id: ID —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
            """
            self.connector = GoogleSheetsConnector()
            self.spreadsheet_id = spreadsheet_id or "1Xxx_cNb5eOi0CzRhr1X3mWwYWyltmZu_uI_02B9EfcE"
            self.sheet_name = "–õ–∏—Å—Ç1"  # –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
            self.columns = {
                'name': 'A',          # –ù–∞–∑–≤–∞–Ω–∏–µ
                'status': 'B',        # –°—Ç–∞—Ç—É—Å
                'client_grade': 'C',  # –ì—Ä–µ–π–¥ –∫–ª–∏–µ–Ω—Ç–∞
                'order_percent': 'D', # % –∑–∞–∫–∞–∑–∞
                'deadline': 'E',      # –°—Ä–æ–∫–∏
                'complexity': 'F',    # –°–ª–æ–∂–Ω–æ—Å—Ç—å
                'deal_amount': 'G',   # –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏
                'calculation': 'H',   # –°—É–º–º–∞ –ø—Ä–æ—Å—á–µ—Ç–∞
                'manager': 'I',       # –ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫
                'executors': 'J',     # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
                'create_date': 'K',   # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                'process': 'L',       # –ü—Ä–æ—Ü–µ—Å—Å
                'priority': 'M'       # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            }
        
        def authenticate(self, credentials_file: str = "credentials/quickstart-1591698112539-676a9e339335.json") -> bool:
            """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"""
            return self.connector.authenticate_service_account(credentials_file)
        
        def get_all_projects(self) -> pd.DataFrame:
            """
            –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            
            Returns:
                pd.DataFrame: –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
            """
            try:
                # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
                df = self.connector.read_to_dataframe(
                    self.spreadsheet_id, 
                    f"{self.sheet_name}!A:M", 
                    header_row=True
                )
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                df = df.dropna(how='all')  # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                df = df[df.iloc[:, 0].notna()]  # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                
                return df
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
                return pd.DataFrame()
        
        def get_projects_by_status(self, status: str) -> pd.DataFrame:
            """
            –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
            
            Args:
                status: –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
                
            Returns:
                pd.DataFrame: –ü—Ä–æ–µ–∫—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            """
            df = self.get_all_projects()
            if df.empty:
                return df
            
            return df[df['–°—Ç–∞—Ç—É—Å'].str.contains(status, case=False, na=False)]
        
        def get_projects_by_executor(self, executor: str) -> pd.DataFrame:
            """
            –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            
            Args:
                executor: –ò–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                
            Returns:
                pd.DataFrame: –ü—Ä–æ–µ–∫—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            """
            df = self.get_all_projects()
            if df.empty:
                return df
            
            return df[df['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏'].str.contains(executor, case=False, na=False)]
        
        def analyze_workload(self) -> Dict[str, Any]:
            """
            –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
            
            Returns:
                Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏
            """
            df = self.get_all_projects()
            if df.empty:
                return {}
            
            # –ü–∞—Ä—Å–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            executor_projects = {}
            
            for _, row in df.iterrows():
                executors = str(row['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏'])
                if pd.notna(executors) and executors != 'nan':
                    # –†–∞–∑–¥–µ–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—è—Ç—ã–º
                    names = [name.strip() for name in executors.split(',')]
                    for name in names:
                        if name and not name.startswith('[') and not name.startswith('#'):
                            if name not in executor_projects:
                                executor_projects[name] = []
                            executor_projects[name].append({
                                'name': row['–ù–∞–∑–≤–∞–Ω–∏–µ'],
                                'status': row['–°—Ç–∞—Ç—É—Å'],
                                'complexity': row['–°–ª–æ–∂–Ω–æ—Å—Ç—å'] if pd.notna(row['–°–ª–æ–∂–Ω–æ—Å—Ç—å']) else 0
                            })
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            workload_stats = {}
            for executor, projects in executor_projects.items():
                workload_stats[executor] = {
                    'total_projects': len(projects),
                    'active_projects': len([p for p in projects if p['status'] not in ['–ö–ü –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ', '–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è']]),
                    'avg_complexity': sum([p['complexity'] for p in projects if isinstance(p['complexity'], (int, float))]) / len(projects) if projects else 0,
                    'projects': projects
                }
            
            return workload_stats
        
        def analyze_financial_metrics(self) -> Dict[str, Any]:
            """
            –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            
            Returns:
                Dict: –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            """
            df = self.get_all_projects()
            if df.empty:
                return {}
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—ã —Å–¥–µ–ª–æ–∫ –≤ —á–∏—Å–ª–∞
            def parse_amount(amount):
                if pd.isna(amount):
                    return 0
                
                amount_str = str(amount).replace(' ', '').replace(',', '')
                # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ
                numbers = re.findall(r'\d+\.?\d*', amount_str)
                if numbers:
                    return float(numbers[0])
                return 0
            
            df['deal_amount_numeric'] = df['–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏'].apply(parse_amount)
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_finance = df.groupby('–°—Ç–∞—Ç—É—Å')['deal_amount_numeric'].agg(['sum', 'count', 'mean']).round(2)
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_amount = df['deal_amount_numeric'].sum()
            avg_deal = df['deal_amount_numeric'].mean()
            
            # –¢–æ–ø –ø—Ä–æ–µ–∫—Ç—ã –ø–æ —Å—É–º–º–µ
            top_projects = df.nlargest(5, 'deal_amount_numeric')[['–ù–∞–∑–≤–∞–Ω–∏–µ', '–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏', '–°—Ç–∞—Ç—É—Å']]
            
            return {
                'total_amount': total_amount,
                'average_deal': avg_deal,
                'projects_count': len(df),
                'status_breakdown': status_finance.to_dict(),
                'top_projects': top_projects.to_dict('records')
            }
        
        def generate_status_report(self) -> str:
            """
            –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –ø—Ä–æ–µ–∫—Ç–æ–≤
            
            Returns:
                str: –û—Ç—á—ë—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            """
            df = self.get_all_projects()
            if df.empty:
                return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞"
            
            report = []
            report.append("üìä –û–¢–ß–Å–¢ –ü–û –°–¢–ê–¢–£–°–ê–ú –ü–†–û–ï–ö–¢–û–í")
            report.append("=" * 50)
            report.append(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            report.append(f"üìà –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(df)}")
            report.append("")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_counts = df['–°—Ç–∞—Ç—É—Å'].value_counts()
            report.append("üîç –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
            for status, count in status_counts.items():
                percentage = (count / len(df)) * 100
                report.append(f"   ‚Ä¢ {status}: {count} ({percentage:.1f}%)")
            
            report.append("")
            
            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            finance_stats = self.analyze_financial_metrics()
            if finance_stats:
                report.append("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
                report.append(f"   ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {finance_stats['total_amount']:,.0f} —Ä—É–±.")
                report.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {finance_stats['average_deal']:,.0f} —Ä—É–±.")
                report.append("")
            
            # –¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
            workload = self.analyze_workload()
            if workload:
                report.append("üë• –¢–æ–ø-5 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–µ–∫—Ç–æ–≤:")
                sorted_executors = sorted(workload.items(), 
                                        key=lambda x: x[1]['active_projects'], 
                                        reverse=True)[:5]
                
                for executor, stats in sorted_executors:
                    report.append(f"   ‚Ä¢ {executor}: {stats['active_projects']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
            
            return "\n".join(report)
        
        def find_overdue_projects(self, days_threshold: int = 30) -> pd.DataFrame:
            """
            –ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
            
            Args:
                days_threshold: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–∫–∏
                
            Returns:
                pd.DataFrame: –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
            """
            df = self.get_all_projects()
            if df.empty:
                return df
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
            active_statuses = ['–ö–ü –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ', '–ü–æ–∏—Å–∫ –∏ —Ä–∞—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–∞', '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ']
            active_projects = df[df['–°—Ç–∞—Ç—É—Å'].isin(active_statuses)]
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞ –¥–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å—Ç–∞—Ä—à–µ threshold –¥–Ω–µ–π –∏–∑ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö
            
            return active_projects.head(10)  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        
        def create_dashboard(self) -> bool:
            """
            –°–æ–∑–¥–∞—ë—Ç –¥–∞—à–±–æ—Ä–¥ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
            
            Returns:
                bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
            """
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
                df = self.get_all_projects()
                if df.empty:
                    print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞")
                    return False
                
                # –°–æ–∑–¥–∞—ë–º –ª–∏—Å—Ç Dashboard
                try:
                    self.connector.create_sheet(self.spreadsheet_id, "Dashboard")
                except:
                    pass  # –õ–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
                status_counts = df['–°—Ç–∞—Ç—É—Å'].value_counts()
                finance_stats = self.analyze_financial_metrics()
                workload_stats = self.analyze_workload()
                
                dashboard_data = [
                    ["üìä –î–ê–®–ë–û–†–î –ü–†–û–ï–ö–¢–û–í", f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"],
                    ["", ""],
                    ["üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê", ""],
                    ["–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤", str(len(df))],
                    ["–û–±—â–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–æ–∫", f"{finance_stats.get('total_amount', 0):,.0f} —Ä—É–±."],
                    ["–°—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞", f"{finance_stats.get('average_deal', 0):,.0f} —Ä—É–±."],
                    ["", ""],
                    ["üîç –°–¢–ê–¢–£–°–´", "–ö–û–õ–ò–ß–ï–°–¢–í–û"],
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
                for status, count in status_counts.items():
                    dashboard_data.append([status, str(count)])
                
                dashboard_data.extend([
                    ["", ""],
                    ["üë• –¢–û–ü –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ò", "–ê–ö–¢–ò–í–ù–´–• –ü–†–û–ï–ö–¢–û–í"],
                ])
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
                if workload_stats:
                    sorted_executors = sorted(workload_stats.items(), 
                                            key=lambda x: x[1]['active_projects'], 
                                            reverse=True)[:5]
                    
                    for executor, stats in sorted_executors:
                        dashboard_data.append([executor, str(stats['active_projects'])])
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥
                success = self.connector.write_range(
                    self.spreadsheet_id,
                    "Dashboard!A1",
                    dashboard_data
                )
                
                if success:
                    print("‚úÖ –î–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                    return True
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞")
                    return False
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {e}")
                return False
    
    def main():
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
        print("üéØ –ú–ï–ù–ï–î–ñ–ï–† –¢–ê–ë–õ–ò–¶–´ –ü–†–ò–û–†–ò–¢–ï–¢–û–í")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä
        manager = PrioritiesManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        if not manager.authenticate():
            print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª credentials/quickstart-1591698112539-676a9e339335.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            print("üí° –ò —á—Ç–æ Service Account –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ")
            return
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
            print("\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            projects = manager.get_all_projects()
            
            if projects.empty:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ")
                return
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
            print("\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞...")
            report = manager.generate_status_report()
            print(report)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
            print("\nüë• –ê–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...")
            workload = manager.analyze_workload()
            
            if workload:
                print("üìä –¢–æ–ø-3 –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:")
                sorted_workload = sorted(workload.items(), 
                                       key=lambda x: x[1]['active_projects'], 
                                       reverse=True)[:3]
                
                for executor, stats in sorted_workload:
                    print(f"   ‚Ä¢ {executor}: {stats['active_projects']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
            
            # –°–æ–∑–¥–∞—ë–º –¥–∞—à–±–æ—Ä–¥
            print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞...")
            dashboard_success = manager.create_dashboard()
            
            if dashboard_success:
                print(f"üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")
                print(f"üìä –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É: https://docs.google.com/spreadsheets/d/{manager.spreadsheet_id}")
                print("üìã –î–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ª–∏—Å—Ç–µ 'Dashboard'")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

    if __name__ == "__main__":
        main()
        
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
