#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–∏—Å–∞–Ω–∏–π —É —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π
"""
import sqlite3
import json
from pathlib import Path
from otapi_parser import OTAPIParser

def check_descriptions_for_missing_items():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è —É —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –û–ü–ò–°–ê–ù–ò–ô –£ –¢–û–í–ê–†–û–í –ë–ï–ó –û–ü–ò–°–ê–ù–ò–ô")
    print("=" * 60)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    db_path = Path("data/results/all_chunks_database.db")
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π
    cursor.execute('''
        SELECT item_id, title, chunk_source, chunk_type
        FROM products
        WHERE description IS NULL OR description = '' OR description = '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'
        LIMIT 20
    ''')
    
    items = cursor.fetchall()
    conn.close()
    
    if not items:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π!")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = OTAPIParser()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    results = []
    for i, (item_id, title, chunk_source, chunk_type) in enumerate(items, 1):
        print(f"üîç [{i}/{len(items)}] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞ {item_id}...")
        print(f"    –ù–∞–∑–≤–∞–Ω–∏–µ: {title[:80]}...")
        print(f"    –ò—Å—Ç–æ—á–Ω–∏–∫: {chunk_source}/{chunk_type}")
        
        try:
            # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ OTAPI
            result = parser.parse_product(item_id)
            
            if result:
                raw_data = result.get('raw_data', {})
                item_data = raw_data.get('Item', {})
                
                description = item_data.get('Description', '')
                has_description = bool(description and description.strip())
                
                print(f"    ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç")
                print(f"    üìù –û–ø–∏—Å–∞–Ω–∏–µ: {'–ï–°–¢–¨' if has_description else '–ù–ï–¢'}")
                if has_description:
                    print(f"    üìè –î–ª–∏–Ω–∞: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"    üìã –ù–∞—á–∞–ª–æ: {description[:100]}...")
                else:
                    print(f"    ‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ API")
                
                results.append({
                    'item_id': item_id,
                    'title': title,
                    'chunk_source': chunk_source,
                    'chunk_type': chunk_type,
                    'has_description': has_description,
                    'description_length': len(description) if description else 0,
                    'description_preview': description[:100] if description else ''
                })
                
            else:
                print(f"    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                results.append({
                    'item_id': item_id,
                    'title': title,
                    'chunk_source': chunk_source,
                    'chunk_type': chunk_type,
                    'has_description': False,
                    'description_length': 0,
                    'description_preview': ''
                })
            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
            results.append({
                'item_id': item_id,
                'title': title,
                'chunk_source': chunk_source,
                'chunk_type': chunk_type,
                'has_description': False,
                'description_length': 0,
                'description_preview': '',
                'error': str(e)
            })
        
        print("-" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    analyze_results(results)

def analyze_results(results):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–†–û–í–ï–†–ö–ò")
    print("=" * 60)
    
    if not results:
        return
    
    total_items = len(results)
    items_with_descriptions = sum(1 for r in results if r['has_description'])
    items_without_descriptions = total_items - items_with_descriptions
    
    print(f"üìã –í–°–ï–ì–û –ü–†–û–í–ï–†–ï–ù–û: {total_items}")
    print(f"‚úÖ –° –æ–ø–∏—Å–∞–Ω–∏—è–º–∏: {items_with_descriptions} ({items_with_descriptions/total_items*100:.1f}%)")
    print(f"‚ùå –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π: {items_without_descriptions} ({items_without_descriptions/total_items*100:.1f}%)")
    
    if items_with_descriptions > 0:
        avg_length = sum(r['description_length'] for r in results if r['has_description']) / items_with_descriptions
        print(f"üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–π: {avg_length:.1f} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print()
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    print("üìÅ –ê–ù–ê–õ–ò–ó –ü–û –ò–°–¢–û–ß–ù–ò–ö–ê–ú:")
    source_stats = {}
    for result in results:
        source = f"{result['chunk_source']}/{result['chunk_type']}"
        if source not in source_stats:
            source_stats[source] = {'total': 0, 'with_desc': 0, 'without_desc': 0}
        
        source_stats[source]['total'] += 1
        if result['has_description']:
            source_stats[source]['with_desc'] += 1
        else:
            source_stats[source]['without_desc'] += 1
    
    for source, stats in source_stats.items():
        percentage = stats['with_desc'] / stats['total'] * 100
        print(f"   {source}: {stats['with_desc']}/{stats['total']} ({percentage:.1f}%)")
    
    print()
    
    # –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
    items_with_desc = [r for r in results if r['has_description']]
    if items_with_desc:
        print("üìù –ü–†–ò–ú–ï–†–´ –¢–û–í–ê–†–û–í –° –û–ü–ò–°–ê–ù–ò–Ø–ú–ò:")
        for i, item in enumerate(items_with_desc[:5], 1):
            print(f"   {i}. {item['item_id']} - {item['title'][:50]}...")
            print(f"       –î–ª–∏–Ω–∞: {item['description_length']} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"       –ù–∞—á–∞–ª–æ: {item['description_preview']}...")
            print()
    
    # –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π
    items_without_desc = [r for r in results if not r['has_description']]
    if items_without_desc:
        print("‚ùå –ü–†–ò–ú–ï–†–´ –¢–û–í–ê–†–û–í –ë–ï–ó –û–ü–ò–°–ê–ù–ò–ô:")
        for i, item in enumerate(items_without_desc[:5], 1):
            print(f"   {i}. {item['item_id']} - {item['title'][:50]}...")
            if 'error' in item:
                print(f"       –û—à–∏–±–∫–∞: {item['error']}")
            print()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if items_with_descriptions > 0:
        print(f"   üéØ {items_with_descriptions} —Ç–æ–≤–∞—Ä–æ–≤ –∏–º–µ—é—Ç –æ–ø–∏—Å–∞–Ω–∏—è –≤ API - –º–æ–∂–Ω–æ –¥–æ–ø–∞—Ä—Å–∏—Ç—å")
        print(f"   üéØ –≠—Ç–æ —É–ª—É—á—à–∏—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Å {items_with_descriptions/total_items*100:.1f}% –¥–æ 100%")
    
    if items_without_descriptions > 0:
        print(f"   ‚ö†Ô∏è  {items_without_descriptions} —Ç–æ–≤–∞—Ä–æ–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –∏–º–µ—é—Ç –æ–ø–∏—Å–∞–Ω–∏–π –≤ API")
        print(f"   üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –Ω–µ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ 1688.com –∏–º–µ—é—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    save_results(results)

def save_results(results):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    try:
        output_file = Path("data/results/description_check_results.json")
        output_file.parent.mkdir(parents=True, exist_ok=True)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file.name}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

if __name__ == "__main__":
    check_descriptions_for_missing_items()
