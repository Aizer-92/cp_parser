#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –†–ê–ë–û–ß–ò–• chunks (25-117) –≤ –ë–î
–≠—Ç–∏ chunks —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
"""
import json
import sqlite3
from pathlib import Path
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class WorkingChunksMerger:
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–∞–±–æ—á–∏–µ chunks –≤ –ë–î"""
    
    def __init__(self):
        self.data_dir = Path("data")
        self.results_dir = self.data_dir / "results"
        self.chunk_dir = self.results_dir / "chunks"
        self.db_path = self.results_dir / "all_chunks_database.db"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_chunks': 0,
            'total_products': 0,
            'products_added': 0,
            'products_updated': 0,
            'images_added': 0,
            'specs_added': 0,
            'errors': 0
        }
    
    def merge_working_chunks(self):
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–∞–±–æ—á–∏–µ chunks –≤ –ë–î"""
        try:
            print("üîß –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –†–ê–ë–û–ß–ò–• CHUNKS –í –ë–î")
            print("=" * 60)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö chunks (25-117)
            working_chunks = self.get_working_chunks()
            
            if not working_chunks:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö chunks!")
                return False
            
            print(f"üìÅ –ù–ê–ô–î–ï–ù–û –†–ê–ë–û–ß–ò–• CHUNKS: {len(working_chunks)}")
            for chunk_file in working_chunks:
                print(f"   {chunk_file.name}")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–±–æ—á–∏–π chunk
            for chunk_file in working_chunks:
                self.process_working_chunk(cursor, chunk_file)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            conn.commit()
            conn.close()
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.print_statistics()
            
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def get_working_chunks(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö chunks (25-117)"""
        chunk_files = list(self.chunk_dir.glob("fast_chunk_*.json"))
        chunk_files.sort(key=lambda x: x.stat().st_mtime)
        
        working_chunks = []
        
        for chunk_file in chunk_files:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä chunk –∏–∑ –∏–º–µ–Ω–∏
                chunk_name = chunk_file.name
                if 'fast_chunk_' in chunk_name:
                    # –ò—â–µ–º –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ fast_chunk_XXX_...
                    import re
                    match = re.search(r'fast_chunk_(\d+)_', chunk_name)
                    if match:
                        chunk_num = int(match.group(1))
                        # –ë–µ—Ä–µ–º chunks —Å 25 –ø–æ 117 (—Ä–∞–±–æ—á–∏–µ)
                        if 25 <= chunk_num <= 117:
                            working_chunks.append(chunk_file)
                            print(f"   –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π chunk: {chunk_name} (–Ω–æ–º–µ—Ä: {chunk_num})")
            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {chunk_file.name}: {e}")
                continue
        
        return working_chunks
    
    def process_working_chunk(self, cursor, chunk_file):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ä–∞–±–æ—á–∏–π chunk"""
        try:
            with open(chunk_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            if not isinstance(data, list):
                logging.warning(f"–§–∞–π–ª {chunk_file.name} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
                return
            
            print(f"\nüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ {chunk_file.name}: {len(data)} —Ç–æ–≤–∞—Ä–æ–≤")
            
            self.stats['total_chunks'] += 1
            self.stats['total_products'] += len(data)
            
            for product in data:
                try:
                    self.process_working_product(cursor, product)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
                    self.stats['errors'] += 1
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {chunk_file.name}: {e}")
    
    def process_working_product(self, cursor, product):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ chunk"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID
            item_id = product.get('id', '') or product.get('item_id', '')
            if not item_id:
                return
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å abb- –µ—Å–ª–∏ –µ—Å—Ç—å
            if str(item_id).startswith('abb-'):
                item_id = str(item_id)[4:]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –ë–î
            cursor.execute('SELECT item_id FROM products WHERE item_id = ?', (item_id,))
            if cursor.fetchone():
                # –¢–æ–≤–∞—Ä –µ—Å—Ç—å - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                self.update_working_product(cursor, item_id, product)
                self.stats['products_updated'] += 1
            else:
                # –¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
                self.add_working_product(cursor, item_id, product)
                self.stats['products_added'] += 1
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {item_id}: {e}")
    
    def update_working_product(self, cursor, item_id, product):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ chunk"""
        try:
            raw_data = product.get('raw_data', {})
            item_data = raw_data.get('Item', {})
            
            if not isinstance(item_data, dict):
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            title = item_data.get('Title', '')
            description = item_data.get('Description', '')
            brand = item_data.get('BrandName', '')
            vendor = item_data.get('VendorName', '')
            
            cursor.execute('''
                UPDATE products 
                SET title = ?, description = ?, brand = ?, vendor = ?, 
                    parsed_at = datetime('now')
                WHERE item_id = ?
            ''', (
                title, description, brand, vendor, item_id
            ))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.update_images(cursor, item_id, item_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            self.update_specifications(cursor, item_id, item_data)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {item_id}: {e}")
    
    def add_working_product(self, cursor, item_id, product):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ chunk"""
        try:
            raw_data = product.get('raw_data', {})
            item_data = raw_data.get('Item', {})
            
            if not isinstance(item_data, dict):
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            title = item_data.get('Title', '')
            description = item_data.get('Description', '')
            brand = item_data.get('BrandName', '')
            vendor = item_data.get('VendorName', '')
            category_id = item_data.get('CategoryId', '')
            external_category_id = item_data.get('ExternalCategoryId', '')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
            cursor.execute('''
                INSERT INTO products (
                    item_id, title, description, brand, vendor,
                    category_id, external_category_id,
                    parsed_at, chunk_source, chunk_type
                ) VALUES (?, ?, ?, ?, ?, ?, ?, datetime('now'), 'working', 'original')
            ''', (
                item_id, title, description, brand, vendor,
                category_id, external_category_id
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            self.update_images(cursor, item_id, item_data)
            self.update_specifications(cursor, item_id, item_data)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {item_id}: {e}")
    
    def update_images(self, cursor, item_id, item_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            cursor.execute('DELETE FROM images WHERE item_id = ?', (item_id,))
            
            # –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            main_image = item_data.get('MainPictureUrl', '')
            if main_image:
                cursor.execute('''
                    INSERT INTO images (item_id, image_url, image_type, is_main, width, height)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (item_id, main_image, 'main', True, None, None))
                self.stats['images_added'] += 1
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            pictures = item_data.get('Pictures', [])
            if isinstance(pictures, list):
                for picture in pictures:
                    if isinstance(picture, dict):
                        url = picture.get('Url', '')
                        if url:
                            cursor.execute('''
                                INSERT INTO images (item_id, image_url, image_type, is_main, width, height)
                                VALUES (?, ?, ?, ?, ?, ?)
                            ''', (item_id, url, 'gallery', False, None, None))
                            self.stats['images_added'] += 1
                            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π {item_id}: {e}")
    
    def update_specifications(self, cursor, item_id, item_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            cursor.execute('DELETE FROM specifications WHERE item_id = ?', (item_id,))
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            attributes = item_data.get('Attributes', [])
            if isinstance(attributes, list):
                for attr in attributes:
                    if isinstance(attr, dict):
                        name = attr.get('PropertyName', '')
                        value = attr.get('Value', '')
                        if name and value:
                            cursor.execute('''
                                INSERT INTO specifications (item_id, spec_name, spec_value, spec_type, is_required)
                                VALUES (?, ?, ?, ?, ?)
                            ''', (item_id, name, str(value), 'attribute', False))
                            self.stats['specs_added'] += 1
            
            # –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            physical = item_data.get('PhysicalParameters', {})
            if isinstance(physical, dict):
                for key, value in physical.items():
                    if value:
                        cursor.execute('''
                            INSERT INTO specifications (item_id, spec_name, spec_value, spec_type, is_required)
                            VALUES (?, ?, ?, ?, ?)
                        ''', (item_id, f'Physical_{key}', str(value), 'physical', False))
                        self.stats['specs_added'] += 1
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Å–µ
            weight_info = item_data.get('ActualWeightInfo', {})
            if isinstance(weight_info, dict):
                for key, value in weight_info.items():
                    if value:
                        cursor.execute('''
                            INSERT INTO specifications (item_id, spec_name, spec_value, spec_type, is_required)
                            VALUES (?, ?, ?, ?, ?)
                        ''', (item_id, f'Weight_{key}', str(value), 'weight', False))
                        self.stats['specs_added'] += 1
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            additional_specs = [
                ('BrandName', item_data.get('BrandName', '')),
                ('VendorName', item_data.get('VendorName', '')),
                ('CategoryId', item_data.get('CategoryId', '')),
                ('StuffStatus', item_data.get('StuffStatus', '')),
                ('MasterQuantity', item_data.get('MasterQuantity', ''))
            ]
            
            for name, value in additional_specs:
                if value and str(value).strip():
                    cursor.execute('''
                        INSERT INTO specifications (item_id, spec_name, spec_value, spec_type, is_required)
                        VALUES (?, ?, ?, ?, ?)
                    ''', (item_id, name, str(value), 'additional', False))
                    self.stats['specs_added'] += 1
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ {item_id}: {e}")
    
    def print_statistics(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è"""
        print("\n" + "="*60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø –†–ê–ë–û–ß–ò–• CHUNKS")
        print("="*60)
        print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ chunks: {self.stats['total_chunks']}")
        print(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {self.stats['total_products']}")
        print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {self.stats['products_added']}")
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {self.stats['products_updated']}")
        print(f"üñºÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {self.stats['images_added']}")
        print(f"üìã –î–æ–±–∞–≤–ª–µ–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {self.stats['specs_added']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
        self.check_final_database_state()
    
    def check_final_database_state(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('SELECT COUNT(*) FROM products')
            total_products = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM images')
            total_images = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM specifications')
            total_specs = cursor.fetchone()[0]
            
            cursor.execute('''
                SELECT COUNT(*) FROM products p 
                WHERE NOT EXISTS (SELECT 1 FROM images i WHERE i.item_id = p.item_id)
            ''')
            products_without_images = cursor.fetchone()[0]
            
            cursor.execute('''
                SELECT COUNT(*) FROM products p 
                WHERE NOT EXISTS (SELECT 1 FROM specifications s WHERE s.item_id = p.item_id)
            ''')
            products_without_specs = cursor.fetchone()[0]
            
            conn.close()
            
            print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ë–î:")
            print(f"   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products:,}")
            print(f"   –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images:,}")
            print(f"   –í—Å–µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {total_specs:,}")
            print(f"   –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {products_without_images:,}")
            print(f"   –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {products_without_specs:,}")
            print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {(total_products - products_without_images)/total_products*100:.1f}%")
            print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏: {(total_products - products_without_specs)/total_products*100:.1f}%")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    merger = WorkingChunksMerger()
    
    if merger.merge_working_chunks():
        print("\n‚úÖ –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –†–ê–ë–û–ß–ò–• CHUNKS –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!")
    else:
        print("\n‚ùå –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò!")

if __name__ == "__main__":
    main()
