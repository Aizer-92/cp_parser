#!/usr/bin/env python3
"""
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è 1688.com —á–µ—Ä–µ–∑ OTAPI API
"""
import requests
import time
import random
import json
import logging
from urllib.parse import urlparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class OTAPIParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è 1688.com —á–µ—Ä–µ–∑ OTAPI API"""
    
    def __init__(self):
        self.session = requests.Session()
        self.base_url = "http://otapi.net/service-json/BatchGetItemFullInfo"
        self.instance_key = "5bde2d7b-250e-4a48-ad4c-ec18d4e40bed"
        self.language = "ru"
        
        self.user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        ]
    
    def parse_product(self, item_id):
        """–ü–∞—Ä—Å–∏—Ç —Ç–æ–≤–∞—Ä –ø–æ ID —á–µ—Ä–µ–∑ OTAPI API"""
        try:
            print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ {item_id} —á–µ—Ä–µ–∑ OTAPI API...")
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å abb- –µ—Å–ª–∏ –µ—Å—Ç—å
            if str(item_id).startswith('abb-'):
                item_id = str(item_id)[4:]
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            params = {
                'instanceKey': self.instance_key,
                'language': self.language,
                'signature': '',
                'timestamp': '',
                'sessionId': '',
                'itemParameters': '',
                'itemId': f'abb-{item_id}',
                'blockList': 'Description'  # –ò—Å–∫–ª—é—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
            }
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = {
                'User-Agent': random.choice(self.user_agents),
                'Accept': 'application/json, text/plain, */*',
                'Accept-Language': 'en-US,en;q=0.9',
                'Accept-Encoding': 'gzip, deflate',
                'Connection': 'keep-alive',
                'Referer': 'http://otapi.net/',
            }
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(random.uniform(0.5, 1.0))
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = self.session.get(self.base_url, params=params, headers=headers, timeout=30)
            
            if response.status_code == 200:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è {item_id}")
                
                try:
                    # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
                    data = response.json()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
                    if data.get('ErrorCode') == 'Ok':
                        result = self.process_otapi_response(data, item_id)
                        return result
                    else:
                        print(f"‚ùå API –æ—à–∏–±–∫–∞ –¥–ª—è {item_id}: {data.get('ErrorCode')}")
                        return None
                        
                except json.JSONDecodeError as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è {item_id}: {e}")
                    return None
            else:
                print(f"‚ùå HTTP {response.status_code} –¥–ª—è {item_id}")
                return None
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞ {item_id}: {e}")
            return None
    
    def process_otapi_response(self, data, item_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç OTAPI API"""
        try:
            result = data.get('Result', {})
            item = result.get('Item', {})
            
            if not item:
                print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Item –¥–ª—è {item_id}")
                return None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ —á—Ç–æ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ chunks
            parsed_item = {
                'id': f'abb-{item_id}',
                'item_id': item_id,
                'url': f'https://detail.1688.com/offer/{item_id}.html',
                'title': item.get('Title', ''),
                'status': 'success',
                'raw_data': {
                    'Item': item
                }
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏
            print(f"   üìã –ò–∑–≤–ª–µ—á–µ–Ω–æ:")
            print(f"      –ó–∞–≥–æ–ª–æ–≤–æ–∫: {len(item.get('Title', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {len(item.get('Description', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"      –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(item.get('Pictures', []))}")
            print(f"      –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {len(item.get('Attributes', []))}")
            print(f"      –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {len(item.get('PhysicalParameters', {}))}")
            print(f"      –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Å–µ: {len(item.get('ActualWeightInfo', {}))}")
            print(f"      –ë—Ä–µ–Ω–¥: {item.get('BrandName', '–ù–ï–¢')}")
            print(f"      –ü–æ—Å—Ç–∞–≤—â–∏–∫: {item.get('VendorName', '–ù–ï–¢')}")
            
            return parsed_item
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {item_id}: {e}")
            return None
    
    def parse_batch(self, item_ids, batch_size=100):
        """–ü–∞—Ä—Å–∏—Ç –±–∞—Ç—á —Ç–æ–≤–∞—Ä–æ–≤"""
        print(f"üöÄ –ü–ê–†–°–ò–ù–ì –ë–ê–¢–ß–ê: {len(item_ids)} —Ç–æ–≤–∞—Ä–æ–≤")
        print("=" * 60)
        
        results = []
        errors = 0
        
        for i, item_id in enumerate(item_ids):
            try:
                result = self.parse_product(item_id)
                if result:
                    results.append(result)
                    print(f"‚úÖ [{i+1}/{len(item_ids)}] –¢–æ–≤–∞—Ä {item_id} —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω")
                else:
                    errors += 1
                    print(f"‚ùå [{i+1}/{len(item_ids)}] –¢–æ–≤–∞—Ä {item_id} –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å")
                
                # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
                if i < len(item_ids) - 1:
                    print("-" * 40)
                    
            except Exception as e:
                errors += 1
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {item_id}: {e}")
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–†–°–ò–ù–ì–ê –ë–ê–¢–ß–ê:")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {len(results)}")
        print(f"   –û—à–∏–±–æ–∫: {errors}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {len(results)/len(item_ids)*100:.1f}%")
        
        return results

def test_otapi_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç OTAPI –ø–∞—Ä—Å–µ—Ä"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OTAPI –ü–ê–†–°–ï–†–ê")
    print("=" * 60)
    
    parser = OTAPIParser()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ ID (—Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å 1688.com)
    test_ids = [
        '631212367701',  # –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è –æ—Ç–∫—Ä—ã–≤–∞—à–∫–∞ –∏–∑ API –ø—Ä–∏–º–µ—Ä–∞
        '701929814435',  # –ò–≥—Ä—É—à–∫–∞ –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ chunk
        '733742816146'   # –ï—â–µ –æ–¥–∏–Ω –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ chunk
    ]
    
    results = parser.parse_batch(test_ids)
    
    if results:
        print(f"\nüìã –ü–†–ò–ú–ï–† –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
        example = results[0]
        print(f"   ID: {example['id']}")
        print(f"   Title: {example['title'][:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É raw_data
        raw_data = example.get('raw_data', {})
        item = raw_data.get('Item', {})
        
        print(f"   Raw data keys: {list(item.keys())}")
        print(f"   Attributes count: {len(item.get('Attributes', []))}")
        print(f"   Pictures count: {len(item.get('Pictures', []))}")

if __name__ == "__main__":
    test_otapi_parser()
