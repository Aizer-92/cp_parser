#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–∏—Å–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î
"""
import sqlite3
from pathlib import Path
import re

class DescriptionChecker:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î"""
    
    def __init__(self):
        self.data_dir = Path("data")
        self.results_dir = self.data_dir / "results"
        self.db_path = self.results_dir / "all_chunks_database.db"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_products': 0,
            'with_descriptions': 0,
            'without_descriptions': 0,
            'empty_descriptions': 0,
            'html_descriptions': 0,
            'long_descriptions': 0,
            'short_descriptions': 0,
            'avg_description_length': 0
        }
    
    def check_descriptions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            print("üîç –ü–†–û–í–ï–†–ö–ê –û–ü–ò–°–ê–ù–ò–ô –¢–û–í–ê–†–û–í –í –ë–î")
            print("=" * 60)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.get_basic_stats(cursor)
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–ø–∏—Å–∞–Ω–∏–π
            self.analyze_description_quality(cursor)
            
            # –ü—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π
            self.show_description_examples(cursor)
            
            # –ê–Ω–∞–ª–∏–∑ HTML –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö
            self.analyze_html_in_descriptions(cursor)
            
            conn.close()
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.print_final_statistics()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    def get_basic_stats(self, cursor):
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("üìä –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ü–ò–°–ê–ù–ò–ô")
        print("-" * 40)
        
        cursor.execute('SELECT COUNT(*) FROM products')
        total_products = cursor.fetchone()[0]
        self.stats['total_products'] = total_products
        
        cursor.execute('SELECT COUNT(*) FROM products WHERE description IS NOT NULL AND description != ""')
        with_descriptions = cursor.fetchone()[0]
        self.stats['with_descriptions'] = with_descriptions
        
        cursor.execute('SELECT COUNT(*) FROM products WHERE description IS NULL OR description = ""')
        without_descriptions = cursor.fetchone()[0]
        self.stats['without_descriptions'] = without_descriptions
        
        print(f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products:,}")
        print(f"üìù –° –æ–ø–∏—Å–∞–Ω–∏—è–º–∏: {with_descriptions:,} ({with_descriptions/total_products*100:.1f}%)")
        print(f"‚ùå –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π: {without_descriptions:,} ({without_descriptions/total_products*100:.1f}%)")
        print()
    
    def analyze_description_quality(self, cursor):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ–ø–∏—Å–∞–Ω–∏–π"""
        print("üìä –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –û–ü–ò–°–ê–ù–ò–ô")
        print("-" * 40)
        
        # –î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–π
        cursor.execute('''
            SELECT 
                COUNT(*) as total,
                AVG(LENGTH(description)) as avg_length,
                MIN(LENGTH(description)) as min_length,
                MAX(LENGTH(description)) as max_length
            FROM products 
            WHERE description IS NOT NULL AND description != ""
        ''')
        
        result = cursor.fetchone()
        if result and result[0] > 0:
            total, avg_len, min_len, max_len = result
            self.stats['avg_description_length'] = avg_len
            
            print(f"üìè –î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–π:")
            print(f"   –°—Ä–µ–¥–Ω—è—è: {avg_len:.1f} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {min_len} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max_len:,} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –¥–ª–∏–Ω–µ
            cursor.execute('''
                SELECT 
                    CASE 
                        WHEN LENGTH(description) < 50 THEN '–ö–æ—Ä–æ—Ç–∫–∏–µ (<50)'
                        WHEN LENGTH(description) < 200 THEN '–°—Ä–µ–¥–Ω–∏–µ (50-200)'
                        WHEN LENGTH(description) < 1000 THEN '–î–ª–∏–Ω–Ω—ã–µ (200-1000)'
                        ELSE '–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ (>1000)'
                    END as category,
                    COUNT(*) as count
                FROM products 
                WHERE description IS NOT NULL AND description != ""
                GROUP BY category
                ORDER BY count DESC
            ''')
            
            categories = cursor.fetchall()
            print(f"\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ:")
            for category, count in categories:
                print(f"   {category}: {count:,} ({count/total*100:.1f}%)")
                if '–ö–æ—Ä–æ—Ç–∫–∏–µ' in category:
                    self.stats['short_descriptions'] = count
                elif '–î–ª–∏–Ω–Ω—ã–µ' in category or '–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ' in category:
                    self.stats['long_descriptions'] += count
        
        print()
    
    def show_description_examples(self, cursor):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π"""
        print("üìã –ü–†–ò–ú–ï–†–´ –û–ü–ò–°–ê–ù–ò–ô")
        print("-" * 40)
        
        # –ö–æ—Ä–æ—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
        cursor.execute('''
            SELECT title, description, LENGTH(description) as len
            FROM products 
            WHERE description IS NOT NULL AND description != "" AND LENGTH(description) < 100
            ORDER BY LENGTH(description) ASC
            LIMIT 5
        ''')
        
        short_descriptions = cursor.fetchall()
        if short_descriptions:
            print("üìù –ö–û–†–û–¢–ö–ò–ï –û–ü–ò–°–ê–ù–ò–Ø (<100 —Å–∏–º–≤–æ–ª–æ–≤):")
            for i, (title, desc, length) in enumerate(short_descriptions):
                print(f"   {i+1}. [{length} —Å–∏–º–≤–æ–ª–æ–≤] {title[:50]}...")
                print(f"       –û–ø–∏—Å–∞–Ω–∏–µ: {desc}")
                print()
        
        # –°—Ä–µ–¥–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
        cursor.execute('''
            SELECT title, description, LENGTH(description) as len
            FROM products 
            WHERE description IS NOT NULL AND description != "" 
                AND LENGTH(description) BETWEEN 100 AND 500
            ORDER BY LENGTH(description) ASC
            LIMIT 3
        ''')
        
        medium_descriptions = cursor.fetchall()
        if medium_descriptions:
            print("üìù –°–†–ï–î–ù–ò–ï –û–ü–ò–°–ê–ù–ò–Ø (100-500 —Å–∏–º–≤–æ–ª–æ–≤):")
            for i, (title, desc, length) in enumerate(medium_descriptions):
                print(f"   {i+1}. [{length} —Å–∏–º–≤–æ–ª–æ–≤] {title[:50]}...")
                print(f"       –û–ø–∏—Å–∞–Ω–∏–µ: {desc[:200]}...")
                print()
        
        # –î–ª–∏–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
        cursor.execute('''
            SELECT title, description, LENGTH(description) as len
            FROM products 
            WHERE description IS NOT NULL AND description != "" AND LENGTH(description) > 1000
            ORDER BY LENGTH(description) DESC
            LIMIT 3
        ''')
        
        long_descriptions = cursor.fetchall()
        if long_descriptions:
            print("üìù –î–õ–ò–ù–ù–´–ï –û–ü–ò–°–ê–ù–ò–Ø (>1000 —Å–∏–º–≤–æ–ª–æ–≤):")
            for i, (title, desc, length) in enumerate(long_descriptions):
                print(f"   {i+1}. [{length} —Å–∏–º–≤–æ–ª–æ–≤] {title[:50]}...")
                print(f"       –ù–∞—á–∞–ª–æ: {desc[:300]}...")
                print()
    
    def analyze_html_in_descriptions(self, cursor):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç HTML –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö"""
        print("üåê –ê–ù–ê–õ–ò–ó HTML –í –û–ü–ò–°–ê–ù–ò–Ø–•")
        print("-" * 40)
        
        # –ü–æ–∏—Å–∫ HTML —Ç–µ–≥–æ–≤
        cursor.execute('''
            SELECT COUNT(*) FROM products 
            WHERE description LIKE '%<%' OR description LIKE '%>%'
        ''')
        
        html_count = cursor.fetchone()[0]
        self.stats['html_descriptions'] = html_count
        
        print(f"üåê –û–ø–∏—Å–∞–Ω–∏—è —Å HTML —Ç–µ–≥–∞–º–∏: {html_count:,} ({html_count/self.stats['with_descriptions']*100:.1f}%)")
        
        if html_count > 0:
            # –ü—Ä–∏–º–µ—Ä—ã HTML –æ–ø–∏—Å–∞–Ω–∏–π
            cursor.execute('''
                SELECT title, description
                FROM products 
                WHERE description LIKE '%<%' OR description LIKE '%>%'
                LIMIT 3
            ''')
            
            html_examples = cursor.fetchall()
            print(f"\nüìã –ü–†–ò–ú–ï–†–´ HTML –û–ü–ò–°–ê–ù–ò–ô:")
            for i, (title, desc) in enumerate(html_examples):
                print(f"   {i+1}. {title[:50]}...")
                print(f"       HTML: {desc[:300]}...")
                print()
        
        print()
    
    def print_final_statistics(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("=" * 60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ü–ò–°–ê–ù–ò–ô")
        print("=" * 60)
        print(f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {self.stats['total_products']:,}")
        print(f"üìù –° –æ–ø–∏—Å–∞–Ω–∏—è–º–∏: {self.stats['with_descriptions']:,} ({self.stats['with_descriptions']/self.stats['total_products']*100:.1f}%)")
        print(f"‚ùå –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π: {self.stats['without_descriptions']:,} ({self.stats['without_descriptions']/self.stats['total_products']*100:.1f}%)")
        print(f"üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {self.stats['avg_description_length']:.1f} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üåê –° HTML —Ç–µ–≥–∞–º–∏: {self.stats['html_descriptions']:,}")
        print(f"üìù –ö–æ—Ä–æ—Ç–∫–∏–µ (<100): {self.stats['short_descriptions']:,}")
        print(f"üìù –î–ª–∏–Ω–Ω—ã–µ (>200): {self.stats['long_descriptions']:,}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if self.stats['without_descriptions'] > 0:
            print(f"   ‚ö†Ô∏è  {self.stats['without_descriptions']} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π - –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–∞—Ä—Å–∏—Ç—å")
        if self.stats['html_descriptions'] > 0:
            print(f"   ‚úÖ {self.stats['html_descriptions']} –æ–ø–∏—Å–∞–Ω–∏–π —Å–æ–¥–µ—Ä–∂–∞—Ç HTML - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è 1688.com")
        if self.stats['avg_description_length'] < 100:
            print(f"   ‚ö†Ô∏è  –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–π {self.stats['avg_description_length']:.1f} - –≤–æ–∑–º–æ–∂–Ω–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = DescriptionChecker()
    checker.check_descriptions()

if __name__ == "__main__":
    main()
