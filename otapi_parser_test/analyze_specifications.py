#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ –ë–î –∏ –ø–æ–∏—Å–∫–∞ JSON –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
"""
import sqlite3
import json
import re
from pathlib import Path
from collections import Counter

class SpecificationsAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ –ë–î"""
    
    def __init__(self):
        self.data_dir = Path("data")
        self.results_dir = self.data_dir / "results"
        self.db_path = self.results_dir / "all_chunks_database.db"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_specs': 0,
            'json_artifacts': 0,
            'empty_values': 0,
            'very_long_values': 0,
            'suspicious_patterns': 0,
            'spec_types': Counter(),
            'top_spec_names': Counter(),
            'top_spec_values': Counter()
        }
    
    def analyze_specifications(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –ë–î"""
        try:
            print("üîç –ê–ù–ê–õ–ò–ó –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö –í –ë–î")
            print("=" * 60)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.get_basic_stats(cursor)
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞ JSON –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
            self.find_json_artifacts(cursor)
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            self.find_suspicious_patterns(cursor)
            
            # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            self.analyze_spec_types(cursor)
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π
            self.analyze_names_and_values(cursor)
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            self.detailed_analysis(cursor)
            
            conn.close()
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.print_final_statistics()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def get_basic_stats(self, cursor):
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("üìä –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("-" * 40)
        
        cursor.execute('SELECT COUNT(*) FROM specifications')
        total_specs = cursor.fetchone()[0]
        self.stats['total_specs'] = total_specs
        
        cursor.execute('SELECT COUNT(DISTINCT item_id) FROM specifications')
        items_with_specs = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM products')
        total_products = cursor.fetchone()[0]
        
        print(f"üìã –í—Å–µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {total_specs:,}")
        print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏: {items_with_specs:,}")
        print(f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products:,}")
        print(f"üìä –°—Ä–µ–¥–Ω–µ–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞ —Ç–æ–≤–∞—Ä: {total_specs/items_with_specs:.1f}")
        print()
    
    def find_json_artifacts(self, cursor):
        """–ò—â–µ—Ç JSON –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö"""
        print("üîç –ü–û–ò–°–ö JSON –ê–†–¢–ï–§–ê–ö–¢–û–í")
        print("-" * 40)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ JSON –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        json_patterns = [
            r'\{.*\}',  # –§–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏
            r'\[.*\]',  # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏
            r'"[^"]*":\s*"[^"]*"',  # JSON –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
            r'\\"',  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
            r'\\/',  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–µ—à–∏
            r'\\n',  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
            r'\\t',  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–±—ã
            r'\\u[0-9a-fA-F]{4}',  # Unicode escape
        ]
        
        json_artifacts = []
        
        cursor.execute('SELECT spec_name, spec_value, spec_type FROM specifications LIMIT 10000')
        specs = cursor.fetchall()
        
        for spec_name, spec_value, spec_type in specs:
            if not spec_value:
                continue
                
            spec_str = str(spec_value)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
            for pattern in json_patterns:
                if re.search(pattern, spec_str):
                    json_artifacts.append({
                        'name': spec_name,
                        'value': spec_str[:200] + '...' if len(spec_str) > 200 else spec_str,
                        'type': spec_type,
                        'pattern': pattern
                    })
                    self.stats['json_artifacts'] += 1
                    break
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ JSON –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: {self.stats['json_artifacts']}")
        
        if json_artifacts:
            print("\nüìã –ü–†–ò–ú–ï–†–´ JSON –ê–†–¢–ï–§–ê–ö–¢–û–í:")
            for i, artifact in enumerate(json_artifacts[:10]):
                print(f"   {i+1}. {artifact['name']} = {artifact['value']}")
                print(f"      –¢–∏–ø: {artifact['type']}, –ü–∞—Ç—Ç–µ—Ä–Ω: {artifact['pattern']}")
        
        print()
    
    def find_suspicious_patterns(self, cursor):
        """–ò—â–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        print("üö® –ü–û–ò–°–ö –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í")
        print("-" * 40)
        
        suspicious_patterns = [
            r'\\[a-zA-Z]',  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            r'&[a-zA-Z]+;',  # HTML entities
            r'<[^>]+>',  # HTML —Ç–µ–≥–∏
            r'[^\x00-\x7F]+',  # –ù–µ-ASCII —Å–∏–º–≤–æ–ª—ã (–∫–∏—Ç–∞–π—Å–∫–∏–µ)
            r'[A-Za-z0-9]{20,}',  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –±—É–∫–≤/—Ü–∏—Ñ—Ä
        ]
        
        suspicious_count = 0
        
        cursor.execute('SELECT spec_name, spec_value, spec_type FROM specifications LIMIT 10000')
        specs = cursor.fetchall()
        
        for spec_name, spec_value, spec_type in specs:
            if not spec_value:
                continue
                
            spec_str = str(spec_value)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            for pattern in suspicious_patterns:
                if re.search(pattern, spec_str):
                    suspicious_count += 1
                    break
        
        self.stats['suspicious_patterns'] = suspicious_count
        print(f"üö® –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {suspicious_count}")
        print()
    
    def analyze_spec_types(self, cursor):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        print("üìä –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö")
        print("-" * 40)
        
        cursor.execute('''
            SELECT spec_type, COUNT(*) as count 
            FROM specifications 
            GROUP BY spec_type 
            ORDER BY count DESC
        ''')
        
        spec_types = cursor.fetchall()
        
        for spec_type, count in spec_types:
            self.stats['spec_types'][spec_type] = count
            print(f"   {spec_type}: {count:,} ({count/self.stats['total_specs']*100:.1f}%)")
        
        print()
    
    def analyze_names_and_values(self, cursor):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        print("üìã –ê–ù–ê–õ–ò–ó –ù–ê–ó–í–ê–ù–ò–ô –ò –ó–ù–ê–ß–ï–ù–ò–ô")
        print("-" * 40)
        
        # –¢–æ–ø –Ω–∞–∑–≤–∞–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        cursor.execute('''
            SELECT spec_name, COUNT(*) as count 
            FROM specifications 
            GROUP BY spec_name 
            ORDER BY count DESC 
            LIMIT 20
        ''')
        
        top_names = cursor.fetchall()
        print("üèÜ –¢–û–ü-20 –ù–ê–ó–í–ê–ù–ò–ô –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö:")
        for i, (name, count) in enumerate(top_names):
            self.stats['top_spec_names'][name] = count
            print(f"   {i+1:2d}. {name}: {count:,}")
        
        print()
        
        # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        cursor.execute('''
            SELECT spec_name, spec_value, LENGTH(spec_value) as len
            FROM specifications 
            WHERE LENGTH(spec_value) > 100
            ORDER BY len DESC 
            LIMIT 10
        ''')
        
        long_values = cursor.fetchall()
        print("üìè –¢–û–ü-10 –°–ê–ú–´–• –î–õ–ò–ù–ù–´–• –ó–ù–ê–ß–ï–ù–ò–ô:")
        for i, (name, value, length) in enumerate(long_values):
            self.stats['very_long_values'] += 1
            print(f"   {i+1:2d}. {name}: {length} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"       –ó–Ω–∞—á–µ–Ω–∏–µ: {str(value)[:100]}...")
        
        print()
        
        # –ê–Ω–∞–ª–∏–∑ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        cursor.execute('''
            SELECT COUNT(*) FROM specifications 
            WHERE spec_value IS NULL OR spec_value = '' OR spec_value = '–ù–ï–¢'
        ''')
        
        empty_count = cursor.fetchone()[0]
        self.stats['empty_values'] = empty_count
        print(f"üì≠ –ü—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {empty_count:,} ({empty_count/self.stats['total_specs']*100:.1f}%)")
        print()
    
    def detailed_analysis(self, cursor):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        print("üî¨ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö")
        print("-" * 40)
        
        # –ò—â–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        cursor.execute('''
            SELECT spec_name, spec_value, spec_type, item_id
            FROM specifications 
            WHERE LENGTH(spec_value) > 500
            ORDER BY LENGTH(spec_value) DESC 
            LIMIT 5
        ''')
        
        very_long = cursor.fetchall()
        if very_long:
            print("üìè –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –° –û–ß–ï–ù–¨ –î–õ–ò–ù–ù–´–ú–ò –ó–ù–ê–ß–ï–ù–ò–Ø–ú–ò (>500 —Å–∏–º–≤–æ–ª–æ–≤):")
            for i, (name, value, spec_type, item_id) in enumerate(very_long):
                print(f"   {i+1}. {name} (—Ç–∏–ø: {spec_type}, —Ç–æ–≤–∞—Ä: {item_id})")
                print(f"       –î–ª–∏–Ω–∞: {len(str(value))} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"       –ù–∞—á–∞–ª–æ: {str(value)[:200]}...")
                print()
        
        # –ò—â–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å HTML —Ç–µ–≥–∞–º–∏
        cursor.execute('''
            SELECT spec_name, spec_value, spec_type, item_id
            FROM specifications 
            WHERE spec_value LIKE '%<%' OR spec_value LIKE '%>%'
            LIMIT 5
        ''')
        
        html_specs = cursor.fetchall()
        if html_specs:
            print("üåê –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –° HTML –¢–ï–ì–ê–ú–ò:")
            for i, (name, value, spec_type, item_id) in enumerate(html_specs):
                print(f"   {i+1}. {name} (—Ç–∏–ø: {spec_type}, —Ç–æ–≤–∞—Ä: {item_id})")
                print(f"       –ó–Ω–∞—á–µ–Ω–∏–µ: {str(value)[:200]}...")
                print()
        
        # –ò—â–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å –∫–∏—Ç–∞–π—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        try:
            cursor.execute('''
                SELECT spec_name, spec_value, spec_type, item_id
                FROM specifications 
                WHERE spec_value LIKE '%[^\x00-\x7F]%'
                LIMIT 5
            ''')
            
            chinese_specs = cursor.fetchall()
            if chinese_specs:
                print("üá®üá≥ –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –° –ö–ò–¢–ê–ô–°–ö–ò–ú–ò –°–ò–ú–í–û–õ–ê–ú–ò:")
                for i, (name, value, spec_type, item_id) in enumerate(chinese_specs):
                    print(f"   {i+1}. {name} (—Ç–∏–ø: {spec_type}, —Ç–æ–≤–∞—Ä: {item_id})")
                    print(f"       –ó–Ω–∞—á–µ–Ω–∏–µ: {str(value)[:200]}...")
                    print()
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            print()
    
    def print_final_statistics(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("=" * 60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê")
        print("=" * 60)
        print(f"üìã –í—Å–µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {self.stats['total_specs']:,}")
        print(f"üö® JSON –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: {self.stats['json_artifacts']:,} ({self.stats['json_artifacts']/self.stats['total_specs']*100:.1f}%)")
        print(f"üì≠ –ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {self.stats['empty_values']:,} ({self.stats['empty_values']/self.stats['total_specs']*100:.1f}%)")
        print(f"üìè –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {self.stats['very_long_values']:,}")
        print(f"üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {self.stats['suspicious_patterns']:,}")
        
        print(f"\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ò–ü–ê–ú:")
        for spec_type, count in self.stats['spec_types'].most_common():
            print(f"   {spec_type}: {count:,} ({count/self.stats['total_specs']*100:.1f}%)")
        
        print(f"\nüèÜ –¢–û–ü-5 –ù–ê–ó–í–ê–ù–ò–ô –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö:")
        for name, count in self.stats['top_spec_names'].most_common(5):
            print(f"   {name}: {count:,}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if self.stats['json_artifacts'] > 0:
            print(f"   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {self.stats['json_artifacts']} JSON –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ - –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å")
        if self.stats['very_long_values'] > 0:
            print(f"   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {self.stats['very_long_values']} –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å")
        if self.stats['empty_values'] > 0:
            print(f"   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {self.stats['empty_values']} –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π - –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = SpecificationsAnalyzer()
    analyzer.analyze_specifications()

if __name__ == "__main__":
    main()
