#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–ª–µ–≤—ã—Ö –∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
"""

import sqlite3
import pandas as pd
from pathlib import Path

def analyze_data_quality():
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î"""
    
    db_path = Path(__file__).parent.parent / "promo_calculator" / "database" / "advanced_merged_products_clean.db"
    conn = sqlite3.connect(db_path)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "—Å—É–º–∫–∞"
    query = """
    SELECT 
        p.original_title,
        pv.cargo_density,
        pv.item_weight,
        pv.transport_tariff,
        pv.price_rub,
        pv.price_cny,
        pv.moq,
        pv.avg_requested_tirage
    FROM products p
    JOIN product_variants pv ON p.id = pv.product_id
    WHERE p.original_title LIKE '%—Å—É–º–∫–∞%' OR p.title LIKE '%—Å—É–º–∫–∞%'
    """
    
    df = pd.read_sql_query(query, conn)
    
    print("üîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–• –ü–û –ö–ê–¢–ï–ì–û–†–ò–ò '–°–£–ú–ö–ê'")
    print("=" * 60)
    print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
    print()
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
    metrics = {
        'cargo_density': '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (–∫–≥/–º¬≥)',
        'item_weight': '–í–µ—Å —Ç–æ–≤–∞—Ä–∞ (–∫–≥)',
        'transport_tariff': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç ($/–∫–≥)',
        'price_rub': '–¶–µ–Ω–∞ (‚ÇΩ)',
        'price_cny': '–¶–µ–Ω–∞ (¬•)',
        'moq': 'MOQ'
    }
    
    print("üìä –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–• –ü–û –ú–ï–¢–†–ò–ö–ê–ú:")
    print("-" * 60)
    
    for col, label in metrics.items():
        print(f"{label}:")
        
        total = len(df)
        na_count = df[col].isna().sum()
        zero_count = (df[col] == 0).sum()
        valid_count = ((df[col] > 0) & df[col].notna()).sum()
        
        print(f"  üìã –í—Å–µ–≥–æ: {total}")
        print(f"  ‚ùì –ü—É—Å—Ç—ã—Ö (NaN): {na_count} ({na_count/total*100:.1f}%)")
        print(f"  üö´ –ù—É–ª–µ–≤—ã—Ö: {zero_count} ({zero_count/total*100:.1f}%)")
        print(f"  ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö (>0): {valid_count} ({valid_count/total*100:.1f}%)")
        
        if valid_count > 0:
            valid_data = df[col][(df[col] > 0) & df[col].notna()]
            print(f"  üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö:")
            print(f"     –ú–∏–Ω: {valid_data.min():.3f}")
            print(f"     –ú–∞–∫—Å: {valid_data.max():.3f}")
            print(f"     –ú–µ–¥–∏–∞–Ω–∞: {valid_data.median():.3f}")
            print(f"     15-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: {valid_data.quantile(0.15):.3f}")
            print(f"     85-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: {valid_data.quantile(0.85):.3f}")
        
        print()
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é
    print("üö® –ü–†–û–ë–õ–ï–ú–ù–´–ï –ó–ê–ü–ò–°–ò –° –ù–ò–ó–ö–û–ô –ü–õ–û–¢–ù–û–°–¢–¨–Æ:")
    print("-" * 60)
    
    density_issues = df[(df['cargo_density'] > 0) & (df['cargo_density'] < 1)]
    if len(density_issues) > 0:
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(density_issues)} –∑–∞–ø–∏—Å–µ–π —Å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é < 1 –∫–≥/–º¬≥:")
        for idx, row in density_issues.head(5).iterrows():
            print(f"  ‚Ä¢ {row['original_title'][:50]}... –ø–ª–æ—Ç–Ω–æ—Å—Ç—å: {row['cargo_density']:.3f}")
    else:
        print("–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
    print("-" * 60)
    print("1. –ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø–∏—Å–∏ —Å NaN –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
    print("2. –ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø–∏—Å–∏ —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
    print("3. –î–ª—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏: –∏—Å–∫–ª—é—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ < 0.1 –∫–≥/–º¬≥ (–Ω–µ—Ä–µ–∞–ª—å–Ω—ã–µ)")
    print("4. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ")
    
    conn.close()
    
    return df

if __name__ == "__main__":
    analyze_data_quality()
