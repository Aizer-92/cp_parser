#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–û–ó–î–ê–ù–ò–ï EXCEL –û–¢–ß–ï–¢–ê –° –ì–ê–£–°–°–û–í–°–ö–ò–ú–ò –î–ò–ê–ü–ê–ó–û–ù–ê–ú–ò –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú
"""

import pandas as pd
import numpy as np
from pathlib import Path
from business_final_analyzer import BusinessFinalAnalyzer

def format_gaussian_range(ranges, field, format_type='currency'):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∞—É—Å—Å–æ–≤—Å–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    if field not in ranges:
        return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'
    
    r = ranges[field]
    
    if format_type == 'currency_rub':
        return f"{r['lower_70']:.0f} - {r['upper_70']:.0f} ‚ÇΩ"
    elif format_type == 'currency_cny':
        return f"{r['lower_70']:.1f} - {r['upper_70']:.1f} ¬•"
    elif format_type == 'currency_usd':
        return f"${r['lower_70']:.1f} - ${r['upper_70']:.1f}"
    elif format_type == 'number':
        return f"{r['lower_70']:.0f} - {r['upper_70']:.0f}"
    elif format_type == 'density':
        return f"{r['lower_70']:.1f} - {r['upper_70']:.1f}"
    else:
        return f"{r['lower_70']:.1f} - {r['upper_70']:.1f}"

def create_business_excel_report():
    """–°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞"""
    
    print("üéØ –°–û–ó–î–ê–ù–ò–ï –ë–ò–ó–ù–ï–°-EXCEL –° –†–ï–ê–õ–¨–ù–´–ú–ò 70% –î–ò–ê–ü–ê–ó–û–ù–ê–ú–ò")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
    db_path = Path(__file__).parent.parent / "promo_calculator" / "database" / "advanced_merged_products_clean.db"
    analyzer = BusinessFinalAnalyzer(db_path)
    
    try:
        stats, coverage, excluded_count, total_products = analyzer.run_business_analysis()
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Excel
        categories_data = []
        gaussian_details = []
        
        for stat in stats:
            type_label = "–û—Å–Ω–æ–≤–Ω–∞—è" if stat['—Ç–∏–ø'] == 'main' else "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"
            category_display = stat['–∫–∞—Ç–µ–≥–æ—Ä–∏—è'] if stat['—Ç–∏–ø'] == 'main' else f"‚îî‚îÄ {stat['–∫–∞—Ç–µ–≥–æ—Ä–∏—è']}"
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            categories_data.append({
                '–¢–∏–ø': type_label,
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category_display,
                '–†–æ–¥–∏—Ç–µ–ª—å': stat['—Ä–æ–¥–∏—Ç–µ–ª—å'] if stat['—Ç–∏–ø'] == 'sub' else '',
                '–¢–æ–≤–∞—Ä–æ–≤': stat['—Ç–æ–≤–∞—Ä—ã'],
                '–ú–µ–¥–∏–∞–Ω–∞ —Ü–µ–Ω—ã (‚ÇΩ)': f"{stat['–º–µ–¥–∏–∞–Ω–∞_—Ü–µ–Ω—ã_rub']:.0f}" if stat['–º–µ–¥–∏–∞–Ω–∞_—Ü–µ–Ω—ã_rub'] else '–Ω/–¥',
                '–ú–µ–¥–∏–∞–Ω–∞ —Ü–µ–Ω—ã (¬•)': f"{stat['–º–µ–¥–∏–∞–Ω–∞_—Ü–µ–Ω—ã_cny']:.1f}" if stat['–º–µ–¥–∏–∞–Ω–∞_—Ü–µ–Ω—ã_cny'] else '–Ω/–¥',
                '–°—Ä–µ–¥–Ω–∏–π —Ç–∏—Ä–∞–∂': f"{stat['—Å—Ä–µ–¥–Ω–∏–π_—Ç–∏—Ä–∞–∂']:.0f}" if stat['—Å—Ä–µ–¥–Ω–∏–π_—Ç–∏—Ä–∞–∂'] else '–Ω/–¥',
                '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (–∫–≥/–º¬≥)': f"{stat['–º–µ–¥–∏–∞–Ω–∞_–ø–ª–æ—Ç–Ω–æ—Å—Ç–∏']:.1f}" if stat['–º–µ–¥–∏–∞–Ω–∞_–ø–ª–æ—Ç–Ω–æ—Å—Ç–∏'] else '–Ω/–¥',
                '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç ($/–∫–≥)': f"${stat['–º–µ–¥–∏–∞–Ω–∞_—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞_usd']:.1f}" if stat['–º–µ–¥–∏–∞–Ω–∞_—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞_usd'] else '–Ω/–¥',
                
                # –†–µ–∞–ª—å–Ω—ã–µ 70% –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤
                '–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω (‚ÇΩ)': format_gaussian_range(stat['gaussian_ranges'], 'price_rub', 'currency_rub'),
                '–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω (¬•)': format_gaussian_range(stat['gaussian_ranges'], 'price_cny', 'currency_cny'),
                '–î–∏–∞–ø–∞–∑–æ–Ω —Ç–∏—Ä–∞–∂–µ–π': format_gaussian_range(stat['gaussian_ranges'], 'avg_requested_tirage', 'number'),
                '–î–∏–∞–ø–∞–∑–æ–Ω –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏': format_gaussian_range(stat['gaussian_ranges'], 'cargo_density', 'density'),
                '–î–∏–∞–ø–∞–∑–æ–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞': format_gaussian_range(stat['gaussian_ranges'], 'transport_tariff', 'currency_usd'),
            })
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ –≥–∞—É—Å—Å–æ–≤—Å–∫–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            if stat['gaussian_ranges']:
                for field, ranges in stat['gaussian_ranges'].items():
                    gaussian_details.append({
                        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': stat['–∫–∞—Ç–µ–≥–æ—Ä–∏—è'],
                        '–¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏': type_label,
                        '–ú–µ—Ç—Ä–∏–∫–∞': ranges['label'],
                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö': ranges['count'],
                        '–°—Ä–µ–¥–Ω–µ–µ': f"{ranges['mean']:.2f}",
                        '–°—Ç. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ': f"{ranges['std']:.2f}",
                        '–ú–µ–¥–∏–∞–Ω–∞': f"{ranges['median']:.2f}",
                        '–ú–∏–Ω–∏–º—É–º': f"{ranges['min']:.2f}",
                        '–ú–∞–∫—Å–∏–º—É–º': f"{ranges['max']:.2f}",
                        '70% –¥–∏–∞–ø–∞–∑–æ–Ω (–æ—Ç)': f"{ranges['lower_70']:.2f}",
                        '70% –¥–∏–∞–ø–∞–∑–æ–Ω (–¥–æ)': f"{ranges['upper_70']:.2f}",
                        '–î–∏–∞–ø–∞–∑–æ–Ω': f"{ranges['lower_70']:.1f} - {ranges['upper_70']:.1f}"
                    })
        
        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
        df_categories = pd.DataFrame(categories_data)
        df_gaussian = pd.DataFrame(gaussian_details)
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        main_categories = [stat for stat in stats if stat['—Ç–∏–ø'] == 'main']
        top_categories = sorted(main_categories, key=lambda x: x['—Ç–æ–≤–∞—Ä—ã'], reverse=True)[:20]
        
        top_data = []
        for i, stat in enumerate(top_categories, 1):
            top_data.append({
                '–ú–µ—Å—Ç–æ': i,
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': stat['–∫–∞—Ç–µ–≥–æ—Ä–∏—è'],
                '–¢–æ–≤–∞—Ä–æ–≤': stat['—Ç–æ–≤–∞—Ä—ã'],
                '% –æ—Ç –ë–î': f"{(stat['—Ç–æ–≤–∞—Ä—ã'] / (total_products - excluded_count) * 100):.1f}%",
                '–¶–µ–Ω–∞ (‚ÇΩ)': f"{stat['–º–µ–¥–∏–∞–Ω–∞_—Ü–µ–Ω—ã_rub']:.0f}" if stat['–º–µ–¥–∏–∞–Ω–∞_—Ü–µ–Ω—ã_rub'] else '–Ω/–¥',
                '–¢–∏—Ä–∞–∂': f"{stat['—Å—Ä–µ–¥–Ω–∏–π_—Ç–∏—Ä–∞–∂']:.0f}" if stat['—Å—Ä–µ–¥–Ω–∏–π_—Ç–∏—Ä–∞–∂'] else '–Ω/–¥',
                '–ì–∞—É—Å—Å–æ–≤—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω (‚ÇΩ)': format_gaussian_range(stat['gaussian_ranges'], 'price_rub', 'currency_rub'),
                '–ì–∞—É—Å—Å–æ–≤—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–∏—Ä–∞–∂–µ–π': format_gaussian_range(stat['gaussian_ranges'], 'avg_requested_tirage', 'number'),
            })
        
        df_top = pd.DataFrame(top_data)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_main_categories = len([s for s in stats if s['—Ç–∏–ø'] == 'main'])
        total_subcategories = len([s for s in stats if s['—Ç–∏–ø'] == 'sub'])
        
        summary_data = [
            ['–ë–ò–ó–ù–ï–°-–ê–ù–ê–õ–ò–ó –¢–û–í–ê–†–ù–´–• –ö–ê–¢–ï–ì–û–†–ò–ô', '', ''],
            ['–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞', '23 —Å–µ–Ω—Ç—è–±—Ä—è 2025', ''],
            ['', '', ''],
            ['–ü–û–ö–†–´–¢–ò–ï –¢–û–í–ê–†–û–í', '', ''],
            ['–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î', f'{total_products:,}', '100%'],
            ['–ò—Å–∫–ª—é—á–µ–Ω–æ —Å–ª—É–∂–µ–±–Ω—ã—Ö', f'{excluded_count:,}', '–æ–±—Ä–∞–∑—Ü—ã, –ª–æ–≥–æ'],
            ['–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ', f'{total_products - excluded_count:,}', '–æ—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞'],
            ['–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ', f'{sum(s["—Ç–æ–≤–∞—Ä—ã"] for s in stats):,}', f'{coverage:.1f}%'],
            ['', '', ''],
            ['–°–¢–†–£–ö–¢–£–†–ê –ö–ê–¢–ï–ì–û–†–ò–ô', '', ''],
            ['–û—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π', f'{total_main_categories}', '–≥–ª–∞–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã'],
            ['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π', f'{total_subcategories}', '–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è ‚â•20 —Ç–æ–≤–∞—Ä–æ–≤'],
            ['–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', f'{total_main_categories + total_subcategories}', '–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞'],
            ['', '', ''],
            ['–†–ï–ê–õ–¨–ù–´–ï 70% –î–ò–ê–ü–ê–ó–û–ù–´', '', ''],
            ['–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞—Å—á–µ—Ç–∞', '70% —Ç–æ–≤–∞—Ä–æ–≤', '15-85 –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª–∏'],
            ['–û—Ö–≤–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π', f'{len([s for s in stats if s["gaussian_ranges"]])}', '—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏'],
            ['–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ', '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–æ–∫'],
            ['', '', ''],
            ['–¢–û–ü-3 –ö–ê–¢–ï–ì–û–†–ò–ò', '', ''],
            ['‚Ññ1 –ø–æ –æ–±—ä–µ–º—É', top_data[0]['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] if top_data else '–Ω/–¥', f"{top_data[0]['–¢–æ–≤–∞—Ä–æ–≤']} —Ç–æ–≤–∞—Ä–æ–≤" if top_data else ''],
            ['‚Ññ2 –ø–æ –æ–±—ä–µ–º—É', top_data[1]['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] if len(top_data) > 1 else '–Ω/–¥', f"{top_data[1]['–¢–æ–≤–∞—Ä–æ–≤']} —Ç–æ–≤–∞—Ä–æ–≤" if len(top_data) > 1 else ''],
            ['‚Ññ3 –ø–æ –æ–±—ä–µ–º—É', top_data[2]['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] if len(top_data) > 2 else '–Ω/–¥', f"{top_data[2]['–¢–æ–≤–∞—Ä–æ–≤']} —Ç–æ–≤–∞—Ä–æ–≤" if len(top_data) > 2 else ''],
        ]
        
        df_summary = pd.DataFrame(summary_data, columns=['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ', '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ'])
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
        output_file = Path(__file__).parent / 'BUSINESS_ANALYSIS_WITH_GAUSSIAN.xlsx'
        
        with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
            # –õ–∏—Å—Ç 1: –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –≥–∞—É—Å—Å–æ–≤—Å–∫–∏–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
            df_categories.to_excel(writer, sheet_name='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏', index=False)
            
            # –õ–∏—Å—Ç 2: –¢–æ–ø-20 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            df_top.to_excel(writer, sheet_name='–¢–û–ü-20 –∫–∞—Ç–µ–≥–æ—Ä–∏–π', index=False)
            
            # –õ–∏—Å—Ç 3: –î–µ—Ç–∞–ª—å–Ω—ã–µ –≥–∞—É—Å—Å–æ–≤—Å–∫–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            df_gaussian.to_excel(writer, sheet_name='–î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã', index=False)
            
            # –õ–∏—Å—Ç 4: –°–≤–æ–¥–∫–∞
            df_summary.to_excel(writer, sheet_name='–°–≤–æ–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞', index=False)
        
        print(f"‚úÖ –ë–∏–∑–Ω–µ—Å-Excel —Å–æ–∑–¥–∞–Ω: {output_file}")
        print(f"üìä –õ–∏—Å—Ç—ã:")
        print(f"  1. '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏' - {len(df_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        print(f"  2. '–¢–û–ü-20 –∫–∞—Ç–µ–≥–æ—Ä–∏–π' - –ª–∏–¥–µ—Ä—ã —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏")
        print(f"  3. '–î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã' - {len(df_gaussian)} –≥–∞—É—Å—Å–æ–≤—Å–∫–∏—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π")
        print(f"  4. '–°–≤–æ–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞' - –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        print(f"")
        print(f"üéØ –ö–õ–Æ–ß–ï–í–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò:")
        print(f"  ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ 70% —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ")
        print(f"  ‚Ä¢ 15-85 –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        print(f"  ‚Ä¢ –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        print(f"  ‚Ä¢ –ú–µ–¥–∏–∞–Ω—ã –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ –≤—ã–±—Ä–æ—Å–∞–º")
        
        return output_file
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        analyzer.conn.close()

if __name__ == "__main__":
    create_business_excel_report()
