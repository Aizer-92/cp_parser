#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ –î–ò–ê–ü–ê–ó–û–ù–û–í –í –û–¢–î–ï–õ–¨–ù–´–• –°–¢–û–õ–ë–¶–ê–•
–£–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
"""

import sqlite3
import pandas as pd
import numpy as np
from pathlib import Path
from business_final_analyzer import BusinessFinalAnalyzer

def create_ranges_table():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö"""
    
    print("üéØ –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ –î–ò–ê–ü–ê–ó–û–ù–û–í –í –û–¢–î–ï–õ–¨–ù–´–• –°–¢–û–õ–ë–¶–ê–•")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    db_path = Path(__file__).parent.parent / "promo_calculator" / "database" / "advanced_merged_products_clean.db"
    analyzer = BusinessFinalAnalyzer(db_path)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    stats, coverage, excluded_count, total_products = analyzer.run_business_analysis()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
    ranges_data = []
    
    for stat in stats:
        if not stat.get('gaussian_ranges'):
            continue
            
        row = {
            '–¢–∏–ø': stat['—Ç–∏–ø'],
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': stat['–∫–∞—Ç–µ–≥–æ—Ä–∏—è'],
            '–†–æ–¥–∏—Ç–µ–ª—å': stat['—Ä–æ–¥–∏—Ç–µ–ª—å'],
            '–¢–æ–≤–∞—Ä–æ–≤': stat['—Ç–æ–≤–∞—Ä—ã'],
            '–ú–µ–¥–∏–∞–Ω–∞_—Ü–µ–Ω—ã_—Ä—É–±': stat.get('–º–µ–¥–∏–∞–Ω–∞_—Ü–µ–Ω—ã_rub'),
            '–ú–µ–¥–∏–∞–Ω–∞_—Ü–µ–Ω—ã_—é–∞–Ω—å': stat.get('–º–µ–¥–∏–∞–Ω–∞_—Ü–µ–Ω—ã_cny'),
            '–ú–µ–¥–∏–∞–Ω–∞_—Ç–∏—Ä–∞–∂–∞': stat.get('—Å—Ä–µ–¥–Ω–∏–π_—Ç–∏—Ä–∞–∂'),
            '–ú–µ–¥–∏–∞–Ω–∞_–ø–ª–æ—Ç–Ω–æ—Å—Ç–∏': stat.get('–º–µ–¥–∏–∞–Ω–∞_–ø–ª–æ—Ç–Ω–æ—Å—Ç–∏'),
            '–ú–µ–¥–∏–∞–Ω–∞_—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞': stat.get('–º–µ–¥–∏–∞–Ω–∞_—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞_usd'),
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
        for field, ranges in stat['gaussian_ranges'].items():
            if field == 'price_rub':
                row.update({
                    '–¶–µ–Ω–∞_—Ä—É–±_–º–∏–Ω': ranges['lower_70'],
                    '–¶–µ–Ω–∞_—Ä—É–±_–º–∞–∫—Å': ranges['upper_70'],
                    '–¶–µ–Ω–∞_—Ä—É–±_–º–µ–¥–∏–∞–Ω–∞': ranges['median'],
                    '–¶–µ–Ω–∞_—Ä—É–±_—Å—Ä–µ–¥–Ω–µ–µ': ranges['mean'],
                    '–¶–µ–Ω–∞_—Ä—É–±_—Å—Ç–¥': ranges['std'],
                    '–¶–µ–Ω–∞_—Ä—É–±_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': ranges['count']
                })
            elif field == 'price_cny':
                row.update({
                    '–¶–µ–Ω–∞_—é–∞–Ω—å_–º–∏–Ω': ranges['lower_70'],
                    '–¶–µ–Ω–∞_—é–∞–Ω—å_–º–∞–∫—Å': ranges['upper_70'],
                    '–¶–µ–Ω–∞_—é–∞–Ω—å_–º–µ–¥–∏–∞–Ω–∞': ranges['median'],
                    '–¶–µ–Ω–∞_—é–∞–Ω—å_—Å—Ä–µ–¥–Ω–µ–µ': ranges['mean'],
                    '–¶–µ–Ω–∞_—é–∞–Ω—å_—Å—Ç–¥': ranges['std'],
                    '–¶–µ–Ω–∞_—é–∞–Ω—å_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': ranges['count']
                })
            elif field == 'avg_requested_tirage':
                row.update({
                    '–¢–∏—Ä–∞–∂_–º–∏–Ω': ranges['lower_70'],
                    '–¢–∏—Ä–∞–∂_–º–∞–∫—Å': ranges['upper_70'],
                    '–¢–∏—Ä–∞–∂_–º–µ–¥–∏–∞–Ω–∞': ranges['median'],
                    '–¢–∏—Ä–∞–∂_—Å—Ä–µ–¥–Ω–µ–µ': ranges['mean'],
                    '–¢–∏—Ä–∞–∂_—Å—Ç–¥': ranges['std'],
                    '–¢–∏—Ä–∞–∂_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': ranges['count']
                })
            elif field == 'cargo_density':
                row.update({
                    '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å_–º–∏–Ω': ranges['lower_70'],
                    '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å_–º–∞–∫—Å': ranges['upper_70'],
                    '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å_–º–µ–¥–∏–∞–Ω–∞': ranges['median'],
                    '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å_—Å—Ä–µ–¥–Ω–µ–µ': ranges['mean'],
                    '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å_—Å—Ç–¥': ranges['std'],
                    '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': ranges['count']
                })
            elif field == 'transport_tariff':
                row.update({
                    '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç_–º–∏–Ω': ranges['lower_70'],
                    '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç_–º–∞–∫—Å': ranges['upper_70'],
                    '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç_–º–µ–¥–∏–∞–Ω–∞': ranges['median'],
                    '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç_—Å—Ä–µ–¥–Ω–µ–µ': ranges['mean'],
                    '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç_—Å—Ç–¥': ranges['std'],
                    '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': ranges['count']
                })
        
        ranges_data.append(row)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df_ranges = pd.DataFrame(ranges_data)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤
    df_ranges = df_ranges.sort_values('–¢–æ–≤–∞—Ä–æ–≤', ascending=False)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    output_file = Path(__file__).parent / "CATEGORIES_RANGES_TABLE.xlsx"
    
    with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
        df_ranges.to_excel(writer, sheet_name='–î–∏–∞–ø–∞–∑–æ–Ω—ã_–∫–∞—Ç–µ–≥–æ—Ä–∏–π', index=False)
        
        # –¢–û–ü-20 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        df_top20 = df_ranges.head(20)
        df_top20.to_excel(writer, sheet_name='–¢–û–ü_20_–∫–∞—Ç–µ–≥–æ—Ä–∏–π', index=False)
        
        # –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        df_main = df_ranges[df_ranges['–¢–∏–ø'] == 'main']
        df_main.to_excel(writer, sheet_name='–û—Å–Ω–æ–≤–Ω—ã–µ_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏', index=False)
        
        # –°–≤–æ–¥–∫–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
        summary_data = []
        for col in ['–¶–µ–Ω–∞_—Ä—É–±', '–¶–µ–Ω–∞_—é–∞–Ω—å', '–¢–∏—Ä–∞–∂', '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç']:
            min_col = f'{col}_–º–∏–Ω'
            max_col = f'{col}_–º–∞–∫—Å'
            median_col = f'{col}_–º–µ–¥–∏–∞–Ω–∞'
            count_col = f'{col}_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'
            
            if min_col in df_ranges.columns:
                valid_data = df_ranges[df_ranges[count_col].notna()]
                if len(valid_data) > 0:
                    summary_data.append({
                        '–ú–µ—Ç—Ä–∏–∫–∞': col,
                        '–ö–∞—Ç–µ–≥–æ—Ä–∏–π_—Å_–¥–∞–Ω–Ω—ã–º–∏': len(valid_data),
                        '–û–±—â–∏–π_–º–∏–Ω': valid_data[min_col].min(),
                        '–û–±—â–∏–π_–º–∞–∫—Å': valid_data[max_col].max(),
                        '–°—Ä–µ–¥–Ω—è—è_–º–µ–¥–∏–∞–Ω–∞': valid_data[median_col].mean(),
                        '–û–±—â–µ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ç–æ–≤–∞—Ä–æ–≤': valid_data[count_col].sum()
                    })
        
        df_summary = pd.DataFrame(summary_data)
        df_summary.to_excel(writer, sheet_name='–°–≤–æ–¥–∫–∞_–º–µ—Ç—Ä–∏–∫', index=False)
    
    print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω–∞: {output_file}")
    print(f"üìä –õ–∏—Å—Ç—ã:")
    print(f"  1. '–î–∏–∞–ø–∞–∑–æ–Ω—ã_–∫–∞—Ç–µ–≥–æ—Ä–∏–π' - {len(df_ranges)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏")
    print(f"  2. '–¢–û–ü_20_–∫–∞—Ç–µ–≥–æ—Ä–∏–π' - –ª–∏–¥–µ—Ä—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤")
    print(f"  3. '–û—Å–Ω–æ–≤–Ω—ã–µ_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏' - —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    print(f"  4. '–°–≤–æ–¥–∫–∞_–º–µ—Ç—Ä–∏–∫' - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –º–µ—Ç—Ä–∏–∫–∞–º")
    print()
    print(f"üéØ –°–¢–†–£–ö–¢–£–†–ê –î–ò–ê–ü–ê–ó–û–ù–û–í:")
    print(f"  ‚Ä¢ –ö–∞–∂–¥–∞—è –º–µ—Ç—Ä–∏–∫–∞ –∏–º–µ–µ—Ç 6 —Å—Ç–æ–ª–±—Ü–æ–≤: –º–∏–Ω, –º–∞–∫—Å, –º–µ–¥–∏–∞–Ω–∞, —Å—Ä–µ–¥–Ω–µ–µ, —Å—Ç–¥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    print(f"  ‚Ä¢ –ì–æ—Ç–æ–≤–æ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã")
    print(f"  ‚Ä¢ –£–¥–æ–±–Ω–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    print(f"\nüìã –ü–†–ò–ú–ï–† –°–¢–†–£–ö–¢–£–†–´ (–ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏):")
    print("=" * 80)
    display_cols = ['–¢–∏–ø', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–¢–æ–≤–∞—Ä–æ–≤', '–¶–µ–Ω–∞_—Ä—É–±_–º–∏–Ω', '–¶–µ–Ω–∞_—Ä—É–±_–º–∞–∫—Å', 
                   '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å_–º–∏–Ω', '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å_–º–∞–∫—Å', '–¢–∏—Ä–∞–∂_–º–∏–Ω', '–¢–∏—Ä–∞–∂_–º–∞–∫—Å']
    available_cols = [col for col in display_cols if col in df_ranges.columns]
    print(df_ranges[available_cols].head(3).to_string(index=False))
    
    analyzer.conn.close()
    return output_file

if __name__ == "__main__":
    create_ranges_table()
