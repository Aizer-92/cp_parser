#!/usr/bin/env python3
"""
Chat History Analyzer
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ Telegram
"""

import asyncio
import json
from datetime import datetime, timedelta
from telethon import TelegramClient
from telethon.tl.types import PeerUser, PeerChat, PeerChannel
from loguru import logger
import os

class ChatHistoryAnalyzer:
    def __init__(self):
        self.config = self.load_config()
        self.client = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        os.makedirs("output/logs", exist_ok=True)
        logger.add("output/logs/chat_history.log", rotation="1 day", retention="7 days")
        
    def load_config(self):
        with open("config/personal_config.json", 'r', encoding='utf-8') as f:
            return json.load(f)
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            self.client = TelegramClient(
                self.config['session_name'],
                self.config['api_id'],
                self.config['api_hash']
            )
            
            await self.client.start()
            
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                print(f"üë§ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name}")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def get_chat_list(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤"""
        try:
            dialogs = await self.client.get_dialogs()
            print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(dialogs)} —á–∞—Ç–æ–≤:")
            print("-" * 50)
            
            for i, dialog in enumerate(dialogs, 1):
                chat_name = dialog.name or f"–ß–∞—Ç {dialog.id}"
                chat_type = "–õ–∏—á–Ω—ã–π" if dialog.is_user else "–ì—Ä—É–ø–ø–∞" if dialog.is_group else "–ö–∞–Ω–∞–ª"
                print(f"{i:2d}. {chat_name} ({chat_type}) - ID: {dialog.id}")
            
            return dialogs
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
            return []
    
    async def get_chat_history(self, chat_id, limit=100, offset_date=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        try:
            print(f"\nüìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ {chat_id}...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.client.get_messages(
                chat_id, 
                limit=limit,
                offset_date=offset_date
            )
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            history_data = []
            for msg in messages:
                if msg.text:  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    sender = await msg.get_sender()
                    sender_name = sender.first_name if sender else "Unknown"
                    
                    history_data.append({
                        'id': msg.id,
                        'date': msg.date.isoformat(),
                        'sender': sender_name,
                        'text': msg.text,
                        'reply_to': msg.reply_to_msg_id if msg.reply_to_msg_id else None
                    })
            
            return history_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []
    
    async def search_messages(self, chat_id, query, limit=50):
        """–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""
        try:
            print(f"\nüîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å '{query}' –≤ —á–∞—Ç–µ {chat_id}...")
            
            messages = await self.client.get_messages(
                chat_id,
                search=query,
                limit=limit
            )
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            search_results = []
            for msg in messages:
                if msg.text:
                    sender = await msg.get_sender()
                    sender_name = sender.first_name if sender else "Unknown"
                    
                    search_results.append({
                        'id': msg.id,
                        'date': msg.date.isoformat(),
                        'sender': sender_name,
                        'text': msg.text
                    })
            
            return search_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    async def analyze_chat_activity(self, chat_id, days=7):
        """–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–µ"""
        try:
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π...")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
            start_date = datetime.now() - timedelta(days=days)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
            messages = await self.client.get_messages(
                chat_id,
                offset_date=start_date,
                limit=1000
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            activity_data = {}
            for msg in messages:
                if msg.text:
                    sender = await msg.get_sender()
                    sender_name = sender.first_name if sender else "Unknown"
                    
                    date_key = msg.date.strftime('%Y-%m-%d')
                    if date_key not in activity_data:
                        activity_data[date_key] = {'total': 0, 'users': {}}
                    
                    activity_data[date_key]['total'] += 1
                    if sender_name not in activity_data[date_key]['users']:
                        activity_data[date_key]['users'][sender_name] = 0
                    activity_data[date_key]['users'][sender_name] += 1
            
            return activity_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return {}
    
    async def export_chat_history(self, chat_id, filename=None):
        """–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            if not filename:
                filename = f"output/chat_history_{chat_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history = await self.get_chat_history(chat_id, limit=500)
            
            if history:
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                os.makedirs("output", exist_ok=True)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(history, f, indent=2, ensure_ascii=False)
                
                print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {filename}")
                return filename
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return None
    
    async def get_chat_info(self, chat_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ"""
        try:
            entity = await self.client.get_entity(chat_id)
            
            info = {
                'id': entity.id,
                'title': getattr(entity, 'title', ''),
                'username': getattr(entity, 'username', ''),
                'participants_count': getattr(entity, 'participants_count', 0),
                'type': 'user' if hasattr(entity, 'first_name') else 'group' if hasattr(entity, 'title') else 'channel'
            }
            
            if hasattr(entity, 'first_name'):
                info['first_name'] = entity.first_name
                info['last_name'] = entity.last_name or ''
            
            return info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {e}")
            return None

async def main():
    analyzer = ChatHistoryAnalyzer()
    
    if not await analyzer.connect():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
        return
    
    print("üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ò–°–¢–û–†–ò–ò –ß–ê–¢–û–í")
    print("=" * 40)
    
    while True:
        print("\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")
        print("2. –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞")
        print("3. –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("4. –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        print("5. –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏")
        print("6. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()
        
        if choice == "1":
            await analyzer.get_chat_list()
            
        elif choice == "2":
            chat_id = input("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞: ").strip()
            limit = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100): ").strip()
            limit = int(limit) if limit.isdigit() else 100
            
            history = await analyzer.get_chat_history(chat_id, limit)
            if history:
                print(f"\nüìñ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π):")
                for msg in history[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    print(f"[{msg['date']}] {msg['sender']}: {msg['text'][:100]}...")
                if len(history) > 10:
                    print(f"... –∏ –µ—â–µ {len(history) - 10} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
        elif choice == "3":
            chat_id = input("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞: ").strip()
            query = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ").strip()
            
            results = await analyzer.search_messages(chat_id, query)
            if results:
                print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{query}':")
                for msg in results:
                    print(f"[{msg['date']}] {msg['sender']}: {msg['text'][:100]}...")
            
        elif choice == "4":
            chat_id = input("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞: ").strip()
            days = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7): ").strip()
            days = int(days) if days.isdigit() else 7
            
            activity = await analyzer.analyze_chat_activity(chat_id, days)
            if activity:
                print(f"\nüìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π:")
                for date, data in activity.items():
                    print(f"{date}: {data['total']} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {len(data['users'])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
        elif choice == "5":
            chat_id = input("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞: ").strip()
            await analyzer.export_chat_history(chat_id)
            
        elif choice == "6":
            chat_id = input("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞: ").strip()
            info = await analyzer.get_chat_info(chat_id)
            if info:
                print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:")
                for key, value in info.items():
                    print(f"  {key}: {value}")
            
        elif choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    asyncio.run(main())
