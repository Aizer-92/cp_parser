#!/usr/bin/env python3
"""
Plan/Fact Message Loader for Main mega –¢–û–ü
–ó–∞–≥—Ä—É–∑—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–ª–∞–Ω–∞–º–∏ –∏ —Ñ–∞–∫—Ç–∞–º–∏
"""

import asyncio
import json
import re
from datetime import datetime, timedelta
from telethon import TelegramClient
from loguru import logger
import pandas as pd
import os

class PlanFactMessageLoader:
    def __init__(self):
        self.config = self.load_config()
        self.client = None
        self.target_chat_name = "Main mega –¢–û–ü"
        self.target_chat_id = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        os.makedirs("output/logs", exist_ok=True)
        logger.add("output/logs/plan_fact_loader.log", rotation="1 day", retention="7 days")
        
    def load_config(self):
        with open("config/personal_config.json", 'r', encoding='utf-8') as f:
            return json.load(f)
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            self.client = TelegramClient(
                self.config['session_name'],
                self.config['api_id'],
                self.config['api_hash']
            )
            
            await self.client.start()
            
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                print(f"üë§ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name}")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def find_target_chat(self):
        """–ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            print(f"üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞ '{self.target_chat_name}'...")
            
            dialogs = await self.client.get_dialogs()
            
            for dialog in dialogs:
                if self.target_chat_name.lower() in dialog.name.lower():
                    self.target_chat_id = dialog.id
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç: {dialog.name} (ID: {dialog.id})")
                    return True
            
            print(f"‚ùå –ß–∞—Ç '{self.target_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞: {e}")
            return False
    
    async def get_plan_fact_messages(self, weeks_back=12):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–ª–∞–Ω–∞–º–∏ –∏ —Ñ–∞–∫—Ç–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ–¥–µ–ª–∏"""
        try:
            print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–ª–∞–Ω–∞–º–∏/—Ñ–∞–∫—Ç–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {weeks_back} –Ω–µ–¥–µ–ª—å...")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
            today = datetime.now()
            start_date = today - timedelta(weeks=weeks_back)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.client.get_messages(
                self.target_chat_id,
                offset_date=start_date,
                limit=5000  # –ë–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
            )
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–ª–∞–Ω–∞–º–∏ –∏ —Ñ–∞–∫—Ç–∞–º–∏
            plan_fact_messages = []
            
            for msg in messages:
                if msg.text and len(msg.text.strip()) > 5:
                    text = msg.text.lower()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤
                    has_plan = re.search(r'–ø–ª–∞–Ω[:\s]*(\d+(?:\.\d+)?)', text)
                    has_fact = re.search(r'—Ñ–∞–∫—Ç[:\s]*(\d+(?:\.\d+)?)', text)
                    has_pf = re.search(r'–ø/—Ñ[:\s]*(\d+(?:\.\d+)?)', text)
                    has_numbers = re.search(r'(\d+(?:\.\d+)?)[/\-]\s*(\d+(?:\.\d+)?)', text)
                    has_brackets = re.search(r'\((\d+(?:\.\d+)?)[^\d]*(\d+(?:\.\d+)?)\)', text)
                    
                    if has_plan or has_fact or has_pf or has_numbers or has_brackets:
                        sender_name = await self.get_sender_name(msg)
                        plan_fact_messages.append({
                            'id': msg.id,
                            'date': msg.date,
                            'text': msg.text.strip(),
                            'sender': sender_name,
                            'has_plan': bool(has_plan),
                            'has_fact': bool(has_fact),
                            'has_pf': bool(has_pf),
                            'has_numbers': bool(has_numbers),
                            'has_brackets': bool(has_brackets),
                            'patterns': []
                        })
                        
                        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                        if has_plan:
                            plan_fact_messages[-1]['patterns'].append('–ø–ª–∞–Ω')
                        if has_fact:
                            plan_fact_messages[-1]['patterns'].append('—Ñ–∞–∫—Ç')
                        if has_pf:
                            plan_fact_messages[-1]['patterns'].append('–ø/—Ñ')
                        if has_numbers:
                            plan_fact_messages[-1]['patterns'].append('—á–∏—Å–ª–∞')
                        if has_brackets:
                            plan_fact_messages[-1]['patterns'].append('—Å–∫–æ–±–∫–∏')
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(plan_fact_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–ª–∞–Ω–∞–º–∏/—Ñ–∞–∫—Ç–∞–º–∏")
            return plan_fact_messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    async def get_sender_name(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        try:
            sender = await message.get_sender()
            if sender:
                return f"{sender.first_name} {sender.last_name or ''}".strip()
            return "Unknown"
        except:
            return "Unknown"
    
    def analyze_message_content(self, messages):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            print("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            analysis = {
                'total_messages': len(messages),
                'senders': {},
                'patterns_usage': {},
                'message_structure': {},
                'sample_structures': []
            }
            
            for msg in messages:
                sender = msg['sender']
                text = msg['text']
                patterns = msg['patterns']
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º
                if sender not in analysis['senders']:
                    analysis['senders'][sender] = {
                        'count': 0,
                        'patterns': set(),
                        'sample_texts': []
                    }
                analysis['senders'][sender]['count'] += 1
                analysis['senders'][sender]['patterns'].update(patterns)
                
                if len(analysis['senders'][sender]['sample_texts']) < 3:
                    analysis['senders'][sender]['sample_texts'].append(text[:200])
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
                for pattern in patterns:
                    if pattern not in analysis['patterns_usage']:
                        analysis['patterns_usage'][pattern] = 0
                    analysis['patterns_usage'][pattern] += 1
                
                # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è
                structure = self.analyze_message_structure(text)
                if structure not in analysis['message_structure']:
                    analysis['message_structure'][structure] = 0
                analysis['message_structure'][structure] += 1
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–∑—Ü—ã —Å—Ç—Ä—É–∫—Ç—É—Ä
                if len(analysis['sample_structures']) < 10:
                    analysis['sample_structures'].append({
                        'sender': sender,
                        'date': msg['date'].strftime('%Y-%m-%d'),
                        'structure': structure,
                        'text': text[:300],
                        'patterns': patterns
                    })
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {e}")
            return {}
    
    def analyze_message_structure(self, text):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            lines = text.split('\n')
            structure_parts = []
            
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–æ–∫–∏
                if re.match(r'^\d+[\.\)]', line):
                    structure_parts.append('–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π_—Å–ø–∏—Å–æ–∫')
                elif re.match(r'^[-‚Ä¢]', line):
                    structure_parts.append('–º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π_—Å–ø–∏—Å–æ–∫')
                elif re.search(r'–ø–ª–∞–Ω[:\s]*\d+', line.lower()):
                    structure_parts.append('—Å—Ç—Ä–æ–∫–∞_—Å_–ø–ª–∞–Ω–æ–º')
                elif re.search(r'—Ñ–∞–∫—Ç[:\s]*\d+', line.lower()):
                    structure_parts.append('—Å—Ç—Ä–æ–∫–∞_—Å_—Ñ–∞–∫—Ç–æ–º')
                elif re.search(r'\d+/\d+', line):
                    structure_parts.append('—á–∏—Å–ª–∞_—á–µ—Ä–µ–∑_—Å–ª–µ—à')
                elif re.search(r'\(\d+[^\d]*\d+\)', line):
                    structure_parts.append('—á–∏—Å–ª–∞_–≤_—Å–∫–æ–±–∫–∞—Ö')
                elif len(line) < 50:
                    structure_parts.append('–∫–æ—Ä–æ—Ç–∫–∞—è_—Å—Ç—Ä–æ–∫–∞')
                else:
                    structure_parts.append('–æ–±—ã—á–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞')
            
            return ' -> '.join(structure_parts) if structure_parts else '–ø—É—Å—Ç–æ–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ'
            
        except Exception as e:
            return '–æ—à–∏–±–∫–∞_–∞–Ω–∞–ª–∏–∑–∞'
    
    def create_detailed_report(self, messages, analysis, filename=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            if not filename:
                filename = f"output/plan_fact_messages_detailed_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            os.makedirs("output", exist_ok=True)
            
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                
                # –õ–∏—Å—Ç 1: –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–ª–∞–Ω–∞–º–∏/—Ñ–∞–∫—Ç–∞–º–∏
                if messages:
                    messages_data = []
                    for msg in messages:
                        messages_data.append({
                            'ID': msg['id'],
                            '–î–∞—Ç–∞': msg['date'].strftime('%Y-%m-%d %H:%M'),
                            '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å': msg['sender'],
                            '–¢–µ–∫—Å—Ç': msg['text'],
                            '–ü–∞—Ç—Ç–µ—Ä–Ω—ã': ', '.join(msg['patterns']),
                            '–ï—Å—Ç—å –ø–ª–∞–Ω': '–î–∞' if msg['has_plan'] else '–ù–µ—Ç',
                            '–ï—Å—Ç—å —Ñ–∞–∫—Ç': '–î–∞' if msg['has_fact'] else '–ù–µ—Ç',
                            '–ï—Å—Ç—å –ü/–§': '–î–∞' if msg['has_pf'] else '–ù–µ—Ç',
                            '–ï—Å—Ç—å —á–∏—Å–ª–∞': '–î–∞' if msg['has_numbers'] else '–ù–µ—Ç',
                            '–ï—Å—Ç—å —Å–∫–æ–±–∫–∏': '–î–∞' if msg['has_brackets'] else '–ù–µ—Ç'
                        })
                    
                    df_messages = pd.DataFrame(messages_data)
                    df_messages = df_messages.sort_values(['–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å', '–î–∞—Ç–∞'], ascending=[True, False])
                    df_messages.to_excel(writer, sheet_name='–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è', index=False)
                
                # –õ–∏—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º
                if analysis.get('senders'):
                    sender_data = []
                    for sender, data in analysis['senders'].items():
                        sender_data.append({
                            '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å': sender,
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π': data['count'],
                            '–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã': ', '.join(sorted(data['patterns'])),
                            '–û–±—Ä–∞–∑–µ—Ü 1': data['sample_texts'][0] if data['sample_texts'] else '',
                            '–û–±—Ä–∞–∑–µ—Ü 2': data['sample_texts'][1] if len(data['sample_texts']) > 1 else '',
                            '–û–±—Ä–∞–∑–µ—Ü 3': data['sample_texts'][2] if len(data['sample_texts']) > 2 else ''
                        })
                    
                    df_senders = pd.DataFrame(sender_data)
                    df_senders = df_senders.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π', ascending=False)
                    df_senders.to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏–∑ –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º', index=False)
                
                # –õ–∏—Å—Ç 3: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                if analysis.get('patterns_usage'):
                    pattern_data = []
                    for pattern, count in analysis['patterns_usage'].items():
                        pattern_data.append({
                            '–ü–∞—Ç—Ç–µ—Ä–Ω': pattern,
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π': count,
                            '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ': round(count / len(messages) * 100, 2)
                        })
                    
                    df_patterns = pd.DataFrame(pattern_data)
                    df_patterns = df_patterns.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π', ascending=False)
                    df_patterns.to_excel(writer, sheet_name='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤', index=False)
                
                # –õ–∏—Å—Ç 4: –°—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                if analysis.get('message_structure'):
                    structure_data = []
                    for structure, count in analysis['message_structure'].items():
                        structure_data.append({
                            '–°—Ç—Ä—É–∫—Ç—É—Ä–∞': structure,
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count,
                            '–ü—Ä–æ—Ü–µ–Ω—Ç': round(count / len(messages) * 100, 2)
                        })
                    
                    df_structures = pd.DataFrame(structure_data)
                    df_structures = df_structures.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', ascending=False)
                    df_structures.to_excel(writer, sheet_name='–°—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π', index=False)
                
                # –õ–∏—Å—Ç 5: –û–±—Ä–∞–∑—Ü—ã —Å—Ç—Ä—É–∫—Ç—É—Ä
                if analysis.get('sample_structures'):
                    df_samples = pd.DataFrame(analysis['sample_structures'])
                    df_samples.to_excel(writer, sheet_name='–û–±—Ä–∞–∑—Ü—ã —Å—Ç—Ä—É–∫—Ç—É—Ä', index=False)
            
            print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return None
    
    async def run_loader(self):
        """–ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞"""
        try:
            print("üöÄ –ó–ê–ü–£–°–ö –ó–ê–ì–†–£–ó–ß–ò–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –° –ü–õ–ê–ù–ê–ú–ò –ò –§–ê–ö–¢–ê–ú–ò")
            print("=" * 70)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not await self.connect():
                return
            
            # –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
            if not await self.find_target_chat():
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = await self.get_plan_fact_messages(weeks_back=12)
            
            if not messages:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–ª–∞–Ω–∞–º–∏/—Ñ–∞–∫—Ç–∞–º–∏")
                return
            
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            analysis = self.analyze_message_content(messages)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report_file = self.create_detailed_report(messages, analysis)
            
            if report_file:
                print(f"\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
                print(f"üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
                
                # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
                print(f"\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
                print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–ª–∞–Ω–∞–º–∏/—Ñ–∞–∫—Ç–∞–º–∏: {len(messages)}")
                print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: {len(analysis.get('senders', {}))}")
                print(f"–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: 12 –Ω–µ–¥–µ–ª—å")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                if analysis.get('senders'):
                    print(f"\nüë• –¢–û–ü –û–¢–ü–†–ê–í–ò–¢–ï–õ–ï–ô:")
                    top_senders = sorted(analysis['senders'].items(), key=lambda x: x[1]['count'], reverse=True)[:5]
                    for sender, data in top_senders:
                        print(f"  {sender}: {data['count']} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                if analysis.get('patterns_usage'):
                    print(f"\nüîç –ü–û–ü–£–õ–Ø–†–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:")
                    top_patterns = sorted(analysis['patterns_usage'].items(), key=lambda x: x[1], reverse=True)[:5]
                    for pattern, count in top_patterns:
                        print(f"  {pattern}: {count} —Ä–∞–∑")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã —Å—Ç—Ä—É–∫—Ç—É—Ä
                if analysis.get('sample_structures'):
                    print(f"\nüìù –û–ë–†–ê–ó–¶–´ –°–¢–†–£–ö–¢–£–†:")
                    for i, sample in enumerate(analysis['sample_structures'][:3]):
                        print(f"\n  {i+1}. {sample['sender']} ({sample['date']})")
                        print(f"     –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {sample['structure']}")
                        print(f"     –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {', '.join(sample['patterns'])}")
                        print(f"     –¢–µ–∫—Å—Ç: {sample['text'][:100]}...")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    loader = PlanFactMessageLoader()
    await loader.run_loader()

if __name__ == "__main__":
    asyncio.run(main())
