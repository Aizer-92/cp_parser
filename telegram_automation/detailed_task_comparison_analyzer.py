#!/usr/bin/env python3
"""
Detailed Task Comparison Analyzer for Main mega –¢–û–ü
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á –ø–ª–∞–Ω–∞ –∏ —Ñ–∞–∫—Ç–∞
"""

import asyncio
import json
import re
from datetime import datetime, timedelta
from telethon import TelegramClient
from loguru import logger
import pandas as pd
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
import os

class DetailedTaskComparisonAnalyzer:
    def __init__(self):
        self.config = self.load_config()
        self.client = None
        self.target_chat_name = "Main mega –¢–û–ü"
        self.target_chat_id = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        os.makedirs("output/logs", exist_ok=True)
        logger.add("output/logs/detailed_comparison.log", rotation="1 day", retention="7 days")
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.colors = {
            'green': '28A745',      # –í—ã–ø–æ–ª–Ω–µ–Ω–æ
            'yellow': 'FFC107',     # –ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            'red': 'DC3545',        # –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            'blue': '007BFF',       # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            'orange': 'FD7E14',     # –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            'light_gray': 'F8F9FA', # –§–æ–Ω
            'dark_gray': '6C757D'   # –¢–µ–∫—Å—Ç
        }
        
    def load_config(self):
        with open("config/personal_config.json", 'r', encoding='utf-8') as f:
            return json.load(f)
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            self.client = TelegramClient(
                self.config['session_name'],
                self.config['api_id'],
                self.config['api_hash']
            )
            
            await self.client.start()
            
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                print(f"üë§ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name}")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def find_target_chat(self):
        """–ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            print(f"üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞ '{self.target_chat_name}'...")
            
            dialogs = await self.client.get_dialogs()
            
            for dialog in dialogs:
                if self.target_chat_name.lower() in dialog.name.lower():
                    self.target_chat_id = dialog.id
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç: {dialog.name} (ID: {dialog.id})")
                    return True
            
            print(f"‚ùå –ß–∞—Ç '{self.target_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞: {e}")
            return False
    
    async def get_weekly_messages(self, weeks_back=8):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –Ω–µ–¥–µ–ª—è–º"""
        try:
            print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {weeks_back} –Ω–µ–¥–µ–ª—å...")
            
            today = datetime.now()
            start_date = today - timedelta(weeks=weeks_back)
            
            messages = await self.client.get_messages(
                self.target_chat_id,
                offset_date=start_date,
                limit=5000
            )
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –Ω–µ–¥–µ–ª—è–º
            weekly_messages = {}
            
            for msg in messages:
                if msg.text and len(msg.text.strip()) > 50:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–¥–µ–ª—é
                    msg_date = msg.date.replace(tzinfo=None)
                    week_start = msg_date - timedelta(days=msg_date.weekday())
                    week_key = week_start.strftime('%Y-%m-%d')
                    
                    if week_key not in weekly_messages:
                        weekly_messages[week_key] = []
                    
                    sender_name = await self.get_sender_name(msg)
                    weekly_messages[week_key].append({
                        'id': msg.id,
                        'date': msg_date,
                        'text': msg.text.strip(),
                        'sender': sender_name,
                        'week_start': week_start,
                        'week_key': week_key
                    })
            
            print(f"üìä –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–æ {len(weekly_messages)} –Ω–µ–¥–µ–ª—è–º")
            return weekly_messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return {}
    
    async def get_sender_name(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        try:
            sender = await message.get_sender()
            if sender:
                return f"{sender.first_name} {sender.last_name or ''}".strip()
            return "Unknown"
        except:
            return "Unknown"
    
    def extract_plan_fact_sections(self, text, sender, message_date):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–ª–∞–Ω –∏ —Ñ–∞–∫—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            lines = text.split('\n')
            
            plan_section = []
            fact_section = []
            current_section = None
            
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª
                if re.match(r'^–ø–ª–∞–Ω[:\s]*', line.lower()):
                    current_section = 'plan'
                    continue
                elif re.match(r'^—Ñ–∞–∫—Ç[:\s]*', line.lower()):
                    current_section = 'fact'
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª
                if current_section == 'plan':
                    plan_section.append(line)
                elif current_section == 'fact':
                    fact_section.append(line)
            
            return {
                'sender': sender,
                'date': message_date,
                'plan_tasks': plan_section,
                'fact_tasks': fact_section,
                'has_plan': len(plan_section) > 0,
                'has_fact': len(fact_section) > 0
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤: {e}")
            return None
    
    def analyze_weekly_comparison(self, weekly_messages):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º"""
        try:
            print("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º...")
            
            detailed_comparisons = []
            week_keys = sorted(weekly_messages.keys())
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –Ω–µ–¥–µ–ª—è–º (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            for i in range(len(week_keys) - 1):
                current_week = week_keys[i]
                next_week = week_keys[i + 1]
                
                current_week_messages = weekly_messages[current_week]
                next_week_messages = weekly_messages[next_week]
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
                current_week_plans = {}
                for msg in current_week_messages:
                    sections = self.extract_plan_fact_sections(msg['text'], msg['sender'], msg['date'])
                    if sections and sections['has_plan']:
                        if sections['sender'] not in current_week_plans:
                            current_week_plans[sections['sender']] = []
                        current_week_plans[sections['sender']].extend(sections['plan_tasks'])
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–∫—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
                next_week_facts = {}
                for msg in next_week_messages:
                    sections = self.extract_plan_fact_sections(msg['text'], msg['sender'], msg['date'])
                    if sections and sections['has_fact']:
                        if sections['sender'] not in next_week_facts:
                            next_week_facts[sections['sender']] = []
                        next_week_facts[sections['sender']].extend(sections['fact_tasks'])
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
                for sender in set(current_week_plans.keys()) | set(next_week_facts.keys()):
                    plan_tasks = current_week_plans.get(sender, [])
                    fact_tasks = next_week_facts.get(sender, [])
                    
                    if plan_tasks or fact_tasks:
                        detailed_comparison = self.create_detailed_task_comparison(
                            plan_tasks, fact_tasks, sender, current_week, next_week
                        )
                        if detailed_comparison:
                            detailed_comparisons.append(detailed_comparison)
            
            print(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(detailed_comparisons)} –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–π")
            return detailed_comparisons
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
            return []
    
    def create_detailed_task_comparison(self, plan_tasks, fact_tasks, sender, plan_week, fact_week):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á"""
        try:
            # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
            matched_tasks = []
            unmatched_plans = []
            unmatched_facts = []
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
            remaining_facts = fact_tasks.copy()
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –∏–∑ –ø–ª–∞–Ω–∞
            for plan_task in plan_tasks:
                best_match = None
                best_similarity = 0
                best_fact_index = -1
                
                # –ò—â–µ–º –ª—É—á—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ä–µ–¥–∏ —Ñ–∞–∫—Ç–æ–≤
                for i, fact_task in enumerate(remaining_facts):
                    similarity = self.calculate_task_similarity(plan_task, fact_task)
                    
                    if similarity > best_similarity and similarity >= 0.3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
                        best_similarity = similarity
                        best_match = fact_task
                        best_fact_index = i
                
                if best_match:
                    # –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                    matched_tasks.append({
                        'plan_task': plan_task,
                        'fact_task': best_match,
                        'similarity': best_similarity,
                        'status': self.get_match_status(best_similarity)
                    })
                    # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–∫—Ç
                    remaining_facts.pop(best_fact_index)
                else:
                    # –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                    unmatched_plans.append(plan_task)
            
            # –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–∞–∫—Ç—ã - –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            unmatched_facts = remaining_facts
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_planned = len(plan_tasks)
            total_facts = len(fact_tasks)
            total_matched = len(matched_tasks)
            total_unmatched_plans = len(unmatched_plans)
            total_new_tasks = len(unmatched_facts)
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º)
            completion_rate = (total_matched / total_planned * 100) if total_planned > 0 else 0
            
            return {
                'sender': sender,
                'plan_week': plan_week,
                'fact_week': fact_week,
                'plan_tasks': plan_tasks,
                'fact_tasks': fact_tasks,
                'matched_tasks': matched_tasks,
                'unmatched_plans': unmatched_plans,
                'unmatched_facts': unmatched_facts,
                'total_planned': total_planned,
                'total_facts': total_facts,
                'total_matched': total_matched,
                'total_unmatched_plans': total_unmatched_plans,
                'total_new_tasks': total_new_tasks,
                'completion_rate': completion_rate,
                'overall_status': self.get_overall_status(completion_rate, total_matched, total_planned)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {e}")
            return None
    
    def calculate_task_similarity(self, task1, task2):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏"""
        try:
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            t1 = task1.lower()
            t2 = task2.lower()
            
            # –£–±–∏—Ä–∞–µ–º —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            t1_clean = re.sub(r'[^\w\s]', '', t1)
            t2_clean = re.sub(r'[^\w\s]', '', t2)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
            words1 = set(t1_clean.split())
            words2 = set(t2_clean.split())
            
            if not words1 or not words2:
                return 0.0
            
            # –í—ã—á–∏—Å–ª—è–µ–º Jaccard similarity
            intersection = len(words1.intersection(words2))
            union = len(words1.union(words2))
            
            return intersection / union if union > 0 else 0.0
            
        except Exception as e:
            return 0.0
    
    def get_match_status(self, similarity):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        if similarity >= 0.7:
            return "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
        elif similarity >= 0.5:
            return "‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        elif similarity >= 0.3:
            return "üîÑ –ò–∑–º–µ–Ω–µ–Ω–æ"
        else:
            return "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    
    def get_overall_status(self, completion_rate, matched, planned):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        if completion_rate >= 80 and matched > 0:
            return "‚úÖ –û—Ç–ª–∏—á–Ω–æ"
        elif completion_rate >= 60:
            return "‚ö†Ô∏è –•–æ—Ä–æ—à–æ"
        elif completion_rate >= 40:
            return "‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ"
        elif planned > 0:
            return "‚ùå –ü–ª–æ—Ö–æ"
        else:
            return "üìù –¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"
    
    def create_detailed_report(self, comparisons, filename=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            if not filename:
                filename = f"output/detailed_task_comparison_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            os.makedirs("output", exist_ok=True)
            
            workbook = openpyxl.Workbook()
            
            # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–∏—Å—Ç
            workbook.remove(workbook.active)
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
            self.create_summary_sheet(workbook, comparisons)
            self.create_detailed_comparison_sheet(workbook, comparisons)
            self.create_task_matching_sheet(workbook, comparisons)
            self.create_unmatched_tasks_sheet(workbook, comparisons)
            
            workbook.save(filename)
            print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return None
    
    def create_summary_sheet(self, workbook, comparisons):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
        try:
            ws = workbook.create_sheet("–°–≤–æ–¥–∫–∞")
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            ws['A1'] = "–î–ï–¢–ê–õ–¨–ù–û–ï –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –ü–õ–ê–ù–û–í –ò –§–ê–ö–¢–û–í"
            ws['A2'] = "Main mega –¢–û–ü - –ê–Ω–∞–ª–∏–∑ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_comparisons = len(comparisons)
            total_planned = sum(comp['total_planned'] for comp in comparisons)
            total_facts = sum(comp['total_facts'] for comp in comparisons)
            total_matched = sum(comp['total_matched'] for comp in comparisons)
            total_unmatched_plans = sum(comp['total_unmatched_plans'] for comp in comparisons)
            total_new_tasks = sum(comp['total_new_tasks'] for comp in comparisons)
            
            avg_completion = (total_matched / total_planned * 100) if total_planned > 0 else 0
            
            ws['A4'] = "üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø:"
            ws['A5'] = f"–í—Å–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π: {total_comparisons}"
            ws['A6'] = f"–í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {total_planned}"
            ws['A7'] = f"–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (—Ñ–∞–∫—Ç): {total_facts}"
            ws['A8'] = f"–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {total_matched}"
            ws['A9'] = f"–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–ø–ª–∞–Ω): {total_unmatched_plans}"
            ws['A10'] = f"–ù–æ–≤—ã—Ö –∑–∞–¥–∞—á (—Ñ–∞–∫—Ç): {total_new_tasks}"
            ws['A11'] = f"–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {avg_completion:.1f}%"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º
            sender_stats = {}
            for comp in comparisons:
                sender = comp['sender']
                if sender not in sender_stats:
                    sender_stats[sender] = {
                        'planned': 0, 'facts': 0, 'matched': 0,
                        'unmatched_plans': 0, 'new_tasks': 0, 'comparisons': 0
                    }
                
                sender_stats[sender]['planned'] += comp['total_planned']
                sender_stats[sender]['facts'] += comp['total_facts']
                sender_stats[sender]['matched'] += comp['total_matched']
                sender_stats[sender]['unmatched_plans'] += comp['total_unmatched_plans']
                sender_stats[sender]['new_tasks'] += comp['total_new_tasks']
                sender_stats[sender]['comparisons'] += 1
            
            ws['A13'] = "üë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–£–ö–û–í–û–î–ò–¢–ï–õ–Ø–ú:"
            
            headers = ['–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–°—Ä–∞–≤–Ω–µ–Ω–∏–π', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ', '–§–∞–∫—Ç', '–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '–ù–æ–≤—ã—Ö', '% —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è']
            for col, header in enumerate(headers, 1):
                ws.cell(row=14, column=col, value=header)
            
            row = 15
            for sender, stats in sorted(sender_stats.items(), key=lambda x: x[1]['matched'], reverse=True):
                completion_rate = (stats['matched'] / stats['planned'] * 100) if stats['planned'] > 0 else 0
                
                ws.cell(row=row, column=1, value=sender)
                ws.cell(row=row, column=2, value=stats['comparisons'])
                ws.cell(row=row, column=3, value=stats['planned'])
                ws.cell(row=row, column=4, value=stats['facts'])
                ws.cell(row=row, column=5, value=stats['matched'])
                ws.cell(row=row, column=6, value=stats['unmatched_plans'])
                ws.cell(row=row, column=7, value=stats['new_tasks'])
                ws.cell(row=row, column=8, value=f"{completion_rate:.1f}%")
                
                row += 1
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.format_summary_sheet(ws)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞: {e}")
    
    def create_detailed_comparison_sheet(self, workbook, comparisons):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        try:
            ws = workbook.create_sheet("–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ")
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = [
                '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–ù–µ–¥–µ–ª—è –ø–ª–∞–Ω–∞', '–ù–µ–¥–µ–ª—è —Ñ–∞–∫—Ç–∞', 
                '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ', '–§–∞–∫—Ç', '–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '–ù–æ–≤—ã—Ö',
                '% —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞—Ç—É—Å'
            ]
            
            for col, header in enumerate(headers, 1):
                ws.cell(row=1, column=col, value=header)
            
            # –î–∞–Ω–Ω—ã–µ
            row = 2
            for comp in comparisons:
                ws.cell(row=row, column=1, value=comp['sender'])
                ws.cell(row=row, column=2, value=comp['plan_week'])
                ws.cell(row=row, column=3, value=comp['fact_week'])
                ws.cell(row=row, column=4, value=comp['total_planned'])
                ws.cell(row=row, column=5, value=comp['total_facts'])
                ws.cell(row=row, column=6, value=comp['total_matched'])
                ws.cell(row=row, column=7, value=comp['total_unmatched_plans'])
                ws.cell(row=row, column=8, value=comp['total_new_tasks'])
                ws.cell(row=row, column=9, value=f"{comp['completion_rate']:.1f}%")
                ws.cell(row=row, column=10, value=comp['overall_status'])
                
                row += 1
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.format_detailed_sheet(ws)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
    
    def create_task_matching_sheet(self, workbook, comparisons):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á"""
        try:
            ws = workbook.create_sheet("–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á")
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = [
                '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–ù–µ–¥–µ–ª—è –ø–ª–∞–Ω–∞', '–ù–µ–¥–µ–ª—è —Ñ–∞–∫—Ç–∞',
                '–ó–∞–¥–∞—á–∞ –∏–∑ –ø–ª–∞–Ω–∞', '–ó–∞–¥–∞—á–∞ –∏–∑ —Ñ–∞–∫—Ç–∞', '–°—Ö–æ–¥—Å—Ç–≤–æ', '–°—Ç–∞—Ç—É—Å'
            ]
            
            for col, header in enumerate(headers, 1):
                ws.cell(row=1, column=col, value=header)
            
            # –î–∞–Ω–Ω—ã–µ
            row = 2
            for comp in comparisons:
                for match in comp['matched_tasks']:
                    ws.cell(row=row, column=1, value=comp['sender'])
                    ws.cell(row=row, column=2, value=comp['plan_week'])
                    ws.cell(row=row, column=3, value=comp['fact_week'])
                    ws.cell(row=row, column=4, value=match['plan_task'])
                    ws.cell(row=row, column=5, value=match['fact_task'])
                    ws.cell(row=row, column=6, value=f"{match['similarity']:.2f}")
                    ws.cell(row=row, column=7, value=match['status'])
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º
                    for col in [4, 5]:
                        cell = ws.cell(row=row, column=col)
                        cell.alignment = Alignment(wrap_text=True, vertical='top')
                        ws.row_dimensions[row].height = 60
                    
                    row += 1
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.format_task_matching_sheet(ws)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
    
    def create_unmatched_tasks_sheet(self, workbook, comparisons):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        try:
            ws = workbook.create_sheet("–ù–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = [
                '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–ù–µ–¥–µ–ª—è –ø–ª–∞–Ω–∞', '–ù–µ–¥–µ–ª—è —Ñ–∞–∫—Ç–∞',
                '–¢–∏–ø', '–ó–∞–¥–∞—á–∞', '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ'
            ]
            
            for col, header in enumerate(headers, 1):
                ws.cell(row=1, column=col, value=header)
            
            # –î–∞–Ω–Ω—ã–µ
            row = 2
            for comp in comparisons:
                # –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã
                for plan_task in comp['unmatched_plans']:
                    ws.cell(row=row, column=1, value=comp['sender'])
                    ws.cell(row=row, column=2, value=comp['plan_week'])
                    ws.cell(row=row, column=3, value=comp['fact_week'])
                    ws.cell(row=row, column=4, value="‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                    ws.cell(row=row, column=5, value=plan_task)
                    ws.cell(row=row, column=6, value="–ó–∞–¥–∞—á–∞ –∏–∑ –ø–ª–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–∫—Ç–∞—Ö")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    cell = ws.cell(row=row, column=4)
                    cell.fill = PatternFill(start_color=self.colors['red'], end_color=self.colors['red'], fill_type='solid')
                    cell.font = Font(color='FFFFFF')
                    
                    row += 1
                
                # –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
                for fact_task in comp['unmatched_facts']:
                    ws.cell(row=row, column=1, value=comp['sender'])
                    ws.cell(row=row, column=2, value=comp['plan_week'])
                    ws.cell(row=row, column=3, value=comp['fact_week'])
                    ws.cell(row=row, column=4, value="üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
                    ws.cell(row=row, column=5, value=fact_task)
                    ws.cell(row=row, column=6, value="–ó–∞–¥–∞—á–∞ –∏–∑ —Ñ–∞–∫—Ç–æ–≤ –Ω–µ –±—ã–ª–∞ –≤ –ø–ª–∞–Ω–∞—Ö")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    cell = ws.cell(row=row, column=4)
                    cell.fill = PatternFill(start_color=self.colors['orange'], end_color=self.colors['orange'], fill_type='solid')
                    cell.font = Font(color='FFFFFF')
                    
                    row += 1
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.format_unmatched_tasks_sheet(ws)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
    
    def format_summary_sheet(self, ws):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ws['A1'].font = Font(size=16, bold=True, color=self.colors['blue'])
        ws['A2'].font = Font(size=14, bold=True)
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫
        ws.merge_cells('A1:H1')
        ws.merge_cells('A2:H2')
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in range(1, 9):
            ws.column_dimensions[openpyxl.utils.get_column_letter(col)].width = 15
    
    def format_detailed_sheet(self, ws):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        for cell in ws[1]:
            cell.font = Font(bold=True, color='FFFFFF')
            cell.fill = PatternFill(start_color=self.colors['blue'], end_color=self.colors['blue'], fill_type='solid')
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in range(1, 11):
            ws.column_dimensions[openpyxl.utils.get_column_letter(col)].width = 15
    
    def format_task_matching_sheet(self, ws):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á"""
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        for cell in ws[1]:
            cell.font = Font(bold=True, color='FFFFFF')
            cell.fill = PatternFill(start_color=self.colors['blue'], end_color=self.colors['blue'], fill_type='solid')
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        ws.column_dimensions['A'].width = 20
        ws.column_dimensions['B'].width = 12
        ws.column_dimensions['C'].width = 12
        ws.column_dimensions['D'].width = 50
        ws.column_dimensions['E'].width = 50
        ws.column_dimensions['F'].width = 10
        ws.column_dimensions['G'].width = 15
    
    def format_unmatched_tasks_sheet(self, ws):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        for cell in ws[1]:
            cell.font = Font(bold=True, color='FFFFFF')
            cell.fill = PatternFill(start_color=self.colors['blue'], end_color=self.colors['blue'], fill_type='solid')
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        ws.column_dimensions['A'].width = 20
        ws.column_dimensions['B'].width = 12
        ws.column_dimensions['C'].width = 12
        ws.column_dimensions['D'].width = 15
        ws.column_dimensions['E'].width = 60
        ws.column_dimensions['F'].width = 30
    
    async def run_detailed_comparison(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        try:
            print("üöÄ –ó–ê–ü–£–°–ö –î–ï–¢–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø")
            print("=" * 60)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not await self.connect():
                return
            
            # –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
            if not await self.find_target_chat():
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –Ω–µ–¥–µ–ª—è–º
            weekly_messages = await self.get_weekly_messages(weeks_back=8)
            
            if not weekly_messages:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –Ω–µ–¥–µ–ª—è–º")
                return
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            comparisons = self.analyze_weekly_comparison(weekly_messages)
            
            if not comparisons:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report_file = self.create_detailed_report(comparisons)
            
            if report_file:
                print(f"\nüéâ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")
                print(f"üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
                
                # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
                print(f"\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø:")
                print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–¥–µ–ª—å: {len(weekly_messages)}")
                print(f"–°–æ–∑–¥–∞–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π: {len(comparisons)}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                total_planned = sum(comp['total_planned'] for comp in comparisons)
                total_facts = sum(comp['total_facts'] for comp in comparisons)
                total_matched = sum(comp['total_matched'] for comp in comparisons)
                total_unmatched_plans = sum(comp['total_unmatched_plans'] for comp in comparisons)
                total_new_tasks = sum(comp['total_new_tasks'] for comp in comparisons)
                
                print(f"–í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {total_planned}")
                print(f"–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (—Ñ–∞–∫—Ç): {total_facts}")
                print(f"–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {total_matched}")
                print(f"–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–ø–ª–∞–Ω): {total_unmatched_plans}")
                print(f"–ù–æ–≤—ã—Ö –∑–∞–¥–∞—á (—Ñ–∞–∫—Ç): {total_new_tasks}")
                
                avg_completion = (total_matched / total_planned * 100) if total_planned > 0 else 0
                print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {avg_completion:.1f}%")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é
                sender_stats = {}
                for comp in comparisons:
                    sender = comp['sender']
                    if sender not in sender_stats:
                        sender_stats[sender] = {'planned': 0, 'matched': 0}
                    sender_stats[sender]['planned'] += comp['total_planned']
                    sender_stats[sender]['matched'] += comp['total_matched']
                
                print(f"\nüë• –¢–û–ü –†–£–ö–û–í–û–î–ò–¢–ï–õ–ï–ô –ü–û –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Æ:")
                for sender, stats in sorted(sender_stats.items(), key=lambda x: x[1]['matched'], reverse=True)[:5]:
                    completion_rate = (stats['matched'] / stats['planned'] * 100) if stats['planned'] > 0 else 0
                    print(f"  {sender}: {stats['matched']}/{stats['planned']} ({completion_rate:.1f}%)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    analyzer = DetailedTaskComparisonAnalyzer()
    await analyzer.run_detailed_comparison()

if __name__ == "__main__":
    asyncio.run(main())
