#!/usr/bin/env python3
"""
Easy Personal Telegram Automation
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import asyncio
import json
import getpass
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError
from loguru import logger
import os

class EasyTelegramAutomation:
    def __init__(self):
        self.config = self.load_config()
        self.client = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        os.makedirs("output/logs", exist_ok=True)
        logger.add("output/logs/personal_automation.log", rotation="1 day", retention="7 days")
        
    def load_config(self):
        with open("config/personal_config.json", 'r', encoding='utf-8') as f:
            return json.load(f)
    
    async def connect(self):
        try:
            self.client = TelegramClient(
                self.config['session_name'],
                self.config['api_id'],
                self.config['api_hash']
            )
            
            print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–¥–æ–≤ –∏ –ø–∞—Ä–æ–ª–µ–π
            await self.client.start(
                phone=self.config['phone'],
                code_callback=self.code_callback,
                password_callback=self.password_callback
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if await self.client.is_user_authorized():
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                me = await self.client.get_me()
                print(f"üë§ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name} {me.last_name or ''}")
                print(f"üì± –ù–æ–º–µ—Ä: {me.phone}")
                print(f"üÜî ID: {me.id}")
                
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def code_callback(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        print("\nüì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram:")
        print("üí° –ö–æ–¥ –ø—Ä–∏–¥–µ—Ç –≤ –≤–∏–¥–µ SMS –∏–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram")
        code = input("–ö–æ–¥: ").strip()
        return code
    
    def password_callback(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞—Ä–æ–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        print("\nüîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        print("üí° –ü–∞—Ä–æ–ª—å –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –≤–≤–æ–¥–µ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        password = getpass.getpass("–ü–∞—Ä–æ–ª—å: ")
        return password
    
    async def send_message_to_self(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∞–º–æ–º—É —Å–µ–±–µ"""
        try:
            me = await self.client.get_me()
            await self.client.send_message(me.id, message)
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∞–º–æ–º—É —Å–µ–±–µ")
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    
    async def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_message = "ü§ñ –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Telegram\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
            await self.send_message_to_self(test_message)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    async def monitor_messages(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        @self.client.on(events.NewMessage)
        async def handle_new_message(event):
            try:
                sender = await event.get_sender()
                message_text = event.message.text
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                sender_name = sender.first_name if sender else "Unknown"
                logger.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name}: {message_text[:50]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                keywords = self.config['monitoring']['keywords']
                for keyword in keywords:
                    if keyword.lower() in message_text.lower():
                        alert = f"üö® –í–ê–ñ–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï!\n"
                        alert += f"–û—Ç: {sender_name}\n"
                        alert += f"–¢–µ–∫—Å—Ç: {message_text[:100]}..."
                        
                        await self.send_message_to_self(alert)
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}")
                        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}")
                        break
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def start_automation(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
        print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!")
        print("üìã –§—É–Ω–∫—Ü–∏–∏:")
        print("   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("   ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
        print("   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–∞–º–æ–º—É —Å–µ–±–µ")
        print()
        print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("-" * 50)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if await self.test_connection():
            print("‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–µ–ª")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await self.monitor_messages()
        
        # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
        await self.client.run_until_disconnected()

async def main():
    automation = EasyTelegramAutomation()
    
    if await automation.connect():
        await automation.start_automation()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
        print("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API –∫–ª—é—á–∏")
        print("   2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
        print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")

if __name__ == "__main__":
    asyncio.run(main())
