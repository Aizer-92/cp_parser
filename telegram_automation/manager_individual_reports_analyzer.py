#!/usr/bin/env python3
"""
Manager Individual Reports Analyzer for Main mega –¢–û–ü
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–µ—Å—è—Ü–∞
"""

import asyncio
import json
import re
from datetime import datetime, timedelta
from telethon import TelegramClient
from loguru import logger
import pandas as pd
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
import os

class ManagerIndividualReportsAnalyzer:
    def __init__(self):
        self.config = self.load_config()
        self.client = None
        self.target_chat_name = "Main mega –¢–û–ü"
        self.target_chat_id = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        os.makedirs("output/logs", exist_ok=True)
        logger.add("output/logs/manager_reports.log", rotation="1 day", retention="7 days")
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.colors = {
            'green': '28A745',      # –í—ã–ø–æ–ª–Ω–µ–Ω–æ
            'yellow': 'FFC107',     # –ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            'red': 'DC3545',        # –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            'blue': '007BFF',       # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            'orange': 'FD7E14',     # –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            'purple': '6F42C1',     # –ê–∫—Ü–µ–Ω—Ç—ã
            'light_gray': 'F8F9FA', # –§–æ–Ω
            'dark_gray': '6C757D'   # –¢–µ–∫—Å—Ç
        }
        
    def load_config(self):
        with open("config/personal_config.json", 'r', encoding='utf-8') as f:
            return json.load(f)
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            self.client = TelegramClient(
                self.config['session_name'],
                self.config['api_id'],
                self.config['api_hash']
            )
            
            await self.client.start()
            
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                print(f"üë§ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name}")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def find_target_chat(self):
        """–ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            print(f"üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞ '{self.target_chat_name}'...")
            
            dialogs = await self.client.get_dialogs()
            
            for dialog in dialogs:
                if self.target_chat_name.lower() in dialog.name.lower():
                    self.target_chat_id = dialog.id
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç: {dialog.name} (ID: {dialog.id})")
                    return True
            
            print(f"‚ùå –ß–∞—Ç '{self.target_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞: {e}")
            return False
    
    async def get_recent_messages(self, months_back=2):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–µ—Å—è—Ü–∞"""
        try:
            print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {months_back} –º–µ—Å—è—Ü–∞...")
            
            today = datetime.now()
            start_date = today - timedelta(days=months_back * 30)
            
            messages = await self.client.get_messages(
                self.target_chat_id,
                offset_date=start_date,
                limit=10000
            )
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –Ω–µ–¥–µ–ª—è–º
            weekly_messages = {}
            
            for msg in messages:
                if msg.text and len(msg.text.strip()) > 50:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–¥–µ–ª—é
                    msg_date = msg.date.replace(tzinfo=None)
                    week_start = msg_date - timedelta(days=msg_date.weekday())
                    week_key = week_start.strftime('%Y-%m-%d')
                    
                    if week_key not in weekly_messages:
                        weekly_messages[week_key] = []
                    
                    sender_name = await self.get_sender_name(msg)
                    weekly_messages[week_key].append({
                        'id': msg.id,
                        'date': msg_date,
                        'text': msg.text.strip(),
                        'sender': sender_name,
                        'week_start': week_start,
                        'week_key': week_key
                    })
            
            print(f"üìä –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–æ {len(weekly_messages)} –Ω–µ–¥–µ–ª—è–º")
            return weekly_messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return {}
    
    async def get_sender_name(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        try:
            sender = await message.get_sender()
            if sender:
                return f"{sender.first_name} {sender.last_name or ''}".strip()
            return "Unknown"
        except:
            return "Unknown"
    
    def extract_plan_fact_sections(self, text, sender, message_date):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–ª–∞–Ω –∏ —Ñ–∞–∫—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            lines = text.split('\n')
            
            plan_section = []
            fact_section = []
            current_section = None
            
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª
                if re.match(r'^–ø–ª–∞–Ω[:\s]*', line.lower()):
                    current_section = 'plan'
                    continue
                elif re.match(r'^—Ñ–∞–∫—Ç[:\s]*', line.lower()):
                    current_section = 'fact'
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª
                if current_section == 'plan':
                    plan_section.append(line)
                elif current_section == 'fact':
                    fact_section.append(line)
            
            return {
                'sender': sender,
                'date': message_date,
                'plan_tasks': plan_section,
                'fact_tasks': fact_section,
                'has_plan': len(plan_section) > 0,
                'has_fact': len(fact_section) > 0
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤: {e}")
            return None
    
    def analyze_manager_data(self, weekly_messages):
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º"""
        try:
            print("üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º...")
            
            manager_data = {}
            week_keys = sorted(weekly_messages.keys())
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –Ω–µ–¥–µ–ª—è–º (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            for i in range(len(week_keys) - 1):
                current_week = week_keys[i]
                next_week = week_keys[i + 1]
                
                current_week_messages = weekly_messages[current_week]
                next_week_messages = weekly_messages[next_week]
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
                current_week_plans = {}
                for msg in current_week_messages:
                    sections = self.extract_plan_fact_sections(msg['text'], msg['sender'], msg['date'])
                    if sections and sections['has_plan']:
                        if sections['sender'] not in current_week_plans:
                            current_week_plans[sections['sender']] = []
                        current_week_plans[sections['sender']].extend(sections['plan_tasks'])
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–∫—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
                next_week_facts = {}
                for msg in next_week_messages:
                    sections = self.extract_plan_fact_sections(msg['text'], msg['sender'], msg['date'])
                    if sections and sections['has_fact']:
                        if sections['sender'] not in next_week_facts:
                            next_week_facts[sections['sender']] = []
                        next_week_facts[sections['sender']].extend(sections['fact_tasks'])
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
                for sender in set(current_week_plans.keys()) | set(next_week_facts.keys()):
                    plan_tasks = current_week_plans.get(sender, [])
                    fact_tasks = next_week_facts.get(sender, [])
                    
                    if plan_tasks or fact_tasks:
                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
                        if sender not in manager_data:
                            manager_data[sender] = {
                                'weeks': [],
                                'total_planned': 0,
                                'total_facts': 0,
                                'total_matched': 0,
                                'total_unmatched_plans': 0,
                                'total_new_tasks': 0,
                                'all_plan_tasks': [],
                                'all_fact_tasks': [],
                                'all_matches': []
                            }
                        
                        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                        comparison = self.create_detailed_task_comparison(
                            plan_tasks, fact_tasks, sender, current_week, next_week
                        )
                        
                        if comparison:
                            manager_data[sender]['weeks'].append(comparison)
                            manager_data[sender]['total_planned'] += comparison['total_planned']
                            manager_data[sender]['total_facts'] += comparison['total_facts']
                            manager_data[sender]['total_matched'] += comparison['total_matched']
                            manager_data[sender]['total_unmatched_plans'] += comparison['total_unmatched_plans']
                            manager_data[sender]['total_new_tasks'] += comparison['total_new_tasks']
                            manager_data[sender]['all_plan_tasks'].extend(plan_tasks)
                            manager_data[sender]['all_fact_tasks'].extend(fact_tasks)
                            manager_data[sender]['all_matches'].extend(comparison['matched_tasks'])
            
            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(manager_data)} —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π")
            return manager_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    
    def create_detailed_task_comparison(self, plan_tasks, fact_tasks, sender, plan_week, fact_week):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á"""
        try:
            # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
            matched_tasks = []
            unmatched_plans = []
            unmatched_facts = []
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
            remaining_facts = fact_tasks.copy()
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –∏–∑ –ø–ª–∞–Ω–∞
            for plan_task in plan_tasks:
                best_match = None
                best_similarity = 0
                best_fact_index = -1
                
                # –ò—â–µ–º –ª—É—á—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ä–µ–¥–∏ —Ñ–∞–∫—Ç–æ–≤
                for i, fact_task in enumerate(remaining_facts):
                    similarity = self.calculate_task_similarity(plan_task, fact_task)
                    
                    if similarity > best_similarity and similarity >= 0.3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
                        best_similarity = similarity
                        best_match = fact_task
                        best_fact_index = i
                
                if best_match:
                    # –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                    matched_tasks.append({
                        'plan_task': plan_task,
                        'fact_task': best_match,
                        'similarity': best_similarity,
                        'status': self.get_match_status(best_similarity)
                    })
                    # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–∫—Ç
                    remaining_facts.pop(best_fact_index)
                else:
                    # –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                    unmatched_plans.append(plan_task)
            
            # –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–∞–∫—Ç—ã - –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            unmatched_facts = remaining_facts
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_planned = len(plan_tasks)
            total_facts = len(fact_tasks)
            total_matched = len(matched_tasks)
            total_unmatched_plans = len(unmatched_plans)
            total_new_tasks = len(unmatched_facts)
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º)
            completion_rate = (total_matched / total_planned * 100) if total_planned > 0 else 0
            
            return {
                'sender': sender,
                'plan_week': plan_week,
                'fact_week': fact_week,
                'plan_tasks': plan_tasks,
                'fact_tasks': fact_tasks,
                'matched_tasks': matched_tasks,
                'unmatched_plans': unmatched_plans,
                'unmatched_facts': unmatched_facts,
                'total_planned': total_planned,
                'total_facts': total_facts,
                'total_matched': total_matched,
                'total_unmatched_plans': total_unmatched_plans,
                'total_new_tasks': total_new_tasks,
                'completion_rate': completion_rate,
                'overall_status': self.get_overall_status(completion_rate, total_matched, total_planned)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {e}")
            return None
    
    def calculate_task_similarity(self, task1, task2):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏"""
        try:
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            t1 = task1.lower()
            t2 = task2.lower()
            
            # –£–±–∏—Ä–∞–µ–º —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            t1_clean = re.sub(r'[^\w\s]', '', t1)
            t2_clean = re.sub(r'[^\w\s]', '', t2)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
            words1 = set(t1_clean.split())
            words2 = set(t2_clean.split())
            
            if not words1 or not words2:
                return 0.0
            
            # –í—ã—á–∏—Å–ª—è–µ–º Jaccard similarity
            intersection = len(words1.intersection(words2))
            union = len(words1.union(words2))
            
            return intersection / union if union > 0 else 0.0
            
        except Exception as e:
            return 0.0
    
    def get_match_status(self, similarity):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        if similarity >= 0.7:
            return "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
        elif similarity >= 0.5:
            return "‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        elif similarity >= 0.3:
            return "üîÑ –ò–∑–º–µ–Ω–µ–Ω–æ"
        else:
            return "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    
    def get_overall_status(self, completion_rate, matched, planned):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        if completion_rate >= 80 and matched > 0:
            return "‚úÖ –û—Ç–ª–∏—á–Ω–æ"
        elif completion_rate >= 60:
            return "‚ö†Ô∏è –•–æ—Ä–æ—à–æ"
        elif completion_rate >= 40:
            return "‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ"
        elif planned > 0:
            return "‚ùå –ü–ª–æ—Ö–æ"
        else:
            return "üìù –¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"
    
    def create_manager_reports(self, manager_data, filename=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º"""
        try:
            if not filename:
                filename = f"output/manager_individual_reports_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            os.makedirs("output", exist_ok=True)
            
            workbook = openpyxl.Workbook()
            
            # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–∏—Å—Ç
            workbook.remove(workbook.active)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É
            self.create_summary_sheet(workbook, manager_data)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
            for sender, data in manager_data.items():
                if data['weeks']:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                    self.create_manager_sheet(workbook, sender, data)
            
            workbook.save(filename)
            print(f"‚úÖ –û—Ç—á–µ—Ç—ã –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º —Å–æ–∑–¥–∞–Ω—ã: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤: {e}")
            return None
    
    def create_summary_sheet(self, workbook, manager_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
        try:
            ws = workbook.create_sheet("–û–±—â–∞—è —Å–≤–æ–¥–∫–∞")
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            ws['A1'] = "–û–¢–ß–ï–¢–´ –ü–û –†–£–ö–û–í–û–î–ò–¢–ï–õ–Ø–ú - –ü–û–°–õ–ï–î–ù–ò–ï 2 –ú–ï–°–Ø–¶–ê"
            ws['A2'] = "Main mega –¢–û–ü - –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_managers = len(manager_data)
            total_planned = sum(data['total_planned'] for data in manager_data.values())
            total_facts = sum(data['total_facts'] for data in manager_data.values())
            total_matched = sum(data['total_matched'] for data in manager_data.values())
            total_unmatched_plans = sum(data['total_unmatched_plans'] for data in manager_data.values())
            total_new_tasks = sum(data['total_new_tasks'] for data in manager_data.values())
            
            avg_completion = (total_matched / total_planned * 100) if total_planned > 0 else 0
            
            ws['A4'] = "üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:"
            ws['A5'] = f"–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: {total_managers}"
            ws['A6'] = f"–í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {total_planned}"
            ws['A7'] = f"–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (—Ñ–∞–∫—Ç): {total_facts}"
            ws['A8'] = f"–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {total_matched}"
            ws['A9'] = f"–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–ø–ª–∞–Ω): {total_unmatched_plans}"
            ws['A10'] = f"–ù–æ–≤—ã—Ö –∑–∞–¥–∞—á (—Ñ–∞–∫—Ç): {total_new_tasks}"
            ws['A11'] = f"–°—Ä–µ–¥–Ω–∏–π % —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {avg_completion:.1f}%"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º
            ws['A13'] = "üë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–£–ö–û–í–û–î–ò–¢–ï–õ–Ø–ú:"
            
            headers = ['–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–ù–µ–¥–µ–ª—å', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ', '–§–∞–∫—Ç', '–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '–ù–æ–≤—ã—Ö', '% —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞—Ç—É—Å']
            for col, header in enumerate(headers, 1):
                ws.cell(row=14, column=col, value=header)
            
            row = 15
            for sender, data in sorted(manager_data.items(), key=lambda x: x[1]['total_matched'], reverse=True):
                weeks_count = len(data['weeks'])
                completion_rate = (data['total_matched'] / data['total_planned'] * 100) if data['total_planned'] > 0 else 0
                status = self.get_overall_status(completion_rate, data['total_matched'], data['total_planned'])
                
                ws.cell(row=row, column=1, value=sender)
                ws.cell(row=row, column=2, value=weeks_count)
                ws.cell(row=row, column=3, value=data['total_planned'])
                ws.cell(row=row, column=4, value=data['total_facts'])
                ws.cell(row=row, column=5, value=data['total_matched'])
                ws.cell(row=row, column=6, value=data['total_unmatched_plans'])
                ws.cell(row=row, column=7, value=data['total_new_tasks'])
                ws.cell(row=row, column=8, value=f"{completion_rate:.1f}%")
                ws.cell(row=row, column=9, value=status)
                
                row += 1
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.format_summary_sheet(ws)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞: {e}")
    
    def create_manager_sheet(self, workbook, sender, data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
        try:
            # –û—á–∏—â–∞–µ–º –∏–º—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞
            sheet_name = self.clean_sheet_name(sender)
            ws = workbook.create_sheet(sheet_name)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
            ws['A1'] = f"–û–¢–ß–ï–¢ –ü–û –†–£–ö–û–í–û–î–ò–¢–ï–õ–Æ: {sender}"
            ws['A2'] = f"–ü–µ—Ä–∏–æ–¥: –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–µ—Å—è—Ü–∞"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
            completion_rate = (data['total_matched'] / data['total_planned'] * 100) if data['total_planned'] > 0 else 0
            status = self.get_overall_status(completion_rate, data['total_matched'], data['total_planned'])
            
            ws['A4'] = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–£–ö–û–í–û–î–ò–¢–ï–õ–Ø:"
            ws['A5'] = f"–ù–µ–¥–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º–∏: {len(data['weeks'])}"
            ws['A6'] = f"–í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {data['total_planned']}"
            ws['A7'] = f"–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (—Ñ–∞–∫—Ç): {data['total_facts']}"
            ws['A8'] = f"–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {data['total_matched']}"
            ws['A9'] = f"–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–ø–ª–∞–Ω): {data['total_unmatched_plans']}"
            ws['A10'] = f"–ù–æ–≤—ã—Ö –∑–∞–¥–∞—á (—Ñ–∞–∫—Ç): {data['total_new_tasks']}"
            ws['A11'] = f"–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {completion_rate:.1f}%"
            ws['A12'] = f"–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}"
            
            # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –Ω–µ–¥–µ–ª—è–º
            ws['A14'] = "üìÖ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ù–ï–î–ï–õ–Ø–ú:"
            
            headers = ['–ù–µ–¥–µ–ª—è –ø–ª–∞–Ω–∞', '–ù–µ–¥–µ–ª—è —Ñ–∞–∫—Ç–∞', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ', '–§–∞–∫—Ç', '–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '–ù–æ–≤—ã—Ö', '% —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞—Ç—É—Å']
            for col, header in enumerate(headers, 1):
                ws.cell(row=15, column=col, value=header)
            
            row = 16
            for week_data in data['weeks']:
                ws.cell(row=row, column=1, value=week_data['plan_week'])
                ws.cell(row=row, column=2, value=week_data['fact_week'])
                ws.cell(row=row, column=3, value=week_data['total_planned'])
                ws.cell(row=row, column=4, value=week_data['total_facts'])
                ws.cell(row=row, column=5, value=week_data['total_matched'])
                ws.cell(row=row, column=6, value=week_data['total_unmatched_plans'])
                ws.cell(row=row, column=7, value=week_data['total_new_tasks'])
                ws.cell(row=row, column=8, value=f"{week_data['completion_rate']:.1f}%")
                ws.cell(row=row, column=9, value=week_data['overall_status'])
                
                row += 1
            
            # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            if data['all_matches']:
                ws['A' + str(row + 2)] = "‚úÖ –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò:"
                
                match_headers = ['–ù–µ–¥–µ–ª—è –ø–ª–∞–Ω–∞', '–ù–µ–¥–µ–ª—è —Ñ–∞–∫—Ç–∞', '–ó–∞–¥–∞—á–∞ –∏–∑ –ø–ª–∞–Ω–∞', '–ó–∞–¥–∞—á–∞ –∏–∑ —Ñ–∞–∫—Ç–∞', '–°—Ö–æ–¥—Å—Ç–≤–æ', '–°—Ç–∞—Ç—É—Å']
                for col, header in enumerate(match_headers, 1):
                    ws.cell(row=row + 3, column=col, value=header)
                
                match_row = row + 4
                for match in data['all_matches'][:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
                    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–¥–µ–ª—é –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞
                    week_info = self.find_week_for_match(match, data['weeks'])
                    
                    ws.cell(row=match_row, column=1, value=week_info['plan_week'])
                    ws.cell(row=match_row, column=2, value=week_info['fact_week'])
                    ws.cell(row=match_row, column=3, value=match['plan_task'])
                    ws.cell(row=match_row, column=4, value=match['fact_task'])
                    ws.cell(row=match_row, column=5, value=f"{match['similarity']:.2f}")
                    ws.cell(row=match_row, column=6, value=match['status'])
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º
                    for col in [3, 4]:
                        cell = ws.cell(row=match_row, column=col)
                        cell.alignment = Alignment(wrap_text=True, vertical='top')
                        ws.row_dimensions[match_row].height = 60
                    
                    match_row += 1
                
                if len(data['all_matches']) > 20:
                    ws['A' + str(match_row)] = f"... –∏ –µ—â–µ {len(data['all_matches']) - 20} —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.format_manager_sheet(ws)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è {sender}: {e}")
    
    def find_week_for_match(self, match, weeks):
        """–ù–∞–π—Ç–∏ –Ω–µ–¥–µ–ª—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
        for week in weeks:
            for week_match in week['matched_tasks']:
                if (week_match['plan_task'] == match['plan_task'] and 
                    week_match['fact_task'] == match['fact_task']):
                    return {
                        'plan_week': week['plan_week'],
                        'fact_week': week['fact_week']
                    }
        return {'plan_week': 'N/A', 'fact_week': 'N/A'}
    
    def clean_sheet_name(self, name):
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞"""
        # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        invalid_chars = ['\\', '/', '*', '?', ':', '[', ']']
        for char in invalid_chars:
            name = name.replace(char, '')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(name) > 31:
            name = name[:28] + "..."
        
        return name
    
    def format_summary_sheet(self, ws):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ws['A1'].font = Font(size=16, bold=True, color=self.colors['blue'])
        ws['A2'].font = Font(size=14, bold=True)
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫
        ws.merge_cells('A1:I1')
        ws.merge_cells('A2:I2')
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in range(1, 10):
            ws.column_dimensions[openpyxl.utils.get_column_letter(col)].width = 15
    
    def format_manager_sheet(self, ws):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ws['A1'].font = Font(size=16, bold=True, color=self.colors['purple'])
        ws['A2'].font = Font(size=14, bold=True)
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫
        ws.merge_cells('A1:I1')
        ws.merge_cells('A2:I2')
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in range(1, 10):
            ws.column_dimensions[openpyxl.utils.get_column_letter(col)].width = 15
    
    async def run_manager_reports(self):
        """–ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º"""
        try:
            print("üöÄ –ó–ê–ü–£–°–ö –°–û–ó–î–ê–ù–ò–Ø –û–¢–ß–ï–¢–û–í –ü–û –†–£–ö–û–í–û–î–ò–¢–ï–õ–Ø–ú")
            print("=" * 65)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not await self.connect():
                return
            
            # –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
            if not await self.find_target_chat():
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–µ—Å—è—Ü–∞
            weekly_messages = await self.get_recent_messages(months_back=2)
            
            if not weekly_messages:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–µ—Å—è—Ü–∞")
                return
            
            # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º
            manager_data = self.analyze_manager_data(weekly_messages)
            
            if not manager_data:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
            report_file = self.create_manager_reports(manager_data)
            
            if report_file:
                print(f"\nüéâ –û—Ç—á–µ—Ç—ã –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º —Å–æ–∑–¥–∞–Ω—ã!")
                print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
                
                # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
                print(f"\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
                print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–¥–µ–ª—å: {len(weekly_messages)}")
                print(f"–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: {len(manager_data)}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º
                total_planned = sum(data['total_planned'] for data in manager_data.values())
                total_facts = sum(data['total_facts'] for data in manager_data.values())
                total_matched = sum(data['total_matched'] for data in manager_data.values())
                
                print(f"–í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {total_planned}")
                print(f"–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (—Ñ–∞–∫—Ç): {total_facts}")
                print(f"–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {total_matched}")
                
                avg_completion = (total_matched / total_planned * 100) if total_planned > 0 else 0
                print(f"–°—Ä–µ–¥–Ω–∏–π % —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {avg_completion:.1f}%")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
                print(f"\nüë• –†–£–ö–û–í–û–î–ò–¢–ï–õ–ò –° –î–ê–ù–ù–´–ú–ò:")
                for sender, data in sorted(manager_data.items(), key=lambda x: x[1]['total_matched'], reverse=True):
                    completion_rate = (data['total_matched'] / data['total_planned'] * 100) if data['total_planned'] > 0 else 0
                    weeks_count = len(data['weeks'])
                    print(f"  {sender}: {data['total_matched']}/{data['total_planned']} ({completion_rate:.1f}%) - {weeks_count} –Ω–µ–¥–µ–ª—å")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    analyzer = ManagerIndividualReportsAnalyzer()
    await analyzer.run_manager_reports()

if __name__ == "__main__":
    asyncio.run(main())
