#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ï–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤
Main mega –¢–û–ü - –ò—é–ª—å-–ê–≤–≥—É—Å—Ç 2025
"""

import asyncio
import json
import re
from datetime import datetime, timedelta
from telethon import TelegramClient
from telethon.tl.types import PeerChannel
import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils.dataframe import dataframe_to_rows
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class UnifiedTaskComparisonAnalyzer:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with open('config/personal_config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        self.api_id = config['api_id']
        self.api_hash = config['api_hash']
        self.phone = config['phone']
        self.session_name = config['session_name']
        self.chat_name = 'Main mega –¢–û–ü'
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        self.client = TelegramClient(self.session_name, self.api_id, self.api_hash)
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            await self.client.start(phone=self.phone)
            me = await self.client.get_me()
            logger.info(f"üë§ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def find_chat(self):
        """–ü–æ–∏—Å–∫ —á–∞—Ç–∞ –ø–æ –∏–º–µ–Ω–∏"""
        try:
            logger.info(f"üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞ '{self.chat_name}'...")
            async for dialog in self.client.iter_dialogs():
                if self.chat_name in dialog.name:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç: {dialog.name} (ID: {dialog.id})")
                    return dialog
            logger.error(f"‚ùå –ß–∞—Ç '{self.chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞: {e}")
            return None
    
    async def get_july_august_messages(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –∏—é–ª—å –∏ –∞–≤–≥—É—Å—Ç 2025"""
        try:
            logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –∏—é–ª—å –∏ –∞–≤–≥—É—Å—Ç 2025...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ (—É–±–∏—Ä–∞–µ–º timezone)
            july_start = datetime(2025, 7, 1)
            august_end = datetime(2025, 8, 31, 23, 59, 59)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.client.get_messages(
                self.chat,
                offset_date=july_start,
                limit=20000
            )
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (—É–±–∏—Ä–∞–µ–º timezone –∏–∑ –¥–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π)
            filtered_messages = []
            for msg in messages:
                if msg.date:
                    # –£–±–∏—Ä–∞–µ–º timezone –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    msg_date = msg.date.replace(tzinfo=None)
                    if july_start <= msg_date <= august_end:
                        filtered_messages.append(msg)
            
            logger.info(f"üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –∏—é–ª—å-–∞–≤–≥—É—Å—Ç")
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–∞–ª–æ, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ
            if len(filtered_messages) < 50:
                logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
                messages = await self.client.get_messages(
                    self.chat,
                    limit=50000
                )
                
                filtered_messages = []
                for msg in messages:
                    if msg.date:
                        # –£–±–∏—Ä–∞–µ–º timezone –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        msg_date = msg.date.replace(tzinfo=None)
                        if july_start <= msg_date <= august_end:
                            filtered_messages.append(msg)
                
                logger.info(f"üìä –ü–æ—Å–ª–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {len(filtered_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –∏—é–ª—å-–∞–≤–≥—É—Å—Ç")
            
            return filtered_messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    def extract_plan_fact_sections(self, text, sender, message_date):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–ª–∞–Ω –∏ —Ñ–∞–∫—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            lines = text.split('\n')
            
            plan_section = []
            fact_section = []
            current_section = None
            
            # –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º "–ü–ª–∞–Ω:" –∏ "–§–∞–∫—Ç:"
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                if re.match(r'^–ø–ª–∞–Ω[:\s]*', line.lower()):
                    current_section = 'plan'
                    continue
                elif re.match(r'^—Ñ–∞–∫—Ç[:\s]*', line.lower()):
                    current_section = 'fact'
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª
                if current_section == 'plan':
                    plan_section.append(line)
                elif current_section == 'fact':
                    fact_section.append(line)
            
            # –ú–µ—Ç–æ–¥ 2: –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–∞–∑–¥–µ–ª—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –∏—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Å–ø–∏—Å–∫–∏
            if not plan_section and not fact_section:
                numbered_lines = []
                for line in lines:
                    line = line.strip()
                    if re.match(r'^\d+[\.\)]', line):
                        numbered_lines.append(line)
                
                if len(numbered_lines) > 0:
                    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - –ø–ª–∞–Ω, –≤—Ç–æ—Ä–∞—è - —Ñ–∞–∫—Ç)
                    mid_point = len(numbered_lines) // 2
                    plan_section = numbered_lines[:mid_point]
                    fact_section = numbered_lines[mid_point:]
            
            # –ú–µ—Ç–æ–¥ 3: –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–µ—Ñ–∏—Å–∞–º–∏ –∏–ª–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏
            if not plan_section and not fact_section:
                bullet_lines = []
                for line in lines:
                    line = line.strip()
                    if re.match(r'^[-‚Ä¢*]\s', line):
                        bullet_lines.append(line)
                
                if len(bullet_lines) > 0:
                    mid_point = len(bullet_lines) // 2
                    plan_section = bullet_lines[:mid_point]
                    fact_section = bullet_lines[mid_point:]
            
            # –ú–µ—Ç–æ–¥ 4: –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–æ–∫ (–¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
            if not plan_section and not fact_section:
                non_empty_lines = [line.strip() for line in lines if line.strip() and len(line.strip()) > 3]
                if len(non_empty_lines) > 3:  # –ú–∏–Ω–∏–º—É–º 4 —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                    mid_point = len(non_empty_lines) // 2
                    plan_section = non_empty_lines[:mid_point]
                    fact_section = non_empty_lines[mid_point:]
            
            # –ú–µ—Ç–æ–¥ 5: –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (–µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Å–ª–æ–≤–∞ "–ø–ª–∞–Ω–∏—Ä—É—é", "—Å–¥–µ–ª–∞–ª", "–≤—ã–ø–æ–ª–Ω–∏–ª")
            if not plan_section and not fact_section:
                plan_keywords = ['–ø–ª–∞–Ω–∏—Ä—É—é', '–ø–ª–∞–Ω–∏—Ä—É–µ–º', '–±—É–¥–µ–º', '—Å–æ–±–∏—Ä–∞–µ–º—Å—è', '–Ω–∞–º–µ—Ä–µ–Ω—ã']
                fact_keywords = ['—Å–¥–µ–ª–∞–ª', '—Å–¥–µ–ª–∞–ª–∏', '–≤—ã–ø–æ–ª–Ω–∏–ª', '–≤—ã–ø–æ–ª–Ω–∏–ª–∏', '–∑–∞–≤–µ—Ä—à–∏–ª', '–∑–∞–≤–µ—Ä—à–∏–ª–∏']
                
                plan_lines = []
                fact_lines = []
                
                for line in lines:
                    line = line.strip()
                    if not line or len(line) < 5:
                        continue
                    
                    line_lower = line.lower()
                    if any(keyword in line_lower for keyword in plan_keywords):
                        plan_lines.append(line)
                    elif any(keyword in line_lower for keyword in fact_keywords):
                        fact_lines.append(line)
                
                if plan_lines and fact_lines:
                    plan_section = plan_lines
                    fact_section = fact_lines
            
            return {
                'sender': sender,
                'date': message_date,
                'plan_tasks': plan_section,
                'fact_tasks': fact_section,
                'has_plan': len(plan_section) > 0,
                'has_fact': len(fact_section) > 0
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤: {e}")
            return None
    
    def get_week_range(self, date):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–∞—Ç—ã"""
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–µ–¥–µ–ª–∏
        days_since_monday = date.weekday()
        monday = date - timedelta(days=days_since_monday)
        sunday = monday + timedelta(days=6)
        
        return monday, sunday
    
    def format_week_range(self, monday, sunday):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–µ–¥–µ–ª–∏"""
        return f"{monday.strftime('%d.%m')}-{sunday.strftime('%d.%m')}"
    
    def calculate_task_similarity(self, task1, task2):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ö–æ–∂–µ—Å—Ç–∏ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏"""
        try:
            # –û—á–∏—â–∞–µ–º –∑–∞–¥–∞—á–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_task1 = re.sub(r'[^\w\s]', '', task1.lower())
            clean_task2 = re.sub(r'[^\w\s]', '', task2.lower())
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
            words1 = set(clean_task1.split())
            words2 = set(clean_task2.split())
            
            # –£–±–∏—Ä–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
            stop_words = {'–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–∑–∞', '–∏–∑', '–∫', '–æ', '—É', '—è', '–º—ã', '–æ–Ω', '–æ–Ω–∞', '–æ–Ω–æ', '–æ–Ω–∏', '—ç—Ç–æ', '—Ç–æ', '—Ç–∞–∫', '–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∫–∞–∫–æ–π', '–∫–∞–∫–∞—è', '–∫–∞–∫–æ–µ', '–∫–∞–∫–∏–µ', '—á–µ–π', '—á—å—è', '—á—å—ë', '—á—å–∏', '–º–Ω–æ–≥–æ', '–º–∞–ª–æ', '–±–æ–ª—å—à–µ', '–º–µ–Ω—å—à–µ', '–≤—Å–µ', '–≤—Å—è', '–≤—Å—ë', '–≤—Å–µ—Ö', '–≤—Å–µ—Ö', '–∫–∞–∂–¥—ã–π', '–∫–∞–∂–¥–∞—è', '–∫–∞–∂–¥–æ–µ', '–∫–∞–∂–¥—ã–µ', '–ª—é–±–æ–π', '–ª—é–±–∞—è', '–ª—é–±–æ–µ', '–ª—é–±—ã–µ', '–Ω–∏–∫—Ç–æ', '–Ω–∏—á—Ç–æ', '–Ω–∏–≥–¥–µ', '–Ω–∏–∫–æ–≥–¥–∞', '–Ω–∏–ø–æ—á–µ–º—É', '–Ω–∏–∫–∞–∫–æ–π', '–Ω–∏–∫–∞–∫–∞—è', '–Ω–∏–∫–∞–∫–æ–µ', '–Ω–∏–∫–∞–∫–∏–µ', '–Ω–∏—á–µ–π', '–Ω–∏—á—å—è', '–Ω–∏—á—å—ë', '–Ω–∏—á—å–∏'}
            words1 = words1 - stop_words
            words2 = words2 - stop_words
            
            if not words1 or not words2:
                return 0.0
            
            # –í—ã—á–∏—Å–ª—è–µ–º Jaccard similarity
            intersection = len(words1.intersection(words2))
            union = len(words1.union(words2))
            
            return intersection / union if union > 0 else 0.0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏: {e}")
            return 0.0
    
    def find_best_match(self, plan_task, fact_tasks, threshold=0.3):
        """–ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∞ —Å—Ä–µ–¥–∏ —Ñ–∞–∫—Ç–æ–≤"""
        best_match = None
        best_similarity = 0.0
        
        for fact_task in fact_tasks:
            similarity = self.calculate_task_similarity(plan_task, fact_task)
            if similarity > best_similarity and similarity >= threshold:
                best_similarity = similarity
                best_match = fact_task
        
        return best_match, best_similarity
    
    def analyze_unified_tasks(self, messages):
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –µ–¥–∏–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        try:
            logger.info("üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–∞–Ω—ã –∏ —Ñ–∞–∫—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
            plan_fact_data = []
            for msg in messages:
                if msg.text and msg.sender:
                    sender_name = msg.sender.first_name if msg.sender.first_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                    if hasattr(msg.sender, 'last_name') and msg.sender.last_name:
                        sender_name += f" {msg.sender.last_name}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–µ (–±–æ–ª—å—à–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)
                    if len(msg.text.strip()) > 50:
                        extracted = self.extract_plan_fact_sections(msg.text, sender_name, msg.date)
                        if extracted and (extracted['has_plan'] or extracted['has_fact']):
                            plan_fact_data.append(extracted)
                            logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name}: {len(extracted['plan_tasks'])} –ø–ª–∞–Ω–æ–≤, {len(extracted['fact_tasks'])} —Ñ–∞–∫—Ç–æ–≤")
            
            logger.info(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(plan_fact_data)} –±–æ–ª—å—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–ª–∞–Ω–∞–º–∏/—Ñ–∞–∫—Ç–∞–º–∏")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–µ–¥–µ–ª—è–º
            weekly_data = {}
            for data in plan_fact_data:
                plan_monday, plan_sunday = self.get_week_range(data['date'])
                plan_week = self.format_week_range(plan_monday, plan_sunday)
                
                if plan_week not in weekly_data:
                    weekly_data[plan_week] = {
                        'plan_week': plan_week,
                        'fact_week': self.format_week_range(plan_monday + timedelta(days=7), plan_sunday + timedelta(days=7)),
                        'plans': [],
                        'facts': [],
                        'managers': set()
                    }
                
                weekly_data[plan_week]['managers'].add(data['sender'])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω—ã
                for task in data['plan_tasks']:
                    weekly_data[plan_week]['plans'].append({
                        'task': task,
                        'manager': data['sender'],
                        'date': data['date']
                    })
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç—ã (–¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏)
                fact_week = self.format_week_range(plan_monday + timedelta(days=7), plan_sunday + timedelta(days=7))
                if fact_week not in weekly_data:
                    weekly_data[fact_week] = {
                        'plan_week': self.format_week_range(plan_monday - timedelta(days=7), plan_sunday - timedelta(days=7)),
                        'fact_week': fact_week,
                        'plans': [],
                        'facts': [],
                        'managers': set()
                    }
                
                weekly_data[fact_week]['managers'].add(data['sender'])
                for task in data['fact_tasks']:
                    weekly_data[fact_week]['facts'].append({
                        'task': task,
                        'manager': data['sender'],
                        'date': data['date']
                    })
            
            logger.info(f"üìä –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–æ {len(weekly_data)} –Ω–µ–¥–µ–ª—è–º")
            
            # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
            unified_tasks = []
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            sorted_weeks = sorted(weekly_data.keys())
            
            for week in sorted_weeks:
                week_data = weekly_data[week]
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –∏ —Ñ–∞–∫—Ç—ã —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
                plan_tasks = week_data['plans']
                fact_tasks = week_data['facts']
                
                logger.info(f"üìÖ –ù–µ–¥–µ–ª—è {week}: {len(plan_tasks)} –ø–ª–∞–Ω–æ–≤, {len(fact_tasks)} —Ñ–∞–∫—Ç–æ–≤")
                
                # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
                matched_plans = set()
                matched_facts = set()
                
                for plan_item in plan_tasks:
                    best_match, similarity = self.find_best_match(plan_item['task'], [f['task'] for f in fact_tasks])
                    
                    if best_match:
                        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–∫—Ç
                        fact_item = next(f for f in fact_tasks if f['task'] == best_match)
                        
                        unified_tasks.append({
                            '–ù–µ–¥–µ–ª—è –ø–ª–∞–Ω–∞': week_data['plan_week'],
                            '–ù–µ–¥–µ–ª—è —Ñ–∞–∫—Ç–∞': week_data['fact_week'],
                            '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å': plan_item['manager'],
                            '–ó–∞–¥–∞—á–∞ –ø–ª–∞–Ω–∞': plan_item['task'],
                            '–ó–∞–¥–∞—á–∞ —Ñ–∞–∫—Ç–∞': fact_item['task'],
                            '–°—Ö–æ–∂–µ—Å—Ç—å': f"{similarity:.2f}",
                            '–°—Ç–∞—Ç—É—Å': self.get_match_status(similarity),
                            '–¢–∏–ø': '–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
                        })
                        
                        matched_plans.add(plan_item['task'])
                        matched_facts.add(best_match)
                
                # –ù–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã
                for plan_item in plan_tasks:
                    if plan_item['task'] not in matched_plans:
                        unified_tasks.append({
                            '–ù–µ–¥–µ–ª—è –ø–ª–∞–Ω–∞': week_data['plan_week'],
                            '–ù–µ–¥–µ–ª—è —Ñ–∞–∫—Ç–∞': week_data['fact_week'],
                            '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å': plan_item['manager'],
                            '–ó–∞–¥–∞—á–∞ –ø–ª–∞–Ω–∞': plan_item['task'],
                            '–ó–∞–¥–∞—á–∞ —Ñ–∞–∫—Ç–∞': '',
                            '–°—Ö–æ–∂–µ—Å—Ç—å': '',
                            '–°—Ç–∞—Ç—É—Å': '‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
                            '–¢–∏–ø': '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
                        })
                
                # –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (—Ñ–∞–∫—Ç—ã –±–µ–∑ –ø–ª–∞–Ω–æ–≤)
                for fact_item in fact_tasks:
                    if fact_item['task'] not in matched_facts:
                        unified_tasks.append({
                            '–ù–µ–¥–µ–ª—è –ø–ª–∞–Ω–∞': week_data['plan_week'],
                            '–ù–µ–¥–µ–ª—è —Ñ–∞–∫—Ç–∞': week_data['fact_week'],
                            '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å': fact_item['manager'],
                            '–ó–∞–¥–∞—á–∞ –ø–ª–∞–Ω–∞': '',
                            '–ó–∞–¥–∞—á–∞ —Ñ–∞–∫—Ç–∞': fact_item['task'],
                            '–°—Ö–æ–∂–µ—Å—Ç—å': '',
                            '–°—Ç–∞—Ç—É—Å': 'üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
                            '–¢–∏–ø': '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞'
                        })
            
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω –µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ {len(unified_tasks)} –∑–∞–¥–∞—á")
            return unified_tasks
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á: {e}")
            return []
    
    def get_match_status(self, similarity):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        if similarity >= 0.7:
            return "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
        elif similarity >= 0.5:
            return "üîÑ –ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        elif similarity >= 0.3:
            return "üîÑ –ò–∑–º–µ–Ω–µ–Ω–æ"
        else:
            return "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    
    def create_unified_report(self, unified_tasks):
        """–°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
            
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(unified_tasks)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–µ–¥–µ–ª–µ –ø–ª–∞–Ω–∞, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∏ —Ç–∏–ø—É
            df = df.sort_values(['–ù–µ–¥–µ–ª—è –ø–ª–∞–Ω–∞', '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–¢–∏–ø'])
            
            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"output/unified_task_comparison_{timestamp}.xlsx"
            
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                # –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å –µ–¥–∏–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
                df.to_excel(writer, sheet_name='–ï–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á', index=False)
                
                # –ü–æ–ª—É—á–∞–µ–º workbook –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                workbook = writer.book
                worksheet = writer.sheets['–ï–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á']
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                self.format_unified_worksheet(worksheet, df)
                
                # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç
                self.create_summary_sheet(workbook, df)
                
                # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º
                self.create_managers_sheet(workbook, df)
            
            logger.info(f"‚úÖ –ï–¥–∏–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return None
    
    def format_unified_worksheet(self, worksheet, df):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            column_widths = {
                'A': 15,  # –ù–µ–¥–µ–ª—è –ø–ª–∞–Ω–∞
                'B': 15,  # –ù–µ–¥–µ–ª—è —Ñ–∞–∫—Ç–∞
                'C': 20,  # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
                'D': 50,  # –ó–∞–¥–∞—á–∞ –ø–ª–∞–Ω–∞
                'E': 50,  # –ó–∞–¥–∞—á–∞ —Ñ–∞–∫—Ç–∞
                'F': 10,  # –°—Ö–æ–∂–µ—Å—Ç—å
                'G': 20,  # –°—Ç–∞—Ç—É—Å
                'H': 15   # –¢–∏–ø
            }
            
            for col, width in column_widths.items():
                worksheet.column_dimensions[col].width = width
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            header_font = Font(bold=True, color="FFFFFF")
            header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
            
            for cell in worksheet[1]:
                cell.font = header_font
                cell.fill = header_fill
                cell.alignment = Alignment(horizontal="center", vertical="center")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –ø–æ —Ç–∏–ø—É
            for row_idx, row in enumerate(worksheet.iter_rows(min_row=2), start=2):
                task_type = row[7].value  # –¢–∏–ø
                
                if task_type == '–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ':
                    # –ó–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö
                    for cell in row:
                        cell.fill = PatternFill(start_color="D4EDDA", end_color="D4EDDA", fill_type="solid")
                elif task_type == '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ':
                    # –ö—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
                    for cell in row:
                        cell.fill = PatternFill(start_color="F8D7DA", end_color="F8D7DA", fill_type="solid")
                elif task_type == '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞':
                    # –°–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
                    for cell in row:
                        cell.fill = PatternFill(start_color="D1ECF1", end_color="D1ECF1", fill_type="solid")
                
                # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                for cell in row:
                    cell.alignment = Alignment(vertical="top", wrap_text=True)
            
            # –ì—Ä–∞–Ω–∏—Ü—ã
            thin_border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )
            
            for row in worksheet.iter_rows(min_row=1, max_row=len(df)+1):
                for cell in row:
                    cell.border = thin_border
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def create_summary_sheet(self, workbook, df):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
        try:
            worksheet = workbook.create_sheet("–°–≤–æ–¥–∫–∞")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_tasks = len(df)
            matched_tasks = len(df[df['–¢–∏–ø'] == '–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'])
            unmatched_plans = len(df[df['–¢–∏–ø'] == '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'])
            new_tasks = len(df[df['–¢–∏–ø'] == '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞'])
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            worksheet['A1'] = "üìä –°–í–û–î–ö–ê –ï–î–ò–ù–û–ì–û –°–ü–ò–°–ö–ê –ó–ê–î–ê–ß"
            worksheet['A1'].font = Font(bold=True, size=16)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            worksheet['A3'] = "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
            worksheet['A3'].font = Font(bold=True)
            
            stats = [
                ["–í—Å–µ–≥–æ –∑–∞–¥–∞—á", total_tasks],
                ["–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", matched_tasks],
                ["–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", unmatched_plans],
                ["–ù–æ–≤—ã—Ö –∑–∞–¥–∞—á", new_tasks],
                ["% —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è", f"{(matched_tasks/total_tasks*100):.1f}%" if total_tasks > 0 else "0%"]
            ]
            
            for i, (label, value) in enumerate(stats, 4):
                worksheet[f'A{i}'] = label
                worksheet[f'B{i}'] = value
                worksheet[f'A{i}'].font = Font(bold=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º
            worksheet['A10'] = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º:"
            worksheet['A10'].font = Font(bold=True)
            
            week_stats = df.groupby('–ù–µ–¥–µ–ª—è –ø–ª–∞–Ω–∞').agg({
                '–¢–∏–ø': 'count',
                '–°—Ö–æ–∂–µ—Å—Ç—å': lambda x: len([s for s in x if s != ''])
            }).reset_index()
            
            week_stats.columns = ['–ù–µ–¥–µ–ª—è', '–í—Å–µ–≥–æ –∑–∞–¥–∞—á', '–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ']
            week_stats['% —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è'] = (week_stats['–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'] / week_stats['–í—Å–µ–≥–æ –∑–∞–¥–∞—á'] * 100).round(1)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = ['–ù–µ–¥–µ–ª—è', '–í—Å–µ–≥–æ –∑–∞–¥–∞—á', '–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', '% —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è']
            for col, header in enumerate(headers, 1):
                cell = worksheet.cell(row=11, column=col, value=header)
                cell.font = Font(bold=True)
                cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
                cell.font = Font(color="FFFFFF", bold=True)
            
            # –î–∞–Ω–Ω—ã–µ
            for row_idx, (_, row) in enumerate(week_stats.iterrows(), 12):
                for col_idx, value in enumerate(row, 1):
                    cell = worksheet.cell(row=row_idx, column=col_idx, value=value)
                    if col_idx == 4:  # % —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                        cell.value = f"{value}%"
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            worksheet.column_dimensions['A'].width = 15
            worksheet.column_dimensions['B'].width = 12
            worksheet.column_dimensions['C'].width = 12
            worksheet.column_dimensions['D'].width = 15
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
    
    def create_managers_sheet(self, workbook, df):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º"""
        try:
            worksheet = workbook.create_sheet("–ü–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º
            manager_stats = df.groupby('–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å').agg({
                '–¢–∏–ø': 'count',
                '–°—Ö–æ–∂–µ—Å—Ç—å': lambda x: len([s for s in x if s != ''])
            }).reset_index()
            
            manager_stats.columns = ['–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–í—Å–µ–≥–æ –∑–∞–¥–∞—á', '–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ']
            manager_stats['% —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è'] = (manager_stats['–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'] / manager_stats['–í—Å–µ–≥–æ –∑–∞–¥–∞—á'] * 100).round(1)
            manager_stats = manager_stats.sort_values('% —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è', ascending=False)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            worksheet['A1'] = "üë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–£–ö–û–í–û–î–ò–¢–ï–õ–Ø–ú"
            worksheet['A1'].font = Font(bold=True, size=16)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = ['–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–í—Å–µ–≥–æ –∑–∞–¥–∞—á', '–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', '% —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞—Ç—É—Å']
            for col, header in enumerate(headers, 1):
                cell = worksheet.cell(row=3, column=col, value=header)
                cell.font = Font(bold=True)
                cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
                cell.font = Font(color="FFFFFF", bold=True)
            
            # –î–∞–Ω–Ω—ã–µ
            for row_idx, (_, row) in enumerate(manager_stats.iterrows(), 4):
                for col_idx, value in enumerate(row, 1):
                    cell = worksheet.cell(row=row_idx, column=col_idx, value=value)
                    if col_idx == 4:  # % —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                        cell.value = f"{value}%"
                
                # –°—Ç–∞—Ç—É—Å
                status_cell = worksheet.cell(row=row_idx, column=5)
                if row['% —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è'] >= 60:
                    status_cell.value = "‚úÖ –û—Ç–ª–∏—á–Ω–æ"
                    status_cell.fill = PatternFill(start_color="D4EDDA", end_color="D4EDDA", fill_type="solid")
                elif row['% —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è'] >= 30:
                    status_cell.value = "‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ"
                    status_cell.fill = PatternFill(start_color="FFF3CD", end_color="FFF3CD", fill_type="solid")
                elif row['% —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è'] >= 10:
                    status_cell.value = "‚ùå –ü–ª–æ—Ö–æ"
                    status_cell.fill = PatternFill(start_color="F8D7DA", end_color="F8D7DA", fill_type="solid")
                else:
                    status_cell.value = "üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏"
                    status_cell.fill = PatternFill(start_color="F5C6CB", end_color="F5C6CB", fill_type="solid")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            worksheet.column_dimensions['A'].width = 25
            worksheet.column_dimensions['B'].width = 12
            worksheet.column_dimensions['C'].width = 12
            worksheet.column_dimensions['D'].width = 15
            worksheet.column_dimensions['E'].width = 15
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: {e}")
    
    async def run_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            logger.info("üöÄ –ó–ê–ü–£–°–ö –°–û–ó–î–ê–ù–ò–Ø –ï–î–ò–ù–û–ì–û –°–ü–ò–°–ö–ê –ó–ê–î–ê–ß")
            logger.info("=" * 70)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not await self.connect():
                return
            
            # –ü–æ–∏—Å–∫ —á–∞—Ç–∞
            self.chat = await self.find_chat()
            if not self.chat:
                return
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = await self.get_july_august_messages()
            if not messages:
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            # –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á
            unified_tasks = self.analyze_unified_tasks(messages)
            if not unified_tasks:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            filename = self.create_unified_report(unified_tasks)
            if filename:
                logger.info(f"üéâ –ï–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω!")
                logger.info(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
                
                # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
                total_tasks = len(unified_tasks)
                matched_tasks = len([t for t in unified_tasks if t['–¢–∏–ø'] == '–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'])
                unmatched_plans = len([t for t in unified_tasks if t['–¢–∏–ø'] == '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'])
                new_tasks = len([t for t in unified_tasks if t['–¢–∏–ø'] == '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞'])
                
                logger.info(f"\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –ï–î–ò–ù–û–ì–û –°–ü–ò–°–ö–ê:")
                logger.info(f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}")
                logger.info(f"–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {matched_tasks}")
                logger.info(f"–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {unmatched_plans}")
                logger.info(f"–ù–æ–≤—ã—Ö –∑–∞–¥–∞—á: {new_tasks}")
                logger.info(f"–°—Ä–µ–¥–Ω–∏–π % —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {(matched_tasks/total_tasks*100):.1f}%" if total_tasks > 0 else "0%")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
        finally:
            await self.client.disconnect()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = UnifiedTaskComparisonAnalyzer()
    await analyzer.run_analysis()

if __name__ == "__main__":
    asyncio.run(main())
