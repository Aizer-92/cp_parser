#!/usr/bin/env python3
"""
Message Examples Analyzer for Main mega –¢–û–ü
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º-–≤—Ç–æ—Ä–Ω–∏–∫–∞–º
"""

import asyncio
import json
import re
from datetime import datetime, timedelta
from telethon import TelegramClient
from loguru import logger
import pandas as pd
import os

class MessageExamplesAnalyzer:
    def __init__(self):
        self.config = self.load_config()
        self.client = None
        self.target_chat_name = "Main mega –¢–û–ü"
        self.target_chat_id = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        os.makedirs("output/logs", exist_ok=True)
        logger.add("output/logs/message_examples.log", rotation="1 day", retention="7 days")
        
    def load_config(self):
        with open("config/personal_config.json", 'r', encoding='utf-8') as f:
            return json.load(f)
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            self.client = TelegramClient(
                self.config['session_name'],
                self.config['api_id'],
                self.config['api_hash']
            )
            
            await self.client.start()
            
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                print(f"üë§ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name}")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def find_target_chat(self):
        """–ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            print(f"üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞ '{self.target_chat_name}'...")
            
            dialogs = await self.client.get_dialogs()
            
            for dialog in dialogs:
                if self.target_chat_name.lower() in dialog.name.lower():
                    self.target_chat_id = dialog.id
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç: {dialog.name} (ID: {dialog.id})")
                    return True
            
            print(f"‚ùå –ß–∞—Ç '{self.target_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞: {e}")
            return False
    
    async def get_monday_tuesday_messages(self, weeks_back=12):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –∏ –≤—Ç–æ—Ä–Ω–∏–∫–∞–º"""
        try:
            print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º-–≤—Ç–æ—Ä–Ω–∏–∫–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {weeks_back} –Ω–µ–¥–µ–ª—å...")
            
            today = datetime.now()
            start_date = today - timedelta(weeks=weeks_back)
            
            messages = await self.client.get_messages(
                self.target_chat_id,
                offset_date=start_date,
                limit=5000
            )
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –∏ –≤—Ç–æ—Ä–Ω–∏–∫–∞–º
            monday_tuesday_messages = []
            
            for msg in messages:
                if msg.text and len(msg.text.strip()) > 20:  # –ú–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0, –≤—Ç–æ—Ä–Ω–∏–∫ = 1)
                    if msg.date.weekday() in [0, 1]:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏–ª–∏ –≤—Ç–æ—Ä–Ω–∏–∫
                        sender_name = await self.get_sender_name(msg)
                        monday_tuesday_messages.append({
                            'id': msg.id,
                            'date': msg.date,
                            'text': msg.text.strip(),
                            'sender': sender_name,
                            'length': len(msg.text.strip()),
                            'weekday': msg.date.weekday(),
                            'weekday_name': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' if msg.date.weekday() == 0 else '–í—Ç–æ—Ä–Ω–∏–∫'
                        })
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(monday_tuesday_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º-–≤—Ç–æ—Ä–Ω–∏–∫–∞–º")
            return monday_tuesday_messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    async def get_sender_name(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        try:
            sender = await message.get_sender()
            if sender:
                return f"{sender.first_name} {sender.last_name or ''}".strip()
            return "Unknown"
        except:
            return "Unknown"
    
    def analyze_message_content(self, messages):
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            print("üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            analysis = {
                'total_messages': len(messages),
                'senders': {},
                'keywords_found': {},
                'message_examples': []
            }
            
            for msg in messages:
                text = msg['text'].lower()
                sender = msg['sender']
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                if sender not in analysis['senders']:
                    analysis['senders'][sender] = 0
                analysis['senders'][sender] += 1
                
                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                keywords = [
                    '–ø–ª–∞–Ω', '—Ñ–∞–∫—Ç', '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '—Å–¥–µ–ª–∞–Ω–æ', '–≥–æ—Ç–æ–≤–æ', '–∑–∞–≤–µ—Ä—à–µ–Ω–æ',
                    '–∑–∞–¥–∞—á–∞', '–ø—Ä–æ–µ–∫—Ç', '—Ä–∞–±–æ—Ç–∞', '–æ—Ç—á–µ—Ç', '–∏—Ç–æ–≥–∏', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
                ]
                
                found_keywords = []
                for keyword in keywords:
                    if keyword in text:
                        found_keywords.append(keyword)
                        if keyword not in analysis['keywords_found']:
                            analysis['keywords_found'][keyword] = 0
                        analysis['keywords_found'][keyword] += 1
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                if len(analysis['message_examples']) < 20:  # –ü–µ—Ä–≤—ã–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
                    analysis['message_examples'].append({
                        'sender': sender,
                        'date': msg['date'].strftime('%Y-%m-%d'),
                        'weekday': msg['weekday_name'],
                        'text': msg['text'][:500] + '...' if len(msg['text']) > 500 else msg['text'],
                        'length': msg['length'],
                        'keywords': found_keywords
                    })
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {e}")
            return {}
    
    def create_examples_report(self, messages, analysis, filename=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not filename:
                filename = f"output/message_examples_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            os.makedirs("output", exist_ok=True)
            
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                
                # –õ–∏—Å—Ç 1: –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                if analysis.get('message_examples'):
                    df_examples = pd.DataFrame(analysis['message_examples'])
                    df_examples.to_excel(writer, sheet_name='–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π', index=False)
                
                # –õ–∏—Å—Ç 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º
                if analysis.get('senders'):
                    sender_data = []
                    for sender, count in analysis['senders'].items():
                        sender_data.append({
                            '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å': sender,
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π': count
                        })
                    
                    df_senders = pd.DataFrame(sender_data)
                    df_senders = df_senders.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π', ascending=False)
                    df_senders.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º', index=False)
                
                # –õ–∏—Å—Ç 3: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                if analysis.get('keywords_found'):
                    keyword_data = []
                    for keyword, count in analysis['keywords_found'].items():
                        keyword_data.append({
                            '–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ': keyword,
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π': count
                        })
                    
                    df_keywords = pd.DataFrame(keyword_data)
                    df_keywords = df_keywords.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π', ascending=False)
                    df_keywords.to_excel(writer, sheet_name='–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', index=False)
                
                # –õ–∏—Å—Ç 4: –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if messages:
                    messages_data = []
                    for msg in messages:
                        messages_data.append({
                            'ID': msg['id'],
                            '–î–∞—Ç–∞': msg['date'].strftime('%Y-%m-%d %H:%M'),
                            '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏': msg['weekday_name'],
                            '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å': msg['sender'],
                            '–¢–µ–∫—Å—Ç': msg['text'],
                            '–î–ª–∏–Ω–∞': msg['length']
                        })
                    
                    df_messages = pd.DataFrame(messages_data)
                    df_messages = df_messages.sort_values(['–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å', '–î–∞—Ç–∞'], ascending=[True, False])
                    df_messages.to_excel(writer, sheet_name='–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è', index=False)
            
            print(f"‚úÖ –û—Ç—á–µ—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Å–æ–∑–¥–∞–Ω: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return None
    
    async def run_examples_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            print("üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –ü–†–ò–ú–ï–†–û–í –°–û–û–ë–©–ï–ù–ò–ô")
            print("=" * 50)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not await self.connect():
                return
            
            # –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
            if not await self.find_target_chat():
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º-–≤—Ç–æ—Ä–Ω–∏–∫–∞–º
            messages = await self.get_monday_tuesday_messages(weeks_back=12)
            
            if not messages:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º-–≤—Ç–æ—Ä–Ω–∏–∫–∞–º")
                return
            
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            analysis = self.analyze_message_content(messages)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report_file = self.create_examples_report(messages, analysis)
            
            if report_file:
                print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                print(f"üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
                
                # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
                print(f"\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
                print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {analysis.get('total_messages', 0)}")
                print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: {len(analysis.get('senders', {}))}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                if analysis.get('senders'):
                    print(f"\nüë• –¢–û–ü –û–¢–ü–†–ê–í–ò–¢–ï–õ–ï–ô:")
                    top_senders = sorted(analysis['senders'].items(), key=lambda x: x[1], reverse=True)[:5]
                    for sender, count in top_senders:
                        print(f"  {sender}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                if analysis.get('keywords_found'):
                    print(f"\nüîç –ü–û–ü–£–õ–Ø–†–ù–´–ï –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê:")
                    top_keywords = sorted(analysis['keywords_found'].items(), key=lambda x: x[1], reverse=True)[:5]
                    for keyword, count in top_keywords:
                        print(f"  {keyword}: {count} —Ä–∞–∑")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                if analysis.get('message_examples'):
                    print(f"\nüìù –ü–†–ò–ú–ï–†–´ –°–û–û–ë–©–ï–ù–ò–ô:")
                    for i, example in enumerate(analysis['message_examples'][:5]):
                        print(f"\n  {i+1}. {example['sender']} ({example['date']}, {example['weekday']})")
                        print(f"     –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(example['keywords'])}")
                        print(f"     –¢–µ–∫—Å—Ç: {example['text'][:200]}...")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    analyzer = MessageExamplesAnalyzer()
    await analyzer.run_examples_analysis()

if __name__ == "__main__":
    asyncio.run(main())
