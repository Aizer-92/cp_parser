#!/usr/bin/env python3
"""
Filtered Plan/Fact Analyzer for Main mega –¢–û–ü
–§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤
"""

import asyncio
import json
import re
from datetime import datetime, timedelta
from telethon import TelegramClient
from loguru import logger
import pandas as pd
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment
import os

class FilteredPlanFactAnalyzer:
    def __init__(self):
        self.config = self.load_config()
        self.client = None
        self.target_chat_name = "Main mega –¢–û–ü"
        self.target_chat_id = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        os.makedirs("output/logs", exist_ok=True)
        logger.add("output/logs/filtered_plan_fact.log", rotation="1 day", retention="7 days")
        
    def load_config(self):
        with open("config/personal_config.json", 'r', encoding='utf-8') as f:
            return json.load(f)
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            self.client = TelegramClient(
                self.config['session_name'],
                self.config['api_id'],
                self.config['api_hash']
            )
            
            await self.client.start()
            
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                print(f"üë§ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name}")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def find_target_chat(self):
        """–ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            print(f"üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞ '{self.target_chat_name}'...")
            
            dialogs = await self.client.get_dialogs()
            
            for dialog in dialogs:
                if self.target_chat_name.lower() in dialog.name.lower():
                    self.target_chat_id = dialog.id
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç: {dialog.name} (ID: {dialog.id})")
                    return True
            
            print(f"‚ùå –ß–∞—Ç '{self.target_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞: {e}")
            return False
    
    async def get_filtered_messages(self, weeks_back=52):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {weeks_back} –Ω–µ–¥–µ–ª—å...")
            
            today = datetime.now()
            start_date = today - timedelta(weeks=weeks_back)
            
            messages = await self.client.get_messages(
                self.target_chat_id,
                offset_date=start_date,
                limit=10000
            )
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            filtered_messages = []
            
            for msg in messages:
                if msg.text and len(msg.text.strip()) > 50:  # –ú–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0, –≤—Ç–æ—Ä–Ω–∏–∫ = 1)
                    if msg.date.weekday() in [0, 1]:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏–ª–∏ –≤—Ç–æ—Ä–Ω–∏–∫
                        sender_name = await self.get_sender_name(msg)
                        filtered_messages.append({
                            'id': msg.id,
                            'date': msg.date,
                            'text': msg.text.strip(),
                            'sender': sender_name,
                            'length': len(msg.text.strip()),
                            'weekday': msg.date.weekday()
                        })
            
            print(f"üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–Ω-–≤—Ç, >50 —Å–∏–º–≤–æ–ª–æ–≤)")
            return filtered_messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    async def get_sender_name(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        try:
            sender = await message.get_sender()
            if sender:
                return f"{sender.first_name} {sender.last_name or ''}".strip()
            return "Unknown"
        except:
            return "Unknown"
    
    def analyze_message_structure(self, text, message_date, sender_name, message_id):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            has_plan_section = re.search(r'–ø–ª–∞–Ω[:\s]*', text.lower())
            has_fact_section = re.search(r'—Ñ–∞–∫—Ç[:\s]*', text.lower())
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–ª–∞–Ω/—Ñ–∞–∫—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if not has_plan_section and not has_fact_section:
                return []
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            lines = text.split('\n')
            
            # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª—ã
            plan_lines = []
            fact_lines = []
            current_section = None
            
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª
                if re.match(r'^–ø–ª–∞–Ω[:\s]*', line.lower()):
                    current_section = 'plan'
                    continue
                elif re.match(r'^—Ñ–∞–∫—Ç[:\s]*', line.lower()):
                    current_section = 'fact'
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª
                if current_section == 'plan':
                    plan_lines.append(line)
                elif current_section == 'fact':
                    fact_lines.append(line)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤
            plan_tasks = self.extract_tasks_from_lines(plan_lines, 'plan')
            fact_tasks = self.extract_tasks_from_lines(fact_lines, 'fact')
            
            # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–ª–∞–Ω—ã –∏ —Ñ–∞–∫—Ç—ã
            matched_tasks = self.match_plan_fact_tasks(plan_tasks, fact_tasks, message_date, sender_name, message_id)
            
            return matched_tasks
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            return []
    
    def extract_tasks_from_lines(self, lines, section_type):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ —Å—Ç—Ä–æ–∫"""
        tasks = []
        
        for line in lines:
            # –ò—â–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            numbered_match = re.match(r'^(\d+)[\.\)]\s*(.+)', line)
            if numbered_match:
                task_num = numbered_match.group(1)
                task_desc = numbered_match.group(2)
                
                # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ –∑–∞–¥–∞—á–µ (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
                numbers = self.extract_reasonable_numbers(task_desc)
                
                if numbers:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —á–∏—Å–ª–∞
                    tasks.append({
                        'number': task_num,
                        'description': task_desc,
                        'numbers': numbers,
                        'section': section_type
                    })
                continue
            
            # –ò—â–µ–º –∑–∞–¥–∞—á–∏ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
            marker_match = re.match(r'^[-‚Ä¢]\s*(.+)', line)
            if marker_match:
                task_desc = marker_match.group(1)
                numbers = self.extract_reasonable_numbers(task_desc)
                
                if numbers:
                    tasks.append({
                        'number': len(tasks) + 1,
                        'description': task_desc,
                        'numbers': numbers,
                        'section': section_type
                    })
                continue
        
        return tasks
    
    def extract_reasonable_numbers(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–∑—É–º–Ω—ã—Ö —á–∏—Å–µ–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        numbers = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Å–µ–ª (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—É–º–Ω—ã–µ)
        patterns = [
            r'(\d+(?:\.\d+)?)[/\-]\s*(\d+(?:\.\d+)?)',  # X/Y –∏–ª–∏ X-Y
            r'\((\d+(?:\.\d+)?)[^\d]*(\d+(?:\.\d+)?)\)',  # (X Y)
            r'–ø–ª–∞–Ω[:\s]*(\d+(?:\.\d+)?)',  # –ø–ª–∞–Ω: X
            r'—Ñ–∞–∫—Ç[:\s]*(\d+(?:\.\d+)?)',  # —Ñ–∞–∫—Ç: X
            r'–ø/—Ñ[:\s]*(\d+(?:\.\d+)?)',   # –ø/—Ñ: X
        ]
        
        for pattern in patterns:
            matches = re.finditer(pattern, text.lower())
            for match in matches:
                try:
                    if len(match.groups()) == 2:
                        num1 = float(match.group(1))
                        num2 = float(match.group(2))
                        
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        if 0 <= num1 <= 1000 and 0 <= num2 <= 1000:
                            numbers.append((num1, num2))
                    else:
                        num = float(match.group(1))
                        if 0 <= num <= 1000:
                            numbers.append((num, None))
                except ValueError:
                    continue
        
        return numbers
    
    def match_plan_fact_tasks(self, plan_tasks, fact_tasks, message_date, sender_name, message_id):
        """–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤"""
        matched_tasks = []
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        plan_dict = {task['number']: task for task in plan_tasks}
        fact_dict = {task['number']: task for task in fact_tasks}
        
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –Ω–æ–º–µ—Ä–∞–º
        all_numbers = set(plan_dict.keys()) | set(fact_dict.keys())
        
        for num in all_numbers:
            plan_task = plan_dict.get(num)
            fact_task = fact_dict.get(num)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–∞–Ω—ã –∏ —Ñ–∞–∫—Ç—ã
            plan_value = None
            fact_value = None
            
            if plan_task and plan_task['numbers']:
                for nums in plan_task['numbers']:
                    if len(nums) == 2 and nums[1] is not None:
                        plan_value = nums[0]
                        break
                    elif len(nums) == 2 and nums[1] is None:
                        plan_value = nums[0]
                        break
            
            if fact_task and fact_task['numbers']:
                for nums in fact_task['numbers']:
                    if len(nums) == 2 and nums[1] is not None:
                        fact_value = nums[1]
                        break
                    elif len(nums) == 2 and nums[1] is None:
                        fact_value = nums[0]
                        break
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏ –ø–ª–∞–Ω, –∏ —Ñ–∞–∫—Ç
            if plan_value is not None and fact_value is not None:
                completion_percent = (fact_value / plan_value * 100) if plan_value > 0 else 0
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if 0 <= completion_percent <= 500:  # –ú–∞–∫—Å–∏–º—É–º 500%
                    matched_tasks.append({
                        'message_id': message_id,
                        'date': message_date,
                        'sender': sender_name,
                        'task_number': num,
                        'task_description': plan_task['description'] if plan_task else fact_task['description'],
                        'plan': plan_value,
                        'fact': fact_value,
                        'difference': fact_value - plan_value,
                        'completion_percent': completion_percent,
                        'status': self.get_status(completion_percent),
                        'is_duplicate': False
                    })
        
        return matched_tasks
    
    def get_status(self, completion_percent):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if completion_percent >= 100:
            return "–ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
        elif completion_percent >= 90:
            return "–•–æ—Ä–æ—à–æ"
        elif completion_percent >= 70:
            return "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
        else:
            return "–ù–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
    
    def find_duplicates(self, all_tasks):
        """–ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á"""
        try:
            grouped_data = {}
            
            for task in all_tasks:
                key = (task['sender'], task['task_description'][:50], task['plan'], task['fact'])
                if key not in grouped_data:
                    grouped_data[key] = []
                grouped_data[key].append(task)
            
            # –ü–æ–º–µ—á–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            for key, tasks in grouped_data.items():
                if len(tasks) > 1:
                    for task in tasks:
                        task['is_duplicate'] = True
                        task['duplicate_count'] = len(tasks)
            
            return all_tasks
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
            return all_tasks
    
    def create_filtered_report(self, all_tasks, filename=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            if not filename:
                filename = f"output/filtered_plan_fact_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            os.makedirs("output", exist_ok=True)
            
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                
                # –õ–∏—Å—Ç 1: –í—Å–µ –∑–∞–¥–∞—á–∏
                if all_tasks:
                    df_tasks = pd.DataFrame(all_tasks)
                    df_tasks['date'] = pd.to_datetime(df_tasks['date']).dt.tz_localize(None)
                    df_tasks = df_tasks.sort_values(['sender', 'date'], ascending=[True, False])
                    
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
                    df_tasks = df_tasks.rename(columns={
                        'message_id': 'ID —Å–æ–æ–±—â–µ–Ω–∏—è',
                        'date': '–î–∞—Ç–∞',
                        'sender': '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
                        'task_number': '–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏',
                        'task_description': '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
                        'plan': '–ü–ª–∞–Ω',
                        'fact': '–§–∞–∫—Ç',
                        'difference': '–†–∞–∑–Ω–∏—Ü–∞',
                        'completion_percent': '% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                        'status': '–°—Ç–∞—Ç—É—Å',
                        'is_duplicate': '–î—É–±–ª–∏–∫–∞—Ç',
                        'duplicate_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤'
                    })
                    
                    df_tasks.to_excel(writer, sheet_name='–í—Å–µ –∑–∞–¥–∞—á–∏', index=False)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    worksheet = writer.sheets['–í—Å–µ –∑–∞–¥–∞—á–∏']
                    
                    # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –Ω–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
                    red_fill = PatternFill(start_color='FFFF0000', end_color='FFFF0000', fill_type='solid')
                    yellow_fill = PatternFill(start_color='FFFFFF00', end_color='FFFFFF00', fill_type='solid')
                    
                    for row in worksheet.iter_rows(min_row=2):
                        if row[df_tasks.columns.get_loc('–î—É–±–ª–∏–∫–∞—Ç')].value:
                            for cell in row:
                                cell.fill = red_fill
                        elif row[df_tasks.columns.get_loc('% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')].value and row[df_tasks.columns.get_loc('% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')].value < 70:
                            for cell in row:
                                cell.fill = yellow_fill
                
                # –õ–∏—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º
                if all_tasks:
                    sender_analysis = {}
                    
                    for task in all_tasks:
                        sender = task['sender']
                        if sender not in sender_analysis:
                            sender_analysis[sender] = {
                                'total_plan': 0,
                                'total_fact': 0,
                                'tasks_count': 0,
                                'over_performance': 0,
                                'under_performance': 0,
                                'duplicates': 0,
                                'dates': set(),
                                'messages': set()
                            }
                        
                        sender_analysis[sender]['total_plan'] += task['plan']
                        sender_analysis[sender]['total_fact'] += task['fact']
                        sender_analysis[sender]['tasks_count'] += 1
                        sender_analysis[sender]['dates'].add(task['date'].strftime('%Y-%m-%d'))
                        sender_analysis[sender]['messages'].add(task['message_id'])
                        
                        if task['completion_percent'] >= 100:
                            sender_analysis[sender]['over_performance'] += 1
                        else:
                            sender_analysis[sender]['under_performance'] += 1
                        
                        if task['is_duplicate']:
                            sender_analysis[sender]['duplicates'] += 1
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                    sender_data = []
                    for sender, data in sender_analysis.items():
                        avg_completion = (data['total_fact'] / data['total_plan'] * 100) if data['total_plan'] > 0 else 0
                        sender_data.append({
                            '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å': sender,
                            '–û–±—â–∏–π –ø–ª–∞–Ω': round(data['total_plan'], 2),
                            '–û–±—â–∏–π —Ñ–∞–∫—Ç': round(data['total_fact'], 2),
                            '–°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': round(avg_completion, 2),
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á': data['tasks_count'],
                            '–ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π': data['over_performance'],
                            '–ù–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π': data['under_performance'],
                            '–î—É–±–ª–∏–∫–∞—Ç–æ–≤': data['duplicates'],
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞—Ç': len(data['dates']),
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π': len(data['messages'])
                        })
                    
                    df_senders = pd.DataFrame(sender_data)
                    df_senders = df_senders.sort_values('–°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', ascending=False)
                    df_senders.to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏–∑ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º', index=False)
                
                # –õ–∏—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º
                if all_tasks:
                    weekly_stats = {}
                    
                    for task in all_tasks:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–¥–µ–ª—é
                        date = task['date'].replace(tzinfo=None)
                        week_start = date - timedelta(days=date.weekday())
                        week_key = week_start.strftime('%Y-%m-%d')
                        
                        if week_key not in weekly_stats:
                            weekly_stats[week_key] = {
                                'total_plan': 0,
                                'total_fact': 0,
                                'tasks_count': 0,
                                'senders': set()
                            }
                        
                        weekly_stats[week_key]['total_plan'] += task['plan']
                        weekly_stats[week_key]['total_fact'] += task['fact']
                        weekly_stats[week_key]['tasks_count'] += 1
                        weekly_stats[week_key]['senders'].add(task['sender'])
                    
                    weekly_data = []
                    for week, data in weekly_stats.items():
                        avg_completion = (data['total_fact'] / data['total_plan'] * 100) if data['total_plan'] > 0 else 0
                        weekly_data.append({
                            '–ù–µ–¥–µ–ª—è': week,
                            '–û–±—â–∏–π –ø–ª–∞–Ω': round(data['total_plan'], 2),
                            '–û–±—â–∏–π —Ñ–∞–∫—Ç': round(data['total_fact'], 2),
                            '–°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': round(avg_completion, 2),
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á': data['tasks_count'],
                            '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π': len(data['senders'])
                        })
                    
                    df_weekly = pd.DataFrame(weekly_data)
                    df_weekly = df_weekly.sort_values('–ù–µ–¥–µ–ª—è', ascending=False)
                    df_weekly.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º', index=False)
            
            print(f"‚úÖ –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return None
    
    async def run_filtered_analysis(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            print("üöÄ –ó–ê–ü–£–°–ö –§–ò–õ–¨–¢–†–û–í–ê–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –ü–õ–ê–ù–û–í –ò –§–ê–ö–¢–û–í")
            print("=" * 60)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not await self.connect():
                return
            
            # –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
            if not await self.find_target_chat():
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = await self.get_filtered_messages(weeks_back=52)
            
            if not messages:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                return
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π
            all_tasks = []
            
            print("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            for msg in messages:
                tasks = self.analyze_message_structure(msg['text'], msg['date'], msg['sender'], msg['id'])
                if tasks:
                    all_tasks.extend(tasks)
                    print(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç {msg['sender']} ({msg['date'].strftime('%Y-%m-%d')})")
            
            print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_tasks)} –∑–∞–¥–∞—á")
            
            if not all_tasks:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á —Å –ø–ª–∞–Ω–∞–º–∏ –∏ —Ñ–∞–∫—Ç–∞–º–∏")
                return
            
            # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            all_tasks = self.find_duplicates(all_tasks)
            duplicates_count = len([task for task in all_tasks if task['is_duplicate']])
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {duplicates_count} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report_file = self.create_filtered_report(all_tasks)
            
            if report_file:
                print(f"\nüéâ –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                print(f"üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
                
                # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
                print(f"\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
                print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
                print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(all_tasks)}")
                print(f"–î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_count}")
                print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(set(task['sender'] for task in all_tasks))}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º
                sender_stats = {}
                for task in all_tasks:
                    sender = task['sender']
                    if sender not in sender_stats:
                        sender_stats[sender] = {'count': 0, 'total_completion': 0}
                    sender_stats[sender]['count'] += 1
                    sender_stats[sender]['total_completion'] += task['completion_percent']
                
                print(f"\nüë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–£–ö–û–í–û–î–ò–¢–ï–õ–Ø–ú:")
                for sender, stats in sorted(sender_stats.items(), key=lambda x: x[1]['count'], reverse=True):
                    avg_completion = stats['total_completion'] / stats['count']
                    print(f"  {sender}: {stats['count']} –∑–∞–¥–∞—á, —Å—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {avg_completion:.1f}%")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    analyzer = FilteredPlanFactAnalyzer()
    await analyzer.run_filtered_analysis()

if __name__ == "__main__":
    asyncio.run(main())
