#!/usr/bin/env python3
"""
Simple Telegram Setup
–ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
"""

import json
import os

def main():
    print("ü§ñ –ü–†–û–°–¢–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê TELEGRAM –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò")
    print("=" * 50)
    print()
    
    print("üìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–µ–π:")
    print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://my.telegram.org")
    print("2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç")
    print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ 'API development tools'")
    print("4. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
    print("   - App title: Personal Automation")
    print("   - Short name: personal_auto")
    print("   - Platform: Desktop")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("üîë –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:")
    print("-" * 30)
    
    api_id = input("API ID (—á–∏—Å–ª–æ): ").strip()
    api_hash = input("API Hash (—Å—Ç—Ä–æ–∫–∞): ").strip()
    phone = input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7XXXXXXXXXX): ").strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if not api_id or not api_hash or not phone:
        print("‚ùå –í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = {
        "api_id": api_id,
        "api_hash": api_hash,
        "phone": phone,
        "session_name": "personal_account",
        "settings": {
            "auto_reply": False,
            "monitoring_enabled": True,
            "max_actions_per_hour": 5,
            "delay_between_actions": 10
        },
        "monitoring": {
            "target_chats": [],
            "keywords": [
                "–≤–∞–∂–Ω–æ",
                "—Å—Ä–æ—á–Ω–æ", 
                "–≤–Ω–∏–º–∞–Ω–∏–µ",
                "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                "–∑–∞–¥–∞—á–∞"
            ],
            "auto_save_important": True
        },
        "automation": {
            "auto_archive_old": True,
            "save_media": True,
            "backup_messages": True,
            "daily_summary": True
        },
        "safety": {
            "max_messages_per_day": 20,
            "cooldown_minutes": 60,
            "emergency_stop": False,
            "working_hours": {
                "start": "09:00",
                "end": "21:00"
            }
        },
        "notifications": {
            "daily_reminder": "09:00",
            "weekly_summary": "monday 10:00",
            "important_alerts": True
        },
        "enabled_features": [
            "daily_reminders",
            "message_monitoring",
            "keyword_alerts"
        ]
    }
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é config
    os.makedirs("config", exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_file = "config/personal_config.json"
    with open(config_file, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    
    print(f"\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_file}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
    startup_script = '''#!/usr/bin/env python3
"""
Simple Personal Telegram Automation
–ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
"""

import asyncio
import json
from telethon import TelegramClient, events
from loguru import logger
import os

class SimpleTelegramAutomation:
    def __init__(self):
        self.config = self.load_config()
        self.client = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        os.makedirs("output/logs", exist_ok=True)
        logger.add("output/logs/personal_automation.log", rotation="1 day", retention="7 days")
        
    def load_config(self):
        with open("config/personal_config.json", 'r', encoding='utf-8') as f:
            return json.load(f)
    
    async def connect(self):
        try:
            self.client = TelegramClient(
                self.config['session_name'],
                self.config['api_id'],
                self.config['api_hash']
            )
            
            await self.client.start(phone=self.config['phone'])
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await self.client.get_me()
            print(f"üë§ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name} {me.last_name or ''}")
            print(f"üì± –ù–æ–º–µ—Ä: {me.phone}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    async def send_message_to_self(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∞–º–æ–º—É —Å–µ–±–µ"""
        try:
            me = await self.client.get_me()
            await self.client.send_message(me.id, message)
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∞–º–æ–º—É —Å–µ–±–µ")
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    
    async def monitor_messages(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        @self.client.on(events.NewMessage)
        async def handle_new_message(event):
            try:
                sender = await event.get_sender()
                message_text = event.message.text
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                keywords = self.config['monitoring']['keywords']
                for keyword in keywords:
                    if keyword.lower() in message_text.lower():
                        alert = f"üö® –í–ê–ñ–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï!\\n"
                        alert += f"–û—Ç: {sender.first_name if sender else 'Unknown'}\\n"
                        alert += f"–¢–µ–∫—Å—Ç: {message_text[:100]}..."
                        
                        await self.send_message_to_self(alert)
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}")
                        break
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def start_automation(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
        print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!")
        print("üìã –§—É–Ω–∫—Ü–∏–∏:")
        print("   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("   ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
        print("   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–∞–º–æ–º—É —Å–µ–±–µ")
        print()
        print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("-" * 50)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await self.monitor_messages()
        
        # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
        await self.client.run_until_disconnected()

async def main():
    automation = SimpleTelegramAutomation()
    
    if await automation.connect():
        await automation.start_automation()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")

if __name__ == "__main__":
    asyncio.run(main())
'''
    
    with open("simple_automation.py", 'w', encoding='utf-8') as f:
        f.write(startup_script)
    
    print("üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print(f"   ‚Ä¢ {config_file} - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    print(f"   ‚Ä¢ simple_automation.py - —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
    print()
    
    print("üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:")
    print("   python3 simple_automation.py")
    print()
    
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û:")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π")
    print("   ‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ª–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    print("   ‚Ä¢ –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å API –∫–ª—é—á–∞–º–∏")

if __name__ == "__main__":
    main()
