#!/usr/bin/env python3
"""
Plan/Fact Analyzer for Main mega –¢–û–ü
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞ Main mega –¢–û–ü
"""

import asyncio
import json
import re
from datetime import datetime, timedelta
from telethon import TelegramClient
from telethon.tl.types import PeerUser, PeerChat, PeerChannel
from loguru import logger
import pandas as pd
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils.dataframe import dataframe_to_rows
import os

class PlanFactAnalyzer:
    def __init__(self):
        self.config = self.load_config()
        self.client = None
        self.target_chat_name = "Main mega –¢–û–ü"
        self.target_chat_id = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        os.makedirs("output/logs", exist_ok=True)
        logger.add("output/logs/plan_fact_analyzer.log", rotation="1 day", retention="7 days")
        
    def load_config(self):
        with open("config/personal_config.json", 'r', encoding='utf-8') as f:
            return json.load(f)
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            self.client = TelegramClient(
                self.config['session_name'],
                self.config['api_id'],
                self.config['api_hash']
            )
            
            await self.client.start()
            
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                print(f"üë§ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name}")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def find_target_chat(self):
        """–ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            print(f"üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞ '{self.target_chat_name}'...")
            
            dialogs = await self.client.get_dialogs()
            
            for dialog in dialogs:
                if self.target_chat_name.lower() in dialog.name.lower():
                    self.target_chat_id = dialog.id
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç: {dialog.name} (ID: {dialog.id})")
                    return True
            
            print(f"‚ùå –ß–∞—Ç '{self.target_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã:")
            for dialog in dialogs[:10]:
                print(f"  - {dialog.name} (ID: {dialog.id})")
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞: {e}")
            return False
    
    def extract_plan_fact_data(self, message_text, message_date):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            text = message_text.strip()
            
            # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤
            patterns = [
                # –ü–∞—Ç—Ç–µ—Ä–Ω 1: –ü–ª–∞–Ω: X, –§–∞–∫—Ç: Y
                r'–ø–ª–∞–Ω[:\s]*(\d+(?:\.\d+)?)[^\d]*—Ñ–∞–∫—Ç[:\s]*(\d+(?:\.\d+)?)',
                # –ü–∞—Ç—Ç–µ—Ä–Ω 2: –ü/–§: X/Y
                r'–ø/—Ñ[:\s]*(\d+(?:\.\d+)?)[^\d]*(\d+(?:\.\d+)?)',
                # –ü–∞—Ç—Ç–µ—Ä–Ω 3: –ü–ª–∞–Ω X –§–∞–∫—Ç Y
                r'–ø–ª–∞–Ω\s+(\d+(?:\.\d+)?)[^\d]*—Ñ–∞–∫—Ç\s+(\d+(?:\.\d+)?)',
                # –ü–∞—Ç—Ç–µ—Ä–Ω 4: –ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ —Å–ª–µ—à –∏–ª–∏ –¥–µ—Ñ–∏—Å
                r'(\d+(?:\.\d+)?)[/\-]\s*(\d+(?:\.\d+)?)',
                # –ü–∞—Ç—Ç–µ—Ä–Ω 5: –ü: X –§: Y
                r'–ø[:\s]*(\d+(?:\.\d+)?)[^\d]*—Ñ[:\s]*(\d+(?:\.\d+)?)',
            ]
            
            extracted_data = []
            
            for pattern in patterns:
                matches = re.finditer(pattern, text.lower())
                for match in matches:
                    try:
                        plan_value = float(match.group(1))
                        fact_value = float(match.group(2))
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑—É–º–Ω—ã–µ (–Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ)
                        if 0 <= plan_value <= 1000000 and 0 <= fact_value <= 1000000:
                            extracted_data.append({
                                'date': message_date,
                                'plan': plan_value,
                                'fact': fact_value,
                                'difference': fact_value - plan_value,
                                'completion_percent': (fact_value / plan_value * 100) if plan_value > 0 else 0,
                                'pattern_used': pattern,
                                'original_text': text[:200]  # –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            })
                    except (ValueError, ZeroDivisionError):
                        continue
            
            return extracted_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
    
    async def get_weekly_messages(self, weeks_back=2):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ–¥–µ–ª–∏"""
        try:
            print(f"üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {weeks_back} –Ω–µ–¥–µ–ª–∏...")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–≤—Ç–æ—Ä–Ω–∏–∫ –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥)
            today = datetime.now()
            days_since_tuesday = (today.weekday() - 1) % 7  # 1 = –≤—Ç–æ—Ä–Ω–∏–∫
            start_date = today - timedelta(days=days_since_tuesday + (weeks_back * 7))
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.client.get_messages(
                self.target_chat_id,
                offset_date=start_date,
                limit=1000
            )
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞–º
            tuesday_messages = []
            for msg in messages:
                if msg.text and msg.date.weekday() == 1:  # 1 = –≤—Ç–æ—Ä–Ω–∏–∫
                    tuesday_messages.append({
                        'id': msg.id,
                        'date': msg.date,
                        'text': msg.text,
                        'sender': await self.get_sender_name(msg)
                    })
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(tuesday_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞–º")
            return tuesday_messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    async def get_sender_name(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        try:
            sender = await message.get_sender()
            if sender:
                return f"{sender.first_name} {sender.last_name or ''}".strip()
            return "Unknown"
        except:
            return "Unknown"
    
    def analyze_weekly_comparison(self, current_week_data, previous_week_data):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–π –∏ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏"""
        try:
            comparison = {
                'current_week': {
                    'total_plan': sum(item['plan'] for item in current_week_data),
                    'total_fact': sum(item['fact'] for item in current_week_data),
                    'avg_completion': sum(item['completion_percent'] for item in current_week_data) / len(current_week_data) if current_week_data else 0,
                    'items_count': len(current_week_data)
                },
                'previous_week': {
                    'total_plan': sum(item['plan'] for item in previous_week_data),
                    'total_fact': sum(item['fact'] for item in previous_week_data),
                    'avg_completion': sum(item['completion_percent'] for item in previous_week_data) / len(previous_week_data) if previous_week_data else 0,
                    'items_count': len(previous_week_data)
                }
            }
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤—ã
            comparison['gaps'] = {
                'plan_gap': comparison['current_week']['total_plan'] - comparison['previous_week']['total_plan'],
                'fact_gap': comparison['current_week']['total_fact'] - comparison['previous_week']['total_fact'],
                'completion_gap': comparison['current_week']['avg_completion'] - comparison['previous_week']['avg_completion']
            }
            
            return comparison
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å: {e}")
            return {}
    
    def create_excel_report(self, all_data, weekly_comparison, filename=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞"""
        try:
            if not filename:
                filename = f"output/plan_fact_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            os.makedirs("output", exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                
                # –õ–∏—Å—Ç 1: –í—Å–µ –¥–∞–Ω–Ω—ã–µ
                if all_data:
                    df_all = pd.DataFrame(all_data)
                    # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è Excel
                    df_all['date'] = pd.to_datetime(df_all['date']).dt.tz_localize(None)
                    df_all = df_all.sort_values('date', ascending=False)
                    
                    df_all.to_excel(writer, sheet_name='–í—Å–µ –¥–∞–Ω–Ω—ã–µ', index=False)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    worksheet = writer.sheets['–í—Å–µ –¥–∞–Ω–Ω—ã–µ']
                    for column in worksheet.columns:
                        max_length = 0
                        column_letter = column[0].column_letter
                        for cell in column:
                            try:
                                if len(str(cell.value)) > max_length:
                                    max_length = len(str(cell.value))
                            except:
                                pass
                        adjusted_width = min(max_length + 2, 50)
                        worksheet.column_dimensions[column_letter].width = adjusted_width
                
                # –õ–∏—Å—Ç 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å
                if weekly_comparison:
                    comparison_data = []
                    for week, data in weekly_comparison.items():
                        if week != 'gaps':
                            comparison_data.append({
                                '–ù–µ–¥–µ–ª—è': week,
                                '–û–±—â–∏–π –ø–ª–∞–Ω': data['total_plan'],
                                '–û–±—â–∏–π —Ñ–∞–∫—Ç': data['total_fact'],
                                '–°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': round(data['avg_completion'], 2),
                                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π': data['items_count']
                            })
                    
                    df_comparison = pd.DataFrame(comparison_data)
                    df_comparison.to_excel(writer, sheet_name='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å', index=False)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤—ã
                    if 'gaps' in weekly_comparison:
                        gaps_data = [{
                            '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–†–∞–∑—Ä—ã–≤ –ø–ª–∞–Ω–æ–≤',
                            '–ó–Ω–∞—á–µ–Ω–∏–µ': weekly_comparison['gaps']['plan_gap'],
                            '–¢–∏–ø': '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ' if weekly_comparison['gaps']['plan_gap'] > 0 else '–°–Ω–∏–∂–µ–Ω–∏–µ'
                        }, {
                            '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–†–∞–∑—Ä—ã–≤ —Ñ–∞–∫—Ç–æ–≤',
                            '–ó–Ω–∞—á–µ–Ω–∏–µ': weekly_comparison['gaps']['fact_gap'],
                            '–¢–∏–ø': '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ' if weekly_comparison['gaps']['fact_gap'] > 0 else '–°–Ω–∏–∂–µ–Ω–∏–µ'
                        }, {
                            '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–†–∞–∑—Ä—ã–≤ % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                            '–ó–Ω–∞—á–µ–Ω–∏–µ': round(weekly_comparison['gaps']['completion_gap'], 2),
                            '–¢–∏–ø': '–£–ª—É—á—à–µ–Ω–∏–µ' if weekly_comparison['gaps']['completion_gap'] > 0 else '–£—Ö—É–¥—à–µ–Ω–∏–µ'
                        }]
                        
                        df_gaps = pd.DataFrame(gaps_data)
                        df_gaps.to_excel(writer, sheet_name='–†–∞–∑—Ä—ã–≤—ã', index=False)
                
                # –õ–∏—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                if all_data:
                    stats_data = {
                        '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': [
                            '–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π',
                            '–°—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω',
                            '–°—Ä–µ–¥–Ω–∏–π —Ñ–∞–∫—Ç',
                            '–°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                            '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                            '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π (>100%)',
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π (<100%)'
                        ],
                        '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                            len(all_data),
                            round(sum(item['plan'] for item in all_data) / len(all_data), 2),
                            round(sum(item['fact'] for item in all_data) / len(all_data), 2),
                            round(sum(item['completion_percent'] for item in all_data) / len(all_data), 2),
                            round(max(item['completion_percent'] for item in all_data), 2),
                            round(min(item['completion_percent'] for item in all_data), 2),
                            len([item for item in all_data if item['completion_percent'] > 100]),
                            len([item for item in all_data if item['completion_percent'] < 100])
                        ]
                    }
                    
                    df_stats = pd.DataFrame(stats_data)
                    df_stats.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
            
            print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return None
    
    async def run_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            print("üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –ü–õ–ê–ù–û–í –ò –§–ê–ö–¢–û–í")
            print("=" * 50)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not await self.connect():
                return
            
            # –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
            if not await self.find_target_chat():
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = await self.get_weekly_messages(weeks_back=4)  # 4 –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
            if not messages:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            all_extracted_data = []
            current_week_data = []
            previous_week_data = []
            
            current_week_start = datetime.now().replace(tzinfo=None) - timedelta(days=datetime.now().weekday())
            previous_week_start = current_week_start - timedelta(days=7)
            
            for msg in messages:
                extracted = self.extract_plan_fact_data(msg['text'], msg['date'])
                
                for item in extracted:
                    all_extracted_data.append(item)
                    
                    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –Ω–µ–¥–µ–ª—è–º (—É–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
                    msg_date_naive = msg['date'].replace(tzinfo=None)
                    if current_week_start <= msg_date_naive < current_week_start + timedelta(days=7):
                        current_week_data.append(item)
                    elif previous_week_start <= msg_date_naive < previous_week_start + timedelta(days=7):
                        previous_week_data.append(item)
            
            print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(all_extracted_data)} –∑–∞–ø–∏—Å–µ–π –ø–ª–∞–Ω–æ–≤/—Ñ–∞–∫—Ç–æ–≤")
            print(f"üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: {len(current_week_data)} –∑–∞–ø–∏—Å–µ–π")
            print(f"üìÖ –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è: {len(previous_week_data)} –∑–∞–ø–∏—Å–µ–π")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å
            weekly_comparison = self.analyze_weekly_comparison(current_week_data, previous_week_data)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report_file = self.create_excel_report(all_extracted_data, weekly_comparison)
            
            if report_file:
                print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                print(f"üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
                
                # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
                if weekly_comparison:
                    print(f"\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
                    print(f"–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: –ü–ª–∞–Ω {weekly_comparison['current_week']['total_plan']:.2f}, –§–∞–∫—Ç {weekly_comparison['current_week']['total_fact']:.2f}")
                    print(f"–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è: –ü–ª–∞–Ω {weekly_comparison['previous_week']['total_plan']:.2f}, –§–∞–∫—Ç {weekly_comparison['previous_week']['total_fact']:.2f}")
                    
                    if 'gaps' in weekly_comparison:
                        print(f"–†–∞–∑—Ä—ã–≤ –ø–ª–∞–Ω–æ–≤: {weekly_comparison['gaps']['plan_gap']:+.2f}")
                        print(f"–†–∞–∑—Ä—ã–≤ —Ñ–∞–∫—Ç–æ–≤: {weekly_comparison['gaps']['fact_gap']:+.2f}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    analyzer = PlanFactAnalyzer()
    await analyzer.run_analysis()

if __name__ == "__main__":
    asyncio.run(main())
