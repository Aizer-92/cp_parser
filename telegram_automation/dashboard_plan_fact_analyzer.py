#!/usr/bin/env python3
"""
Dashboard Plan/Fact Analyzer for Main mega –¢–û–ü
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ –ø–ª–∞–Ω–∞–º –∏ —Ñ–∞–∫—Ç–∞–º
"""

import asyncio
import json
import re
from datetime import datetime, timedelta
from telethon import TelegramClient
from loguru import logger
import pandas as pd
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.chart import LineChart, Reference, BarChart
from openpyxl.utils.dataframe import dataframe_to_rows
import os

class DashboardPlanFactAnalyzer:
    def __init__(self):
        self.config = self.load_config()
        self.client = None
        self.target_chat_name = "Main mega –¢–û–ü"
        self.target_chat_id = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        os.makedirs("output/logs", exist_ok=True)
        logger.add("output/logs/dashboard_plan_fact.log", rotation="1 day", retention="7 days")
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.colors = {
            'green': '28A745',      # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ 90%+
            'yellow': 'FFC107',     # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ 70-89%
            'red': 'DC3545',        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ <70%
            'blue': '007BFF',       # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            'light_gray': 'F8F9FA', # –§–æ–Ω
            'dark_gray': '6C757D'   # –¢–µ–∫—Å—Ç
        }
        
    def load_config(self):
        with open("config/personal_config.json", 'r', encoding='utf-8') as f:
            return json.load(f)
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            self.client = TelegramClient(
                self.config['session_name'],
                self.config['api_id'],
                self.config['api_hash']
            )
            
            await self.client.start()
            
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                print(f"üë§ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name}")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def find_target_chat(self):
        """–ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            print(f"üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞ '{self.target_chat_name}'...")
            
            dialogs = await self.client.get_dialogs()
            
            for dialog in dialogs:
                if self.target_chat_name.lower() in dialog.name.lower():
                    self.target_chat_id = dialog.id
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç: {dialog.name} (ID: {dialog.id})")
                    return True
            
            print(f"‚ùå –ß–∞—Ç '{self.target_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞: {e}")
            return False
    
    async def get_filtered_messages(self, weeks_back=52):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {weeks_back} –Ω–µ–¥–µ–ª—å...")
            
            today = datetime.now()
            start_date = today - timedelta(weeks=weeks_back)
            
            messages = await self.client.get_messages(
                self.target_chat_id,
                offset_date=start_date,
                limit=10000
            )
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–ª–∞–Ω–∞–º–∏ –∏ —Ñ–∞–∫—Ç–∞–º–∏
            filtered_messages = []
            
            for msg in messages:
                if msg.text and len(msg.text.strip()) > 50:
                    text = msg.text.lower()
                    
                    # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–ª–∞–Ω–∞–º–∏ –∏ —Ñ–∞–∫—Ç–∞–º–∏
                    has_plan_fact = (
                        ('–ø–ª–∞–Ω' in text and '—Ñ–∞–∫—Ç' in text) or
                        ('–ø/—Ñ' in text) or
                        (re.search(r'\d+/\d+', text)) or
                        (re.search(r'\(\d+.*\d+\)', text))
                    )
                    
                    if has_plan_fact:
                        sender_name = await self.get_sender_name(msg)
                        filtered_messages.append({
                            'id': msg.id,
                            'date': msg.date,
                            'text': msg.text.strip(),
                            'sender': sender_name,
                            'length': len(msg.text.strip()),
                            'weekday': msg.date.weekday(),
                            'weekday_name': ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'][msg.date.weekday()]
                        })
            
            print(f"üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–ª–∞–Ω–∞–º–∏/—Ñ–∞–∫—Ç–∞–º–∏")
            return filtered_messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    async def get_sender_name(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        try:
            sender = await message.get_sender()
            if sender:
                return f"{sender.first_name} {sender.last_name or ''}".strip()
            return "Unknown"
        except:
            return "Unknown"
    
    def extract_plan_fact_data(self, messages):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤"""
        try:
            print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤...")
            
            all_tasks = []
            
            for msg in messages:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                numbers = re.findall(r'(\d+(?:\.\d+)?)', msg['text'])
                numbers = [float(n) for n in numbers if 0 <= float(n) <= 1000]
                
                if len(numbers) >= 2:
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –ø–æ–ø–∞—Ä–Ω–æ (–ø–ª–∞–Ω/—Ñ–∞–∫—Ç)
                    for i in range(0, len(numbers) - 1, 2):
                        plan = numbers[i]
                        fact = numbers[i + 1]
                        
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        completion_percent = (fact / plan * 100) if plan > 0 else 0
                        
                        if 0 <= completion_percent <= 300:  # –ú–∞–∫—Å–∏–º—É–º 300%
                            all_tasks.append({
                                'message_id': msg['id'],
                                'date': msg['date'],
                                'sender': msg['sender'],
                                'plan': plan,
                                'fact': fact,
                                'difference': fact - plan,
                                'completion_percent': completion_percent,
                                'status': self.get_status(completion_percent),
                                'weekday': msg['weekday_name'],
                                'is_duplicate': False
                            })
            
            print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(all_tasks)} –∑–∞–¥–∞—á")
            return all_tasks
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
    
    def get_status(self, completion_percent):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if completion_percent >= 100:
            return "–ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
        elif completion_percent >= 90:
            return "–•–æ—Ä–æ—à–æ"
        elif completion_percent >= 70:
            return "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
        else:
            return "–ù–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
    
    def analyze_by_senders(self, tasks):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º"""
        try:
            sender_analysis = {}
            
            for task in tasks:
                sender = task['sender']
                if sender not in sender_analysis:
                    sender_analysis[sender] = {
                        'total_plan': 0,
                        'total_fact': 0,
                        'tasks_count': 0,
                        'over_performance': 0,
                        'under_performance': 0,
                        'dates': set(),
                        'messages': set(),
                        'last_activity': None
                    }
                
                sender_analysis[sender]['total_plan'] += task['plan']
                sender_analysis[sender]['total_fact'] += task['fact']
                sender_analysis[sender]['tasks_count'] += 1
                sender_analysis[sender]['dates'].add(task['date'].strftime('%Y-%m-%d'))
                sender_analysis[sender]['messages'].add(task['message_id'])
                
                if task['completion_percent'] >= 100:
                    sender_analysis[sender]['over_performance'] += 1
                else:
                    sender_analysis[sender]['under_performance'] += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                if (sender_analysis[sender]['last_activity'] is None or 
                    task['date'] > sender_analysis[sender]['last_activity']):
                    sender_analysis[sender]['last_activity'] = task['date']
            
            return sender_analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º: {e}")
            return {}
    
    def analyze_by_weeks(self, tasks):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–µ–¥–µ–ª—è–º"""
        try:
            weekly_analysis = {}
            
            for task in tasks:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–¥–µ–ª—é
                date = task['date'].replace(tzinfo=None)
                week_start = date - timedelta(days=date.weekday())
                week_key = week_start.strftime('%Y-%m-%d')
                
                if week_key not in weekly_analysis:
                    weekly_analysis[week_key] = {
                        'total_plan': 0,
                        'total_fact': 0,
                        'tasks_count': 0,
                        'senders': set(),
                        'sender_tasks': {}
                    }
                
                weekly_analysis[week_key]['total_plan'] += task['plan']
                weekly_analysis[week_key]['total_fact'] += task['fact']
                weekly_analysis[week_key]['tasks_count'] += 1
                weekly_analysis[week_key]['senders'].add(task['sender'])
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º
                if task['sender'] not in weekly_analysis[week_key]['sender_tasks']:
                    weekly_analysis[week_key]['sender_tasks'][task['sender']] = 0
                weekly_analysis[week_key]['sender_tasks'][task['sender']] += 1
            
            return weekly_analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º: {e}")
            return {}
    
    def create_dashboard_report(self, tasks, sender_analysis, weekly_analysis, filename=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –æ—Ç—á–µ—Ç–∞"""
        try:
            if not filename:
                filename = f"output/dashboard_plan_fact_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            os.makedirs("output", exist_ok=True)
            
            workbook = openpyxl.Workbook()
            
            # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–∏—Å—Ç
            workbook.remove(workbook.active)
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
            self.create_summary_sheet(workbook, tasks, sender_analysis)
            self.create_senders_sheet(workbook, sender_analysis)
            self.create_tasks_sheet(workbook, tasks)
            self.create_weekly_sheet(workbook, weekly_analysis)
            self.create_problems_sheet(workbook, sender_analysis)
            
            workbook.save(filename)
            print(f"‚úÖ –î–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {e}")
            return None
    
    def create_summary_sheet(self, workbook, tasks, sender_analysis):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
        try:
            ws = workbook.create_sheet("–°–≤–æ–¥–∫–∞")
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            ws['A1'] = "–°–í–û–î–ö–ê –ü–û –ü–õ–ê–ù–ê–ú –ò –§–ê–ö–¢–ê–ú"
            ws['A2'] = "Main mega –¢–û–ü"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_tasks = len(tasks)
            total_plan = sum(task['plan'] for task in tasks)
            total_fact = sum(task['fact'] for task in tasks)
            avg_completion = (total_fact / total_plan * 100) if total_plan > 0 else 0
            completed_tasks = len([t for t in tasks if t['completion_percent'] >= 70])
            
            ws['A4'] = "üìÖ –ü–µ—Ä–∏–æ–¥:"
            ws['B4'] = f"{min(task['date'] for task in tasks).strftime('%d.%m.%Y')} - {max(task['date'] for task in tasks).strftime('%d.%m.%Y')}"
            
            ws['A5'] = "üë• –í—Å–µ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π:"
            ws['B5'] = len(sender_analysis)
            
            ws['A6'] = "üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á:"
            ws['B6'] = total_tasks
            
            ws['A7'] = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ:"
            ws['B7'] = f"{completed_tasks} ({completed_tasks/total_tasks*100:.1f}%)"
            
            ws['A8'] = "‚ö†Ô∏è –ù–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–æ:"
            ws['B8'] = f"{total_tasks - completed_tasks} ({(total_tasks - completed_tasks)/total_tasks*100:.1f}%)"
            
            # –¢–æ–ø-5 —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
            ws['A10'] = "–¢–û–ü-5 –†–£–ö–û–í–û–î–ò–¢–ï–õ–ï–ô –ü–û –ê–ö–¢–ò–í–ù–û–°–¢–ò"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞—á
            sorted_senders = sorted(sender_analysis.items(), key=lambda x: x[1]['tasks_count'], reverse=True)[:5]
            
            headers = ['–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–ó–∞–¥–∞—á–∏', '–ü–ª–∞–Ω', '–§–∞–∫—Ç', '% –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è', '–°—Ç–∞—Ç—É—Å']
            for col, header in enumerate(headers, 1):
                ws.cell(row=11, column=col, value=header)
            
            for row, (sender, data) in enumerate(sorted_senders, 12):
                avg_completion = (data['total_fact'] / data['total_plan'] * 100) if data['total_plan'] > 0 else 0
                status = self.get_status(avg_completion)
                
                ws.cell(row=row, column=1, value=sender)
                ws.cell(row=row, column=2, value=data['tasks_count'])
                ws.cell(row=row, column=3, value=round(data['total_plan'], 2))
                ws.cell(row=row, column=4, value=round(data['total_fact'], 2))
                ws.cell(row=row, column=5, value=f"{avg_completion:.1f}%")
                ws.cell(row=row, column=6, value=status)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.format_summary_sheet(ws)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞: {e}")
    
    def create_senders_sheet(self, workbook, sender_analysis):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π"""
        try:
            ws = workbook.create_sheet("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏")
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = [
                '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–ó–∞–¥–∞—á–∏', '–û–±—â–∏–π –ø–ª–∞–Ω', '–û–±—â–∏–π —Ñ–∞–∫—Ç', 
                '% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', '–°—Ç–∞—Ç—É—Å', '–ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '–ù–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
                '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–¢—Ä–µ–Ω–¥'
            ]
            
            for col, header in enumerate(headers, 1):
                ws.cell(row=1, column=col, value=header)
            
            # –î–∞–Ω–Ω—ã–µ
            row = 2
            for sender, data in sender_analysis.items():
                avg_completion = (data['total_fact'] / data['total_plan'] * 100) if data['total_plan'] > 0 else 0
                status = self.get_status(avg_completion)
                
                ws.cell(row=row, column=1, value=sender)
                ws.cell(row=row, column=2, value=data['tasks_count'])
                ws.cell(row=row, column=3, value=round(data['total_plan'], 2))
                ws.cell(row=row, column=4, value=round(data['total_fact'], 2))
                ws.cell(row=row, column=5, value=f"{avg_completion:.1f}%")
                ws.cell(row=row, column=6, value=status)
                ws.cell(row=row, column=7, value=data['over_performance'])
                ws.cell(row=row, column=8, value=data['under_performance'])
                ws.cell(row=row, column=9, value=data['last_activity'].strftime('%Y-%m-%d') if data['last_activity'] else '')
                ws.cell(row=row, column=10, value='‚ÜóÔ∏è' if avg_completion >= 90 else '‚Üí' if avg_completion >= 70 else '‚ÜòÔ∏è')
                
                row += 1
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.format_senders_sheet(ws)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: {e}")
    
    def create_tasks_sheet(self, workbook, tasks):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –∑–∞–¥–∞—á"""
        try:
            ws = workbook.create_sheet("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è")
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = [
                '–î–∞—Ç–∞', '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–ü–ª–∞–Ω', '–§–∞–∫—Ç', '–†–∞–∑–Ω–∏—Ü–∞', 
                '% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', '–°—Ç–∞—Ç—É—Å', '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'
            ]
            
            for col, header in enumerate(headers, 1):
                ws.cell(row=1, column=col, value=header)
            
            # –î–∞–Ω–Ω—ã–µ
            for row, task in enumerate(tasks, 2):
                ws.cell(row=row, column=1, value=task['date'].strftime('%Y-%m-%d'))
                ws.cell(row=row, column=2, value=task['sender'])
                ws.cell(row=row, column=3, value=task['plan'])
                ws.cell(row=row, column=4, value=task['fact'])
                ws.cell(row=row, column=5, value=task['difference'])
                ws.cell(row=row, column=6, value=f"{task['completion_percent']:.1f}%")
                ws.cell(row=row, column=7, value=task['status'])
                ws.cell(row=row, column=8, value=task['weekday'])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.format_tasks_sheet(ws)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –∑–∞–¥–∞—á: {e}")
    
    def create_weekly_sheet(self, workbook, weekly_analysis):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º"""
        try:
            ws = workbook.create_sheet("–ü–æ –Ω–µ–¥–µ–ª—è–º")
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = [
                '–ù–µ–¥–µ–ª—è', '–í—Å–µ–≥–æ –∑–∞–¥–∞—á', '–û–±—â–∏–π –ø–ª–∞–Ω', '–û–±—â–∏–π —Ñ–∞–∫—Ç', 
                '% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π', '–¢–æ–ø-3 —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è'
            ]
            
            for col, header in enumerate(headers, 1):
                ws.cell(row=1, column=col, value=header)
            
            # –î–∞–Ω–Ω—ã–µ
            row = 2
            for week, data in sorted(weekly_analysis.items(), reverse=True):
                avg_completion = (data['total_fact'] / data['total_plan'] * 100) if data['total_plan'] > 0 else 0
                
                # –¢–æ–ø-3 —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ–¥–µ–ª–∏
                top_senders = sorted(data['sender_tasks'].items(), key=lambda x: x[1], reverse=True)[:3]
                top_senders_str = ', '.join([f"{sender}({tasks})" for sender, tasks in top_senders])
                
                ws.cell(row=row, column=1, value=week)
                ws.cell(row=row, column=2, value=data['tasks_count'])
                ws.cell(row=row, column=3, value=round(data['total_plan'], 2))
                ws.cell(row=row, column=4, value=round(data['total_fact'], 2))
                ws.cell(row=row, column=5, value=f"{avg_completion:.1f}%")
                ws.cell(row=row, column=6, value=len(data['senders']))
                ws.cell(row=row, column=7, value=top_senders_str)
                
                row += 1
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.format_weekly_sheet(ws)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º: {e}")
    
    def create_problems_sheet(self, workbook, sender_analysis):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –ø—Ä–æ–±–ª–µ–º"""
        try:
            ws = workbook.create_sheet("–ü—Ä–æ–±–ª–µ–º—ã")
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            ws['A1'] = "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´"
            
            row = 3
            for sender, data in sender_analysis.items():
                avg_completion = (data['total_fact'] / data['total_plan'] * 100) if data['total_plan'] > 0 else 0
                
                if avg_completion < 70:
                    ws.cell(row=row, column=1, value=f"‚Ä¢ {sender} - —Å—Ç–∞–±–∏–ª—å–Ω–æ –Ω–µ–¥–æ–≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–ª–∞–Ω—ã ({avg_completion:.1f}% –≤ —Å—Ä–µ–¥–Ω–µ–º)")
                    row += 1
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            ws['A10'] = "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò"
            ws['A12'] = "‚Ä¢ –ü—Ä–æ–≤–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏"
            ws['A13'] = "‚Ä¢ –£–ª—É—á—à–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á (—Å–Ω–∏–∑–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ 10-15%)"
            ws['A14'] = "‚Ä¢ –í–Ω–µ–¥—Ä–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —á–µ–∫-–∞–ø—ã –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á"
            ws['A15'] = "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –¥–µ–¥–ª–∞–π–Ω–∞—Ö"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.format_problems_sheet(ws)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –ø—Ä–æ–±–ª–µ–º: {e}")
    
    def format_summary_sheet(self, ws):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ws['A1'].font = Font(size=16, bold=True, color=self.colors['blue'])
        ws['A2'].font = Font(size=14, bold=True)
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫
        ws.merge_cells('A1:B1')
        ws.merge_cells('A2:B2')
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        ws.column_dimensions['A'].width = 25
        ws.column_dimensions['B'].width = 20
    
    def format_senders_sheet(self, ws):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π"""
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        for cell in ws[1]:
            cell.font = Font(bold=True, color='FFFFFF')
            cell.fill = PatternFill(start_color=self.colors['blue'], end_color=self.colors['blue'], fill_type='solid')
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in range(1, 11):
            ws.column_dimensions[openpyxl.utils.get_column_letter(col)].width = 15
    
    def format_tasks_sheet(self, ws):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –∑–∞–¥–∞—á"""
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        for cell in ws[1]:
            cell.font = Font(bold=True, color='FFFFFF')
            cell.fill = PatternFill(start_color=self.colors['blue'], end_color=self.colors['blue'], fill_type='solid')
        
        # –£—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        for row in range(2, ws.max_row + 1):
            completion_cell = ws.cell(row=row, column=6)
            try:
                completion_value = float(completion_cell.value.replace('%', ''))
                if completion_value >= 90:
                    completion_cell.fill = PatternFill(start_color=self.colors['green'], end_color=self.colors['green'], fill_type='solid')
                elif completion_value >= 70:
                    completion_cell.fill = PatternFill(start_color=self.colors['yellow'], end_color=self.colors['yellow'], fill_type='solid')
                else:
                    completion_cell.fill = PatternFill(start_color=self.colors['red'], end_color=self.colors['red'], fill_type='solid')
            except:
                pass
    
    def format_weekly_sheet(self, ws):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º"""
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        for cell in ws[1]:
            cell.font = Font(bold=True, color='FFFFFF')
            cell.fill = PatternFill(start_color=self.colors['blue'], end_color=self.colors['blue'], fill_type='solid')
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        ws.column_dimensions['A'].width = 12
        ws.column_dimensions['G'].width = 30
    
    def format_problems_sheet(self, ws):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –ø—Ä–æ–±–ª–µ–º"""
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        ws['A1'].font = Font(size=14, bold=True, color=self.colors['red'])
        ws['A10'].font = Font(size=14, bold=True, color=self.colors['blue'])
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        ws.column_dimensions['A'].width = 80
    
    async def run_dashboard_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            print("üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –î–ê–®–ë–û–†–î–ê –ü–õ–ê–ù–û–í –ò –§–ê–ö–¢–û–í")
            print("=" * 60)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not await self.connect():
                return
            
            # –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
            if not await self.find_target_chat():
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = await self.get_filtered_messages(weeks_back=52)
            
            if not messages:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                return
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            tasks = self.extract_plan_fact_data(messages)
            
            if not tasks:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á —Å –ø–ª–∞–Ω–∞–º–∏ –∏ —Ñ–∞–∫—Ç–∞–º–∏")
                return
            
            # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
            sender_analysis = self.analyze_by_senders(tasks)
            weekly_analysis = self.analyze_by_weeks(tasks)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
            report_file = self.create_dashboard_report(tasks, sender_analysis, weekly_analysis)
            
            if report_file:
                print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –¥–∞—à–±–æ—Ä–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                print(f"üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
                
                # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
                print(f"\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
                print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
                print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
                print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(sender_analysis)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
                sorted_senders = sorted(sender_analysis.items(), key=lambda x: x[1]['tasks_count'], reverse=True)[:5]
                print(f"\nüë• –¢–û–ü-5 –†–£–ö–û–í–û–î–ò–¢–ï–õ–ï–ô:")
                for i, (sender, data) in enumerate(sorted_senders, 1):
                    avg_completion = (data['total_fact'] / data['total_plan'] * 100) if data['total_plan'] > 0 else 0
                    print(f"  {i}. {sender}: {data['tasks_count']} –∑–∞–¥–∞—á, {avg_completion:.1f}% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    analyzer = DashboardPlanFactAnalyzer()
    await analyzer.run_dashboard_analysis()

if __name__ == "__main__":
    asyncio.run(main())
