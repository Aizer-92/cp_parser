#!/usr/bin/env python3
"""
Full Chat Analyzer for Main mega –¢–û–ü
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —á–∞—Ç–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
"""

import asyncio
import json
import re
from datetime import datetime, timedelta
from telethon import TelegramClient
from loguru import logger
import pandas as pd
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment
import os

class FullChatAnalyzer:
    def __init__(self):
        self.config = self.load_config()
        self.client = None
        self.target_chat_name = "Main mega –¢–û–ü"
        self.target_chat_id = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        os.makedirs("output/logs", exist_ok=True)
        logger.add("output/logs/full_chat_analyzer.log", rotation="1 day", retention="7 days")
        
    def load_config(self):
        with open("config/personal_config.json", 'r', encoding='utf-8') as f:
            return json.load(f)
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            self.client = TelegramClient(
                self.config['session_name'],
                self.config['api_id'],
                self.config['api_hash']
            )
            
            await self.client.start()
            
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                print(f"üë§ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name}")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def find_target_chat(self):
        """–ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            print(f"üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞ '{self.target_chat_name}'...")
            
            dialogs = await self.client.get_dialogs()
            
            for dialog in dialogs:
                if self.target_chat_name.lower() in dialog.name.lower():
                    self.target_chat_id = dialog.id
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç: {dialog.name} (ID: {dialog.id})")
                    return True
            
            print(f"‚ùå –ß–∞—Ç '{self.target_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞: {e}")
            return False
    
    async def get_all_messages(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞"""
        try:
            print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞...")
            
            all_messages = []
            offset_id = 0
            limit = 100
            
            while True:
                messages = await self.client.get_messages(
                    self.target_chat_id,
                    limit=limit,
                    offset_id=offset_id
                )
                
                if not messages:
                    break
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
                text_messages = []
                for msg in messages:
                    if msg.text and len(msg.text.strip()) > 5:
                        sender_name = await self.get_sender_name(msg)
                        text_messages.append({
                            'id': msg.id,
                            'date': msg.date,
                            'text': msg.text.strip(),
                            'sender': sender_name,
                            'length': len(msg.text.strip())
                        })
                
                all_messages.extend(text_messages)
                offset_id = messages[-1].id
                
                print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
                if len(all_messages) >= 10000:
                    print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 10000 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    break
            
            print(f"‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            return all_messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    async def get_sender_name(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        try:
            sender = await message.get_sender()
            if sender:
                return f"{sender.first_name} {sender.last_name or ''}".strip()
            return "Unknown"
        except:
            return "Unknown"
    
    def analyze_message_for_plan_fact(self, text, message_date, sender_name, message_id):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤"""
        try:
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
            patterns = [
                # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                (r'–ø–ª–∞–Ω[:\s]*(\d+(?:\.\d+)?)', '–ø–ª–∞–Ω_—è–≤–Ω—ã–π'),
                (r'—Ñ–∞–∫—Ç[:\s]*(\d+(?:\.\d+)?)', '—Ñ–∞–∫—Ç_—è–≤–Ω—ã–π'),
                (r'–ø/—Ñ[:\s]*(\d+(?:\.\d+)?)', '–ø—Ñ_—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ'),
                
                # –ß–∏—Å–ª–∞ —á–µ—Ä–µ–∑ —Å–ª–µ—à –∏–ª–∏ –¥–µ—Ñ–∏—Å (–ø–ª–∞–Ω/—Ñ–∞–∫—Ç)
                (r'(\d+(?:\.\d+)?)[/\-]\s*(\d+(?:\.\d+)?)', '—á–∏—Å–ª–∞_—Å–ª–µ—à'),
                
                # –ß–∏—Å–ª–∞ –≤ —Å–∫–æ–±–∫–∞—Ö (–ø–ª–∞–Ω —Ñ–∞–∫—Ç)
                (r'\((\d+(?:\.\d+)?)[^\d]*(\d+(?:\.\d+)?)\)', '—á–∏—Å–ª–∞_—Å–∫–æ–±–∫–∏'),
                
                # –î–∞—Ç—ã —Å —á–∏—Å–ª–∞–º–∏ (—Ñ–æ—Ä–º–∞—Ç: –¥–∞—Ç–∞ + —á–∏—Å–ª–∞)
                (r'(\d{1,2}[\.\/]\d{1,2}[\.\/]\d{2,4})[^\d]*(\d+(?:\.\d+)?)', '–¥–∞—Ç–∞_—á–∏—Å–ª–∞'),
                
                # –ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∑–∞–¥–∞—á
                (r'(\d+(?:\.\d+)?)[^\d]*(\d+(?:\.\d+)?)', '–¥–≤–∞_—á–∏—Å–ª–∞'),
                
                # –ü—Ä–æ—Ü–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                (r'(\d+(?:\.\d+)?)%[^\d]*(\d+(?:\.\d+)?)', '–ø—Ä–æ—Ü–µ–Ω—Ç—ã'),
            ]
            
            found_patterns = []
            extracted_data = []
            
            for pattern, pattern_name in patterns:
                matches = re.finditer(pattern, text.lower())
                for match in matches:
                    try:
                        if len(match.groups()) == 2:
                            num1 = float(match.group(1))
                            num2 = float(match.group(2))
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
                            if 0 <= num1 <= 1000000 and 0 <= num2 <= 1000000:
                                found_patterns.append(pattern_name)
                                
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞–Ω –∏ —Ñ–∞–∫—Ç
                                plan_value, fact_value = self.determine_plan_fact(num1, num2, pattern_name, text)
                                
                                if plan_value is not None and fact_value is not None:
                                    completion_percent = (fact_value / plan_value * 100) if plan_value > 0 else 0
                                    
                                    extracted_data.append({
                                        'message_id': message_id,
                                        'date': message_date,
                                        'sender': sender_name,
                                        'plan': plan_value,
                                        'fact': fact_value,
                                        'difference': fact_value - plan_value,
                                        'completion_percent': completion_percent,
                                        'pattern_used': pattern_name,
                                        'match_text': match.group(0),
                                        'original_text': text[:300],
                                        'status': self.get_status(completion_percent),
                                        'is_duplicate': False
                                    })
                        elif len(match.groups()) == 1:
                            # –û–¥–∏–Ω–æ—á–Ω—ã–µ —á–∏—Å–ª–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–ª–∞–Ω –∏–ª–∏ —Ñ–∞–∫—Ç)
                            num = float(match.group(1))
                            if 0 <= num <= 1000000:
                                found_patterns.append(pattern_name)
                                
                                # –ò—â–µ–º –ø–∞—Ä–Ω–æ–µ —á–∏—Å–ª–æ –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
                                pair_data = self.find_pair_number(text, num, pattern_name, message_id, message_date, sender_name)
                                if pair_data:
                                    extracted_data.append(pair_data)
                                    
                    except (ValueError, ZeroDivisionError):
                        continue
            
            return extracted_data, found_patterns
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return [], []
    
    def determine_plan_fact(self, num1, num2, pattern_name, text):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á—Ç–æ –µ—Å—Ç—å –ø–ª–∞–Ω, –∞ —á—Ç–æ —Ñ–∞–∫—Ç"""
        try:
            # –î–ª—è —è–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            if pattern_name in ['–ø–ª–∞–Ω_—è–≤–Ω—ã–π', '—Ñ–∞–∫—Ç_—è–≤–Ω—ã–π']:
                if '–ø–ª–∞–Ω' in text.lower():
                    return num1, num2
                elif '—Ñ–∞–∫—Ç' in text.lower():
                    return num2, num1
            
            # –î–ª—è —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ —Å–ª–µ—à (–æ–±—ã—á–Ω–æ –ø–ª–∞–Ω/—Ñ–∞–∫—Ç)
            elif pattern_name == '—á–∏—Å–ª–∞_—Å–ª–µ—à':
                return num1, num2
            
            # –î–ª—è —á–∏—Å–µ–ª –≤ —Å–∫–æ–±–∫–∞—Ö
            elif pattern_name == '—á–∏—Å–ª–∞_—Å–∫–æ–±–∫–∏':
                return num1, num2
            
            # –î–ª—è –¥–∞—Ç —Å —á–∏—Å–ª–∞–º–∏ (–æ–±—ã—á–Ω–æ —Ñ–∞–∫—Ç/–ø–ª–∞–Ω)
            elif pattern_name == '–¥–∞—Ç–∞_—á–∏—Å–ª–∞':
                return num2, num1
            
            # –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
            elif pattern_name == '–ø—Ä–æ—Ü–µ–Ω—Ç—ã':
                return num1, num2
            
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ - –ø–ª–∞–Ω, –≤—Ç–æ—Ä–æ–µ - —Ñ–∞–∫—Ç
            else:
                return num1, num2
                
        except Exception as e:
            return None, None
    
    def find_pair_number(self, text, single_num, pattern_name, message_id, message_date, sender_name):
        """–ü–æ–∏—Å–∫ –ø–∞—Ä–Ω–æ–≥–æ —á–∏—Å–ª–∞ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ"""
        try:
            # –ò—â–µ–º –¥—Ä—É–≥–∏–µ —á–∏—Å–ª–∞ –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
            numbers = re.findall(r'(\d+(?:\.\d+)?)', text)
            numbers = [float(n) for n in numbers if 0 <= float(n) <= 1000000]
            
            if len(numbers) >= 2:
                # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
                for i, num in enumerate(numbers):
                    if abs(num - single_num) < 0.01:  # –ù–∞—à–ª–∏ –Ω–∞—à–µ —á–∏—Å–ª–æ
                        if i + 1 < len(numbers):
                            pair_num = numbers[i + 1]
                            completion_percent = (pair_num / single_num * 100) if single_num > 0 else 0
                            
                            return {
                                'message_id': message_id,
                                'date': message_date,
                                'sender': sender_name,
                                'plan': single_num,
                                'fact': pair_num,
                                'difference': pair_num - single_num,
                                'completion_percent': completion_percent,
                                'pattern_used': f"{pattern_name}_–ø–∞—Ä–Ω–æ–µ",
                                'match_text': f"{single_num}/{pair_num}",
                                'original_text': text[:300],
                                'status': self.get_status(completion_percent),
                                'is_duplicate': False
                            }
            
            return None
            
        except Exception as e:
            return None
    
    def get_status(self, completion_percent):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if completion_percent >= 100:
            return "–ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
        elif completion_percent >= 90:
            return "–•–æ—Ä–æ—à–æ"
        elif completion_percent >= 70:
            return "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
        else:
            return "–ù–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
    
    def find_duplicates(self, all_data):
        """–ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π"""
        try:
            grouped_data = {}
            
            for item in all_data:
                key = (item['sender'], item['plan'], item['fact'])
                if key not in grouped_data:
                    grouped_data[key] = []
                grouped_data[key].append(item)
            
            # –ü–æ–º–µ—á–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            for key, items in grouped_data.items():
                if len(items) > 1:
                    for item in items:
                        item['is_duplicate'] = True
                        item['duplicate_count'] = len(items)
            
            return all_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
            return all_data
    
    def analyze_by_periods(self, all_data):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–∞–º"""
        try:
            periods = {
                '2025': [],
                '2024': [],
                '2023': [],
                '2022': [],
                '2021': []
            }
            
            for item in all_data:
                year = item['date'].year
                year_str = str(year)
                if year_str in periods:
                    periods[year_str].append(item)
            
            return periods
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º: {e}")
            return {}
    
    def create_full_report(self, all_data, periods_analysis, filename=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            if not filename:
                filename = f"output/full_chat_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            os.makedirs("output", exist_ok=True)
            
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                
                # –õ–∏—Å—Ç 1: –í—Å–µ –¥–∞–Ω–Ω—ã–µ
                if all_data:
                    df_all = pd.DataFrame(all_data)
                    df_all['date'] = pd.to_datetime(df_all['date']).dt.tz_localize(None)
                    df_all = df_all.sort_values(['sender', 'date'], ascending=[True, False])
                    
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
                    df_all = df_all.rename(columns={
                        'message_id': 'ID —Å–æ–æ–±—â–µ–Ω–∏—è',
                        'date': '–î–∞—Ç–∞',
                        'sender': '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
                        'plan': '–ü–ª–∞–Ω',
                        'fact': '–§–∞–∫—Ç',
                        'difference': '–†–∞–∑–Ω–∏—Ü–∞',
                        'completion_percent': '% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                        'pattern_used': '–§–æ—Ä–º–∞—Ç',
                        'match_text': '–ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç',
                        'original_text': '–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç',
                        'status': '–°—Ç–∞—Ç—É—Å',
                        'is_duplicate': '–î—É–±–ª–∏–∫–∞—Ç',
                        'duplicate_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤'
                    })
                    
                    df_all.to_excel(writer, sheet_name='–í—Å–µ –¥–∞–Ω–Ω—ã–µ', index=False)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    worksheet = writer.sheets['–í—Å–µ –¥–∞–Ω–Ω—ã–µ']
                    
                    # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –Ω–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
                    red_fill = PatternFill(start_color='FFFF0000', end_color='FFFF0000', fill_type='solid')
                    yellow_fill = PatternFill(start_color='FFFFFF00', end_color='FFFFFF00', fill_type='solid')
                    
                    for row in worksheet.iter_rows(min_row=2):
                        if row[df_all.columns.get_loc('–î—É–±–ª–∏–∫–∞—Ç')].value:
                            for cell in row:
                                cell.fill = red_fill
                        elif row[df_all.columns.get_loc('% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')].value and row[df_all.columns.get_loc('% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')].value < 70:
                            for cell in row:
                                cell.fill = yellow_fill
                
                # –õ–∏—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ –ø–æ –≥–æ–¥–∞–º
                if periods_analysis:
                    year_data = []
                    for year, data in periods_analysis.items():
                        if data:
                            total_plan = sum(item['plan'] for item in data)
                            total_fact = sum(item['fact'] for item in data)
                            avg_completion = sum(item['completion_percent'] for item in data) / len(data)
                            
                            year_data.append({
                                '–ì–æ–¥': year,
                                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π': len(data),
                                '–û–±—â–∏–π –ø–ª–∞–Ω': round(total_plan, 2),
                                '–û–±—â–∏–π —Ñ–∞–∫—Ç': round(total_fact, 2),
                                '–°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': round(avg_completion, 2),
                                '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π': len(set(item['sender'] for item in data)),
                                '–î—É–±–ª–∏–∫–∞—Ç–æ–≤': len([item for item in data if item['is_duplicate']])
                            })
                    
                    df_years = pd.DataFrame(year_data)
                    df_years = df_years.sort_values('–ì–æ–¥', ascending=False)
                    df_years.to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏–∑ –ø–æ –≥–æ–¥–∞–º', index=False)
                
                # –õ–∏—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º
                if all_data:
                    sender_analysis = {}
                    
                    for item in all_data:
                        sender = item['sender']
                        if sender not in sender_analysis:
                            sender_analysis[sender] = {
                                'total_plan': 0,
                                'total_fact': 0,
                                'tasks_count': 0,
                                'over_performance': 0,
                                'under_performance': 0,
                                'duplicates': 0,
                                'dates': set(),
                                'patterns': set()
                            }
                        
                        sender_analysis[sender]['total_plan'] += item['plan']
                        sender_analysis[sender]['total_fact'] += item['fact']
                        sender_analysis[sender]['tasks_count'] += 1
                        sender_analysis[sender]['dates'].add(item['date'].strftime('%Y-%m-%d'))
                        sender_analysis[sender]['patterns'].add(item['pattern_used'])
                        
                        if item['completion_percent'] >= 100:
                            sender_analysis[sender]['over_performance'] += 1
                        else:
                            sender_analysis[sender]['under_performance'] += 1
                        
                        if item['is_duplicate']:
                            sender_analysis[sender]['duplicates'] += 1
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                    sender_data = []
                    for sender, data in sender_analysis.items():
                        avg_completion = (data['total_fact'] / data['total_plan'] * 100) if data['total_plan'] > 0 else 0
                        sender_data.append({
                            '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å': sender,
                            '–û–±—â–∏–π –ø–ª–∞–Ω': round(data['total_plan'], 2),
                            '–û–±—â–∏–π —Ñ–∞–∫—Ç': round(data['total_fact'], 2),
                            '–°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': round(avg_completion, 2),
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á': data['tasks_count'],
                            '–ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π': data['over_performance'],
                            '–ù–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π': data['under_performance'],
                            '–î—É–±–ª–∏–∫–∞—Ç–æ–≤': data['duplicates'],
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞—Ç': len(data['dates']),
                            '–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã': ', '.join(sorted(data['patterns']))
                        })
                    
                    df_senders = pd.DataFrame(sender_data)
                    df_senders = df_senders.sort_values('–°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', ascending=False)
                    df_senders.to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏–∑ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º', index=False)
                
                # –õ–∏—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º
                if all_data:
                    pattern_stats = {}
                    for item in all_data:
                        pattern = item['pattern_used']
                        if pattern not in pattern_stats:
                            pattern_stats[pattern] = {
                                'count': 0,
                                'total_plan': 0,
                                'total_fact': 0,
                                'senders': set()
                            }
                        
                        pattern_stats[pattern]['count'] += 1
                        pattern_stats[pattern]['total_plan'] += item['plan']
                        pattern_stats[pattern]['total_fact'] += item['fact']
                        pattern_stats[pattern]['senders'].add(item['sender'])
                    
                    pattern_data = []
                    for pattern, stats in pattern_stats.items():
                        avg_completion = (stats['total_fact'] / stats['total_plan'] * 100) if stats['total_plan'] > 0 else 0
                        pattern_data.append({
                            '–§–æ—Ä–º–∞—Ç': pattern,
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π': stats['count'],
                            '–û–±—â–∏–π –ø–ª–∞–Ω': round(stats['total_plan'], 2),
                            '–û–±—â–∏–π —Ñ–∞–∫—Ç': round(stats['total_fact'], 2),
                            '–°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': round(avg_completion, 2),
                            '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π': len(stats['senders'])
                        })
                    
                    df_patterns = pd.DataFrame(pattern_data)
                    df_patterns = df_patterns.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π', ascending=False)
                    df_patterns.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º', index=False)
            
            print(f"‚úÖ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return None
    
    async def run_full_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –ß–ê–¢–ê –ó–ê –í–°–ï –í–†–ï–ú–Ø")
            print("=" * 70)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not await self.connect():
                return
            
            # –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
            if not await self.find_target_chat():
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = await self.get_all_messages()
            
            if not messages:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π")
                return
            
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
            all_extracted_data = []
            analyzed_messages = 0
            
            print("üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤...")
            
            for msg in messages:
                extracted_data, patterns = self.analyze_message_for_plan_fact(
                    msg['text'], msg['date'], msg['sender'], msg['id']
                )
                
                if extracted_data:
                    all_extracted_data.extend(extracted_data)
                    analyzed_messages += 1
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å
                if len(messages) > 1000 and analyzed_messages % 100 == 0:
                    print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {analyzed_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–π–¥–µ–Ω–æ {len(all_extracted_data)} –∑–∞–ø–∏—Å–µ–π...")
            
            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {analyzed_messages} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {len(messages)}")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_extracted_data)} –∑–∞–ø–∏—Å–µ–π –ø–ª–∞–Ω–æ–≤/—Ñ–∞–∫—Ç–æ–≤")
            
            if not all_extracted_data:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤/—Ñ–∞–∫—Ç–æ–≤")
                return
            
            # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            all_extracted_data = self.find_duplicates(all_extracted_data)
            duplicates_count = len([item for item in all_extracted_data if item['is_duplicate']])
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {duplicates_count} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
            periods_analysis = self.analyze_by_periods(all_extracted_data)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report_file = self.create_full_report(all_extracted_data, periods_analysis)
            
            if report_file:
                print(f"\nüéâ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                print(f"üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
                
                # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
                print(f"\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
                print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
                print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {analyzed_messages}")
                print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø–ª–∞–Ω–æ–≤/—Ñ–∞–∫—Ç–æ–≤: {len(all_extracted_data)}")
                print(f"–î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_count}")
                print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(set(item['sender'] for item in all_extracted_data))}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ–¥–∞–º
                if periods_analysis:
                    print(f"\nüìÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ì–û–î–ê–ú:")
                    for year, data in sorted(periods_analysis.items(), reverse=True):
                        if data:
                            print(f"  {year}: {len(data)} –∑–∞–ø–∏—Å–µ–π")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
                sender_stats = {}
                for item in all_extracted_data:
                    sender = item['sender']
                    if sender not in sender_stats:
                        sender_stats[sender] = {'count': 0, 'total_completion': 0}
                    sender_stats[sender]['count'] += 1
                    sender_stats[sender]['total_completion'] += item['completion_percent']
                
                print(f"\nüë• –¢–û–ü –†–£–ö–û–í–û–î–ò–¢–ï–õ–ï–ô:")
                for sender, stats in sorted(sender_stats.items(), key=lambda x: x[1]['count'], reverse=True)[:5]:
                    avg_completion = stats['total_completion'] / stats['count']
                    print(f"  {sender}: {stats['count']} –∑–∞–ø–∏—Å–µ–π, —Å—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {avg_completion:.1f}%")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    analyzer = FullChatAnalyzer()
    await analyzer.run_full_analysis()

if __name__ == "__main__":
    asyncio.run(main())
