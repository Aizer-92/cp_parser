#!/usr/bin/env python3
"""
Weekly Comparison Analyzer for Main mega –¢–û–ü
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏ —Å —Ñ–∞–∫—Ç–∞–º–∏ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
"""

import asyncio
import json
import re
from datetime import datetime, timedelta
from telethon import TelegramClient
from loguru import logger
import pandas as pd
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
import os

class WeeklyComparisonAnalyzer:
    def __init__(self):
        self.config = self.load_config()
        self.client = None
        self.target_chat_name = "Main mega –¢–û–ü"
        self.target_chat_id = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        os.makedirs("output/logs", exist_ok=True)
        logger.add("output/logs/weekly_comparison.log", rotation="1 day", retention="7 days")
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.colors = {
            'green': '28A745',      # –í—ã–ø–æ–ª–Ω–µ–Ω–æ
            'yellow': 'FFC107',     # –ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            'red': 'DC3545',        # –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            'blue': '007BFF',       # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            'light_gray': 'F8F9FA', # –§–æ–Ω
            'dark_gray': '6C757D'   # –¢–µ–∫—Å—Ç
        }
        
    def load_config(self):
        with open("config/personal_config.json", 'r', encoding='utf-8') as f:
            return json.load(f)
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            self.client = TelegramClient(
                self.config['session_name'],
                self.config['api_id'],
                self.config['api_hash']
            )
            
            await self.client.start()
            
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                print(f"üë§ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name}")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def find_target_chat(self):
        """–ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            print(f"üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞ '{self.target_chat_name}'...")
            
            dialogs = await self.client.get_dialogs()
            
            for dialog in dialogs:
                if self.target_chat_name.lower() in dialog.name.lower():
                    self.target_chat_id = dialog.id
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç: {dialog.name} (ID: {dialog.id})")
                    return True
            
            print(f"‚ùå –ß–∞—Ç '{self.target_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞: {e}")
            return False
    
    async def get_weekly_messages(self, weeks_back=12):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –Ω–µ–¥–µ–ª—è–º"""
        try:
            print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {weeks_back} –Ω–µ–¥–µ–ª—å...")
            
            today = datetime.now()
            start_date = today - timedelta(weeks=weeks_back)
            
            messages = await self.client.get_messages(
                self.target_chat_id,
                offset_date=start_date,
                limit=10000
            )
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –Ω–µ–¥–µ–ª—è–º
            weekly_messages = {}
            
            for msg in messages:
                if msg.text and len(msg.text.strip()) > 50:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–¥–µ–ª—é
                    msg_date = msg.date.replace(tzinfo=None)
                    week_start = msg_date - timedelta(days=msg_date.weekday())
                    week_key = week_start.strftime('%Y-%m-%d')
                    
                    if week_key not in weekly_messages:
                        weekly_messages[week_key] = []
                    
                    sender_name = await self.get_sender_name(msg)
                    weekly_messages[week_key].append({
                        'id': msg.id,
                        'date': msg_date,
                        'text': msg.text.strip(),
                        'sender': sender_name,
                        'week_start': week_start,
                        'week_key': week_key
                    })
            
            print(f"üìä –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–æ {len(weekly_messages)} –Ω–µ–¥–µ–ª—è–º")
            return weekly_messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return {}
    
    async def get_sender_name(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        try:
            sender = await message.get_sender()
            if sender:
                return f"{sender.first_name} {sender.last_name or ''}".strip()
            return "Unknown"
        except:
            return "Unknown"
    
    def extract_plan_fact_sections(self, text, sender, message_date):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–ª–∞–Ω –∏ —Ñ–∞–∫—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            lines = text.split('\n')
            
            plan_section = []
            fact_section = []
            current_section = None
            
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª
                if re.match(r'^–ø–ª–∞–Ω[:\s]*', line.lower()):
                    current_section = 'plan'
                    continue
                elif re.match(r'^—Ñ–∞–∫—Ç[:\s]*', line.lower()):
                    current_section = 'fact'
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª
                if current_section == 'plan':
                    plan_section.append(line)
                elif current_section == 'fact':
                    fact_section.append(line)
            
            return {
                'sender': sender,
                'date': message_date,
                'plan_tasks': plan_section,
                'fact_tasks': fact_section,
                'has_plan': len(plan_section) > 0,
                'has_fact': len(fact_section) > 0
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤: {e}")
            return None
    
    def analyze_weekly_comparison(self, weekly_messages):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å"""
        try:
            print("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å...")
            
            comparisons = []
            week_keys = sorted(weekly_messages.keys())
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –Ω–µ–¥–µ–ª—è–º (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            for i in range(len(week_keys) - 1):
                current_week = week_keys[i]
                next_week = week_keys[i + 1]
                
                current_week_messages = weekly_messages[current_week]
                next_week_messages = weekly_messages[next_week]
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
                current_week_plans = {}
                for msg in current_week_messages:
                    sections = self.extract_plan_fact_sections(msg['text'], msg['sender'], msg['date'])
                    if sections and sections['has_plan']:
                        if sections['sender'] not in current_week_plans:
                            current_week_plans[sections['sender']] = []
                        current_week_plans[sections['sender']].extend(sections['plan_tasks'])
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–∫—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
                next_week_facts = {}
                for msg in next_week_messages:
                    sections = self.extract_plan_fact_sections(msg['text'], msg['sender'], msg['date'])
                    if sections and sections['has_fact']:
                        if sections['sender'] not in next_week_facts:
                            next_week_facts[sections['sender']] = []
                        next_week_facts[sections['sender']].extend(sections['fact_tasks'])
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
                for sender in set(current_week_plans.keys()) | set(next_week_facts.keys()):
                    plan_tasks = current_week_plans.get(sender, [])
                    fact_tasks = next_week_facts.get(sender, [])
                    
                    if plan_tasks or fact_tasks:
                        comparison = self.compare_plan_fact_tasks(plan_tasks, fact_tasks, sender, current_week, next_week)
                        if comparison:
                            comparisons.append(comparison)
            
            print(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(comparisons)} —Å—Ä–∞–≤–Ω–µ–Ω–∏–π")
            return comparisons
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
            return []
    
    def compare_plan_fact_tasks(self, plan_tasks, fact_tasks, sender, plan_week, fact_week):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
            completed_tasks = []
            partially_completed = []
            not_completed = []
            new_tasks = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∞
            for plan_task in plan_tasks:
                task_completed = False
                task_partial = False
                
                # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —Ñ–∞–∫—Ç–∞—Ö
                for fact_task in fact_tasks:
                    similarity = self.calculate_task_similarity(plan_task, fact_task)
                    
                    if similarity >= 0.7:  # –í—ã—Å–æ–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
                        completed_tasks.append({
                            'plan': plan_task,
                            'fact': fact_task,
                            'similarity': similarity
                        })
                        task_completed = True
                        break
                    elif similarity >= 0.4:  # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
                        task_partial = True
                
                if not task_completed:
                    if task_partial:
                        partially_completed.append(plan_task)
                    else:
                        not_completed.append(plan_task)
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (–µ—Å—Ç—å –≤ —Ñ–∞–∫—Ç–∞—Ö, –Ω–æ –Ω–µ –±—ã–ª–æ –≤ –ø–ª–∞–Ω–∞—Ö)
            for fact_task in fact_tasks:
                is_new = True
                for plan_task in plan_tasks:
                    if self.calculate_task_similarity(plan_task, fact_task) >= 0.4:
                        is_new = False
                        break
                
                if is_new:
                    new_tasks.append(fact_task)
            
            return {
                'sender': sender,
                'plan_week': plan_week,
                'fact_week': fact_week,
                'plan_tasks': plan_tasks,
                'fact_tasks': fact_tasks,
                'completed_tasks': completed_tasks,
                'partially_completed': partially_completed,
                'not_completed': not_completed,
                'new_tasks': new_tasks,
                'completion_rate': len(completed_tasks) / len(plan_tasks) * 100 if plan_tasks else 0,
                'total_planned': len(plan_tasks),
                'total_completed': len(completed_tasks),
                'total_partial': len(partially_completed),
                'total_not_completed': len(not_completed),
                'total_new': len(new_tasks)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
            return None
    
    def calculate_task_similarity(self, task1, task2):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏"""
        try:
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            t1 = task1.lower()
            t2 = task2.lower()
            
            # –£–±–∏—Ä–∞–µ–º —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            t1_clean = re.sub(r'[^\w\s]', '', t1)
            t2_clean = re.sub(r'[^\w\s]', '', t2)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
            words1 = set(t1_clean.split())
            words2 = set(t2_clean.split())
            
            if not words1 or not words2:
                return 0.0
            
            # –í—ã—á–∏—Å–ª—è–µ–º Jaccard similarity
            intersection = len(words1.intersection(words2))
            union = len(words1.union(words2))
            
            return intersection / union if union > 0 else 0.0
            
        except Exception as e:
            return 0.0
    
    def create_comparison_report(self, comparisons, filename=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        try:
            if not filename:
                filename = f"output/weekly_comparison_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            os.makedirs("output", exist_ok=True)
            
            workbook = openpyxl.Workbook()
            
            # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–∏—Å—Ç
            workbook.remove(workbook.active)
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
            self.create_summary_sheet(workbook, comparisons)
            self.create_detailed_sheet(workbook, comparisons)
            self.create_sender_sheet(workbook, comparisons)
            
            workbook.save(filename)
            print(f"‚úÖ –û—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return None
    
    def create_summary_sheet(self, workbook, comparisons):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
        try:
            ws = workbook.create_sheet("–°–≤–æ–¥–∫–∞")
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            ws['A1'] = "–°–†–ê–í–ù–ï–ù–ò–ï –ü–õ–ê–ù–û–í –ò –§–ê–ö–¢–û–í –ü–û –ù–ï–î–ï–õ–Ø–ú"
            ws['A2'] = "Main mega –¢–û–ü"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_comparisons = len(comparisons)
            total_planned = sum(comp['total_planned'] for comp in comparisons)
            total_completed = sum(comp['total_completed'] for comp in comparisons)
            avg_completion = (total_completed / total_planned * 100) if total_planned > 0 else 0
            
            ws['A4'] = "üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:"
            ws['A5'] = f"–í—Å–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π: {total_comparisons}"
            ws['A6'] = f"–í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {total_planned}"
            ws['A7'] = f"–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {total_completed}"
            ws['A8'] = f"–°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {avg_completion:.1f}%"
            
            # –¢–æ–ø —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
            sender_stats = {}
            for comp in comparisons:
                sender = comp['sender']
                if sender not in sender_stats:
                    sender_stats[sender] = {
                        'total_planned': 0,
                        'total_completed': 0,
                        'comparisons': 0
                    }
                
                sender_stats[sender]['total_planned'] += comp['total_planned']
                sender_stats[sender]['total_completed'] += comp['total_completed']
                sender_stats[sender]['comparisons'] += 1
            
            ws['A10'] = "üë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–£–ö–û–í–û–î–ò–¢–ï–õ–Ø–ú:"
            
            headers = ['–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–°—Ä–∞–≤–Ω–µ–Ω–∏–π', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', '% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è']
            for col, header in enumerate(headers, 1):
                ws.cell(row=11, column=col, value=header)
            
            row = 12
            for sender, stats in sorted(sender_stats.items(), key=lambda x: x[1]['total_completed'], reverse=True):
                completion_rate = (stats['total_completed'] / stats['total_planned'] * 100) if stats['total_planned'] > 0 else 0
                
                ws.cell(row=row, column=1, value=sender)
                ws.cell(row=row, column=2, value=stats['comparisons'])
                ws.cell(row=row, column=3, value=stats['total_planned'])
                ws.cell(row=row, column=4, value=stats['total_completed'])
                ws.cell(row=row, column=5, value=f"{completion_rate:.1f}%")
                
                row += 1
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.format_summary_sheet(ws)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞: {e}")
    
    def create_detailed_sheet(self, workbook, comparisons):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
        try:
            ws = workbook.create_sheet("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è")
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = [
                '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–ù–µ–¥–µ–ª—è –ø–ª–∞–Ω–∞', '–ù–µ–¥–µ–ª—è —Ñ–∞–∫—Ç–∞', 
                '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', '–ß–∞—Å—Ç–∏—á–Ω–æ', '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '–ù–æ–≤—ã—Ö –∑–∞–¥–∞—á',
                '% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', '–°—Ç–∞—Ç—É—Å'
            ]
            
            for col, header in enumerate(headers, 1):
                ws.cell(row=1, column=col, value=header)
            
            # –î–∞–Ω–Ω—ã–µ
            row = 2
            for comp in comparisons:
                status = self.get_completion_status(comp['completion_rate'])
                
                ws.cell(row=row, column=1, value=comp['sender'])
                ws.cell(row=row, column=2, value=comp['plan_week'])
                ws.cell(row=row, column=3, value=comp['fact_week'])
                ws.cell(row=row, column=4, value=comp['total_planned'])
                ws.cell(row=row, column=5, value=comp['total_completed'])
                ws.cell(row=row, column=6, value=comp['total_partial'])
                ws.cell(row=row, column=7, value=comp['total_not_completed'])
                ws.cell(row=row, column=8, value=comp['total_new'])
                ws.cell(row=row, column=9, value=f"{comp['completion_rate']:.1f}%")
                ws.cell(row=row, column=10, value=status)
                
                row += 1
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.format_detailed_sheet(ws)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞: {e}")
    
    def create_sender_sheet(self, workbook, comparisons):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º"""
        try:
            ws = workbook.create_sheet("–ü–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º
            sender_data = {}
            for comp in comparisons:
                sender = comp['sender']
                if sender not in sender_data:
                    sender_data[sender] = []
                sender_data[sender].append(comp)
            
            row = 1
            for sender, sender_comps in sender_data.items():
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
                ws.cell(row=row, column=1, value=f"–†–£–ö–û–í–û–î–ò–¢–ï–õ–¨: {sender}")
                ws.cell(row=row, column=1).font = Font(bold=True, size=14)
                row += 1
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                headers = ['–ù–µ–¥–µ–ª—è –ø–ª–∞–Ω–∞', '–ù–µ–¥–µ–ª—è —Ñ–∞–∫—Ç–∞', '–ü–ª–∞–Ω', '–§–∞–∫—Ç', '–°—Ç–∞—Ç—É—Å']
                for col, header in enumerate(headers, 1):
                    ws.cell(row=row, column=col, value=header)
                    ws.cell(row=row, column=col).font = Font(bold=True)
                row += 1
                
                # –î–∞–Ω–Ω—ã–µ –ø–æ –Ω–µ–¥–µ–ª—è–º
                for comp in sender_comps:
                    # –ü–ª–∞–Ω
                    plan_text = '\n'.join(comp['plan_tasks'][:3])  # –ü–µ—Ä–≤—ã–µ 3 –∑–∞–¥–∞—á–∏
                    if len(comp['plan_tasks']) > 3:
                        plan_text += f"\n... –∏ –µ—â–µ {len(comp['plan_tasks']) - 3} –∑–∞–¥–∞—á"
                    
                    # –§–∞–∫—Ç
                    fact_text = '\n'.join(comp['fact_tasks'][:3])  # –ü–µ—Ä–≤—ã–µ 3 –∑–∞–¥–∞—á–∏
                    if len(comp['fact_tasks']) > 3:
                        fact_text += f"\n... –∏ –µ—â–µ {len(comp['fact_tasks']) - 3} –∑–∞–¥–∞—á"
                    
                    # –°—Ç–∞—Ç—É—Å
                    status = self.get_completion_status(comp['completion_rate'])
                    
                    ws.cell(row=row, column=1, value=comp['plan_week'])
                    ws.cell(row=row, column=2, value=comp['fact_week'])
                    ws.cell(row=row, column=3, value=plan_text)
                    ws.cell(row=row, column=4, value=fact_text)
                    ws.cell(row=row, column=5, value=status)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º
                    for col in [3, 4]:
                        cell = ws.cell(row=row, column=col)
                        cell.alignment = Alignment(wrap_text=True, vertical='top')
                        ws.row_dimensions[row].height = 80
                    
                    row += 1
                
                row += 2  # –ü—Ä–æ–ø—É—Å–∫ –º–µ–∂–¥—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.format_sender_sheet(ws)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º: {e}")
    
    def get_completion_status(self, completion_rate):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if completion_rate >= 80:
            return "‚úÖ –û—Ç–ª–∏—á–Ω–æ"
        elif completion_rate >= 60:
            return "‚ö†Ô∏è –•–æ—Ä–æ—à–æ"
        elif completion_rate >= 40:
            return "‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ"
        else:
            return "‚ùå –ü–ª–æ—Ö–æ"
    
    def format_summary_sheet(self, ws):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ws['A1'].font = Font(size=16, bold=True, color=self.colors['blue'])
        ws['A2'].font = Font(size=14, bold=True)
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫
        ws.merge_cells('A1:E1')
        ws.merge_cells('A2:E2')
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        ws.column_dimensions['A'].width = 25
        ws.column_dimensions['B'].width = 15
        ws.column_dimensions['C'].width = 15
        ws.column_dimensions['D'].width = 15
        ws.column_dimensions['E'].width = 15
    
    def format_detailed_sheet(self, ws):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        for cell in ws[1]:
            cell.font = Font(bold=True, color='FFFFFF')
            cell.fill = PatternFill(start_color=self.colors['blue'], end_color=self.colors['blue'], fill_type='solid')
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in range(1, 11):
            ws.column_dimensions[openpyxl.utils.get_column_letter(col)].width = 15
    
    def format_sender_sheet(self, ws):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º"""
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        ws.column_dimensions['A'].width = 12
        ws.column_dimensions['B'].width = 12
        ws.column_dimensions['C'].width = 40
        ws.column_dimensions['D'].width = 40
        ws.column_dimensions['E'].width = 15
    
    async def run_weekly_comparison(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å"""
        try:
            print("üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –°–†–ê–í–ù–ï–ù–ò–Ø –ù–ï–î–ï–õ–¨")
            print("=" * 55)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not await self.connect():
                return
            
            # –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
            if not await self.find_target_chat():
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –Ω–µ–¥–µ–ª—è–º
            weekly_messages = await self.get_weekly_messages(weeks_back=12)
            
            if not weekly_messages:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –Ω–µ–¥–µ–ª—è–º")
                return
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            comparisons = self.analyze_weekly_comparison(weekly_messages)
            
            if not comparisons:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report_file = self.create_comparison_report(comparisons)
            
            if report_file:
                print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")
                print(f"üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
                
                # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
                print(f"\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
                print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–¥–µ–ª—å: {len(weekly_messages)}")
                print(f"–°–æ–∑–¥–∞–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π: {len(comparisons)}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º
                senders = set(comp['sender'] for comp in comparisons)
                print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(senders)}")
                
                # –°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                total_planned = sum(comp['total_planned'] for comp in comparisons)
                total_completed = sum(comp['total_completed'] for comp in comparisons)
                avg_completion = (total_completed / total_planned * 100) if total_planned > 0 else 0
                print(f"–°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {avg_completion:.1f}%")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
                sender_stats = {}
                for comp in comparisons:
                    sender = comp['sender']
                    if sender not in sender_stats:
                        sender_stats[sender] = {'planned': 0, 'completed': 0}
                    sender_stats[sender]['planned'] += comp['total_planned']
                    sender_stats[sender]['completed'] += comp['total_completed']
                
                print(f"\nüë• –¢–û–ü –†–£–ö–û–í–û–î–ò–¢–ï–õ–ï–ô:")
                for sender, stats in sorted(sender_stats.items(), key=lambda x: x[1]['completed'], reverse=True)[:5]:
                    completion_rate = (stats['completed'] / stats['planned'] * 100) if stats['planned'] > 0 else 0
                    print(f"  {sender}: {stats['completed']}/{stats['planned']} ({completion_rate:.1f}%)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    analyzer = WeeklyComparisonAnalyzer()
    await analyzer.run_weekly_comparison()

if __name__ == "__main__":
    asyncio.run(main())
