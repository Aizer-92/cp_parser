#!/usr/bin/env python3
"""
Personal Telegram Account Setup
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
"""

import json
import os
import asyncio
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError
from loguru import logger

class PersonalAccountSetup:
    def __init__(self):
        self.config_file = "config/personal_config.json"
        self.session_name = "personal_account"
        
    def get_api_credentials(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("üîë –ù–ê–°–¢–†–û–ô–ö–ê API –ö–õ–Æ–ß–ï–ô TELEGRAM")
        print("=" * 50)
        print()
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://my.telegram.org")
        print("2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Telegram")
        print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ 'API development tools'")
        print("4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
        print("   - App title: Personal Automation")
        print("   - Short name: personal_auto")
        print("   - Platform: Desktop")
        print("   - Description: Personal automation script")
        print()
        
        api_id = input("–í–≤–µ–¥–∏—Ç–µ API ID: ").strip()
        api_hash = input("–í–≤–µ–¥–∏—Ç–µ API Hash: ").strip()
        phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä +7): ").strip()
        
        return {
            "api_id": api_id,
            "api_hash": api_hash,
            "phone": phone
        }
    
    def create_personal_config(self, credentials):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        config = {
            "api_id": credentials["api_id"],
            "api_hash": credentials["api_hash"],
            "phone": credentials["phone"],
            "session_name": self.session_name,
            "settings": {
                "auto_reply": False,  # –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                "monitoring_enabled": True,
                "max_actions_per_hour": 5,  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ª–∏–º–∏—Ç
                "delay_between_actions": 10
            },
            "monitoring": {
                "target_chats": [],  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
                "keywords": [
                    "–≤–∞–∂–Ω–æ",
                    "—Å—Ä–æ—á–Ω–æ", 
                    "–≤–Ω–∏–º–∞–Ω–∏–µ",
                    "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                    "–∑–∞–¥–∞—á–∞"
                ],
                "auto_save_important": True
            },
            "automation": {
                "auto_archive_old": True,
                "save_media": True,
                "backup_messages": True,
                "daily_summary": True
            },
            "safety": {
                "max_messages_per_day": 20,  # –û—á–µ–Ω—å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ª–∏–º–∏—Ç
                "cooldown_minutes": 60,  # –ë–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                "emergency_stop": False,
                "working_hours": {
                    "start": "09:00",
                    "end": "21:00"
                }
            },
            "notifications": {
                "daily_reminder": "09:00",
                "weekly_summary": "monday 10:00",
                "important_alerts": True
            }
        }
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é config –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("config", exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(self.config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.config_file}")
        return config
    
    async def test_connection(self, config):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        print("\nüîó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø")
        print("-" * 30)
        
        try:
            client = TelegramClient(
                self.session_name,
                config["api_id"],
                config["api_hash"]
            )
            
            print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            await client.start(phone=config["phone"])
            
            if await client.is_user_authorized():
                print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                me = await client.get_me()
                print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} {me.last_name or ''}")
                print(f"üì± –ù–æ–º–µ—Ä: {me.phone}")
                print(f"üÜî ID: {me.id}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
                print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤...")
                dialogs = await client.get_dialogs(limit=10)
                
                print("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —á–∞—Ç–æ–≤:")
                for i, dialog in enumerate(dialogs, 1):
                    chat_name = dialog.name or f"–ß–∞—Ç {dialog.id}"
                    print(f"  {i}. {chat_name} (ID: {dialog.id})")
                
                await client.disconnect()
                return True
                
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                return False
                
        except SessionPasswordNeededError:
            print("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            print("   –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≤ –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –æ–∫–Ω–µ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def setup_automation_features(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        print("\n‚öôÔ∏è  –ù–ê–°–¢–†–û–ô–ö–ê –§–£–ù–ö–¶–ò–ô –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò")
        print("-" * 40)
        
        features = {
            "daily_reminders": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            "message_monitoring": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", 
            "auto_archive": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —á–∞—Ç–æ–≤",
            "media_backup": "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤",
            "keyword_alerts": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º",
            "weekly_summary": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        }
        
        enabled_features = []
        
        for feature, description in features.items():
            response = input(f"–í–∫–ª—é—á–∏—Ç—å {description}? (y/n): ").strip().lower()
            if response in ['y', 'yes', '–¥–∞', '–¥']:
                enabled_features.append(feature)
        
        return enabled_features
    
    def create_custom_automation_script(self, config, features):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        script_content = f'''#!/usr/bin/env python3
"""
Personal Telegram Automation
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ {config['phone']}
"""

import asyncio
import json
from datetime import datetime, time
from telethon import TelegramClient, events
from telethon.tl.types import PeerUser, PeerChat, PeerChannel
from loguru import logger
import os

class PersonalTelegramAutomation:
    def __init__(self):
        self.config = self.load_config()
        self.client = None
        self.daily_message_count = 0
        self.last_action_time = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.add("output/logs/personal_automation.log", rotation="1 day", retention="7 days")
        
    def load_config(self):
        with open("config/personal_config.json", 'r', encoding='utf-8') as f:
            return json.load(f)
    
    async def connect(self):
        try:
            self.client = TelegramClient(
                self.config['session_name'],
                self.config['api_id'],
                self.config['api_hash']
            )
            
            await self.client.start(phone=self.config['phone'])
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–∏—á–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {{e}}")
            return False
    
    def is_working_hours(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤"""
        now = datetime.now().time()
        start_time = time.fromisoformat(self.config['safety']['working_hours']['start'])
        end_time = time.fromisoformat(self.config['safety']['working_hours']['end'])
        
        return start_time <= now <= end_time
    
    async def send_daily_reminder(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        if 'daily_reminders' in {self.config.get('enabled_features', [])}:
            message = f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í—Ä–µ–º—è: {{datetime.now().strftime('%H:%M')}}\\n\\n"
            message += "üìã –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\\n"
            message += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\\n"
            message += "‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á\\n"
            message += "‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–±–µ
            await self.send_message_to_self(message)
    
    async def send_message_to_self(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∞–º–æ–º—É —Å–µ–±–µ"""
        try:
            me = await self.client.get_me()
            await self.client.send_message(me.id, message)
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∞–º–æ–º—É —Å–µ–±–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {{e}}")
    
    async def monitor_important_messages(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if 'message_monitoring' not in {self.config.get('enabled_features', [])}:
            return
        
        @self.client.on(events.NewMessage)
        async def handle_new_message(event):
            try:
                sender = await event.get_sender()
                message_text = event.message.text
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                keywords = self.config['monitoring']['keywords']
                for keyword in keywords:
                    if keyword.lower() in message_text.lower():
                        alert = f"üö® –í–ê–ñ–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï!\\n"
                        alert += f"–û—Ç: {{sender.first_name if sender else 'Unknown'}}\\n"
                        alert += f"–¢–µ–∫—Å—Ç: {{message_text[:100]}}..."
                        
                        await self.send_message_to_self(alert)
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {{keyword}}")
                        break
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {{e}}")
    
    async def start_automation(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Telegram")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await self.monitor_important_messages()
        
        # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
        await self.client.run_until_disconnected()

async def main():
    automation = PersonalTelegramAutomation()
    
    if await automation.connect():
        await automation.start_automation()
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")

if __name__ == "__main__":
    os.makedirs("output/logs", exist_ok=True)
    asyncio.run(main())
'''
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
        script_path = "scripts/personal_automation.py"
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(script_content)
        
        print(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: {script_path}")
        return script_path
    
    def create_startup_script(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        startup_content = '''#!/usr/bin/env python3
"""
Quick Start Personal Automation
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
"""

import subprocess
import sys
import os

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Telegram...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not os.path.exists("config/personal_config.json"):
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python scripts/personal_account_setup.py")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
    try:
        subprocess.run([sys.executable, "scripts/personal_automation.py"])
    except KeyboardInterrupt:
        print("\\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    main()
'''
        
        with open("start_personal_automation.py", 'w', encoding='utf-8') as f:
            f.write(startup_content)
        
        print("‚úÖ –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω: start_personal_automation.py")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("ü§ñ –ù–ê–°–¢–†–û–ô–ö–ê –ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ô –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò TELEGRAM")
    print("=" * 60)
    print()
    
    setup = PersonalAccountSetup()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π
    credentials = setup.get_api_credentials()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = setup.create_personal_config(credentials)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    success = await setup.test_connection(config)
    
    if not success:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
    features = setup.setup_automation_features()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    config['enabled_features'] = features
    with open(setup.config_file, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
    setup.create_custom_automation_script(config, features)
    setup.create_startup_script()
    
    print("\n" + "=" * 60)
    print("‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print()
    print("üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   python start_personal_automation.py")
    print()
    print("üìÅ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:")
    print("   ‚Ä¢ config/personal_config.json - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    print("   ‚Ä¢ scripts/personal_automation.py - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç")
    print("   ‚Ä¢ start_personal_automation.py - –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫")
    print()
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û:")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π")
    print("   ‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ª–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    print("   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏")

if __name__ == "__main__":
    asyncio.run(main())
