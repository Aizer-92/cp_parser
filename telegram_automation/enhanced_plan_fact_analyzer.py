#!/usr/bin/env python3
"""
Enhanced Plan/Fact Analyzer for Main mega –¢–û–ü
–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤
"""

import asyncio
import json
import re
from datetime import datetime, timedelta
from telethon import TelegramClient
from loguru import logger
import pandas as pd
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment
import os

class EnhancedPlanFactAnalyzer:
    def __init__(self):
        self.config = self.load_config()
        self.client = None
        self.target_chat_name = "Main mega –¢–û–ü"
        self.target_chat_id = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        os.makedirs("output/logs", exist_ok=True)
        logger.add("output/logs/enhanced_plan_fact.log", rotation="1 day", retention="7 days")
        
    def load_config(self):
        with open("config/personal_config.json", 'r', encoding='utf-8') as f:
            return json.load(f)
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            self.client = TelegramClient(
                self.config['session_name'],
                self.config['api_id'],
                self.config['api_hash']
            )
            
            await self.client.start()
            
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                print(f"üë§ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name}")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def find_target_chat(self):
        """–ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            print(f"üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞ '{self.target_chat_name}'...")
            
            dialogs = await self.client.get_dialogs()
            
            for dialog in dialogs:
                if self.target_chat_name.lower() in dialog.name.lower():
                    self.target_chat_id = dialog.id
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç: {dialog.name} (ID: {dialog.id})")
                    return True
            
            print(f"‚ùå –ß–∞—Ç '{self.target_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞: {e}")
            return False
    
    def extract_plan_fact_data(self, message_text, message_date, sender_name):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤"""
        try:
            text = message_text.strip()
            extracted_data = []
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
            patterns = [
                # –ü–∞—Ç—Ç–µ—Ä–Ω 1: –ü–ª–∞–Ω: X, –§–∞–∫—Ç: Y
                (r'–ø–ª–∞–Ω[:\s]*(\d+(?:\.\d+)?)[^\d]*—Ñ–∞–∫—Ç[:\s]*(\d+(?:\.\d+)?)', '–ü–ª–∞–Ω: X, –§–∞–∫—Ç: Y'),
                # –ü–∞—Ç—Ç–µ—Ä–Ω 2: –ü/–§: X/Y
                (r'–ø/—Ñ[:\s]*(\d+(?:\.\d+)?)[^\d]*(\d+(?:\.\d+)?)', '–ü/–§: X/Y'),
                # –ü–∞—Ç—Ç–µ—Ä–Ω 3: –ü–ª–∞–Ω X –§–∞–∫—Ç Y
                (r'–ø–ª–∞–Ω\s+(\d+(?:\.\d+)?)[^\d]*—Ñ–∞–∫—Ç\s+(\d+(?:\.\d+)?)', '–ü–ª–∞–Ω X –§–∞–∫—Ç Y'),
                # –ü–∞—Ç—Ç–µ—Ä–Ω 4: –ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ —Å–ª–µ—à –∏–ª–∏ –¥–µ—Ñ–∏—Å
                (r'(\d+(?:\.\d+)?)[/\-]\s*(\d+(?:\.\d+)?)', 'X/Y –∏–ª–∏ X-Y'),
                # –ü–∞—Ç—Ç–µ—Ä–Ω 5: –ü: X –§: Y
                (r'–ø[:\s]*(\d+(?:\.\d+)?)[^\d]*—Ñ[:\s]*(\d+(?:\.\d+)?)', '–ü: X –§: Y'),
                # –ü–∞—Ç—Ç–µ—Ä–Ω 6: –ü–ª–∞–Ω - X, –§–∞–∫—Ç - Y
                (r'–ø–ª–∞–Ω\s*[-\s]*(\d+(?:\.\d+)?)[^\d]*—Ñ–∞–∫—Ç\s*[-\s]*(\d+(?:\.\d+)?)', '–ü–ª–∞–Ω - X, –§–∞–∫—Ç - Y'),
                # –ü–∞—Ç—Ç–µ—Ä–Ω 7: –ß–∏—Å–ª–∞ –≤ —Å–∫–æ–±–∫–∞—Ö
                (r'\((\d+(?:\.\d+)?)[^\d]*(\d+(?:\.\d+)?)\)', '(X Y)'),
                # –ü–∞—Ç—Ç–µ—Ä–Ω 8: –ü–ª–∞–Ω/–§–∞–∫—Ç: X/Y
                (r'–ø–ª–∞–Ω/—Ñ–∞–∫—Ç[:\s]*(\d+(?:\.\d+)?)[^\d]*(\d+(?:\.\d+)?)', '–ü–ª–∞–Ω/–§–∞–∫—Ç: X/Y'),
            ]
            
            for pattern, pattern_name in patterns:
                matches = re.finditer(pattern, text.lower())
                for match in matches:
                    try:
                        plan_value = float(match.group(1))
                        fact_value = float(match.group(2))
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
                        if 0 <= plan_value <= 1000000 and 0 <= fact_value <= 1000000:
                            completion_percent = (fact_value / plan_value * 100) if plan_value > 0 else 0
                            
                            extracted_data.append({
                                'date': message_date,
                                'sender': sender_name,
                                'plan': plan_value,
                                'fact': fact_value,
                                'difference': fact_value - plan_value,
                                'completion_percent': completion_percent,
                                'pattern_used': pattern_name,
                                'original_text': text[:300],  # –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤
                                'status': self.get_status(completion_percent)
                            })
                    except (ValueError, ZeroDivisionError):
                        continue
            
            return extracted_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
    
    def get_status(self, completion_percent):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if completion_percent >= 100:
            return "–ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
        elif completion_percent >= 90:
            return "–•–æ—Ä–æ—à–æ"
        elif completion_percent >= 70:
            return "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
        else:
            return "–ù–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
    
    async def get_weekly_messages(self, weeks_back=4):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ–¥–µ–ª–∏"""
        try:
            print(f"üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {weeks_back} –Ω–µ–¥–µ–ª–∏...")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
            today = datetime.now()
            days_since_tuesday = (today.weekday() - 1) % 7
            start_date = today - timedelta(days=days_since_tuesday + (weeks_back * 7))
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.client.get_messages(
                self.target_chat_id,
                offset_date=start_date,
                limit=2000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
            )
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞–º
            tuesday_messages = []
            for msg in messages:
                if msg.text and msg.date.weekday() == 1:  # 1 = –≤—Ç–æ—Ä–Ω–∏–∫
                    sender_name = await self.get_sender_name(msg)
                    tuesday_messages.append({
                        'id': msg.id,
                        'date': msg.date,
                        'text': msg.text,
                        'sender': sender_name
                    })
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(tuesday_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞–º")
            return tuesday_messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    async def get_sender_name(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        try:
            sender = await message.get_sender()
            if sender:
                return f"{sender.first_name} {sender.last_name or ''}".strip()
            return "Unknown"
        except:
            return "Unknown"
    
    def analyze_data_by_weeks(self, all_data):
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–µ–¥–µ–ª—è–º"""
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–µ–¥–µ–ª—è–º
            weekly_data = {}
            
            for item in all_data:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–¥–µ–ª—é
                date = item['date'].replace(tzinfo=None)
                week_start = date - timedelta(days=date.weekday())
                week_key = week_start.strftime('%Y-%m-%d')
                
                if week_key not in weekly_data:
                    weekly_data[week_key] = []
                weekly_data[week_key].append(item)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
            weekly_analysis = {}
            for week, data in weekly_data.items():
                if data:
                    weekly_analysis[week] = {
                        'total_plan': sum(item['plan'] for item in data),
                        'total_fact': sum(item['fact'] for item in data),
                        'avg_completion': sum(item['completion_percent'] for item in data) / len(data),
                        'items_count': len(data),
                        'senders': list(set(item['sender'] for item in data)),
                        'over_performance_count': len([item for item in data if item['completion_percent'] >= 100]),
                        'under_performance_count': len([item for item in data if item['completion_percent'] < 100])
                    }
            
            return weekly_analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º: {e}")
            return {}
    
    def create_enhanced_excel_report(self, all_data, weekly_analysis, filename=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ Excel –æ—Ç—á–µ—Ç–∞"""
        try:
            if not filename:
                filename = f"output/enhanced_plan_fact_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            os.makedirs("output", exist_ok=True)
            
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                
                # –õ–∏—Å—Ç 1: –í—Å–µ –¥–∞–Ω–Ω—ã–µ
                if all_data:
                    df_all = pd.DataFrame(all_data)
                    df_all['date'] = pd.to_datetime(df_all['date']).dt.tz_localize(None)
                    df_all = df_all.sort_values('date', ascending=False)
                    
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                    df_all = df_all.rename(columns={
                        'date': '–î–∞—Ç–∞',
                        'sender': '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å',
                        'plan': '–ü–ª–∞–Ω',
                        'fact': '–§–∞–∫—Ç',
                        'difference': '–†–∞–∑–Ω–∏—Ü–∞',
                        'completion_percent': '% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                        'pattern_used': '–§–æ—Ä–º–∞—Ç',
                        'original_text': '–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç',
                        'status': '–°—Ç–∞—Ç—É—Å'
                    })
                    
                    df_all.to_excel(writer, sheet_name='–í—Å–µ –¥–∞–Ω–Ω—ã–µ', index=False)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    worksheet = writer.sheets['–í—Å–µ –¥–∞–Ω–Ω—ã–µ']
                    for column in worksheet.columns:
                        max_length = 0
                        column_letter = column[0].column_letter
                        for cell in column:
                            try:
                                if len(str(cell.value)) > max_length:
                                    max_length = len(str(cell.value))
                            except:
                                pass
                        adjusted_width = min(max_length + 2, 50)
                        worksheet.column_dimensions[column_letter].width = adjusted_width
                
                # –õ–∏—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–µ–¥–µ–ª—è–º
                if weekly_analysis:
                    weekly_data = []
                    for week, data in weekly_analysis.items():
                        weekly_data.append({
                            '–ù–µ–¥–µ–ª—è': week,
                            '–û–±—â–∏–π –ø–ª–∞–Ω': round(data['total_plan'], 2),
                            '–û–±—â–∏–π —Ñ–∞–∫—Ç': round(data['total_fact'], 2),
                            '–°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': round(data['avg_completion'], 2),
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π': data['items_count'],
                            '–ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π': data['over_performance_count'],
                            '–ù–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π': data['under_performance_count'],
                            '–£—á–∞—Å—Ç–Ω–∏–∫–∏': ', '.join(data['senders'])
                        })
                    
                    df_weekly = pd.DataFrame(weekly_data)
                    df_weekly.to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–µ–¥–µ–ª—è–º', index=False)
                
                # –õ–∏—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º
                if all_data:
                    sender_stats = {}
                    for item in all_data:
                        sender = item['sender']
                        if sender not in sender_stats:
                            sender_stats[sender] = {
                                'total_plan': 0,
                                'total_fact': 0,
                                'count': 0,
                                'over_performance': 0,
                                'under_performance': 0
                            }
                        
                        sender_stats[sender]['total_plan'] += item['plan']
                        sender_stats[sender]['total_fact'] += item['fact']
                        sender_stats[sender]['count'] += 1
                        
                        if item['completion_percent'] >= 100:
                            sender_stats[sender]['over_performance'] += 1
                        else:
                            sender_stats[sender]['under_performance'] += 1
                    
                    sender_data = []
                    for sender, stats in sender_stats.items():
                        avg_completion = (stats['total_fact'] / stats['total_plan'] * 100) if stats['total_plan'] > 0 else 0
                        sender_data.append({
                            '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å': sender,
                            '–û–±—â–∏–π –ø–ª–∞–Ω': round(stats['total_plan'], 2),
                            '–û–±—â–∏–π —Ñ–∞–∫—Ç': round(stats['total_fact'], 2),
                            '–°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': round(avg_completion, 2),
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π': stats['count'],
                            '–ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π': stats['over_performance'],
                            '–ù–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π': stats['under_performance']
                        })
                    
                    df_senders = pd.DataFrame(sender_data)
                    df_senders = df_senders.sort_values('–°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', ascending=False)
                    df_senders.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º', index=False)
                
                # –õ–∏—Å—Ç 4: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                if all_data:
                    total_plan = sum(item['plan'] for item in all_data)
                    total_fact = sum(item['fact'] for item in all_data)
                    avg_completion = sum(item['completion_percent'] for item in all_data) / len(all_data)
                    
                    stats_data = {
                        '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': [
                            '–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π',
                            '–û–±—â–∏–π –ø–ª–∞–Ω',
                            '–û–±—â–∏–π —Ñ–∞–∫—Ç',
                            '–°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                            '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                            '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π (>100%)',
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π (<100%)',
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π',
                            '–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å'
                        ],
                        '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                            len(all_data),
                            round(total_plan, 2),
                            round(total_fact, 2),
                            round(avg_completion, 2),
                            round(max(item['completion_percent'] for item in all_data), 2),
                            round(min(item['completion_percent'] for item in all_data), 2),
                            len([item for item in all_data if item['completion_percent'] > 100]),
                            len([item for item in all_data if item['completion_percent'] < 100]),
                            len(set(item['sender'] for item in all_data)),
                            max(set(item['sender'] for item in all_data), key=lambda x: len([item for item in all_data if item['sender'] == x]))
                        ]
                    }
                    
                    df_stats = pd.DataFrame(stats_data)
                    df_stats.to_excel(writer, sheet_name='–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
            
            print(f"‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return None
    
    async def run_enhanced_analysis(self):
        """–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            print("üöÄ –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –ü–õ–ê–ù–û–í –ò –§–ê–ö–¢–û–í")
            print("=" * 60)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not await self.connect():
                return
            
            # –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
            if not await self.find_target_chat():
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = await self.get_weekly_messages(weeks_back=6)  # 6 –Ω–µ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
            if not messages:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            all_extracted_data = []
            
            for msg in messages:
                extracted = self.extract_plan_fact_data(msg['text'], msg['date'], msg['sender'])
                all_extracted_data.extend(extracted)
            
            print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(all_extracted_data)} –∑–∞–ø–∏—Å–µ–π –ø–ª–∞–Ω–æ–≤/—Ñ–∞–∫—Ç–æ–≤")
            
            if not all_extracted_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–æ–≤/—Ñ–∞–∫—Ç–æ–≤")
                return
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–µ–¥–µ–ª—è–º
            weekly_analysis = self.analyze_data_by_weeks(all_extracted_data)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report_file = self.create_enhanced_excel_report(all_extracted_data, weekly_analysis)
            
            if report_file:
                print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                print(f"üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
                
                # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
                print(f"\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
                print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(all_extracted_data)}")
                print(f"–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {len(weekly_analysis)} –Ω–µ–¥–µ–ª—å")
                print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: {len(set(item['sender'] for item in all_extracted_data))}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
                if all_extracted_data:
                    latest_data = sorted(all_extracted_data, key=lambda x: x['date'], reverse=True)[:5]
                    print(f"\nüìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:")
                    for item in latest_data:
                        date_str = item['date'].strftime('%Y-%m-%d')
                        print(f"  {date_str} | {item['sender']} | –ü–ª–∞–Ω: {item['plan']} | –§–∞–∫—Ç: {item['fact']} | {item['completion_percent']:.1f}%")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    analyzer = EnhancedPlanFactAnalyzer()
    await analyzer.run_enhanced_analysis()

if __name__ == "__main__":
    asyncio.run(main())
