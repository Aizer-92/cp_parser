#!/usr/bin/env python3
"""
Detailed Plan/Fact Analyzer for Main mega –¢–û–ü
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å —Ä–∞–∑–±–æ—Ä–æ–º –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
"""

import asyncio
import json
import re
from datetime import datetime, timedelta
from telethon import TelegramClient
from loguru import logger
import pandas as pd
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment, Color
from openpyxl.utils.dataframe import dataframe_to_rows
import os

class DetailedPlanFactAnalyzer:
    def __init__(self):
        self.config = self.load_config()
        self.client = None
        self.target_chat_name = "Main mega –¢–û–ü"
        self.target_chat_id = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        os.makedirs("output/logs", exist_ok=True)
        logger.add("output/logs/detailed_plan_fact.log", rotation="1 day", retention="7 days")
        
    def load_config(self):
        with open("config/personal_config.json", 'r', encoding='utf-8') as f:
            return json.load(f)
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            self.client = TelegramClient(
                self.config['session_name'],
                self.config['api_id'],
                self.config['api_hash']
            )
            
            await self.client.start()
            
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                print(f"üë§ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name}")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def find_target_chat(self):
        """–ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            print(f"üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞ '{self.target_chat_name}'...")
            
            dialogs = await self.client.get_dialogs()
            
            for dialog in dialogs:
                if self.target_chat_name.lower() in dialog.name.lower():
                    self.target_chat_id = dialog.id
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç: {dialog.name} (ID: {dialog.id})")
                    return True
            
            print(f"‚ùå –ß–∞—Ç '{self.target_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞: {e}")
            return False
    
    def extract_detailed_plan_fact_data(self, message_text, message_date, sender_name, message_id):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–±–æ—Ä–æ–º –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤"""
        try:
            text = message_text.strip()
            extracted_data = []
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            lines = text.split('\n')
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤
            patterns = [
                # –ü–∞—Ç—Ç–µ—Ä–Ω 1: –ü–ª–∞–Ω: X, –§–∞–∫—Ç: Y
                (r'–ø–ª–∞–Ω[:\s]*(\d+(?:\.\d+)?)[^\d]*—Ñ–∞–∫—Ç[:\s]*(\d+(?:\.\d+)?)', '–ü–ª–∞–Ω: X, –§–∞–∫—Ç: Y'),
                # –ü–∞—Ç—Ç–µ—Ä–Ω 2: –ü/–§: X/Y
                (r'–ø/—Ñ[:\s]*(\d+(?:\.\d+)?)[^\d]*(\d+(?:\.\d+)?)', '–ü/–§: X/Y'),
                # –ü–∞—Ç—Ç–µ—Ä–Ω 3: –ü–ª–∞–Ω X –§–∞–∫—Ç Y
                (r'–ø–ª–∞–Ω\s+(\d+(?:\.\d+)?)[^\d]*—Ñ–∞–∫—Ç\s+(\d+(?:\.\d+)?)', '–ü–ª–∞–Ω X –§–∞–∫—Ç Y'),
                # –ü–∞—Ç—Ç–µ—Ä–Ω 4: –ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ —Å–ª–µ—à –∏–ª–∏ –¥–µ—Ñ–∏—Å
                (r'(\d+(?:\.\d+)?)[/\-]\s*(\d+(?:\.\d+)?)', 'X/Y –∏–ª–∏ X-Y'),
                # –ü–∞—Ç—Ç–µ—Ä–Ω 5: –ü: X –§: Y
                (r'–ø[:\s]*(\d+(?:\.\d+)?)[^\d]*—Ñ[:\s]*(\d+(?:\.\d+)?)', '–ü: X –§: Y'),
                # –ü–∞—Ç—Ç–µ—Ä–Ω 6: –ü–ª–∞–Ω - X, –§–∞–∫—Ç - Y
                (r'–ø–ª–∞–Ω\s*[-\s]*(\d+(?:\.\d+)?)[^\d]*—Ñ–∞–∫—Ç\s*[-\s]*(\d+(?:\.\d+)?)', '–ü–ª–∞–Ω - X, –§–∞–∫—Ç - Y'),
                # –ü–∞—Ç—Ç–µ—Ä–Ω 7: –ß–∏—Å–ª–∞ –≤ —Å–∫–æ–±–∫–∞—Ö
                (r'\((\d+(?:\.\d+)?)[^\d]*(\d+(?:\.\d+)?)\)', '(X Y)'),
                # –ü–∞—Ç—Ç–µ—Ä–Ω 8: –ü–ª–∞–Ω/–§–∞–∫—Ç: X/Y
                (r'–ø–ª–∞–Ω/—Ñ–∞–∫—Ç[:\s]*(\d+(?:\.\d+)?)[^\d]*(\d+(?:\.\d+)?)', '–ü–ª–∞–Ω/–§–∞–∫—Ç: X/Y'),
            ]
            
            # –ò—â–µ–º –∑–∞–¥–∞—á–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
            task_patterns = [
                r'(\d+)[\.\)]\s*(.+)',  # 1. –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                r'[-‚Ä¢]\s*(.+)',         # - –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                r'(\w+)[:\s]*(.+)',     # –ó–∞–¥–∞—á–∞: –æ–ø–∏—Å–∞–Ω–∏–µ
            ]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã/—Ñ–∞–∫—Ç—ã
            plan_fact_items = []
            for pattern, pattern_name in patterns:
                matches = re.finditer(pattern, text.lower())
                for match in matches:
                    try:
                        plan_value = float(match.group(1))
                        fact_value = float(match.group(2))
                        
                        if 0 <= plan_value <= 1000000 and 0 <= fact_value <= 1000000:
                            plan_fact_items.append({
                                'plan': plan_value,
                                'fact': fact_value,
                                'pattern': pattern_name,
                                'match_text': match.group(0)
                            })
                    except (ValueError, ZeroDivisionError):
                        continue
            
            # –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á
            task_descriptions = []
            for pattern in task_patterns:
                matches = re.finditer(pattern, text, re.IGNORECASE)
                for match in matches:
                    task_descriptions.append(match.group(0).strip())
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–ª–∞–Ω—ã/—Ñ–∞–∫—Ç—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏
            for i, item in enumerate(plan_fact_items):
                # –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø—É–Ω–∫—Ç–∞
                task_description = ""
                if i < len(task_descriptions):
                    task_description = task_descriptions[i]
                elif task_descriptions:
                    task_description = task_descriptions[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                
                completion_percent = (item['fact'] / item['plan'] * 100) if item['plan'] > 0 else 0
                
                extracted_data.append({
                    'message_id': message_id,
                    'date': message_date,
                    'sender': sender_name,
                    'task_description': task_description,
                    'plan': item['plan'],
                    'fact': item['fact'],
                    'difference': item['fact'] - item['plan'],
                    'completion_percent': completion_percent,
                    'pattern_used': item['pattern'],
                    'match_text': item['match_text'],
                    'original_text': text[:500],
                    'status': self.get_status(completion_percent),
                    'is_duplicate': False  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
                })
            
            return extracted_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
    
    def get_status(self, completion_percent):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if completion_percent >= 100:
            return "–ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
        elif completion_percent >= 90:
            return "–•–æ—Ä–æ—à–æ"
        elif completion_percent >= 70:
            return "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
        else:
            return "–ù–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
    
    def find_duplicates(self, all_data):
        """–ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π"""
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–ª–∞–Ω–∞/—Ñ–∞–∫—Ç–∞
            grouped_data = {}
            
            for item in all_data:
                key = (item['sender'], item['plan'], item['fact'])
                if key not in grouped_data:
                    grouped_data[key] = []
                grouped_data[key].append(item)
            
            # –ü–æ–º–µ—á–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            for key, items in grouped_data.items():
                if len(items) > 1:
                    for item in items:
                        item['is_duplicate'] = True
                        item['duplicate_count'] = len(items)
            
            return all_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
            return all_data
    
    async def get_weekly_messages(self, weeks_back=6):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ–¥–µ–ª–∏"""
        try:
            print(f"üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {weeks_back} –Ω–µ–¥–µ–ª–∏...")
            
            today = datetime.now()
            days_since_tuesday = (today.weekday() - 1) % 7
            start_date = today - timedelta(days=days_since_tuesday + (weeks_back * 7))
            
            messages = await self.client.get_messages(
                self.target_chat_id,
                offset_date=start_date,
                limit=3000
            )
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            tuesday_messages = []
            for msg in messages:
                if msg.text and msg.date.weekday() == 1:  # 1 = –≤—Ç–æ—Ä–Ω–∏–∫
                    sender_name = await self.get_sender_name(msg)
                    tuesday_messages.append({
                        'id': msg.id,
                        'date': msg.date,
                        'text': msg.text,
                        'sender': sender_name
                    })
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(tuesday_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞–º")
            return tuesday_messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    async def get_sender_name(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        try:
            sender = await message.get_sender()
            if sender:
                return f"{sender.first_name} {sender.last_name or ''}".strip()
            return "Unknown"
        except:
            return "Unknown"
    
    def create_detailed_excel_report(self, all_data, filename=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ Excel –æ—Ç—á–µ—Ç–∞"""
        try:
            if not filename:
                filename = f"output/detailed_plan_fact_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            os.makedirs("output", exist_ok=True)
            
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                
                # –õ–∏—Å—Ç 1: –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
                if all_data:
                    df_all = pd.DataFrame(all_data)
                    df_all['date'] = pd.to_datetime(df_all['date']).dt.tz_localize(None)
                    df_all = df_all.sort_values(['sender', 'date'], ascending=[True, False])
                    
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
                    df_all = df_all.rename(columns={
                        'message_id': 'ID —Å–æ–æ–±—â–µ–Ω–∏—è',
                        'date': '–î–∞—Ç–∞',
                        'sender': '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
                        'task_description': '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
                        'plan': '–ü–ª–∞–Ω',
                        'fact': '–§–∞–∫—Ç',
                        'difference': '–†–∞–∑–Ω–∏—Ü–∞',
                        'completion_percent': '% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                        'pattern_used': '–§–æ—Ä–º–∞—Ç',
                        'match_text': '–ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç',
                        'original_text': '–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç',
                        'status': '–°—Ç–∞—Ç—É—Å',
                        'is_duplicate': '–î—É–±–ª–∏–∫–∞—Ç',
                        'duplicate_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤'
                    })
                    
                    df_all.to_excel(writer, sheet_name='–í—Å–µ –¥–∞–Ω–Ω—ã–µ', index=False)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                    worksheet = writer.sheets['–í—Å–µ –¥–∞–Ω–Ω—ã–µ']
                    
                    # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                    red_fill = PatternFill(start_color='FFFF0000', end_color='FFFF0000', fill_type='solid')
                    yellow_fill = PatternFill(start_color='FFFFFF00', end_color='FFFFFF00', fill_type='solid')
                    
                    for row in worksheet.iter_rows(min_row=2):
                        if row[df_all.columns.get_loc('–î—É–±–ª–∏–∫–∞—Ç')].value:
                            for cell in row:
                                cell.fill = red_fill
                        elif row[df_all.columns.get_loc('% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')].value and row[df_all.columns.get_loc('% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')].value < 70:
                            for cell in row:
                                cell.fill = yellow_fill
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
                    for column in worksheet.columns:
                        max_length = 0
                        column_letter = column[0].column_letter
                        for cell in column:
                            try:
                                if len(str(cell.value)) > max_length:
                                    max_length = len(str(cell.value))
                            except:
                                pass
                        adjusted_width = min(max_length + 2, 50)
                        worksheet.column_dimensions[column_letter].width = adjusted_width
                
                # –õ–∏—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º
                if all_data:
                    sender_analysis = {}
                    
                    for item in all_data:
                        sender = item['sender']
                        if sender not in sender_analysis:
                            sender_analysis[sender] = {
                                'total_plan': 0,
                                'total_fact': 0,
                                'tasks_count': 0,
                                'over_performance': 0,
                                'under_performance': 0,
                                'duplicates': 0,
                                'dates': set(),
                                'tasks': []
                            }
                        
                        sender_analysis[sender]['total_plan'] += item['plan']
                        sender_analysis[sender]['total_fact'] += item['fact']
                        sender_analysis[sender]['tasks_count'] += 1
                        sender_analysis[sender]['dates'].add(item['date'].strftime('%Y-%m-%d'))
                        
                        if item['completion_percent'] >= 100:
                            sender_analysis[sender]['over_performance'] += 1
                        else:
                            sender_analysis[sender]['under_performance'] += 1
                        
                        if item['is_duplicate']:
                            sender_analysis[sender]['duplicates'] += 1
                        
                        sender_analysis[sender]['tasks'].append({
                            'date': item['date'].strftime('%Y-%m-%d'),
                            'task': item['task_description'],
                            'plan': item['plan'],
                            'fact': item['fact'],
                            'completion': item['completion_percent'],
                            'status': item['status']
                        })
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                    sender_data = []
                    for sender, data in sender_analysis.items():
                        avg_completion = (data['total_fact'] / data['total_plan'] * 100) if data['total_plan'] > 0 else 0
                        sender_data.append({
                            '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å': sender,
                            '–û–±—â–∏–π –ø–ª–∞–Ω': round(data['total_plan'], 2),
                            '–û–±—â–∏–π —Ñ–∞–∫—Ç': round(data['total_fact'], 2),
                            '–°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': round(avg_completion, 2),
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á': data['tasks_count'],
                            '–ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π': data['over_performance'],
                            '–ù–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π': data['under_performance'],
                            '–î—É–±–ª–∏–∫–∞—Ç–æ–≤': data['duplicates'],
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞—Ç': len(data['dates']),
                            '–î–∞—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': ', '.join(sorted(data['dates']))
                        })
                    
                    df_senders = pd.DataFrame(sender_data)
                    df_senders = df_senders.sort_values('–°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', ascending=False)
                    df_senders.to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏–∑ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º', index=False)
                
                # –õ–∏—Å—Ç 3: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º
                if all_data:
                    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
                    sender_groups = {}
                    for item in all_data:
                        sender = item['sender']
                        if sender not in sender_groups:
                            sender_groups[sender] = []
                        sender_groups[sender].append(item)
                    
                    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
                    detailed_data = []
                    for sender, items in sender_groups.items():
                        for item in items:
                            detailed_data.append({
                                '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å': sender,
                                '–î–∞—Ç–∞': item['date'].strftime('%Y-%m-%d'),
                                '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏': item['task_description'],
                                '–ü–ª–∞–Ω': item['plan'],
                                '–§–∞–∫—Ç': item['fact'],
                                '% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': round(item['completion_percent'], 2),
                                '–°—Ç–∞—Ç—É—Å': item['status'],
                                '–î—É–±–ª–∏–∫–∞—Ç': '–î–∞' if item['is_duplicate'] else '–ù–µ—Ç',
                                '–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö': item['pattern_used']
                            })
                    
                    df_detailed = pd.DataFrame(detailed_data)
                    df_detailed = df_detailed.sort_values(['–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–î–∞—Ç–∞'], ascending=[True, False])
                    df_detailed.to_excel(writer, sheet_name='–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º', index=False)
                
                # –õ–∏—Å—Ç 4: –î—É–±–ª–∏–∫–∞—Ç—ã
                duplicates_data = [item for item in all_data if item['is_duplicate']]
                if duplicates_data:
                    df_duplicates = pd.DataFrame(duplicates_data)
                    df_duplicates['date'] = pd.to_datetime(df_duplicates['date']).dt.tz_localize(None)
                    df_duplicates = df_duplicates.sort_values(['sender', 'date'], ascending=[True, False])
                    
                    df_duplicates = df_duplicates.rename(columns={
                        'date': '–î–∞—Ç–∞',
                        'sender': '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
                        'task_description': '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
                        'plan': '–ü–ª–∞–Ω',
                        'fact': '–§–∞–∫—Ç',
                        'completion_percent': '% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                        'duplicate_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤'
                    })
                    
                    df_duplicates.to_excel(writer, sheet_name='–î—É–±–ª–∏–∫–∞—Ç—ã', index=False)
                
                # –õ–∏—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                if all_data:
                    total_plan = sum(item['plan'] for item in all_data)
                    total_fact = sum(item['fact'] for item in all_data)
                    duplicates_count = len([item for item in all_data if item['is_duplicate']])
                    
                    stats_data = {
                        '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': [
                            '–í—Å–µ–≥–æ –∑–∞–¥–∞—á',
                            '–û–±—â–∏–π –ø–ª–∞–Ω',
                            '–û–±—â–∏–π —Ñ–∞–∫—Ç',
                            '–°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤',
                            '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π',
                            '–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ (–Ω–µ–¥–µ–ª—å)',
                            '–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
                            '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å –ª—É—á—à–∏–º % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                            '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å —Ö—É–¥—à–∏–º % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
                        ],
                        '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                            len(all_data),
                            round(total_plan, 2),
                            round(total_fact, 2),
                            round(sum(item['completion_percent'] for item in all_data) / len(all_data), 2),
                            duplicates_count,
                            len(set(item['sender'] for item in all_data)),
                            len(set(item['date'].strftime('%Y-%W') for item in all_data)),
                            max(set(item['sender'] for item in all_data), key=lambda x: len([item for item in all_data if item['sender'] == x])),
                            max(set(item['sender'] for item in all_data), key=lambda x: sum([item['completion_percent'] for item in all_data if item['sender'] == x]) / len([item for item in all_data if item['sender'] == x])),
                            min(set(item['sender'] for item in all_data), key=lambda x: sum([item['completion_percent'] for item in all_data if item['sender'] == x]) / len([item for item in all_data if item['sender'] == x]))
                        ]
                    }
                    
                    df_stats = pd.DataFrame(stats_data)
                    df_stats.to_excel(writer, sheet_name='–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
            
            print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return None
    
    async def run_detailed_analysis(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            print("üöÄ –ó–ê–ü–£–°–ö –î–ï–¢–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –ü–õ–ê–ù–û–í –ò –§–ê–ö–¢–û–í")
            print("=" * 60)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not await self.connect():
                return
            
            # –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
            if not await self.find_target_chat():
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = await self.get_weekly_messages(weeks_back=8)  # 8 –Ω–µ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
            if not messages:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            all_extracted_data = []
            
            for msg in messages:
                extracted = self.extract_detailed_plan_fact_data(msg['text'], msg['date'], msg['sender'], msg['id'])
                all_extracted_data.extend(extracted)
            
            print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(all_extracted_data)} –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –ø–ª–∞–Ω–æ–≤/—Ñ–∞–∫—Ç–æ–≤")
            
            if not all_extracted_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–æ–≤/—Ñ–∞–∫—Ç–æ–≤")
                return
            
            # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            all_extracted_data = self.find_duplicates(all_extracted_data)
            duplicates_count = len([item for item in all_extracted_data if item['is_duplicate']])
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {duplicates_count} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report_file = self.create_detailed_excel_report(all_extracted_data)
            
            if report_file:
                print(f"\nüéâ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                print(f"üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
                
                # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
                print(f"\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
                print(f"–í—Å–µ–≥–æ –ø—É–Ω–∫—Ç–æ–≤: {len(all_extracted_data)}")
                print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(set(item['sender'] for item in all_extracted_data))}")
                print(f"–î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º
                sender_stats = {}
                for item in all_extracted_data:
                    sender = item['sender']
                    if sender not in sender_stats:
                        sender_stats[sender] = {'count': 0, 'total_completion': 0}
                    sender_stats[sender]['count'] += 1
                    sender_stats[sender]['total_completion'] += item['completion_percent']
                
                print(f"\nüë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–£–ö–û–í–û–î–ò–¢–ï–õ–Ø–ú:")
                for sender, stats in sorted(sender_stats.items(), key=lambda x: x[1]['count'], reverse=True):
                    avg_completion = stats['total_completion'] / stats['count']
                    print(f"  {sender}: {stats['count']} –∑–∞–¥–∞—á, —Å—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {avg_completion:.1f}%")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    analyzer = DetailedPlanFactAnalyzer()
    await analyzer.run_detailed_analysis()

if __name__ == "__main__":
    asyncio.run(main())
