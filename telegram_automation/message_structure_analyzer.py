#!/usr/bin/env python3
"""
Message Structure Analyzer for Main mega –¢–û–ü
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–ª–∞–Ω–∞–º–∏ –∏ —Ñ–∞–∫—Ç–∞–º–∏
"""

import asyncio
import json
import re
from datetime import datetime, timedelta
from telethon import TelegramClient
from loguru import logger
import pandas as pd
import os

class MessageStructureAnalyzer:
    def __init__(self):
        self.config = self.load_config()
        self.client = None
        self.target_chat_name = "Main mega –¢–û–ü"
        self.target_chat_id = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        os.makedirs("output/logs", exist_ok=True)
        logger.add("output/logs/message_structure.log", rotation="1 day", retention="7 days")
        
    def load_config(self):
        with open("config/personal_config.json", 'r', encoding='utf-8') as f:
            return json.load(f)
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            self.client = TelegramClient(
                self.config['session_name'],
                self.config['api_id'],
                self.config['api_hash']
            )
            
            await self.client.start()
            
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                print(f"üë§ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name}")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def find_target_chat(self):
        """–ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            print(f"üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞ '{self.target_chat_name}'...")
            
            dialogs = await self.client.get_dialogs()
            
            for dialog in dialogs:
                if self.target_chat_name.lower() in dialog.name.lower():
                    self.target_chat_id = dialog.id
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç: {dialog.name} (ID: {dialog.id})")
                    return True
            
            print(f"‚ùå –ß–∞—Ç '{self.target_chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞: {e}")
            return False
    
    async def get_sample_messages(self, limit=50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        try:
            print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ {limit} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
            
            messages = await self.client.get_messages(
                self.target_chat_id,
                limit=limit
            )
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
            text_messages = []
            for msg in messages:
                if msg.text and len(msg.text.strip()) > 10:  # –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤
                    sender_name = await self.get_sender_name(msg)
                    text_messages.append({
                        'id': msg.id,
                        'date': msg.date,
                        'text': msg.text.strip(),
                        'sender': sender_name,
                        'length': len(msg.text.strip())
                    })
            
            print(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(text_messages)} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            return text_messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    async def get_sender_name(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        try:
            sender = await message.get_sender()
            if sender:
                return f"{sender.first_name} {sender.last_name or ''}".strip()
            return "Unknown"
        except:
            return "Unknown"
    
    def analyze_message_structure(self, messages):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            print("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            structure_analysis = {
                'total_messages': len(messages),
                'senders': {},
                'patterns_found': {},
                'message_types': {},
                'sample_messages': []
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for msg in messages:
                text = msg['text'].lower()
                sender = msg['sender']
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                if sender not in structure_analysis['senders']:
                    structure_analysis['senders'][sender] = 0
                structure_analysis['senders'][sender] += 1
                
                # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤
                patterns = [
                    ('–ø–ª–∞–Ω', r'–ø–ª–∞–Ω[:\s]*(\d+(?:\.\d+)?)'),
                    ('—Ñ–∞–∫—Ç', r'—Ñ–∞–∫—Ç[:\s]*(\d+(?:\.\d+)?)'),
                    ('–ø/—Ñ', r'–ø/—Ñ[:\s]*(\d+(?:\.\d+)?)'),
                    ('—á–∏—Å–ª–∞_—Å–ª–µ—à', r'(\d+(?:\.\d+)?)[/\-]\s*(\d+(?:\.\d+)?)'),
                    ('—Å–∫–æ–±–∫–∏', r'\((\d+(?:\.\d+)?)[^\d]*(\d+(?:\.\d+)?)\)'),
                    ('–ø—Ä–æ—Ü–µ–Ω—Ç—ã', r'(\d+(?:\.\d+)?)%'),
                    ('–∑–∞–¥–∞—á–∏_–Ω—É–º–µ—Ä–∞—Ü–∏—è', r'(\d+)[\.\)]\s'),
                    ('–∑–∞–¥–∞—á–∏_–º–∞—Ä–∫–µ—Ä—ã', r'[-‚Ä¢]\s'),
                ]
                
                found_patterns = []
                for pattern_name, pattern in patterns:
                    matches = re.findall(pattern, text)
                    if matches:
                        found_patterns.append(pattern_name)
                        if pattern_name not in structure_analysis['patterns_found']:
                            structure_analysis['patterns_found'][pattern_name] = 0
                        structure_analysis['patterns_found'][pattern_name] += 1
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                message_type = self.classify_message_type(text, found_patterns)
                if message_type not in structure_analysis['message_types']:
                    structure_analysis['message_types'][message_type] = 0
                structure_analysis['message_types'][message_type] += 1
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–∑—Ü—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                if len(structure_analysis['sample_messages']) < 20:  # –ü–µ—Ä–≤—ã–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
                    structure_analysis['sample_messages'].append({
                        'sender': sender,
                        'date': msg['date'].strftime('%Y-%m-%d %H:%M'),
                        'text': msg['text'][:200] + '...' if len(msg['text']) > 200 else msg['text'],
                        'type': message_type,
                        'patterns': found_patterns,
                        'length': msg['length']
                    })
            
            return structure_analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            return {}
    
    def classify_message_type(self, text, patterns):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if '–ø–ª–∞–Ω' in patterns and '—Ñ–∞–∫—Ç' in patterns:
            return '–ü–ª–∞–Ω/–§–∞–∫—Ç'
        elif '–ø/—Ñ' in patterns:
            return '–ü/–§ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ'
        elif '—á–∏—Å–ª–∞_—Å–ª–µ—à' in patterns:
            return '–ß–∏—Å–ª–∞ —á–µ—Ä–µ–∑ —Å–ª–µ—à'
        elif '—Å–∫–æ–±–∫–∏' in patterns:
            return '–ß–∏—Å–ª–∞ –≤ —Å–∫–æ–±–∫–∞—Ö'
        elif '–∑–∞–¥–∞—á–∏_–Ω—É–º–µ—Ä–∞—Ü–∏—è' in patterns or '–∑–∞–¥–∞—á–∏_–º–∞—Ä–∫–µ—Ä—ã' in patterns:
            return '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á'
        elif '–ø—Ä–æ—Ü–µ–Ω—Ç—ã' in patterns:
            return '–° –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏'
        elif any(word in text for word in ['–ø–ª–∞–Ω', '—Ñ–∞–∫—Ç', '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '—Å–¥–µ–ª–∞–Ω–æ']):
            return '–°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞'
        else:
            return '–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
    
    def find_plan_fact_messages(self, messages):
        """–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–ª–∞–Ω–∞–º–∏ –∏ —Ñ–∞–∫—Ç–∞–º–∏"""
        try:
            print("üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–ª–∞–Ω–∞–º–∏ –∏ —Ñ–∞–∫—Ç–∞–º–∏...")
            
            plan_fact_messages = []
            
            for msg in messages:
                text = msg['text'].lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤
                has_plan = re.search(r'–ø–ª–∞–Ω[:\s]*(\d+(?:\.\d+)?)', text)
                has_fact = re.search(r'—Ñ–∞–∫—Ç[:\s]*(\d+(?:\.\d+)?)', text)
                has_pf = re.search(r'–ø/—Ñ[:\s]*(\d+(?:\.\d+)?)', text)
                has_numbers = re.search(r'(\d+(?:\.\d+)?)[/\-]\s*(\d+(?:\.\d+)?)', text)
                
                if has_plan or has_fact or has_pf or has_numbers:
                    plan_fact_messages.append({
                        'id': msg['id'],
                        'date': msg['date'],
                        'sender': msg['sender'],
                        'text': msg['text'],
                        'has_plan': bool(has_plan),
                        'has_fact': bool(has_fact),
                        'has_pf': bool(has_pf),
                        'has_numbers': bool(has_numbers),
                        'patterns': []
                    })
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                    if has_plan:
                        plan_fact_messages[-1]['patterns'].append('–ø–ª–∞–Ω')
                    if has_fact:
                        plan_fact_messages[-1]['patterns'].append('—Ñ–∞–∫—Ç')
                    if has_pf:
                        plan_fact_messages[-1]['patterns'].append('–ø/—Ñ')
                    if has_numbers:
                        plan_fact_messages[-1]['patterns'].append('—á–∏—Å–ª–∞')
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(plan_fact_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–ª–∞–Ω–∞–º–∏/—Ñ–∞–∫—Ç–∞–º–∏")
            return plan_fact_messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–ª–∞–Ω–æ–≤/—Ñ–∞–∫—Ç–æ–≤: {e}")
            return []
    
    def create_structure_report(self, structure_analysis, plan_fact_messages, filename=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not filename:
                filename = f"output/message_structure_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            os.makedirs("output", exist_ok=True)
            
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                
                # –õ–∏—Å—Ç 1: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                stats_data = {
                    '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': [
                        '–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π',
                        '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π',
                        '–°–æ–æ–±—â–µ–Ω–∏–π —Å –ø–ª–∞–Ω–∞–º–∏/—Ñ–∞–∫—Ç–∞–º–∏',
                        '–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å',
                        '–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è'
                    ],
                    '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                        structure_analysis.get('total_messages', 0),
                        len(structure_analysis.get('senders', {})),
                        len(plan_fact_messages),
                        max(structure_analysis.get('senders', {}).items(), key=lambda x: x[1])[0] if structure_analysis.get('senders') else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                        round(sum(msg['length'] for msg in structure_analysis.get('sample_messages', [])) / len(structure_analysis.get('sample_messages', [1])), 2)
                    ]
                }
                
                df_stats = pd.DataFrame(stats_data)
                df_stats.to_excel(writer, sheet_name='–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
                
                # –õ–∏—Å—Ç 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º
                if structure_analysis.get('senders'):
                    sender_data = []
                    for sender, count in structure_analysis['senders'].items():
                        sender_data.append({
                            '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å': sender,
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π': count
                        })
                    
                    df_senders = pd.DataFrame(sender_data)
                    df_senders = df_senders.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π', ascending=False)
                    df_senders.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º', index=False)
                
                # –õ–∏—Å—Ç 3: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                if structure_analysis.get('patterns_found'):
                    pattern_data = []
                    for pattern, count in structure_analysis['patterns_found'].items():
                        pattern_data.append({
                            '–ü–∞—Ç—Ç–µ—Ä–Ω': pattern,
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π': count
                        })
                    
                    df_patterns = pd.DataFrame(pattern_data)
                    df_patterns = df_patterns.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π', ascending=False)
                    df_patterns.to_excel(writer, sheet_name='–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã', index=False)
                
                # –õ–∏—Å—Ç 4: –¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                if structure_analysis.get('message_types'):
                    type_data = []
                    for msg_type, count in structure_analysis['message_types'].items():
                        type_data.append({
                            '–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è': msg_type,
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count
                        })
                    
                    df_types = pd.DataFrame(type_data)
                    df_types = df_types.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', ascending=False)
                    df_types.to_excel(writer, sheet_name='–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π', index=False)
                
                # –õ–∏—Å—Ç 5: –û–±—Ä–∞–∑—Ü—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                if structure_analysis.get('sample_messages'):
                    df_samples = pd.DataFrame(structure_analysis['sample_messages'])
                    df_samples.to_excel(writer, sheet_name='–û–±—Ä–∞–∑—Ü—ã —Å–æ–æ–±—â–µ–Ω–∏–π', index=False)
                
                # –õ–∏—Å—Ç 6: –°–æ–æ–±—â–µ–Ω–∏—è —Å –ø–ª–∞–Ω–∞–º–∏/—Ñ–∞–∫—Ç–∞–º–∏
                if plan_fact_messages:
                    pf_data = []
                    for msg in plan_fact_messages:
                        pf_data.append({
                            'ID': msg['id'],
                            '–î–∞—Ç–∞': msg['date'].strftime('%Y-%m-%d %H:%M'),
                            '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å': msg['sender'],
                            '–¢–µ–∫—Å—Ç': msg['text'][:300] + '...' if len(msg['text']) > 300 else msg['text'],
                            '–ï—Å—Ç—å –ø–ª–∞–Ω': '–î–∞' if msg['has_plan'] else '–ù–µ—Ç',
                            '–ï—Å—Ç—å —Ñ–∞–∫—Ç': '–î–∞' if msg['has_fact'] else '–ù–µ—Ç',
                            '–ï—Å—Ç—å –ü/–§': '–î–∞' if msg['has_pf'] else '–ù–µ—Ç',
                            '–ï—Å—Ç—å —á–∏—Å–ª–∞': '–î–∞' if msg['has_numbers'] else '–ù–µ—Ç',
                            '–ü–∞—Ç—Ç–µ—Ä–Ω—ã': ', '.join(msg['patterns'])
                        })
                    
                    df_pf = pd.DataFrame(pf_data)
                    df_pf.to_excel(writer, sheet_name='–°–æ–æ–±—â–µ–Ω–∏—è –ü–ª–∞–Ω –§–∞–∫—Ç', index=False)
            
            print(f"‚úÖ –û—Ç—á–µ—Ç –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–æ–∑–¥–∞–Ω: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return None
    
    async def run_structure_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            print("üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –°–¢–†–£–ö–¢–£–†–´ –°–û–û–ë–©–ï–ù–ò–ô")
            print("=" * 60)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not await self.connect():
                return
            
            # –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
            if not await self.find_target_chat():
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = await self.get_sample_messages(limit=100)
            
            if not messages:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            structure_analysis = self.analyze_message_structure(messages)
            
            # –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–ª–∞–Ω–∞–º–∏/—Ñ–∞–∫—Ç–∞–º–∏
            plan_fact_messages = self.find_plan_fact_messages(messages)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report_file = self.create_structure_report(structure_analysis, plan_fact_messages)
            
            if report_file:
                print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω!")
                print(f"üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
                
                # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
                print(f"\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
                print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {structure_analysis.get('total_messages', 0)}")
                print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: {len(structure_analysis.get('senders', {}))}")
                print(f"–°–æ–æ–±—â–µ–Ω–∏–π —Å –ø–ª–∞–Ω–∞–º–∏/—Ñ–∞–∫—Ç–∞–º–∏: {len(plan_fact_messages)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                if structure_analysis.get('senders'):
                    print(f"\nüë• –¢–û–ü –û–¢–ü–†–ê–í–ò–¢–ï–õ–ï–ô:")
                    top_senders = sorted(structure_analysis['senders'].items(), key=lambda x: x[1], reverse=True)[:5]
                    for sender, count in top_senders:
                        print(f"  {sender}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                if structure_analysis.get('patterns_found'):
                    print(f"\nüîç –ù–ê–ô–î–ï–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:")
                    top_patterns = sorted(structure_analysis['patterns_found'].items(), key=lambda x: x[1], reverse=True)[:5]
                    for pattern, count in top_patterns:
                        print(f"  {pattern}: {count} —Ä–∞–∑")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                if structure_analysis.get('sample_messages'):
                    print(f"\nüìù –ü–†–ò–ú–ï–†–´ –°–û–û–ë–©–ï–ù–ò–ô:")
                    for i, msg in enumerate(structure_analysis['sample_messages'][:3]):
                        print(f"\n  {i+1}. {msg['sender']} ({msg['date']})")
                        print(f"     –¢–∏–ø: {msg['type']}")
                        print(f"     –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {', '.join(msg['patterns'])}")
                        print(f"     –¢–µ–∫—Å—Ç: {msg['text'][:100]}...")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    analyzer = MessageStructureAnalyzer()
    await analyzer.run_structure_analysis()

if __name__ == "__main__":
    asyncio.run(main())
