#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞—Ä–ø–ª–∞—Ç –¥–ª—è –ê—Ä—Ç–µ–º–∞ –í–∞—Å–∏–ª–µ–≤—Å–∫–æ–≥–æ –∏ –ï–≤–≥–µ–Ω–∏—è –ö–æ—Å–∏—Ü–∏–Ω–∞
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤—ã–ø–ª–∞—Ç 2025 –≥–æ–¥–∞
"""

import pandas as pd
import numpy as np
from datetime import datetime
import os

def analyze_salaries():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    file_path = "–¢–∞–±–ª –≤—ã–ø–ª–∞—Ç—ã 2025 (1).xlsx"
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª: {file_path}")
    
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(file_path)
        
        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        print(f"üìã –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        print(f"üìã –°—Ç–æ–ª–±—Ü—ã: {list(df.columns)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        print("\nüîç –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:")
        print(df.head())
        
        # –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å –∏–º–µ–Ω–∞–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö)
        name_columns = []
        for col in df.columns:
            col_str = str(col).lower()
            if '–∏–º—è' in col_str or 'name' in col_str or '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫' in col_str:
                name_columns.append(col)
        
        print(f"\nüë• –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã —Å –∏–º–µ–Ω–∞–º–∏: {name_columns}")
        
        # –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏
        salary_columns = []
        for col in df.columns:
            col_str = str(col).lower()
            if '–∑–∞—Ä–ø–ª–∞—Ç' in col_str or 'salary' in col_str or '–≤—ã–ø–ª–∞—Ç' in col_str or '—Å—É–º–º–∞' in col_str:
                salary_columns.append(col)
        
        print(f"üí∞ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã —Å –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏: {salary_columns}")
        
        # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        target_names = ['–ê—Ä—Ç–µ–º –í–∞—Å–∏–ª–µ–≤—Å–∫–∏–π', '–ï–≤–≥–µ–Ω–∏–π –ö–æ—Å–∏—Ü–∏–Ω', '–í–∞—Å–∏–ª–µ–≤—Å–∫–∏–π', '–ö–æ—Å–∏—Ü–∏–Ω']
        
        results = {}
        
        for name in target_names:
            print(f"\nüîç –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {name}")
            
            # –ò—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
            for col in df.columns:
                if df[col].dtype == 'object':  # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã
                    matches = df[df[col].astype(str).str.contains(name, case=False, na=False)]
                    if not matches.empty:
                        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ —Å—Ç–æ–ª–±—Ü–µ '{col}': {len(matches)} –∑–∞–ø–∏—Å–µ–π")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                        print(f"   üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:")
                        for idx, row in matches.iterrows():
                            print(f"      –°—Ç—Ä–æ–∫–∞ {idx}: {dict(row)}")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º
        print(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º...")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        df_str = df.astype(str)
        
        for name in target_names:
            print(f"\nüîç –ü–æ–∏—Å–∫ '{name}' –≤–æ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:")
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–º—è
            mask = df_str.apply(lambda x: x.str.contains(name, case=False, na=False)).any(axis=1)
            matching_rows = df[mask]
            
            if not matching_rows.empty:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matching_rows)} —Å—Ç—Ä–æ–∫ —Å '{name}':")
                for idx, row in matching_rows.iterrows():
                    print(f"      –°—Ç—Ä–æ–∫–∞ {idx}:")
                    for col, value in row.items():
                        if pd.notna(value) and str(value).strip():
                            print(f"         {col}: {value}")
            else:
                print(f"   ‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ (—á–∞—Å—Ç–æ —Ç–∞–º –∏–º–µ–Ω–∞)
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (Unnamed: 0):")
        unique_values = df['Unnamed: 0'].dropna().unique()
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {list(unique_values)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ –≤—Ç–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–µ
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (Unnamed: 1):")
        unique_values_2 = df['Unnamed: 1'].dropna().unique()
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {list(unique_values_2)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"salary_analysis_report_{timestamp}.txt"
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("–û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –ó–ê–†–ü–õ–ê–¢\n")
            f.write("=" * 50 + "\n\n")
            f.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–§–∞–π–ª: {file_path}\n")
            f.write(f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤\n\n")
            
            f.write("–°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–•:\n")
            f.write("-" * 30 + "\n")
            for i, col in enumerate(df.columns):
                f.write(f"{i+1}. {col} (—Ç–∏–ø: {df[col].dtype})\n")
            
            f.write(f"\n–ü–ï–†–í–´–ï 10 –°–¢–†–û–ö –î–ê–ù–ù–´–•:\n")
            f.write("-" * 30 + "\n")
            f.write(df.head(10).to_string())
            
            f.write(f"\n\n–£–ù–ò–ö–ê–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø –í –ü–ï–†–í–û–ú –°–¢–û–õ–ë–¶–ï:\n")
            f.write("-" * 30 + "\n")
            for val in unique_values:
                f.write(f"- {val}\n")
            
            f.write(f"\n–£–ù–ò–ö–ê–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø –í–û –í–¢–û–†–û–ú –°–¢–û–õ–ë–¶–ï:\n")
            f.write("-" * 30 + "\n")
            for val in unique_values_2:
                f.write(f"- {val}\n")
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞—Ä–ø–ª–∞—Ç")
    print("=" * 50)
    analyze_salaries()
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
