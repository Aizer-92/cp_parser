#!/usr/bin/env python3
"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞—Ä–ø–ª–∞—Ç —Å —É—á–µ—Ç–æ–º —Å—Ç–æ–ª–±—Ü–∞ "–ø—Ä–æ—Ü–µ–Ω—Ç—ã"
"""

import pandas as pd
import numpy as np
from datetime import datetime
import os

def analyze_updated_salaries():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã —Å —É—á–µ—Ç–æ–º —Å—Ç–æ–ª–±—Ü–∞ '–ø—Ä–æ—Ü–µ–Ω—Ç—ã'"""
    
    file_path = "–¢–∞–±–ª –≤—ã–ø–ª–∞—Ç—ã 2025 (1).xlsx"
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
    
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(file_path)
        
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        print(f"üìã –°—Ç–æ–ª–±—Ü—ã: {list(df.columns)}")
        
        # –ò—â–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ø—Ä–æ—Ü–µ–Ω—Ç—ã"
        percentage_columns = []
        for col in df.columns:
            col_str = str(col).lower()
            if '–ø—Ä–æ—Ü–µ–Ω—Ç' in col_str or '–ø—Ä–æ—Ü' in col_str:
                percentage_columns.append(col)
        
        print(f"\nüîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏: {percentage_columns}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        print("\nüîç –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:")
        print(df.head(10))
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ê—Ä—Ç–µ–º–∞ –í–∞—Å–∏–ª–µ–≤—Å–∫–æ–≥–æ
        print("\n" + "="*60)
        print("–ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ê–†–¢–ï–ú–ê –í–ê–°–ò–õ–ï–í–°–ö–û–ì–û")
        print("="*60)
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ê—Ä—Ç–µ–º–∞
        artem_data = df[df.astype(str).apply(lambda x: x.str.contains('–ê—Ä—Ç–µ–º|–í–∞—Å–∏–ª–µ–≤—Å–∫–∏–π', case=False, na=False)).any(axis=1)]
        
        if not artem_data.empty:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(artem_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ê—Ä—Ç–µ–º–∞ –í–∞—Å–∏–ª–µ–≤—Å–∫–æ–≥–æ")
            
            for idx, row in artem_data.iterrows():
                print(f"\nüìã –ó–∞–ø–∏—Å—å #{idx}:")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                for col, value in row.items():
                    if pd.notna(value) and str(value).strip() and str(value) != 'nan':
                        print(f"   {col}: {value}")
                
                # –ò—â–µ–º –±–∞–∑–æ–≤—É—é –∑–∞—Ä–ø–ª–∞—Ç—É (—Å—Ç–æ–ª–±–µ—Ü Unnamed: 7)
                base_salary = row.get('Unnamed: 7', 0)
                if base_salary and base_salary > 0:
                    print(f"\n   üí∞ –ë–∞–∑–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {base_salary:,.2f} —Ä—É–±.")
                    
                    # –ò—â–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
                    percentages_found = []
                    for col in df.columns:
                        col_str = str(col).lower()
                        if '–ø—Ä–æ—Ü–µ–Ω—Ç' in col_str or '–ø—Ä–æ—Ü' in col_str:
                            percent_value = row.get(col, 0)
                            if pd.notna(percent_value) and percent_value != 0:
                                percentages_found.append((col, percent_value))
                    
                    if percentages_found:
                        print(f"   üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã:")
                        for col, value in percentages_found:
                            print(f"      {col}: {value}")
                        
                        # –†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç
                        total_percentage = sum([val for _, val in percentages_found if isinstance(val, (int, float))])
                        additional_payment = base_salary * (total_percentage / 100) if total_percentage > 0 else 0
                        
                        print(f"   ‚ûï –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {total_percentage}%")
                        print(f"   üí∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞: {additional_payment:,.2f} —Ä—É–±.")
                        print(f"   üéØ –û–±—â–∞—è –º–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {base_salary + additional_payment:,.2f} —Ä—É–±.")
                        print(f"   üìÖ –ì–æ–¥–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {(base_salary + additional_payment) * 12:,.2f} —Ä—É–±.")
        
        # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –ï–≤–≥–µ–Ω–∏—è –ö–æ—Å–∏—Ü–∏–Ω–∞
        print("\n" + "="*60)
        print("–ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ï–í–ì–ï–ù–ò–Ø –ö–û–°–ò–¶–ò–ù–ê")
        print("="*60)
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ï–≤–≥–µ–Ω–∏—è
        eugene_data = df[df.astype(str).apply(lambda x: x.str.contains('–ï–≤–≥–µ–Ω–∏–π|–ö–æ—Å–∏—Ü–∏–Ω|–ö–æ—Å–∏—Ü—ã–Ω', case=False, na=False)).any(axis=1)]
        
        if not eugene_data.empty:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(eugene_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ï–≤–≥–µ–Ω–∏—è –ö–æ—Å–∏—Ü–∏–Ω–∞")
            
            for idx, row in eugene_data.iterrows():
                print(f"\nüìã –ó–∞–ø–∏—Å—å #{idx}:")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                for col, value in row.items():
                    if pd.notna(value) and str(value).strip() and str(value) != 'nan':
                        print(f"   {col}: {value}")
                
                # –ò—â–µ–º –±–∞–∑–æ–≤—É—é –∑–∞—Ä–ø–ª–∞—Ç—É
                base_salary = row.get('Unnamed: 7', 0)
                if base_salary and base_salary > 0:
                    print(f"\n   üí∞ –ë–∞–∑–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {base_salary:,.2f} —Ä—É–±.")
                    
                    # –ò—â–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                    percentages_found = []
                    for col in df.columns:
                        col_str = str(col).lower()
                        if '–ø—Ä–æ—Ü–µ–Ω—Ç' in col_str or '–ø—Ä–æ—Ü' in col_str:
                            percent_value = row.get(col, 0)
                            if pd.notna(percent_value) and percent_value != 0:
                                percentages_found.append((col, percent_value))
                    
                    if percentages_found:
                        print(f"   üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã:")
                        for col, value in percentages_found:
                            print(f"      {col}: {value}")
                        
                        # –†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç
                        total_percentage = sum([val for _, val in percentages_found if isinstance(val, (int, float))])
                        additional_payment = base_salary * (total_percentage / 100) if total_percentage > 0 else 0
                        
                        print(f"   ‚ûï –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {total_percentage}%")
                        print(f"   üí∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞: {additional_payment:,.2f} —Ä—É–±.")
                        print(f"   üéØ –û–±—â–∞—è –º–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {base_salary + additional_payment:,.2f} —Ä—É–±.")
                        print(f"   üìÖ –ì–æ–¥–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {(base_salary + additional_payment) * 12:,.2f} —Ä—É–±.")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"updated_salary_analysis_{timestamp}.txt"
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –ó–ê–†–ü–õ–ê–¢\n")
            f.write("=" * 60 + "\n\n")
            f.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–§–∞–π–ª: {file_path}\n")
            f.write(f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤\n\n")
            
            f.write("–°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–•:\n")
            f.write("-" * 30 + "\n")
            for i, col in enumerate(df.columns):
                f.write(f"{i+1}. {col} (—Ç–∏–ø: {df[col].dtype})\n")
            
            f.write(f"\n–°–¢–û–õ–ë–¶–´ –° –ü–†–û–¶–ï–ù–¢–ê–ú–ò:\n")
            f.write("-" * 30 + "\n")
            for col in percentage_columns:
                f.write(f"- {col}\n")
            
            f.write(f"\n–ü–ï–†–í–´–ï 10 –°–¢–†–û–ö –î–ê–ù–ù–´–•:\n")
            f.write("-" * 30 + "\n")
            f.write(df.head(10).to_string())
        
        print(f"\nüìÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞—Ä–ø–ª–∞—Ç")
    print("=" * 60)
    analyze_updated_salaries()
    print("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
