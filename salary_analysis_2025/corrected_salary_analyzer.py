#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞—Ä–ø–ª–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
"""

import pandas as pd
import numpy as np
from datetime import datetime
import os

def analyze_corrected_salaries():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    file_path = "–¢–∞–±–ª –≤—ã–ø–ª–∞—Ç—ã 2025 (1).xlsx"
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print(f"üìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
    
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(file_path)
        
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ê—Ä—Ç–µ–º–∞ –í–∞—Å–∏–ª–µ–≤—Å–∫–æ–≥–æ
        print("\n" + "="*60)
        print("–ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ê–†–¢–ï–ú–ê –í–ê–°–ò–õ–ï–í–°–ö–û–ì–û")
        print("="*60)
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ê—Ä—Ç–µ–º–∞
        artem_data = df[df.astype(str).apply(lambda x: x.str.contains('–ê—Ä—Ç–µ–º|–í–∞—Å–∏–ª–µ–≤—Å–∫–∏–π', case=False, na=False)).any(axis=1)]
        
        if not artem_data.empty:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(artem_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ê—Ä—Ç–µ–º–∞ –í–∞—Å–∏–ª–µ–≤—Å–∫–æ–≥–æ")
            
            for idx, row in artem_data.iterrows():
                name = row.get('Unnamed: 6', '')
                if '–ê—Ä—Ç–µ–º' in str(name):
                    print(f"\nüìã –ó–∞–ø–∏—Å—å #{idx} - –ê–†–¢–ï–ú –í–ê–°–ò–õ–ï–í–°–ö–ò–ô:")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    position = row.get('Unnamed: 5', '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ö–∏—Ç–∞–µ–º')
                    base_salary = row.get('Unnamed: 7', 0)
                    date_column = row.get(datetime(2019, 8, 23, 0, 0), 0)  # –°—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                    additional = row.get('Unnamed: 10', 0)
                    ss_amount = row.get('–°–°', 0)
                    final_amount = row.get('Unnamed: 22', 0)
                    
                    print(f"   üë§ –ò–º—è: {name}")
                    print(f"   üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}")
                    print(f"   üí∞ –ë–∞–∑–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {base_salary:,.2f} —Ä—É–±.")
                    print(f"   üìÖ –ó–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ –¥–∞—Ç—ã: {date_column}")
                    print(f"   ‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã (Unnamed: 10): {additional:,.2f} —Ä—É–±.")
                    print(f"   üìä –°–°: {ss_amount:,.2f} —Ä—É–±.")
                    print(f"   üéØ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {final_amount:,.2f} —Ä—É–±.")
                    
                    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    if isinstance(date_column, (int, float)) and date_column > 0:
                        # –ï—Å–ª–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ –¥–∞—Ç—ã —á–∏—Å–ª–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç
                        percentage = date_column
                        additional_by_percentage = base_salary * (percentage / 100)
                        print(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ –¥–∞—Ç—ã: {percentage}%")
                        print(f"   üí∞ –î–æ–ø–ª–∞—Ç–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É: {additional_by_percentage:,.2f} —Ä—É–±.")
                        
                        # –û–±—â–∞—è –º–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
                        total_monthly = base_salary + additional_by_percentage + additional
                        total_annual = total_monthly * 12
                        
                        print(f"\n   üìà –†–ê–°–ß–ï–¢–´:")
                        print(f"      üíµ –ë–∞–∑–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {base_salary:,.2f} —Ä—É–±.")
                        print(f"      üìä –î–æ–ø–ª–∞—Ç–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É: {additional_by_percentage:,.2f} —Ä—É–±.")
                        print(f"      ‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã: {additional:,.2f} —Ä—É–±.")
                        print(f"      üí∞ –û–±—â–∞—è –º–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {total_monthly:,.2f} —Ä—É–±.")
                        print(f"      üéØ –°–†–ï–î–ù–ï–ì–û–î–û–í–ê–Ø –ó–ê–†–ü–õ–ê–¢–ê: {total_annual:,.2f} —Ä—É–±.")
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ –¥–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã
                        total_monthly = base_salary + additional
                        total_annual = total_monthly * 12
                        
                        print(f"\n   üìà –†–ê–°–ß–ï–¢–´:")
                        print(f"      üíµ –ë–∞–∑–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {base_salary:,.2f} —Ä—É–±.")
                        print(f"      ‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã: {additional:,.2f} —Ä—É–±.")
                        print(f"      üí∞ –û–±—â–∞—è –º–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {total_monthly:,.2f} —Ä—É–±.")
                        print(f"      üéØ –°–†–ï–î–ù–ï–ì–û–î–û–í–ê–Ø –ó–ê–†–ü–õ–ê–¢–ê: {total_annual:,.2f} —Ä—É–±.")
        
        # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –ï–≤–≥–µ–Ω–∏—è –ö–æ—Å–∏—Ü–∏–Ω–∞
        print("\n" + "="*60)
        print("–ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ï–í–ì–ï–ù–ò–Ø –ö–û–°–ò–¶–ò–ù–ê")
        print("="*60)
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ï–≤–≥–µ–Ω–∏—è
        eugene_data = df[df.astype(str).apply(lambda x: x.str.contains('–ï–≤–≥–µ–Ω–∏–π|–ö–æ—Å–∏—Ü–∏–Ω|–ö–æ—Å–∏—Ü—ã–Ω', case=False, na=False)).any(axis=1)]
        
        if not eugene_data.empty:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(eugene_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ï–≤–≥–µ–Ω–∏—è –ö–æ—Å–∏—Ü–∏–Ω–∞")
            
            for idx, row in eugene_data.iterrows():
                name = row.get('Unnamed: 6', '')
                if '–ï–≤–≥–µ–Ω–∏–π' in str(name) or '–ö–æ—Å–∏—Ü' in str(name):
                    print(f"\nüìã –ó–∞–ø–∏—Å—å #{idx} - –ï–í–ì–ï–ù–ò–ô –ö–û–°–ò–¶–ò–ù:")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    position = row.get('Unnamed: 5', '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ö–∏—Ç–∞–µ–º')
                    base_salary = row.get('Unnamed: 7', 0)
                    date_column = row.get(datetime(2019, 8, 23, 0, 0), 0)
                    additional = row.get('Unnamed: 10', 0)
                    ss_amount = row.get('–°–°', 0)
                    final_amount = row.get('Unnamed: 22', 0)
                    
                    print(f"   üë§ –ò–º—è: {name}")
                    print(f"   üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}")
                    print(f"   üí∞ –ë–∞–∑–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {base_salary:,.2f} —Ä—É–±.")
                    print(f"   üìÖ –ó–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ –¥–∞—Ç—ã: {date_column}")
                    print(f"   ‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã (Unnamed: 10): {additional:,.2f} —Ä—É–±.")
                    print(f"   üìä –°–°: {ss_amount:,.2f} —Ä—É–±.")
                    print(f"   üéØ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {final_amount:,.2f} —Ä—É–±.")
                    
                    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    if isinstance(date_column, (int, float)) and date_column > 0:
                        # –ï—Å–ª–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ –¥–∞—Ç—ã —á–∏—Å–ª–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç
                        percentage = date_column
                        additional_by_percentage = base_salary * (percentage / 100)
                        print(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ –¥–∞—Ç—ã: {percentage}%")
                        print(f"   üí∞ –î–æ–ø–ª–∞—Ç–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É: {additional_by_percentage:,.2f} —Ä—É–±.")
                        
                        # –û–±—â–∞—è –º–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
                        total_monthly = base_salary + additional_by_percentage + additional
                        total_annual = total_monthly * 12
                        
                        print(f"\n   üìà –†–ê–°–ß–ï–¢–´:")
                        print(f"      üíµ –ë–∞–∑–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {base_salary:,.2f} —Ä—É–±.")
                        print(f"      üìä –î–æ–ø–ª–∞—Ç–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É: {additional_by_percentage:,.2f} —Ä—É–±.")
                        print(f"      ‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã: {additional:,.2f} —Ä—É–±.")
                        print(f"      üí∞ –û–±—â–∞—è –º–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {total_monthly:,.2f} —Ä—É–±.")
                        print(f"      üéØ –°–†–ï–î–ù–ï–ì–û–î–û–í–ê–Ø –ó–ê–†–ü–õ–ê–¢–ê: {total_annual:,.2f} —Ä—É–±.")
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ –¥–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã
                        total_monthly = base_salary + additional
                        total_annual = total_monthly * 12
                        
                        print(f"\n   üìà –†–ê–°–ß–ï–¢–´:")
                        print(f"      üíµ –ë–∞–∑–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {base_salary:,.2f} —Ä—É–±.")
                        print(f"      ‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã: {additional:,.2f} —Ä—É–±.")
                        print(f"      üí∞ –û–±—â–∞—è –º–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {total_monthly:,.2f} —Ä—É–±.")
                        print(f"      üéØ –°–†–ï–î–ù–ï–ì–û–î–û–í–ê–Ø –ó–ê–†–ü–õ–ê–¢–ê: {total_annual:,.2f} —Ä—É–±.")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"corrected_salary_analysis_{timestamp}.txt"
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –ó–ê–†–ü–õ–ê–¢\n")
            f.write("=" * 60 + "\n\n")
            f.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–§–∞–π–ª: {file_path}\n")
            f.write("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü—Ä–æ—Ü–µ–Ω—Ç—ã –º–æ–≥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Å—Ç–æ–ª–±—Ü–µ —Å –¥–∞—Ç–æ–π 2019-08-23\n\n")
            
            f.write("–°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–•:\n")
            f.write("-" * 30 + "\n")
            for i, col in enumerate(df.columns):
                f.write(f"{i+1}. {col} (—Ç–∏–ø: {df[col].dtype})\n")
        
        print(f"\nüìÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞—Ä–ø–ª–∞—Ç")
    print("=" * 60)
    analyze_corrected_salaries()
    print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
