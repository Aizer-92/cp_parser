#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Excel —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import pandas as pd
from openpyxl import load_workbook
import json

def analyze_excel_file(file_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É Excel —Ñ–∞–π–ª–∞"""
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {os.path.basename(file_path)}")
    print("=" * 60)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel —Ñ–∞–π–ª
        wb = load_workbook(file_path, data_only=True)
        ws = wb.active
        
        print(f"üìã –õ–∏—Å—Ç: {ws.title}")
        print(f"üìè –†–∞–∑–º–µ—Ä: {ws.max_row} —Å—Ç—Ä–æ–∫ x {ws.max_column} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
        print("\nüîç –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫:")
        for row in range(1, min(11, ws.max_row + 1)):
            row_data = []
            for col in range(1, min(21, ws.max_column + 1)):  # –ü–µ—Ä–≤—ã–µ 20 –∫–æ–ª–æ–Ω–æ–∫
                cell = ws.cell(row=row, column=col)
                value = cell.value
                if value is not None:
                    row_data.append(f"{col}: {str(value)[:30]}")
            if row_data:
                print(f"  –°—Ç—Ä–æ–∫–∞ {row}: {' | '.join(row_data)}")
        
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏
        print("\nüìù –ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:")
        
        # –°—Ç—Ä–æ–∫–∞ 1 - –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers_row1 = []
        for col in range(1, ws.max_column + 1):
            cell = ws.cell(row=1, column=col)
            if cell.value:
                headers_row1.append((col, str(cell.value)))
        
        if headers_row1:
            print(f"  –°—Ç—Ä–æ–∫–∞ 1 (–∑–∞–≥–æ–ª–æ–≤–∫–∏): {headers_row1}")
        
        # –°—Ç—Ä–æ–∫–∞ 2 - –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers_row2 = []
        for col in range(1, ws.max_column + 1):
            cell = ws.cell(row=2, column=col)
            if cell.value:
                headers_row2.append((col, str(cell.value)))
        
        if headers_row2:
            print(f"  –°—Ç—Ä–æ–∫–∞ 2 (–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏): {headers_row2}")
        
        # –°—Ç—Ä–æ–∫–∞ 3 - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers_row3 = []
        for col in range(1, ws.max_column + 1):
            cell = ws.cell(row=3, column=col)
            if cell.value:
                headers_row3.append((col, str(cell.value)))
        
        if headers_row3:
            print(f"  –°—Ç—Ä–æ–∫–∞ 3 (–¥–æ–ø. –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏): {headers_row3}")
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        print("\nüñºÔ∏è  –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
        image_columns = []
        for col in range(1, ws.max_column + 1):
            has_images = False
            for row in range(1, min(20, ws.max_row + 1)):
                if ws.cell(row=row, column=col).value is None:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —ç—Ç–æ–π —è—á–µ–π–∫–µ
                    for image in ws._images:
                        if (hasattr(image, 'anchor') and 
                            hasattr(image.anchor, '_from') and
                            image.anchor._from.row == row - 1 and 
                            image.anchor._from.col == col - 1):
                            has_images = True
                            break
            if has_images:
                image_columns.append(col)
        
        if image_columns:
            print(f"  –ö–æ–ª–æ–Ω–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {image_columns}")
        else:
            print("  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–≤—ã—Ö 20 —Å—Ç—Ä–æ–∫–∞—Ö")
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å —Ü–µ–Ω–∞–º–∏
        print("\nüí∞ –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫:")
        price_columns = []
        for col in range(1, ws.max_column + 1):
            for row in range(1, min(5, ws.max_row + 1)):
                cell = ws.cell(row=row, column=col)
                if cell.value and any(keyword in str(cell.value).lower() for keyword in ['—Ü–µ–Ω–∞', 'price', 'usd', 'rub', '‚ÇΩ', '$']):
                    price_columns.append((col, str(cell.value)))
                    break
        
        if price_columns:
            print(f"  –ö–æ–ª–æ–Ω–∫–∏ —Å —Ü–µ–Ω–∞–º–∏: {price_columns}")
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å —Ç–∏—Ä–∞–∂–∞–º–∏
        print("\nüì¶ –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–æ–Ω–æ–∫ —Å —Ç–∏—Ä–∞–∂–∞–º–∏:")
        quantity_columns = []
        for col in range(1, ws.max_column + 1):
            for row in range(1, min(5, ws.max_row + 1)):
                cell = ws.cell(row=row, column=col)
                if cell.value and any(keyword in str(cell.value).lower() for keyword in ['—Ç–∏—Ä–∞–∂', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'quantity', '—à—Ç', '—à—Ç—É–∫']):
                    quantity_columns.append((col, str(cell.value)))
                    break
        
        if quantity_columns:
            print(f"  –ö–æ–ª–æ–Ω–∫–∏ —Å —Ç–∏—Ä–∞–∂–∞–º–∏: {quantity_columns}")
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        print("\nüöö –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–æ–Ω–æ–∫ —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏:")
        route_columns = []
        for col in range(1, ws.max_column + 1):
            for row in range(1, min(5, ws.max_row + 1)):
                cell = ws.cell(row=row, column=col)
                if cell.value and any(keyword in str(cell.value).lower() for keyword in ['–∂–¥', '–∞–≤–∏–∞', '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä', '–æ–±—Ä–∞–∑–µ—Ü', '–¥–æ—Å—Ç–∞–≤–∫–∞', '–º–∞—Ä—à—Ä—É—Ç']):
                    route_columns.append((col, str(cell.value)))
                    break
        
        if route_columns:
            print(f"  –ö–æ–ª–æ–Ω–∫–∏ —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏: {route_columns}")
        
        return {
            'file_name': os.path.basename(file_path),
            'max_row': ws.max_row,
            'max_column': ws.max_column,
            'headers_row1': headers_row1,
            'headers_row2': headers_row2,
            'headers_row3': headers_row3,
            'image_columns': image_columns,
            'price_columns': price_columns,
            'quantity_columns': quantity_columns,
            'route_columns': route_columns
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    excel_dir = "storage/excel_files"
    
    if not os.path.exists(excel_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {excel_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    excel_files = [f for f in os.listdir(excel_dir) if f.endswith('.xlsx') and not f.startswith('~$')]
    
    if not excel_files:
        print(f"‚ùå Excel —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {excel_dir}")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤: {len(excel_files)}")
    
    analysis_results = []
    
    for excel_file in excel_files:
        file_path = os.path.join(excel_dir, excel_file)
        result = analyze_excel_file(file_path)
        if result:
            analysis_results.append(result)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    with open('excel_analysis.json', 'w', encoding='utf-8') as f:
        json.dump(analysis_results, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ excel_analysis.json")
    
    # –°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º
    print("\nüìä –°–í–û–î–ö–ê –ü–û –í–°–ï–ú –§–ê–ô–õ–ê–ú:")
    print("=" * 60)
    
    for result in analysis_results:
        print(f"\nüìÑ {result['file_name']}")
        print(f"  –†–∞–∑–º–µ—Ä: {result['max_row']} x {result['max_column']}")
        print(f"  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {result['image_columns']}")
        print(f"  –¶–µ–Ω—ã: {len(result['price_columns'])} –∫–æ–ª–æ–Ω–æ–∫")
        print(f"  –¢–∏—Ä–∞–∂–∏: {len(result['quantity_columns'])} –∫–æ–ª–æ–Ω–æ–∫")
        print(f"  –ú–∞—Ä—à—Ä—É—Ç—ã: {len(result['route_columns'])} –∫–æ–ª–æ–Ω–æ–∫")

if __name__ == "__main__":
    main()
