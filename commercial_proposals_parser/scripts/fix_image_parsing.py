#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Ç–æ–≤–∞—Ä–∞–º
"""

import os
import sys
import json
from pathlib import Path
from openpyxl import load_workbook
from openpyxl.drawing.image import Image as OpenpyxlImage
from PIL import Image
import shutil

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.manager_v4 import CommercialProposalsDB
from config import DATABASE_URL

def analyze_excel_images(excel_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel —Ñ–∞–π–ª–µ"""
    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ {excel_path}")
    
    try:
        wb = load_workbook(excel_path, data_only=True)
        images_data = []
        
        for sheet_name in wb.sheetnames:
            ws = wb[sheet_name]
            print(f"  üìä –õ–∏—Å—Ç: {sheet_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –ª–∏—Å—Ç–µ
            for image in ws._images:
                if hasattr(image, 'anchor') and image.anchor:
                    # –ü–æ–ª—É—á–∞–µ–º —è—á–µ–π–∫—É, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    cell_ref = image.anchor._from
                    row = cell_ref.row + 1  # openpyxl –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 0-based –∏–Ω–¥–µ–∫—Å—ã
                    col = cell_ref.col + 1
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞)
                    cell_value = ws.cell(row=row, column=col).value
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                    image_info = {
                        'sheet_name': sheet_name,
                        'row': row,
                        'col': col,
                        'cell_value': str(cell_value) if cell_value else '',
                        'image_name': getattr(image, 'filename', f'image_{row}_{col}'),
                        'width': getattr(image, 'width', 0),
                        'height': getattr(image, 'height', 0)
                    }
                    
                    images_data.append(image_info)
                    print(f"    üñºÔ∏è  –°—Ç—Ä–æ–∫–∞ {row}, –∫–æ–ª–æ–Ω–∫–∞ {col}: '{cell_value}' -> {image_info['image_name']}")
        
        return images_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {excel_path}: {e}")
        return []

def extract_images_from_excel(excel_path, output_dir):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    print(f"üì§ –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ {excel_path}")
    
    try:
        wb = load_workbook(excel_path, data_only=True)
        extracted_images = []
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        os.makedirs(output_dir, exist_ok=True)
        
        for sheet_name in wb.sheetnames:
            ws = wb[sheet_name]
            print(f"  üìä –õ–∏—Å—Ç: {sheet_name}")
            
            for i, image in enumerate(ws._images):
                try:
                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                    image_name = f"{sheet_name}_{i+1}.jpg"
                    image_path = os.path.join(output_dir, image_name)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if hasattr(image, 'ref') and image.ref:
                        # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        shutil.copy2(image.ref.path, image_path)
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è—á–µ–π–∫–µ
                        if hasattr(image, 'anchor') and image.anchor:
                            cell_ref = image.anchor._from
                            row = cell_ref.row + 1
                            col = cell_ref.col + 1
                            cell_value = ws.cell(row=row, column=col).value
                            
                            image_info = {
                                'file_path': image_path,
                                'sheet_name': sheet_name,
                                'row': row,
                                'col': col,
                                'cell_value': str(cell_value) if cell_value else '',
                                'product_name': str(cell_value) if cell_value else f'Unknown_{i+1}'
                            }
                            
                            extracted_images.append(image_info)
                            print(f"    ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ: {image_name} -> '{cell_value}'")
                        else:
                            print(f"    ‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —è—á–µ–π–∫–µ: {image_name}")
                            
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {e}")
        
        return extracted_images
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ {excel_path}: {e}")
        return []

def clear_existing_images():
    """–û—á–∏—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    db = CommercialProposalsDB(DATABASE_URL.replace('.db', '_v4.db'))
    
    with db.get_session() as session:
        from database.models_v4 import ProductImage
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
        session.query(ProductImage).delete()
        session.commit()
        print("‚úÖ –û—á–∏—â–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –≤ –ë–î")
    
    # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    images_dir = "storage/images/products_correct"
    if os.path.exists(images_dir):
        shutil.rmtree(images_dir)
        print(f"‚úÖ –û—á–∏—â–µ–Ω–∞ –ø–∞–ø–∫–∞ {images_dir}")
    
    os.makedirs(images_dir, exist_ok=True)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞ {images_dir}")

def map_images_to_products(extracted_images):
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º...")
    
    db = CommercialProposalsDB(DATABASE_URL.replace('.db', '_v4.db'))
    
    with db.get_session() as session:
        from database.models_v4 import Product, SheetMetadata, ProductImage
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        products = session.query(Product).all()
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: {len(products)}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        products_by_name = {}
        for product in products:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
            normalized_name = product.name.strip().lower()
            if normalized_name not in products_by_name:
                products_by_name[normalized_name] = []
            products_by_name[normalized_name].append(product)
        
        mapped_count = 0
        
        for image_info in extracted_images:
            product_name = image_info['product_name'].strip()
            if not product_name or product_name == 'None':
                continue
                
            # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            normalized_name = product_name.lower()
            matching_products = products_by_name.get(normalized_name, [])
            
            if not matching_products:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
                for norm_name, prods in products_by_name.items():
                    if normalized_name in norm_name or norm_name in normalized_name:
                        matching_products = prods
                        break
            
            if matching_products:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–≤–∞—Ä
                product = matching_products[0]
                
                # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É
                new_image_name = f"product_{product.id}_{mapped_count}.jpg"
                new_image_path = f"storage/images/products_correct/{new_image_name}"
                
                try:
                    shutil.copy2(image_info['file_path'], new_image_path)
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
                    product_image = ProductImage(
                        product_id=product.id,
                        local_path=new_image_path,
                        image_type='main' if mapped_count == 0 else 'additional'
                    )
                    session.add(product_image)
                    mapped_count += 1
                    
                    print(f"  ‚úÖ {product_name} -> {product.name} #{product.id} -> {new_image_name}")
                    
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            else:
                print(f"  ‚ö†Ô∏è  –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: '{product_name}'")
        
        session.commit()
        print(f"‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {mapped_count}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    clear_existing_images()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ Excel —Ñ–∞–π–ª—ã
    excel_files = [
        "storage/excel_files/original_sheet.xlsx",
        "storage/excel_files/–í—Ç–æ—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞_1757933430.xlsx", 
        "storage/excel_files/–ú–µ—Ä—á –¥–ª—è Sense_1757934153.xlsx"
    ]
    
    all_extracted_images = []
    
    for excel_file in excel_files:
        if os.path.exists(excel_file):
            print(f"\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {excel_file}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            images_data = analyze_excel_images(excel_file)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            extracted_images = extract_images_from_excel(excel_file, "storage/images/temp_extraction")
            all_extracted_images.extend(extracted_images)
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_file}")
    
    print(f"\nüìä –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(all_extracted_images)}")
    
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º
    map_images_to_products(all_extracted_images)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    if os.path.exists("storage/images/temp_extraction"):
        shutil.rmtree("storage/images/temp_extraction")
        print("üßπ –û—á–∏—â–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞")
    
    print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
