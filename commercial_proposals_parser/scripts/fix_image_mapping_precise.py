#!/usr/bin/env python3
"""
–¢–æ—á–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–æ–≤–∞—Ä–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä—è–¥–∫–∞ –≤ Excel
"""

import os
import sys
import zipfile
import xml.etree.ElementTree as ET
from openpyxl import load_workbook
import shutil
from PIL import Image
import io

sys.path.append('.')
from database.manager_v4 import CommercialProposalsDB
from config import DATABASE_URL_V4
from sqlalchemy import text

def get_excel_products_in_order(excel_file_path):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Excel –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"""
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –≤ Excel —Ñ–∞–π–ª–µ: {excel_file_path}")
    
    workbook = load_workbook(excel_file_path, data_only=True)
    sheet = workbook.active
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ–ª–æ–Ω–∫–µ C, –ø—Ä–æ–ø—É—Å–∫–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏
    products = []
    for row_num in range(4, sheet.max_row + 1):  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å—Ç—Ä–æ–∫–∏ 4 (–ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä)
        cell_c = sheet.cell(row=row_num, column=3)  # –ö–æ–ª–æ–Ω–∫–∞ C - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        if cell_c.value and isinstance(cell_c.value, str) and cell_c.value.strip():
            product_name = cell_c.value.strip()
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if product_name and product_name != '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ':
                products.append({
                    'row': row_num,
                    'name': product_name,
                    'excel_order': len(products) + 1
                })
    
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Excel: {len(products)}")
    for i, product in enumerate(products, 1):
        print(f"  {i}. –°—Ç—Ä–æ–∫–∞ {product['row']}: {product['name']}")
    
    return products

def get_db_products_merch_sense():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ '–ú–µ—Ä—á –¥–ª—è Sense' –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"""
    
    db = CommercialProposalsDB(DATABASE_URL_V4)
    products_with_details = db.get_all_products_with_details(limit=50)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã "–ú–µ—Ä—á –¥–ª—è Sense" (ID >= 29)
    merch_sense_products = []
    for product, price_offers, images in products_with_details:
        if product.id >= 29:
            merch_sense_products.append({
                'id': product.id,
                'name': product.name,
                'db_order': len(merch_sense_products) + 1
            })
    
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ '–ú–µ—Ä—á –¥–ª—è Sense' –≤ –ë–î: {len(merch_sense_products)}")
    for i, product in enumerate(merch_sense_products, 1):
        print(f"  {i}. ID {product['id']}: {product['name']}")
    
    return merch_sense_products

def extract_images_from_excel(excel_file_path, output_dir):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    
    print(f"üñºÔ∏è  –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Excel —Ñ–∞–π–ª–∞...")
    
    extracted_images = []
    try:
        with zipfile.ZipFile(excel_file_path, 'r') as z:
            for name in z.namelist():
                if name.startswith('xl/media/image'):
                    image_data = z.read(name)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    try:
                        img = Image.open(io.BytesIO(image_data))
                        img.verify()
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        temp_name = os.path.basename(name)
                        temp_path = os.path.join(output_dir, temp_name)
                        with open(temp_path, 'wb') as f:
                            f.write(image_data)
                        
                        extracted_images.append({
                            'original_name': name,
                            'temp_path': temp_path,
                            'format': img.format
                        })
                    except Exception as e:
                        print(f"  ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {name}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        return []
    
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(extracted_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    return extracted_images

def create_precise_mapping(excel_products, db_products, extracted_images, output_dir):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–æ–≤–∞—Ä–∞–º"""
    
    print(f"\nüîó –°–æ–∑–¥–∞–µ–º —Ç–æ—á–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ –ø–æ—Ä—è–¥–∫—É
    mappings = []
    
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º –ø–æ –ø–æ—Ä—è–¥–∫—É
    for i, excel_product in enumerate(excel_products):
        if i < len(extracted_images) and i < len(db_products):
            img_info = extracted_images[i]
            db_product = db_products[i]
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            new_image_name = f"product_{db_product['id']}_main.jpg"
            new_image_path = os.path.join(output_dir, new_image_name)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            shutil.copy2(img_info['temp_path'], new_image_path)
            
            mappings.append({
                'excel_product': excel_product['name'],
                'db_product_id': db_product['id'],
                'db_product_name': db_product['name'],
                'image_path': new_image_path,
                'relative_path': f"storage/images/products_parsed/{new_image_name}"
            })
            
            print(f"  ‚úÖ {excel_product['name']} -> {db_product['name']} (ID: {db_product['id']}) -> {new_image_name}")
    
    return mappings

def fix_image_mapping_precise():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    db = CommercialProposalsDB(DATABASE_URL_V4)
    
    # 1. –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ "–ú–µ—Ä—á –¥–ª—è Sense"
    print("üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ '–ú–µ—Ä—á –¥–ª—è Sense'...")
    session = db.get_session()
    try:
        session.execute(text('DELETE FROM product_images WHERE product_id >= 29'))
        session.commit()
        print("‚úÖ –û—á–∏—â–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ '–ú–µ—Ä—á –¥–ª—è Sense'")
    finally:
        session.close()
    
    # 2. –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    images_output_dir = "storage/images/products_parsed"
    if os.path.exists(images_output_dir):
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ "–ú–µ—Ä—á –¥–ª—è Sense"
        for file in os.listdir(images_output_dir):
            if file.startswith('product_') and any(name in file for name in ['–•—É–¥–∏', '–®–ê–ü–ö–ê', '–®–û–ü–ü–ï–†', '–ë—Ä–µ–ª–æ–∫–∏', '–î–£–¢–´–ô', '–ó–æ–Ω—Ç', '–ü–∏—Å—å–º–µ–Ω–Ω—ã–π', '–¢–µ—Ä–º–æ–∫—Ä—É–∂–∫–∞', '–°—É–º–∫–∞', '–®–æ–ø–ø–µ—Ä']):
                os.remove(os.path.join(images_output_dir, file))
        print(f"‚úÖ –û—á–∏—â–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ '–ú–µ—Ä—á –¥–ª—è Sense' –∏–∑ –ø–∞–ø–∫–∏")
    
    # 3. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ Excel –∏ –ë–î
    excel_file = "storage/excel_files/–ú–µ—Ä—á –¥–ª—è Sense_1758096973.xlsx"
    if not os.path.exists(excel_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_file}")
        return
    
    excel_products = get_excel_products_in_order(excel_file)
    db_products = get_db_products_merch_sense()
    
    if not excel_products or not db_products:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö")
        return
    
    # 4. –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    extracted_images = extract_images_from_excel(excel_file, images_output_dir)
    
    if not extracted_images:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    # 5. –°–æ–∑–¥–∞–µ–º —Ç–æ—á–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É
    mappings = create_precise_mapping(excel_products, db_products, extracted_images, images_output_dir)
    
    # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    mapped_count = 0
    for mapping in mappings:
        try:
            db.create_product_image(
                product_id=mapping['db_product_id'],
                image_path=mapping['relative_path'],
                image_type='main'
            )
            mapped_count += 1
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {mapping['db_product_name']}: {e}")
    
    print(f"\n‚úÖ –¢–æ—á–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–∏–≤—è–∑–∞–Ω–æ {mapped_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
    
    # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    products_with_details = db.get_all_products_with_details(limit=50)
    merch_sense_products = [(p, po, im) for p, po, im in products_with_details if p.id >= 29]
    
    for product, price_offers, images in merch_sense_products:
        print(f"  {product.name} (ID: {product.id}) - {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

if __name__ == "__main__":
    fix_image_mapping_precise()
