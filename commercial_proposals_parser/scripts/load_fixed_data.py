#!/usr/bin/env python3
"""
–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏—Ä–∞–∂–∞–º–∏
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import json
import shutil
from database.manager_v4 import CommercialProposalsDB
from config import DATABASE_URL

def clear_database():
    """–û—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    db = CommercialProposalsDB(DATABASE_URL.replace('.db', '_v4.db'))
    
    with db.get_session() as session:
        from database.models_v4 import Product, PriceOffer, ProductImage, SheetMetadata
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        session.query(ProductImage).delete()
        session.query(PriceOffer).delete()
        session.query(Product).delete()
        session.query(SheetMetadata).delete()
        session.commit()
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")

def copy_existing_images():
    """–ö–æ–ø–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    print("üñºÔ∏è  –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    images_dir = "storage/images/products_fixed"
    os.makedirs(images_dir, exist_ok=True)
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞–ø–æ–∫
    source_dirs = [
        "storage/images/products",
        "storage/images/products_original_sheet",
        "storage/images/products_–í—Ç–æ—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞_1757933430"
    ]
    
    copied_count = 0
    for source_dir in source_dirs:
        if os.path.exists(source_dir):
            for filename in os.listdir(source_dir):
                if filename.endswith('.jpg'):
                    source_path = os.path.join(source_dir, filename)
                    dest_path = os.path.join(images_dir, filename)
                    
                    try:
                        shutil.copy2(source_path, dest_path)
                        copied_count += 1
                        print(f"  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {filename}")
                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {filename}: {e}")
    
    print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {copied_count}")

def load_products():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    print("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    with open('correct_parsed_products.json', 'r', encoding='utf-8') as f:
        original_products = json.load(f)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ú–µ—Ä—á –¥–ª—è Sense
    with open('merch_sense_products.json', 'r', encoding='utf-8') as f:
        merch_products = json.load(f)
    
    # –î–æ–±–∞–≤–ª—è–µ–º source_file –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ú–µ—Ä—á –¥–ª—è Sense
    for product in merch_products:
        product['source_file'] = '–ú–µ—Ä—á –¥–ª—è Sense_1757934153.xlsx'
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫–∏ –∏–∑ –í—Ç–æ—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞
    with open('parsed_products.json', 'r', encoding='utf-8') as f:
        all_products = json.load(f)
    
    daily_planner_products = [p for p in all_products if '–í—Ç–æ—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞' in p['source_file']]
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    all_products = original_products + daily_planner_products + merch_products
    
    print(f"  - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è): {len(original_products)} —Ç–æ–≤–∞—Ä–æ–≤")
    print(f"  - –í—Ç–æ—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫–∏): {len(daily_planner_products)} —Ç–æ–≤–∞—Ä–æ–≤")
    print(f"  - –ú–µ—Ä—á –¥–ª—è Sense: {len(merch_products)} —Ç–æ–≤–∞—Ä–æ–≤")
    print(f"  - –í—Å–µ–≥–æ: {len(all_products)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    db = CommercialProposalsDB(DATABASE_URL.replace('.db', '_v4.db'))
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
    sheet_metadata = {}
    
    for product_data in all_products:
        source_file = product_data['source_file']
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if source_file not in sheet_metadata:
            sheet_meta = db.create_sheet_metadata(
                sheet_url=f"https://docs.google.com/spreadsheets/d/{source_file}",
                sheet_title=source_file.replace('.xlsx', '')
            )
            sheet_metadata[source_file] = sheet_meta
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
        product = db.create_product(
            name=product_data['name'],
            description=product_data['characteristics'],
            custom_design=product_data['custom_design'],
            sheet_id=sheet_metadata[source_file]
        )
        
        print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: {product.name} (ID: {product.id})")
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        for price_offer_data in product_data['price_offers']:
            db.create_price_offer(
                product_id=product.id,
                route_name=price_offer_data['route_name'],
                quantity=price_offer_data['quantity'],
                price_usd=price_offer_data['price_usd'],
                price_rub=price_offer_data['price_rub'],
                delivery_time=price_offer_data['delivery_time'],
                is_sample=price_offer_data['is_sample'],
                sample_price=price_offer_data.get('sample_price'),
                sample_time=price_offer_data.get('delivery_time') if price_offer_data['is_sample'] else None,
                sample_price_currency='RUB' if price_offer_data['is_sample'] else None
            )
        
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(all_products)}")

def add_images():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º"""
    print("üñºÔ∏è  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    db = CommercialProposalsDB(DATABASE_URL.replace('.db', '_v4.db'))
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    with db.get_session() as session:
        from database.models_v4 import Product
        
        products = session.query(Product).all()
        
        for product in products:
            # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞
            image_files = []
            
            # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ products_fixed
            image_dir = "storage/images/products_fixed"
            if os.path.exists(image_dir):
                for filename in os.listdir(image_dir):
                    if filename.endswith('.jpg'):
                        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
                        if any(keyword in filename.lower() for keyword in product.name.lower().split()):
                            full_path = f"storage/images/products_fixed/{filename}"
                            image_files.append(full_path)
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
            if not image_files and os.path.exists(image_dir):
                available_images = [f for f in os.listdir(image_dir) if f.endswith('.jpg')]
                if available_images:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    for i, filename in enumerate(available_images[:2]):
                        full_path = f"storage/images/products_fixed/{filename}"
                        image_files.append(full_path)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–∑—É
            for i, image_path in enumerate(image_files[:2]):  # –ú–∞–∫—Å–∏–º—É–º 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_type = 'main' if i == 0 else 'additional'
                db.create_product_image(
                    product_id=product.id,
                    image_path=image_path,
                    image_type=image_type
                )
                print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {product.name}: {os.path.basename(image_path)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    clear_database()
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    copy_existing_images()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    load_products()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    add_images()
    
    print("\n‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()
