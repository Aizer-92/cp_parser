#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Excel —Ñ–∞–π–ª–æ–≤
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import pandas as pd
from openpyxl import load_workbook
from datetime import datetime
import json
from typing import List, Dict, Any, Optional, Tuple
from PIL import Image
import io

class FixedExcelParser:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Excel —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        self.image_columns = []
        self.price_columns = {}
        self.route_columns = {}
        self.quantity_column = None
        self.product_name_column = None
        self.characteristics_column = None
        self.custom_design_column = None
        
    def analyze_structure(self, file_path: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É Excel —Ñ–∞–π–ª–∞"""
        print(f"üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {os.path.basename(file_path)}")
        
        wb = load_workbook(file_path, data_only=True)
        ws = wb.active
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = {}
        for row in range(1, min(4, ws.max_row + 1)):
            row_headers = []
            for col in range(1, ws.max_column + 1):
                cell = ws.cell(row=row, column=col)
                if cell.value:
                    row_headers.append((col, str(cell.value).strip()))
            headers[f'row_{row}'] = row_headers
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
        structure = {
            'file_name': os.path.basename(file_path),
            'max_row': ws.max_row,
            'max_column': ws.max_column,
            'headers': headers,
            'image_columns': [],
            'price_columns': {},
            'route_columns': {},
            'quantity_column': None,
            'product_name_column': None,
            'characteristics_column': None,
            'custom_design_column': None
        }
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        for col in range(1, ws.max_column + 1):
            for row in range(1, min(10, ws.max_row + 1)):
                cell = ws.cell(row=row, column=col)
                if cell.value and any(keyword in str(cell.value).lower() for keyword in ['—Ñ–æ—Ç–æ', 'photo', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ']):
                    structure['image_columns'].append(col)
                    break
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
        for col in range(1, ws.max_column + 1):
            for row in range(1, min(4, ws.max_row + 1)):
                cell = ws.cell(row=row, column=col)
                if cell.value and any(keyword in str(cell.value).lower() for keyword in ['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '—Ç–æ–≤–∞—Ä', 'product', 'name']):
                    structure['product_name_column'] = col
                    break
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        for col in range(1, ws.max_column + 1):
            for row in range(1, min(4, ws.max_row + 1)):
                cell = ws.cell(row=row, column=col)
                if cell.value and any(keyword in str(cell.value).lower() for keyword in ['—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', '–æ–ø–∏—Å–∞–Ω–∏–µ', '–º–∞—Ç–µ—Ä–∏–∞–ª', 'characteristics', 'description']):
                    structure['characteristics_column'] = col
                    break
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –∫–∞—Å—Ç–æ–º–æ–º
        for col in range(1, ws.max_column + 1):
            for row in range(1, min(4, ws.max_row + 1)):
                cell = ws.cell(row=row, column=col)
                if cell.value and any(keyword in str(cell.value).lower() for keyword in ['–∫–∞—Å—Ç–æ–º', '–¥–∏–∑–∞–π–Ω', 'custom', 'design']):
                    structure['custom_design_column'] = col
                    break
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Ç–∏—Ä–∞–∂–æ–º
        for col in range(1, ws.max_column + 1):
            for row in range(1, min(4, ws.max_row + 1)):
                cell = ws.cell(row=row, column=col)
                if cell.value and any(keyword in str(cell.value).lower() for keyword in ['—Ç–∏—Ä–∞–∂', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'quantity', '—à—Ç', '—à—Ç—É–∫']):
                    structure['quantity_column'] = col
                    break
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        for col in range(1, ws.max_column + 1):
            for row in range(1, min(4, ws.max_row + 1)):
                cell = ws.cell(row=row, column=col)
                if cell.value:
                    cell_value = str(cell.value).lower()
                    if '–∂–¥' in cell_value or '–∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω' in cell_value:
                        structure['route_columns']['–ñ–î'] = col
                    elif '–∞–≤–∏–∞' in cell_value or '—Å–∞–º–æ–ª–µ—Ç' in cell_value:
                        structure['route_columns']['–ê–í–ò–ê'] = col
                    elif '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä' in cell_value:
                        structure['route_columns']['–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä'] = col
                    elif '–æ–±—Ä–∞–∑–µ—Ü' in cell_value:
                        structure['route_columns']['–û–±—Ä–∞–∑–µ—Ü'] = col
                    elif '–¥–æ—Å—Ç–∞–≤–∫–∞' in cell_value and '–∂–¥' in cell_value:
                        structure['route_columns']['–ñ–î'] = col
                    elif '–¥–æ—Å—Ç–∞–≤–∫–∞' in cell_value and '–∞–≤–∏–∞' in cell_value:
                        structure['route_columns']['–ê–í–ò–ê'] = col
        
        # –ò—â–µ–º —Ü–µ–Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        for route, route_col in structure['route_columns'].items():
            structure['price_columns'][route] = {}
            
            # –ò—â–µ–º USD —Ü–µ–Ω—ã (–æ–±—ã—á–Ω–æ –≤ —Ç–æ–π –∂–µ –∫–æ–ª–æ–Ω–∫–µ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–π)
            for col in range(route_col, min(route_col + 3, ws.max_column + 1)):
                for row in range(1, min(4, ws.max_row + 1)):
                    cell = ws.cell(row=row, column=col)
                    if cell.value and ('$' in str(cell.value) or 'usd' in str(cell.value).lower()):
                        structure['price_columns'][route]['usd'] = col
                        break
            
            # –ò—â–µ–º RUB —Ü–µ–Ω—ã
            for col in range(route_col, min(route_col + 3, ws.max_column + 1)):
                for row in range(1, min(4, ws.max_row + 1)):
                    cell = ws.cell(row=row, column=col)
                    if cell.value and ('‚ÇΩ' in str(cell.value) or 'rub' in str(cell.value).lower() or '—Ä—É–±' in str(cell.value).lower()):
                        structure['price_columns'][route]['rub'] = col
                        break
            
            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å–æ —Å—Ä–æ–∫–∞–º–∏
            for col in range(route_col, min(route_col + 3, ws.max_column + 1)):
                for row in range(1, min(4, ws.max_row + 1)):
                    cell = ws.cell(row=row, column=col)
                    if cell.value and any(keyword in str(cell.value).lower() for keyword in ['—Å—Ä–æ–∫', '–¥–Ω–µ–π', '–∫.–¥.', '–¥–Ω']):
                        structure['price_columns'][route]['delivery_time'] = col
                        break
        
        print(f"  ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: {len(structure['route_columns'])} –º–∞—Ä—à—Ä—É—Ç–æ–≤, {len(structure['image_columns'])} –∫–æ–ª–æ–Ω–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        return structure
    
    def parse_products(self, file_path: str, structure: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        print(f"üì¶ –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑: {os.path.basename(file_path)}")
        
        wb = load_workbook(file_path, data_only=True)
        ws = wb.active
        
        products = []
        current_product = None
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å 4-–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
        for row in range(4, ws.max_row + 1):
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            name_cell = ws.cell(row=row, column=structure['product_name_column'])
            product_name = name_cell.value
            
            if not product_name or str(product_name).strip() == '':
                # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
                if current_product:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫ —Ç–µ–∫—É—â–µ–º—É —Ç–æ–≤–∞—Ä—É
                    self._add_price_offer_to_product(ws, row, structure, current_product)
                continue
            
            # –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            if current_product:
                products.append(current_product)
            
            current_product = {
                'name': str(product_name).strip(),
                'characteristics': '',
                'custom_design': '',
                'price_offers': [],
                'images': []
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            if structure['characteristics_column']:
                char_cell = ws.cell(row=row, column=structure['characteristics_column'])
                if char_cell.value:
                    current_product['characteristics'] = str(char_cell.value).strip()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º
            if structure['custom_design_column']:
                custom_cell = ws.cell(row=row, column=structure['custom_design_column'])
                if custom_cell.value:
                    current_product['custom_design'] = str(custom_cell.value).strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            self._add_price_offer_to_product(ws, row, structure, current_product)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä
        if current_product:
            products.append(current_product)
        
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        return products
    
    def _add_price_offer_to_product(self, ws, row: int, structure: Dict[str, Any], product: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ü–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫ —Ç–æ–≤–∞—Ä—É"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏—Ä–∞–∂ –∏–∑ –ü–†–ê–í–ò–õ–¨–ù–û–ô –∫–æ–ª–æ–Ω–∫–∏ (–Ω–µ –∏–∑ –æ–±—Ä–∞–∑—Ü–∞!)
        quantity = None
        if structure['quantity_column']:
            qty_cell = ws.cell(row=row, column=structure['quantity_column'])
            if qty_cell.value:
                try:
                    quantity_str = str(qty_cell.value).replace(' ', '').replace(',', '')
                    quantity = int(float(quantity_str))
                except (ValueError, TypeError):
                    quantity = None
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        for route_name, route_col in structure['route_columns'].items():
            price_offer = {
                'route_name': route_name,
                'quantity': quantity,
                'price_usd': None,
                'price_rub': None,
                'delivery_time': None,
                'is_sample': route_name == '–û–±—Ä–∞–∑–µ—Ü',
                'sample_price': None
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
            if route_name in structure['price_columns']:
                route_prices = structure['price_columns'][route_name]
                
                # USD —Ü–µ–Ω–∞
                if 'usd' in route_prices:
                    usd_cell = ws.cell(row=row, column=route_prices['usd'])
                    if usd_cell.value:
                        try:
                            price_offer['price_usd'] = float(usd_cell.value)
                        except (ValueError, TypeError):
                            pass
                
                # RUB —Ü–µ–Ω–∞
                if 'rub' in route_prices:
                    rub_cell = ws.cell(row=row, column=route_prices['rub'])
                    if rub_cell.value:
                        try:
                            price_offer['price_rub'] = float(rub_cell.value)
                        except (ValueError, TypeError):
                            pass
                
                # –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏
                if 'delivery_time' in route_prices:
                    time_cell = ws.cell(row=row, column=route_prices['delivery_time'])
                    if time_cell.value:
                        price_offer['delivery_time'] = str(time_cell.value).strip()
            
            # –î–ª—è –æ–±—Ä–∞–∑—Ü–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º RUB —Ü–µ–Ω—É –∫–∞–∫ sample_price
            if price_offer['is_sample'] and price_offer['price_rub']:
                price_offer['sample_price'] = price_offer['price_rub']
                price_offer['price_rub'] = None
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–µ–Ω–∞
            if price_offer['price_usd'] or price_offer['price_rub'] or price_offer['sample_price']:
                product['price_offers'].append(price_offer)
    
    def extract_images(self, file_path: str, structure: Dict[str, Any], output_dir: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Excel —Ñ–∞–π–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º"""
        print(f"üñºÔ∏è  –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑: {os.path.basename(file_path)}")
        
        wb = load_workbook(file_path, data_only=True)
        ws = wb.active
        
        os.makedirs(output_dir, exist_ok=True)
        image_files = []
        
        for image in ws._images:
            if hasattr(image, 'anchor') and hasattr(image.anchor, '_from'):
                row = image.anchor._from.row + 1  # openpyxl –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 0-based –∏–Ω–¥–µ–∫—Å—ã
                col = image.anchor._from.col + 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
                if col in structure['image_columns']:
                    filename = f"product_row_{row}_col_{col}_{len(image_files)}.jpg"
                    filepath = os.path.join(output_dir, filename)
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        image_data = image.ref.read()
                        
                        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é PIL
                        img = Image.open(io.BytesIO(image_data))
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if img.mode in ('RGBA', 'LA', 'P'):
                            img = img.convert('RGB')
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JPEG
                        img.save(filepath, 'JPEG', quality=95)
                        
                        image_files.append(filepath)
                        print(f"  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename} (—Å—Ç—Ä–æ–∫–∞ {row}, –∫–æ–ª–æ–Ω–∫–∞ {col})")
                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")
        
        print(f"  ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
        return image_files

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = FixedExcelParser()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ Excel —Ñ–∞–π–ª—ã
    excel_dir = "storage/excel_files"
    excel_files = [f for f in os.listdir(excel_dir) if f.endswith('.xlsx') and not f.startswith('~$')]
    
    all_products = []
    
    for excel_file in excel_files:
        file_path = os.path.join(excel_dir, excel_file)
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            structure = parser.analyze_structure(file_path)
            
            # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã
            products = parser.parse_products(file_path, structure)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_dir = f"storage/images/products_{os.path.splitext(excel_file)[0]}"
            images = parser.extract_images(file_path, structure, image_dir)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            for product in products:
                product['source_file'] = excel_file
                product['structure'] = structure
            
            all_products.extend(products)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {excel_file}: {e}")
            continue
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('fixed_parsed_products.json', 'w', encoding='utf-8') as f:
        json.dump(all_products, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(all_products)}")
    print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ fixed_parsed_products.json")

if __name__ == "__main__":
    main()
