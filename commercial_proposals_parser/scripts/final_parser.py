#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Excel —Ñ–∞–π–ª–æ–≤ —Å —Ç–æ—á–Ω—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import json
import pandas as pd
import openpyxl
from pathlib import Path
from typing import List, Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from database.manager import CommercialProposalsDB
import config

def parse_excel_final(excel_path: str) -> List[Dict[str, Any]]:
    """
    –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞ —Å —Ç–æ—á–Ω—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
    """
    print(f"üîÑ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞: {excel_path}")
    
    # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª —Å openpyxl –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    wb = openpyxl.load_workbook(excel_path)
    ws = wb.active
    
    print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {ws.max_row} —Å—Ç—Ä–æ–∫ x {ws.max_column} –∫–æ–ª–æ–Ω–æ–∫")
    
    products = []
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º, –Ω–∞—á–∏–Ω–∞—è —Å 4-–π (–≥–¥–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤)
    for row in range(4, ws.max_row + 1):
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∫–æ–ª–æ–Ω–∫–∞ B)
        product_name = ws.cell(row=row, column=2).value
        if not product_name or not str(product_name).strip():
            continue
        
        product_name = str(product_name).strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        if product_name in ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', '–ö–∞—Å—Ç–æ–º']:
            continue
        
        print(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä: {product_name}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        characteristics = ws.cell(row=row, column=3).value or ""
        custom_design = ws.cell(row=row, column=4).value or ""
        quantity = ws.cell(row=row, column=5).value
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏—Ä–∞–∂
        if quantity:
            try:
                if isinstance(quantity, str):
                    quantity = int(quantity.replace(' ', '').replace(',', ''))
                else:
                    quantity = int(quantity)
            except:
                quantity = None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∏–¥–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏
        
        # –ñ–î –¥–æ—Å—Ç–∞–≤–∫–∞ (–∫–æ–ª–æ–Ω–∫–∏ 6-8)
        jd_price_usd = ws.cell(row=row, column=6).value
        jd_price_rub = ws.cell(row=row, column=7).value
        jd_delivery_time = ws.cell(row=row, column=8).value
        
        # –ê–í–ò–ê –¥–æ—Å—Ç–∞–≤–∫–∞ (–∫–æ–ª–æ–Ω–∫–∏ 9-11)
        avia_price_usd = ws.cell(row=row, column=9).value
        avia_price_rub = ws.cell(row=row, column=10).value
        avia_delivery_time = ws.cell(row=row, column=11).value
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–æ—Å—Ç–∞–≤–∫–∞ (–∫–æ–ª–æ–Ω–∫–∏ 12-14)
        container_price_usd = ws.cell(row=row, column=12).value
        container_price_rub = ws.cell(row=row, column=13).value
        container_delivery_time = ws.cell(row=row, column=14).value
        
        # –û–±—Ä–∞–∑–µ—Ü (–∫–æ–ª–æ–Ω–∫–∏ 15-16)
        sample_price = ws.cell(row=row, column=15).value
        sample_time = ws.cell(row=row, column=16).value
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        def safe_float(value):
            if value is None:
                return None
            try:
                return float(value)
            except:
                return None
        
        def safe_str(value):
            if value is None:
                return None
            return str(value).strip()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω—ã
        
        # –ñ–î –¥–æ—Å—Ç–∞–≤–∫–∞
        if jd_price_usd is not None:
            product_data = {
                'name': product_name,
                'description': str(characteristics).strip(),
                'custom_design': str(custom_design).strip(),
                'quantity': quantity,
                'delivery_type': '–ñ–î',
                'price_usd': safe_float(jd_price_usd),
                'price_rub': safe_float(jd_price_rub),
                'delivery_time': safe_str(jd_delivery_time),
                'sample_price': safe_float(sample_price),
                'sample_time': safe_str(sample_time),
                'row_number': row,
                'variant': '–ñ–î'
            }
            products.append(product_data)
            print(f"  ‚úÖ –ñ–î: ${product_data['price_usd']} / {product_data['price_rub']} —Ä—É–± / {product_data['delivery_time']} –¥–Ω–µ–π")
        
        # –ê–í–ò–ê –¥–æ—Å—Ç–∞–≤–∫–∞
        if avia_price_usd is not None:
            product_data = {
                'name': product_name,
                'description': str(characteristics).strip(),
                'custom_design': str(custom_design).strip(),
                'quantity': quantity,
                'delivery_type': '–ê–í–ò–ê',
                'price_usd': safe_float(avia_price_usd),
                'price_rub': safe_float(avia_price_rub),
                'delivery_time': safe_str(avia_delivery_time),
                'sample_price': safe_float(sample_price),
                'sample_time': safe_str(sample_time),
                'row_number': row,
                'variant': '–ê–í–ò–ê'
            }
            products.append(product_data)
            print(f"  ‚úÖ –ê–í–ò–ê: ${product_data['price_usd']} / {product_data['price_rub']} —Ä—É–± / {product_data['delivery_time']} –¥–Ω–µ–π")
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–æ—Å—Ç–∞–≤–∫–∞
        if container_price_usd is not None:
            product_data = {
                'name': product_name,
                'description': str(characteristics).strip(),
                'custom_design': str(custom_design).strip(),
                'quantity': quantity,
                'delivery_type': '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä',
                'price_usd': safe_float(container_price_usd),
                'price_rub': safe_float(container_price_rub),
                'delivery_time': safe_str(container_delivery_time),
                'sample_price': safe_float(sample_price),
                'sample_time': safe_str(sample_time),
                'row_number': row,
                'variant': '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä'
            }
            products.append(product_data)
            print(f"  ‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: ${product_data['price_usd']} / {product_data['price_rub']} —Ä—É–± / {product_data['delivery_time']} –¥–Ω–µ–π")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        if not any([jd_price_usd, avia_price_usd, container_price_usd]):
            product_data = {
                'name': product_name,
                'description': str(characteristics).strip(),
                'custom_design': str(custom_design).strip(),
                'quantity': quantity,
                'delivery_type': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è',
                'price_usd': None,
                'price_rub': None,
                'delivery_time': None,
                'sample_price': safe_float(sample_price),
                'sample_time': safe_str(sample_time),
                'row_number': row,
                'variant': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'
            }
            products.append(product_data)
            print(f"  ‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è: –±–µ–∑ —Ü–µ–Ω")
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(products)}")
    return products

def save_final_products_to_db(products: List[Dict[str, Any]], sheet_url: str, sheet_title: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(products)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    db = CommercialProposalsDB(config.DATABASE_URL)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç–∞–±–ª–∏—Ü–µ
        sheet_id = 'final_sheet'
        sheet = db.add_sheet_metadata(sheet_url, sheet_title, sheet_id)
        print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å —Ç–∞–±–ª–∏—Ü—ã: {sheet.id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã
        for product_data in products:
            db_product_data = {
                'name': f"{product_data['name']} ({product_data['delivery_type']})",
                'description': product_data['description'],
                'characteristics': {
                    'custom_design': product_data['custom_design'],
                    'delivery_type': product_data['delivery_type'],
                    'delivery_time': product_data['delivery_time'],
                    'sample_price': product_data['sample_price'],
                    'sample_time': product_data['sample_time'],
                    'row_number': product_data['row_number'],
                    'variant': product_data['variant']
                },
                'price_usd': product_data['price_usd'],
                'price_rub': product_data['price_rub'],
                'quantity': product_data['quantity'],
                'delivery_method': product_data['delivery_type'],
                'delivery_time': product_data['delivery_time'],
                'custom_design': product_data['custom_design'],
                'sample_price': product_data['sample_price'],
                'sample_time': product_data['sample_time'],
                'row_number': product_data['row_number']
            }
            
            product = db.add_product(sheet.id, db_product_data)
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {product.name}")
        
        print(f"‚úÖ –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
    excel_path = project_root / 'storage' / 'excel_files' / 'downloaded_sheet_1757491580.xlsx'
    
    if not excel_path.exists():
        print(f"‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_path}")
        return 1
    
    try:
        print(f"üîÑ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞: {excel_path}")
        
        # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã
        products = parse_excel_final(str(excel_path))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        sheet_url = 'https://docs.google.com/spreadsheets/d/1mxn4kARVecduFhscX1UMOxoG-d0tlfP676F5jhw_Qw/edit'
        sheet_title = 'VTB Test Sheet - Final'
        save_final_products_to_db(products, sheet_url, sheet_title)
        
        print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"  - –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(products)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_stats = {}
        for product in products:
            delivery_type = product['delivery_type']
            delivery_stats[delivery_type] = delivery_stats.get(delivery_type, 0) + 1
        
        print(f"  - –ü–æ —Ç–∏–ø–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏:")
        for delivery_type, count in delivery_stats.items():
            print(f"    ‚Ä¢ {delivery_type}: {count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
        for i, product in enumerate(products[:5]):
            print(f"  {i+1}. {product['name']} ({product['delivery_type']})")
            print(f"     –¶–µ–Ω–∞ USD: {product['price_usd']}")
            print(f"     –¶–µ–Ω–∞ RUB: {product['price_rub']}")
            print(f"     –°—Ä–æ–∫: {product['delivery_time']}")
            print(f"     –û–±—Ä–∞–∑–µ—Ü: {product['sample_price']} —Ä—É–±, {product['sample_time']} –¥–Ω–µ–π")
            print(f"     –¢–∏—Ä–∞–∂: {product['quantity']}")
            print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())



