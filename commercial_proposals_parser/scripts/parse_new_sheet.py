#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ–π Google Sheets —Ç–∞–±–ª–∏—Ü—ã
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from scripts.parse_excel_data import parse_excel_data
from scripts.download_sheet import download_sheet_as_excel
from database.manager_v4 import CommercialProposalsDB
from config import DATABASE_URL_V4
import pandas as pd
from pathlib import Path

# –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ Google Sheets –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
SHEET_URLS = [
    {
        'url': 'https://docs.google.com/spreadsheets/d/1iB1J0TJevoHzrduqeySqO6gI_xLdhSDV9jxOdKICDY8/edit?gid=1464438736#gid=1464438736',
        'title': '–ú–µ—Ä—á –¥–ª—è Sense',
        'description': '–¢–∞–±–ª–∏—Ü–∞ —Å –º–µ—Ä—á–µ–º –¥–ª—è Sense (—Ö—É–¥–∏, —à–∞–ø–∫–∏, —à–æ–ø–ø–µ—Ä—ã, –±—Ä–µ–ª–æ–∫–∏)'
    },
    {
        'url': 'https://docs.google.com/spreadsheets/d/13DOK6_4ox-pmqurespTyWkAuHezBnHsbqFxAfIFnXd4/edit?gid=1628889079#gid=1628889079',
        'title': '–í—Ç–æ—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞',
        'description': '–í—Ç–æ—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞'
    }
]

def parse_new_sheet(sheet_url, sheet_title=None):
    """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ–π Google Sheets —Ç–∞–±–ª–∏—Ü—ã"""
    
    if not sheet_title:
        sheet_title = f"Sheet_{sheet_url.split('/')[-2][:8]}"
    
    print(f"üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã: {sheet_title}")
    print(f"üîó URL: {sheet_url}")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º Excel —Ñ–∞–π–ª
        excel_path = download_sheet_as_excel(sheet_url, sheet_title)
        if not excel_path or not os.path.exists(excel_path):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª")
            return False
        
        print(f"‚úÖ Excel —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω: {excel_path}")
        
        # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã
        products = parse_excel_data(str(excel_path))
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        
        if not products:
            print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = CommercialProposalsDB(DATABASE_URL_V4)
        save_products_to_db(products, sheet_url, sheet_title, db)
        
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"  - –¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_stats = {}
        for product in products:
            for offer in product.get('price_offers', []):
                route = offer.get('route_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                delivery_stats[route] = delivery_stats.get(route, 0) + 1
        
        print(f"  - –¢–∏–ø—ã –¥–æ—Å—Ç–∞–≤–∫–∏:")
        for route, count in delivery_stats.items():
            print(f"    * {route}: {count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        return False

def save_products_to_db(products, sheet_url, sheet_title, db):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç–∞–±–ª–∏—Ü–µ (–ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ)
        try:
            sheet_id = db.create_sheet_metadata(sheet_url, sheet_title)
            print(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –æ —Ç–∞–±–ª–∏—Ü–µ: ID {sheet_id}")
        except Exception as e:
            if "UNIQUE constraint failed" in str(e):
                print(f"üìù –¢–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
                # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
                sheet_id = 1  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            else:
                raise e
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã
        for product_data in products:
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
            product = db.create_product(
                name=product_data['name'],
                description=product_data.get('description', ''),
                characteristics=product_data.get('characteristics', {}),
                custom_design=product_data.get('custom_design', ''),
                sheet_id=sheet_id
            )
            product_id = product.id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            for offer in product_data.get('price_offers', []):
                db.create_price_offer(
                    product_id=product_id,
                    route_name=offer['route_name'],
                    quantity=offer.get('quantity'),
                    price_usd=offer.get('price_usd'),
                    price_rub=offer.get('price_rub'),
                    delivery_time=offer.get('delivery_time'),
                    sample_price=offer.get('sample_price'),
                    sample_time=offer.get('sample_time'),
                    sample_price_currency='USD',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é USD –¥–ª—è –æ–±—Ä–∞–∑—Ü–æ–≤
                    is_sample=offer.get('is_sample', False)
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for img_path in product_data.get('images', []):
                if os.path.exists(img_path):
                    db.create_image(
                        product_id=product_id,
                        local_path=img_path,
                        image_type='main'
                    )
        
        print(f"‚úÖ –¢–æ–≤–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
        raise

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö Google Sheets —Ç–∞–±–ª–∏—Ü")
    print("=" * 50)
    
    success_count = 0
    total_count = len(SHEET_URLS)
    
    for i, sheet_info in enumerate(SHEET_URLS, 1):
        print(f"\nüìä –¢–∞–±–ª–∏—Ü–∞ {i}/{total_count}: {sheet_info['title']}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {sheet_info['description']}")
        print(f"üîó URL: {sheet_info['url']}")
        print("-" * 50)
        
        success = parse_new_sheet(sheet_info['url'], sheet_info['title'])
        
        if success:
            success_count += 1
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {i} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã {i}")
    
    print(f"\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  - –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {total_count}")
    print(f"  - –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}")
    print(f"  - –û—à–∏–±–æ–∫: {total_count - success_count}")
    
    if success_count == total_count:
        print("\nüéâ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    elif success_count > 0:
        print(f"\n‚ö†Ô∏è  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count} –∏–∑ {total_count} —Ç–∞–±–ª–∏—Ü")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã")

if __name__ == "__main__":
    main()
