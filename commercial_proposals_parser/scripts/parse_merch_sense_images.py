#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "–ú–µ—Ä—á –¥–ª—è Sense"
"""

import os
import sys
import zipfile
import shutil
from PIL import Image
sys.path.append('.')
from database.manager_v4 import CommercialProposalsDB
from config import DATABASE_URL_V4

def parse_merch_sense_images():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "–ú–µ—Ä—á –¥–ª—è Sense" """
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª "–ú–µ—Ä—á –¥–ª—è Sense"
    merch_files = []
    for file in os.listdir("storage/excel_files"):
        if file.startswith("–ú–µ—Ä—á –¥–ª—è Sense"):
            merch_files.append(file)
    
    if not merch_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã '–ú–µ—Ä—á –¥–ª—è Sense'")
        return
    
    # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    latest_file = sorted(merch_files)[-1]
    excel_file = f"storage/excel_files/{latest_file}"
    
    print(f"üìÅ –ü–∞—Ä—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ {excel_file}...")
    
    if not os.path.exists(excel_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_file}")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    extracted_images = []
    try:
        with zipfile.ZipFile(excel_file, 'r') as z:
            for name in z.namelist():
                if name.startswith('xl/media/image'):
                    print(f"  üì∑ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {name}")
                    
                    image_data = z.read(name)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    if name.lower().endswith('.png'):
                        ext = '.png'
                    elif name.lower().endswith('.gif'):
                        ext = '.gif'
                    else:
                        ext = '.jpg'
                    
                    filename = os.path.basename(name)
                    if not filename.lower().endswith(ext):
                        filename = filename + ext
                    
                    output_path = f"storage/images/products_parsed/{filename}"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    with open(output_path, 'wb') as f:
                        f.write(image_data)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
                    try:
                        with Image.open(output_path) as img:
                            img.verify()
                        print(f"    ‚úÖ {filename} - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                        extracted_images.append(output_path)
                    except Exception as e:
                        print(f"    ‚ùå {filename} - –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
                        os.remove(output_path)
    
    except zipfile.BadZipFile:
        print(f"‚ùå –§–∞–π–ª {excel_file} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ZIP-–∞—Ä—Ö–∏–≤–æ–º")
        return
    
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(extracted_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    if not extracted_images:
        print("‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Google Sheets")
        return
    
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º "–ú–µ—Ä—á –¥–ª—è Sense" (ID 29-43)
    db = CommercialProposalsDB(DATABASE_URL_V4)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã "–ú–µ—Ä—á –¥–ª—è Sense"
    products = db.get_all_products_with_details()
    merch_products = [(p, po, i) for p, po, i in products if p.id >= 29]
    
    print(f"\nüîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º '–ú–µ—Ä—á –¥–ª—è Sense'...")
    
    image_index = 0
    for product, price_offers, existing_images in merch_products:
        if image_index < len(extracted_images):
            # –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            main_image_path = extracted_images[image_index]
            new_main_name = f"product_{product.id}_main.jpg"
            new_main_path = f"storage/images/products_parsed/{new_main_name}"
            
            try:
                shutil.copy2(main_image_path, new_main_path)
                db.create_product_image(
                    product_id=product.id,
                    image_path=new_main_path,
                    image_type='main'
                )
                print(f"  ‚úÖ {product.name} -> {new_main_name}")
                image_index += 1
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
                additional_count = 1
                while image_index < len(extracted_images) and additional_count <= 3:
                    add_image_path = extracted_images[image_index]
                    new_add_name = f"product_{product.id}_additional_{additional_count}.jpg"
                    new_add_path = f"storage/images/products_parsed/{new_add_name}"
                    
                    try:
                        shutil.copy2(add_image_path, new_add_path)
                        db.create_product_image(
                            product_id=product.id,
                            image_path=new_add_path,
                            image_type='additional'
                        )
                        print(f"    üì∑ –î–æ–ø. –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {additional_count}: {new_add_name}")
                        image_index += 1
                        additional_count += 1
                    except Exception as e:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ–ø. –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                        break
                        
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {product.name}: {e}")
    
    print(f"\n‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è '–ú–µ—Ä—á –¥–ª—è Sense' –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")

def main():
    print("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '–ú–µ—Ä—á –¥–ª—è Sense'...")
    parse_merch_sense_images()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    db = CommercialProposalsDB(DATABASE_URL_V4)
    products = db.get_all_products_with_details()
    
    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    for product, price_offers, images in products:
        if images:
            print(f"  {product.name} (ID: {product.id}) - {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        else:
            print(f"  {product.name} (ID: {product.id}) - –ù–ï–¢ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

if __name__ == "__main__":
    main()