#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.manager_v4 import CommercialProposalsDB
import shutil

def clear_all_images():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ë–î –∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üßπ –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    db = CommercialProposalsDB('sqlite:///commercial_proposals_v4.db')
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î
    with db.get_session() as session:
        from database.models_v4 import ProductImage
        deleted_count = session.query(ProductImage).count()
        session.query(ProductImage).delete()
        session.commit()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –∏–∑ –ë–î: {deleted_count}")
    
    # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    if os.path.exists('storage/images/products_parsed'):
        shutil.rmtree('storage/images/products_parsed')
        print("‚úÖ –û—á–∏—â–µ–Ω–∞ –ø–∞–ø–∫–∞ storage/images/products_parsed")
    
    os.makedirs('storage/images/products_parsed', exist_ok=True)
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞ storage/images/products_parsed")

def create_correct_image_mapping():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–æ–≤–∞—Ä–∞–º"""
    print("üîó –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    db = CommercialProposalsDB('sqlite:///commercial_proposals_v4.db')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    products = db.get_all_products_with_details(limit=1000)
    products_by_name = {}
    
    for product, _, _ in products:
        normalized_name = product.name.lower().strip()
        if normalized_name not in products_by_name:
            products_by_name[normalized_name] = []
        products_by_name[normalized_name].append(product)
    
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
    image_mappings = {
        '–∫–∞—Ä–¥—Ö–æ–ª–¥–µ—Ä': {
            'main_image': 'storage/images/products_parsed/product_1_main.jpg',
            'additional_images': []
        },
        '–æ–±–ª–æ–∂–∫–∞ –¥–ª—è –ø–∞—Å–ø–æ—Ä—Ç–∞': {
            'main_image': 'storage/images/products_parsed/product_2_main.jpg',
            'additional_images': []
        },
        '—Ñ—É—Ç–ª—è—Ä –¥–ª—è –æ—á–∫–æ–≤': {
            'main_image': 'storage/images/products_parsed/product_3_main.jpg',
            'additional_images': []
        },
        '—Ä—É—á–∫–∞': {
            'main_image': 'storage/images/products_parsed/product_4_main.jpg',
            'additional_images': []
        },
        '—Ç–∞–±–ª–µ—Ç–Ω–∏—Ü–∞': {
            'main_image': 'storage/images/products_parsed/product_5_main.jpg',
            'additional_images': []
        },
        '–Ω–∞–±–æ—Ä –∫–∞—Ä–∞–Ω–¥–∞—à–µ–π 6 —Ü–≤–µ—Ç–æ–≤': {
            'main_image': 'storage/images/products_parsed/product_6_main.jpg',
            'additional_images': []
        },
        '–∫—Ä—É–∂–∫–∞': {
            'main_image': 'storage/images/products_parsed/product_7_main.jpg',
            'additional_images': []
        },
        '–µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫': {
            'main_image': 'storage/images/products_parsed/product_8_main.jpg',
            'additional_images': ['storage/images/products_parsed/product_8_additional_1.jpg']
        }
    }
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    source_images = {
        '–∫–∞—Ä–¥—Ö–æ–ª–¥–µ—Ä': 'storage/images/products_parsed/product_1_original_sheet_3.jpg',
        '–æ–±–ª–æ–∂–∫–∞ –¥–ª—è –ø–∞—Å–ø–æ—Ä—Ç–∞': 'storage/images/products_parsed/product_2_original_sheet_1.jpg',
        '—Ñ—É—Ç–ª—è—Ä –¥–ª—è –æ—á–∫–æ–≤': 'storage/images/products_parsed/product_3_original_sheet_2.jpg',
        '—Ä—É—á–∫–∞': 'storage/images/products_parsed/product_4_original_sheet_8.jpg',
        '—Ç–∞–±–ª–µ—Ç–Ω–∏—Ü–∞': 'storage/images/products_parsed/product_5_original_sheet_9.jpg',
        '–Ω–∞–±–æ—Ä –∫–∞—Ä–∞–Ω–¥–∞—à–µ–π 6 —Ü–≤–µ—Ç–æ–≤': 'storage/images/products_parsed/product_6_original_sheet_12.jpg',
        '–∫—Ä—É–∂–∫–∞': 'storage/images/products_parsed/product_7_original_sheet_13.jpg',
        '–µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫': 'storage/images/products_parsed/product_8_–í—Ç–æ—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞_1757933430_19.jpg'
    }
    
    mapped_count = 0
    
    for normalized_name, mapping in image_mappings.items():
        if normalized_name in products_by_name:
            products = products_by_name[normalized_name]
            for product in products:
                # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if normalized_name in source_images and os.path.exists(source_images[normalized_name]):
                    main_image_path = mapping['main_image']
                    shutil.copy2(source_images[normalized_name], main_image_path)
                    
                    db.create_product_image(
                        product_id=product.id,
                        image_path=main_image_path,
                        image_type='main'
                    )
                    mapped_count += 1
                    print(f"  ‚úÖ {product.name} -> {main_image_path} (main)")
                
                # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                for i, additional_path in enumerate(mapping['additional_images']):
                    if os.path.exists(additional_path):
                        db.create_product_image(
                            product_id=product.id,
                            image_path=additional_path,
                            image_type='additional'
                        )
                        mapped_count += 1
                        print(f"  ‚úÖ {product.name} -> {additional_path} (additional)")
    
    print(f"\n‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {mapped_count}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
    print("=" * 50)
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    clear_all_images()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É
    create_correct_image_mapping()
    
    print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
