#!/usr/bin/env python3
"""
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ç–∏—Ä–∞–∂–æ–º
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from openpyxl import load_workbook
import json

def parse_original_sheet():
    """–ü–∞—Ä—Å–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏—Ä–∞–∂–æ–º"""
    file_path = "storage/excel_files/original_sheet.xlsx"
    
    print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {os.path.basename(file_path)}")
    
    wb = load_workbook(file_path, data_only=True)
    ws = wb.active
    
    products = []
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å 4-–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    for row in range(4, ws.max_row + 1):
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∫–æ–ª–æ–Ω–∫–∞ 2)
        name_cell = ws.cell(row=row, column=2)
        product_name = name_cell.value
        
        if not product_name or str(product_name).strip() == '':
            continue
        
        product = {
            'name': str(product_name).strip(),
            'characteristics': '',
            'custom_design': '',
            'price_offers': [],
            'images': []
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–∫–æ–ª–æ–Ω–∫–∞ 3)
        char_cell = ws.cell(row=row, column=3)
        if char_cell.value:
            product['characteristics'] = str(char_cell.value).strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º (–∫–æ–ª–æ–Ω–∫–∞ 4)
        custom_cell = ws.cell(row=row, column=4)
        if custom_cell.value:
            product['custom_design'] = str(custom_cell.value).strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ç–∏—Ä–∞–∂ (–∫–æ–ª–æ–Ω–∫–∞ 5)
        qty_cell = ws.cell(row=row, column=5)
        quantity = None
        if qty_cell.value:
            try:
                quantity_str = str(qty_cell.value).replace(' ', '').replace(',', '')
                quantity = int(float(quantity_str))
            except (ValueError, TypeError):
                quantity = None
        
        print(f"  üì¶ {product['name']}: —Ç–∏—Ä–∞–∂={quantity}")
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        # –ñ–î –º–∞—Ä—à—Ä—É—Ç (–∫–æ–ª–æ–Ω–∫–∏ 6, 7, 8)
        if ws.cell(row=row, column=6).value is not None:
            price_offer = {
                'route_name': '–ñ–î',
                'quantity': quantity,
                'price_usd': None,
                'price_rub': None,
                'delivery_time': None,
                'is_sample': False,
                'sample_price': None
            }
            
            # USD —Ü–µ–Ω–∞ (–∫–æ–ª–æ–Ω–∫–∞ 6)
            usd_cell = ws.cell(row=row, column=6)
            if usd_cell.value:
                try:
                    price_offer['price_usd'] = float(usd_cell.value)
                except (ValueError, TypeError):
                    pass
            
            # RUB —Ü–µ–Ω–∞ (–∫–æ–ª–æ–Ω–∫–∞ 7)
            rub_cell = ws.cell(row=row, column=7)
            if rub_cell.value:
                try:
                    price_offer['price_rub'] = float(rub_cell.value)
                except (ValueError, TypeError):
                    pass
            
            # –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ (–∫–æ–ª–æ–Ω–∫–∞ 8)
            time_cell = ws.cell(row=row, column=8)
            if time_cell.value:
                price_offer['delivery_time'] = str(time_cell.value).strip()
            
            if price_offer['price_usd'] or price_offer['price_rub']:
                product['price_offers'].append(price_offer)
        
        # –ê–í–ò–ê –º–∞—Ä—à—Ä—É—Ç (–∫–æ–ª–æ–Ω–∫–∏ 9, 10, 11)
        if ws.cell(row=row, column=9).value is not None:
            price_offer = {
                'route_name': '–ê–í–ò–ê',
                'quantity': quantity,
                'price_usd': None,
                'price_rub': None,
                'delivery_time': None,
                'is_sample': False,
                'sample_price': None
            }
            
            # USD —Ü–µ–Ω–∞ (–∫–æ–ª–æ–Ω–∫–∞ 9)
            usd_cell = ws.cell(row=row, column=9)
            if usd_cell.value:
                try:
                    price_offer['price_usd'] = float(usd_cell.value)
                except (ValueError, TypeError):
                    pass
            
            # RUB —Ü–µ–Ω–∞ (–∫–æ–ª–æ–Ω–∫–∞ 10)
            rub_cell = ws.cell(row=row, column=10)
            if rub_cell.value:
                try:
                    price_offer['price_rub'] = float(rub_cell.value)
                except (ValueError, TypeError):
                    pass
            
            # –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ (–∫–æ–ª–æ–Ω–∫–∞ 11)
            time_cell = ws.cell(row=row, column=11)
            if time_cell.value:
                price_offer['delivery_time'] = str(time_cell.value).strip()
            
            if price_offer['price_usd'] or price_offer['price_rub']:
                product['price_offers'].append(price_offer)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–∞—Ä—à—Ä—É—Ç (–∫–æ–ª–æ–Ω–∫–∏ 12, 13, 14)
        if ws.cell(row=row, column=12).value is not None:
            price_offer = {
                'route_name': '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä',
                'quantity': quantity,
                'price_usd': None,
                'price_rub': None,
                'delivery_time': None,
                'is_sample': False,
                'sample_price': None
            }
            
            # USD —Ü–µ–Ω–∞ (–∫–æ–ª–æ–Ω–∫–∞ 12)
            usd_cell = ws.cell(row=row, column=12)
            if usd_cell.value:
                try:
                    price_offer['price_usd'] = float(usd_cell.value)
                except (ValueError, TypeError):
                    pass
            
            # RUB —Ü–µ–Ω–∞ (–∫–æ–ª–æ–Ω–∫–∞ 13)
            rub_cell = ws.cell(row=row, column=13)
            if rub_cell.value:
                try:
                    price_offer['price_rub'] = float(rub_cell.value)
                except (ValueError, TypeError):
                    pass
            
            # –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ (–∫–æ–ª–æ–Ω–∫–∞ 14)
            time_cell = ws.cell(row=row, column=14)
            if time_cell.value:
                price_offer['delivery_time'] = str(time_cell.value).strip()
            
            if price_offer['price_usd'] or price_offer['price_rub']:
                product['price_offers'].append(price_offer)
        
        # –û–±—Ä–∞–∑–µ—Ü (–∫–æ–ª–æ–Ω–∫–∞ 15) - –ù–ï –ú–ï–ù–Ø–ï–ú –¢–ò–†–ê–ñ!
        if ws.cell(row=row, column=15).value is not None:
            price_offer = {
                'route_name': '–û–±—Ä–∞–∑–µ—Ü',
                'quantity': None,  # –£ –æ–±—Ä–∞–∑—Ü–∞ –Ω–µ—Ç —Ç–∏—Ä–∞–∂–∞
                'price_usd': None,
                'price_rub': None,
                'delivery_time': None,
                'is_sample': True,
                'sample_price': None
            }
            
            # RUB —Ü–µ–Ω–∞ (–∫–æ–ª–æ–Ω–∫–∞ 15)
            rub_cell = ws.cell(row=row, column=15)
            if rub_cell.value:
                try:
                    price_offer['sample_price'] = float(rub_cell.value)
                except (ValueError, TypeError):
                    pass
            
            # –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ (–∫–æ–ª–æ–Ω–∫–∞ 16)
            time_cell = ws.cell(row=row, column=16)
            if time_cell.value:
                price_offer['delivery_time'] = str(time_cell.value).strip()
            
            if price_offer['sample_price']:
                product['price_offers'].append(price_offer)
        
        products.append(product)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    return products

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã")
    print("=" * 50)
    
    # –ü–∞—Ä—Å–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    products = parse_original_sheet()
    
    # –î–æ–±–∞–≤–ª—è–µ–º source_file
    for product in products:
        product['source_file'] = 'original_sheet.xlsx'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('correct_parsed_products.json', 'w', encoding='utf-8') as f:
        json.dump(products, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
    print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ correct_parsed_products.json")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    print("\nüéØ –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:")
    for product in products[:3]:
        print(f"  - {product['name']}: {len(product['price_offers'])} —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        for offer in product['price_offers'][:2]:
            print(f"    * {offer['route_name']}: —Ç–∏—Ä–∞–∂={offer['quantity']}, USD={offer['price_usd']}, RUB={offer['price_rub']}")

if __name__ == "__main__":
    main()
