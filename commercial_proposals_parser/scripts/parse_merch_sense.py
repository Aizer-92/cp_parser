#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã "–ú–µ—Ä—á –¥–ª—è Sense"
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from openpyxl import load_workbook
import json

def parse_merch_sense():
    """–ü–∞—Ä—Å–∏—Ç —Ç–∞–±–ª–∏—Ü—É –ú–µ—Ä—á –¥–ª—è Sense"""
    file_path = "storage/excel_files/–ú–µ—Ä—á –¥–ª—è Sense_1757934153.xlsx"
    
    print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã: {os.path.basename(file_path)}")
    
    wb = load_workbook(file_path, data_only=True)
    ws = wb.active
    
    products = []
    current_product = None
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å 4-–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    for row in range(4, ws.max_row + 1):
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∫–æ–ª–æ–Ω–∫–∞ 3)
        name_cell = ws.cell(row=row, column=3)
        product_name = name_cell.value
        
        if not product_name or str(product_name).strip() == '':
            # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
            if current_product:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫ —Ç–µ–∫—É—â–µ–º—É —Ç–æ–≤–∞—Ä—É
                add_price_offer_to_product(ws, row, current_product)
            continue
        
        # –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        if current_product:
            products.append(current_product)
        
        current_product = {
            'name': str(product_name).strip(),
            'characteristics': '',
            'custom_design': '',
            'price_offers': [],
            'images': []
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–∫–æ–ª–æ–Ω–∫–∞ 4)
        char_cell = ws.cell(row=row, column=4)
        if char_cell.value:
            current_product['characteristics'] = str(char_cell.value).strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º (–∫–æ–ª–æ–Ω–∫–∞ 5)
        custom_cell = ws.cell(row=row, column=5)
        if custom_cell.value:
            current_product['custom_design'] = str(custom_cell.value).strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        print(f"  üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ {row} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {current_product['name']}")
        add_price_offer_to_product(ws, row, current_product)
        print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(current_product['price_offers'])}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä
    if current_product:
        products.append(current_product)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    for product in products[:3]:
        print(f"  - {product['name']}: {len(product['price_offers'])} —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        for offer in product['price_offers'][:2]:
            print(f"    * {offer['route_name']}: USD={offer['price_usd']}, RUB={offer['price_rub']}")
    
    return products

def add_price_offer_to_product(ws, row: int, product: dict):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ü–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫ —Ç–æ–≤–∞—Ä—É"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏—Ä–∞–∂ (–∫–æ–ª–æ–Ω–∫–∞ 6)
    quantity = None
    qty_cell = ws.cell(row=row, column=6)
    if qty_cell.value:
        try:
            quantity_str = str(qty_cell.value).replace(' ', '').replace(',', '')
            quantity = int(float(quantity_str))
        except (ValueError, TypeError):
            quantity = None
    
    # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    
    # –ñ–î –º–∞—Ä—à—Ä—É—Ç (–∫–æ–ª–æ–Ω–∫–∏ 7, 8, 9)
    col7_value = ws.cell(row=row, column=7).value
    if col7_value is not None and str(col7_value).strip() != '':
        price_offer = {
            'route_name': '–ñ–î',
            'quantity': quantity,
            'price_usd': None,
            'price_rub': None,
            'delivery_time': None,
            'is_sample': False,
            'sample_price': None
        }
        
        # USD —Ü–µ–Ω–∞ (–∫–æ–ª–æ–Ω–∫–∞ 7)
        usd_cell = ws.cell(row=row, column=7)
        if usd_cell.value:
            try:
                # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                usd_value = str(usd_cell.value).replace(',', '.')
                price_offer['price_usd'] = float(usd_value)
            except (ValueError, TypeError):
                pass
        
        # RUB —Ü–µ–Ω–∞ (–∫–æ–ª–æ–Ω–∫–∞ 8)
        rub_cell = ws.cell(row=row, column=8)
        if rub_cell.value:
            try:
                # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                rub_value = str(rub_cell.value).replace(',', '.')
                price_offer['price_rub'] = float(rub_value)
            except (ValueError, TypeError):
                pass
        
        # –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ (–∫–æ–ª–æ–Ω–∫–∞ 9)
        time_cell = ws.cell(row=row, column=9)
        if time_cell.value:
            price_offer['delivery_time'] = str(time_cell.value).strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–µ–Ω–∞
        if price_offer['price_usd'] or price_offer['price_rub']:
            product['price_offers'].append(price_offer)
    
    # –ê–í–ò–ê –º–∞—Ä—à—Ä—É—Ç (–∫–æ–ª–æ–Ω–∫–∏ 10, 11, 12)
    if ws.cell(row=row, column=10).value is not None and str(ws.cell(row=row, column=10).value).strip() != '':
        price_offer = {
            'route_name': '–ê–í–ò–ê',
            'quantity': quantity,
            'price_usd': None,
            'price_rub': None,
            'delivery_time': None,
            'is_sample': False,
            'sample_price': None
        }
        
        # USD —Ü–µ–Ω–∞ (–∫–æ–ª–æ–Ω–∫–∞ 10)
        usd_cell = ws.cell(row=row, column=10)
        if usd_cell.value:
            try:
                # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                usd_value = str(usd_cell.value).replace(',', '.')
                price_offer['price_usd'] = float(usd_value)
            except (ValueError, TypeError):
                pass
        
        # RUB —Ü–µ–Ω–∞ (–∫–æ–ª–æ–Ω–∫–∞ 11)
        rub_cell = ws.cell(row=row, column=11)
        if rub_cell.value:
            try:
                # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                rub_value = str(rub_cell.value).replace(',', '.')
                price_offer['price_rub'] = float(rub_value)
            except (ValueError, TypeError):
                pass
        
        # –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ (–∫–æ–ª–æ–Ω–∫–∞ 12)
        time_cell = ws.cell(row=row, column=12)
        if time_cell.value:
            price_offer['delivery_time'] = str(time_cell.value).strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–µ–Ω–∞
        if price_offer['price_usd'] or price_offer['price_rub']:
            product['price_offers'].append(price_offer)
    
    # –û–±—Ä–∞–∑–µ—Ü (–∫–æ–ª–æ–Ω–∫–∞ 13)
    if ws.cell(row=row, column=13).value is not None and str(ws.cell(row=row, column=13).value).strip() != '':
        price_offer = {
            'route_name': '–û–±—Ä–∞–∑–µ—Ü',
            'quantity': quantity,
            'price_usd': None,
            'price_rub': None,
            'delivery_time': None,
            'is_sample': True,
            'sample_price': None
        }
        
        # RUB —Ü–µ–Ω–∞ (–∫–æ–ª–æ–Ω–∫–∞ 13)
        rub_cell = ws.cell(row=row, column=13)
        if rub_cell.value:
            try:
                # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                rub_value = str(rub_cell.value).replace(',', '.')
                price_offer['sample_price'] = float(rub_value)
            except (ValueError, TypeError):
                pass
        
        # –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ (–∫–æ–ª–æ–Ω–∫–∞ 14)
        time_cell = ws.cell(row=row, column=14)
        if time_cell.value:
            price_offer['delivery_time'] = str(time_cell.value).strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω–∞
        if price_offer['sample_price']:
            product['price_offers'].append(price_offer)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    products = parse_merch_sense()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('merch_sense_products.json', 'w', encoding='utf-8') as f:
        json.dump(products, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
    print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ merch_sense_products.json")

if __name__ == "__main__":
    main()
