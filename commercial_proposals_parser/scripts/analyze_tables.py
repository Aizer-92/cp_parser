#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö Excel —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from scripts.parse_excel_data import parse_excel_data
from database.manager_v4 import CommercialProposalsDB
from config import DATABASE_URL_V4

def load_sheets_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü"""
    config_path = project_root / 'sheets_config.json'
    
    if not config_path.exists():
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ download_tables.py")
        return None
    
    with open(config_path, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_sheets_config(config):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü"""
    config_path = project_root / 'sheets_config.json'
    
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(config, f, ensure_ascii=False, indent=2)

def save_products_to_db(products, sheet_url, sheet_title, db):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç–∞–±–ª–∏—Ü–µ (–ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ)
        try:
            sheet_id = db.create_sheet_metadata(sheet_url, sheet_title)
            print(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –æ —Ç–∞–±–ª–∏—Ü–µ: ID {sheet_id}")
        except Exception as e:
            if "UNIQUE constraint failed" in str(e):
                print(f"üìù –¢–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
                # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
                sheet_id = 1  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            else:
                raise e
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã
        for product_data in products:
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
            product = db.create_product(
                name=product_data['name'],
                description=product_data.get('description', ''),
                characteristics=product_data.get('characteristics', {}),
                custom_design=product_data.get('custom_design', ''),
                sheet_id=sheet_id
            )
            product_id = product.id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            for offer in product_data.get('price_offers', []):
                db.create_price_offer(
                    product_id=product_id,
                    route_name=offer['route_name'],
                    quantity=offer.get('quantity'),
                    price_usd=offer.get('price_usd'),
                    price_rub=offer.get('price_rub'),
                    delivery_time=offer.get('delivery_time'),
                    sample_price=offer.get('sample_price'),
                    sample_time=offer.get('sample_time'),
                    sample_price_currency='USD',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é USD –¥–ª—è –æ–±—Ä–∞–∑—Ü–æ–≤
                    is_sample=offer.get('is_sample', False)
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for img_path in product_data.get('images', []):
                if os.path.exists(img_path):
                    db.create_image(
                        product_id=product_id,
                        local_path=img_path,
                        image_type='main'
                    )
        
        print(f"‚úÖ –¢–æ–≤–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
        return False

def analyze_sheet(sheet, db):
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    
    print(f"üîÑ –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {sheet['title']}")
    print(f"üìÅ –§–∞–π–ª: {sheet['excel_path']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if not Path(sheet['excel_path']).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {sheet['excel_path']}")
        return False
    
    # –ü–∞—Ä—Å–∏–º Excel —Ñ–∞–π–ª
    products = parse_excel_data(sheet['excel_path'])
    
    if not products:
        print(f"‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ")
        return False
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = save_products_to_db(products, sheet['url'], sheet['title'], db)
    
    if success:
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"  - –¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_types = {}
        for product in products:
            for offer in product.get('price_offers', []):
                route = offer['route_name']
                delivery_types[route] = delivery_types.get(route, 0) + 1
        
        print(f"  - –¢–∏–ø—ã –¥–æ—Å—Ç–∞–≤–∫–∏:")
        for route, count in delivery_types.items():
            print(f"    * {route}: {count}")
        
        return True
    else:
        return False

def analyze_all_sheets():
    """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    
    print("üîç –ê–Ω–∞–ª–∏–∑ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö Google Sheets —Ç–∞–±–ª–∏—Ü")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_sheets_config()
    if not config:
        return
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = CommercialProposalsDB(DATABASE_URL_V4)
    
    analyzed_count = 0
    skipped_count = 0
    error_count = 0
    
    for i, sheet in enumerate(config['sheets'], 1):
        print(f"\nüìä –¢–∞–±–ª–∏—Ü–∞ {i}/{len(config['sheets'])}: {sheet['title']}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {sheet['description']}")
        print(f"üîó URL: {sheet['url']}")
        print("-" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–∞—á–∞–Ω–∞ –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
        if not sheet.get('downloaded', False) or not sheet.get('excel_path'):
            print(f"‚è≠Ô∏è  –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å–∫–∞—á–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            skipped_count += 1
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not Path(sheet['excel_path']).exists():
            print(f"‚è≠Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {sheet['excel_path']}")
            skipped_count += 1
            continue
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
        success = analyze_sheet(sheet, db)
        
        if success:
            analyzed_count += 1
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {i} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            error_count += 1
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–∞–±–ª–∏—Ü—ã {i}")
    
    print(f"\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  - –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {len(config['sheets'])}")
    print(f"  - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {analyzed_count}")
    print(f"  - –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
    print(f"  - –û—à–∏–±–æ–∫: {error_count}")
    
    if analyzed_count > 0:
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É.")
    else:
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã")

if __name__ == "__main__":
    analyze_all_sheets()
