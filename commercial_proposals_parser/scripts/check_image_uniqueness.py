#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.manager_v4 import CommercialProposalsDB
from config import DATABASE_URL

def check_image_uniqueness():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    db = CommercialProposalsDB(DATABASE_URL.replace('.db', '_v4.db'))
    
    with db.get_session() as session:
        from database.models_v4 import Product, ProductImage
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = session.query(ProductImage).all()
        print(f"üìä –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ë–î: {len(images)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–µ–π
        paths = [img.local_path for img in images]
        unique_paths = set(paths)
        
        print(f"üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π: {len(unique_paths)}")
        
        if len(paths) != len(unique_paths):
            print("‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø—É—Ç–∏!")
            duplicates = []
            for path in paths:
                if paths.count(path) > 1 and path not in duplicates:
                    duplicates.append(path)
            
            for dup in duplicates:
                print(f"  - {dup} (–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {paths.count(dup)} —Ä–∞–∑)")
        else:
            print("‚úÖ –í—Å–µ –ø—É—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
        print("\nüìè –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤:")
        broken_count = 0
        for img in images:
            if os.path.exists(img.local_path):
                size = os.path.getsize(img.local_path)
                if size < 1000:  # –ú–µ–Ω—å—à–µ 1KB
                    print(f"  ‚ùå {img.local_path}: {size} –±–∞–π—Ç (–±–∏—Ç–æ–µ)")
                    broken_count += 1
                else:
                    print(f"  ‚úÖ {img.local_path}: {size} –±–∞–π—Ç")
            else:
                print(f"  ‚ùå {img.local_path}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                broken_count += 1
        
        print(f"\nüìä –ë–∏—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤: {broken_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤
        print("\nüéØ –ü–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤:")
        products = session.query(Product).limit(5).all()
        for product in products:
            product_images = session.query(ProductImage).filter(ProductImage.product_id == product.id).all()
            print(f"\nüì¶ {product.name} #{product.id}:")
            for img in product_images:
                size = os.path.getsize(img.local_path) if os.path.exists(img.local_path) else 0
                print(f"  - {img.local_path} (—Ç–∏–ø: {img.image_type}, —Ä–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("=" * 50)
    
    check_image_uniqueness()

if __name__ == "__main__":
    main()
