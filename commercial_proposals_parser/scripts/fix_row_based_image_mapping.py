#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Å—Ç—Ä–æ–∫–∞–º - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞—é—Ç—Å—è –∫ —Ç–æ–≤–∞—Ä—É –∏–∑ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
"""

import os
import sys
import zipfile
import shutil
from pathlib import Path
from openpyxl import load_workbook
from openpyxl.drawing.image import Image as OpenpyxlImage
from PIL import Image
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.manager_v4 import CommercialProposalsDB
from config import DATABASE_URL

def clear_existing_images():
    """–û—á–∏—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    db = CommercialProposalsDB(DATABASE_URL.replace('.db', '_v4.db'))
    
    with db.get_session() as session:
        from database.models_v4 import ProductImage
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
        deleted_count = session.query(ProductImage).count()
        session.query(ProductImage).delete()
        session.commit()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –∏–∑ –ë–î: {deleted_count}")
    
    # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    images_dir = "storage/images/products_parsed"
    if os.path.exists(images_dir):
        shutil.rmtree(images_dir)
        print(f"‚úÖ –û—á–∏—â–µ–Ω–∞ –ø–∞–ø–∫–∞ {images_dir}")
    
    os.makedirs(images_dir, exist_ok=True)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞ {images_dir}")

def find_product_name_in_row(ws, row, search_columns=range(1, 20)):
    """–ò—â–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ"""
    
    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
    product_keywords = [
        '–µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫', '—Ö—É–¥–∏', '—à–∞–ø–∫–∞', '–±–∏–Ω–∏', '—à–æ–ø–ø–µ—Ä', '–±—Ä–µ–ª–æ–∫', '—Ç–∞–±–ª–µ—Ç–Ω–∏—Ü–∞', 
        '–∫–∞—Ä–¥—Ö–æ–ª–¥–µ—Ä', '–∑–æ–Ω—Ç', '–ø–∏—Å—å–º–µ–Ω–Ω—ã–π', '–Ω–∞–±–æ—Ä', '—Ç–µ—Ä–º–æ–∫—Ä—É–∂–∫–∞', '—Å—É–º–∫–∞',
        '—Ñ—É—Ç–±–æ–ª–∫–∞', '–∫—Ä—É–∂–∫–∞', '—Ä—É—á–∫–∞', '–∫–∞—Ä–∞–Ω–¥–∞—à', '—Ñ—É—Ç–ª—è—Ä', '–æ–±–ª–æ–∂–∫–∞', '–∫–æ—Å–º–µ—Ç–∏—á–∫–∞',
        '—á–µ—Ö–æ–ª', '–Ω–æ—É—Ç–±—É–∫', '–¥—É—Ç—ã–π', '–æ–±–ª–æ–∂–∫–∞ –¥–ª—è –ø–∞—Å–ø–æ—Ä—Ç–∞', '–Ω–∞–±–æ—Ä –∫–∞—Ä–∞–Ω–¥–∞—à–µ–π'
    ]
    
    best_match = None
    best_score = 0
    
    # –ò—â–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö —Å—Ç—Ä–æ–∫–∏
    for col in search_columns:
        try:
            cell_value = ws.cell(row=row, column=col).value
            if not cell_value:
                continue
                
            cell_text = str(cell_value).strip()
            if not cell_text or cell_text == 'None':
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —è—á–µ–π–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            for keyword in product_keywords:
                if keyword.lower() in cell_text.lower():
                    # –í—ã—á–∏—Å–ª—è–µ–º "–∫–∞—á–µ—Å—Ç–≤–æ" —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    score = len(keyword) / len(cell_text) if cell_text else 0
                    
                    if score > best_score:
                        best_score = score
                        best_match = {
                            'name': cell_text,
                            'row': row,
                            'col': col,
                            'score': score
                        }
        except:
            continue
    
    return best_match

def extract_images_from_excel_zip(excel_path, output_dir):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Excel —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ zipfile"""
    print(f"üì§ –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ {excel_path}")
    
    try:
        with zipfile.ZipFile(excel_path, 'r') as zip_ref:
            image_files = [f for f in zip_ref.namelist() if f.startswith('xl/media/') and f.endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp'))]
            
            print(f"  üñºÔ∏è  –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∞—Ä—Ö–∏–≤–µ: {len(image_files)}")
            
            extracted_images = []
            
            for i, image_file in enumerate(image_files):
                try:
                    image_data = zip_ref.read(image_file)
                    original_name = os.path.basename(image_file)
                    new_name = f"image_{i+1}_{original_name}"
                    output_path = os.path.join(output_dir, new_name)
                    
                    with open(output_path, 'wb') as f:
                        f.write(image_data)
                    
                    extracted_images.append({
                        'original_path': image_file,
                        'saved_path': output_path,
                        'filename': new_name,
                        'index': i + 1
                    })
                    
                    print(f"    ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ: {original_name} -> {new_name}")
                    
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ {image_file}: {e}")
            
            return extracted_images
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ {excel_path}: {e}")
        return []

def analyze_excel_by_rows(excel_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Excel —Ñ–∞–π–ª –ø–æ —Å—Ç—Ä–æ–∫–∞–º - –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º"""
    print(f"üîç –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–æ–∫–∞–º: {excel_path}")
    
    try:
        wb = load_workbook(excel_path, data_only=True)
        analysis = {
            'file_path': excel_path,
            'sheets': {},
            'row_images': {}  # –°–ª–æ–≤–∞—Ä—å: —Å—Ç—Ä–æ–∫–∞ -> —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        }
        
        for sheet_name in wb.sheetnames:
            ws = wb[sheet_name]
            print(f"  üìä –õ–∏—Å—Ç: {sheet_name}")
            
            sheet_info = {
                'name': sheet_name,
                'max_row': ws.max_row,
                'max_column': ws.max_column,
                'images_by_row': {}
            }
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            for i, image in enumerate(ws._images):
                try:
                    if hasattr(image, 'anchor') and image.anchor:
                        anchor = image.anchor
                        
                        if hasattr(anchor, '_from'):
                            from_cell = anchor._from
                            row = from_cell.row + 1
                            col = from_cell.col + 1
                        else:
                            row = getattr(anchor, 'row', 1)
                            col = getattr(anchor, 'col', 1)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å—Ç—Ä–æ–∫–µ
                        if row not in sheet_info['images_by_row']:
                            sheet_info['images_by_row'][row] = []
                        
                        sheet_info['images_by_row'][row].append({
                            'index': i + 1,
                            'row': row,
                            'col': col,
                            'width': getattr(image, 'width', 0),
                            'height': getattr(image, 'height', 0)
                        })
                        
                        print(f"    üñºÔ∏è  –°—Ç—Ä–æ–∫–∞ {row}, –∫–æ–ª–æ–Ω–∫–∞ {col}: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}")
                        
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {e}")
            
            # –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            for row, images in sheet_info['images_by_row'].items():
                product_match = find_product_name_in_row(ws, row)
                
                if product_match:
                    print(f"    üéØ –°—Ç—Ä–æ–∫–∞ {row}: '{product_match['name']}' (–∫–æ–ª–æ–Ω–∫–∞ {product_match['col']})")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
                    for img in images:
                        img['product_name'] = product_match['name']
                        img['product_col'] = product_match['col']
                        img['product_score'] = product_match['score']
                else:
                    print(f"    ‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ {row}: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    for img in images:
                        img['product_name'] = f'Unknown_row_{row}'
                        img['product_col'] = 0
                        img['product_score'] = 0
            
            analysis['sheets'][sheet_name] = sheet_info
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            for row, images in sheet_info['images_by_row'].items():
                if row not in analysis['row_images']:
                    analysis['row_images'][row] = []
                analysis['row_images'][row].extend(images)
        
        return analysis
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {excel_path}: {e}")
        return None

def create_row_based_image_mapping(excel_files):
    """–°–æ–∑–¥–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Å—Ç—Ä–æ–∫–∞–º"""
    print("üó∫Ô∏è  –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Å—Ç—Ä–æ–∫–∞–º...")
    
    all_images = []
    
    for excel_file in excel_files:
        if os.path.exists(excel_file):
            print(f"\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {excel_file}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            analysis = analyze_excel_by_rows(excel_file)
            if analysis:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                output_dir = f"storage/images/products_parsed/{os.path.basename(excel_file).replace('.xlsx', '')}"
                os.makedirs(output_dir, exist_ok=True)
                
                extracted_images = extract_images_from_excel_zip(excel_file, output_dir)
                
                # –°–≤—è–∑—ã–≤–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
                image_index = 0
                for row, images in analysis['row_images'].items():
                    for img_info in images:
                        if image_index < len(extracted_images):
                            extracted = extracted_images[image_index]
                            
                            all_images.append({
                                'excel_file': excel_file,
                                'sheet_name': analysis['sheets']['Copy of –ü—Ä–æ—Å—á–µ—Ç']['name'],
                                'row': row,
                                'col': img_info['col'],
                                'product_name': img_info['product_name'],
                                'product_col': img_info['product_col'],
                                'product_score': img_info['product_score'],
                                'image_path': extracted['saved_path'],
                                'image_filename': extracted['filename']
                            })
                            
                            image_index += 1
    
    return all_images

def map_images_to_products_by_rows(image_mapping):
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º"""
    print("üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º...")
    
    db = CommercialProposalsDB(DATABASE_URL.replace('.db', '_v4.db'))
    
    with db.get_session() as session:
        from database.models_v4 import Product, ProductImage
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        products = session.query(Product).all()
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: {len(products)}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        products_by_name = {}
        for product in products:
            normalized_name = product.name.strip().lower()
            if normalized_name not in products_by_name:
                products_by_name[normalized_name] = []
            products_by_name[normalized_name].append(product)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        row_groups = {}
        for image_info in image_mapping:
            row = image_info['row']
            if row not in row_groups:
                row_groups[row] = []
            row_groups[row].append(image_info)
        
        print(f"üìä –ì—Ä—É–ø–ø —Å—Ç—Ä–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {len(row_groups)}")
        
        mapped_count = 0
        
        for row, images in row_groups.items():
            print(f"\nüìã –°—Ç—Ä–æ–∫–∞ {row}: {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
            first_image = images[0]
            product_name = first_image['product_name']
            
            if product_name.startswith('Unknown_'):
                print(f"  ‚ö†Ô∏è  –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {product_name}")
                continue
            
            # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            normalized_name = product_name.lower()
            matching_products = products_by_name.get(normalized_name, [])
            
            if not matching_products:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
                for norm_name, prods in products_by_name.items():
                    if normalized_name in norm_name or norm_name in normalized_name:
                        matching_products = prods
                        break
            
            if matching_products:
                product = matching_products[0]
                print(f"  ‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: {product_name} -> {product.name} #{product.id}")
                
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –∫ —Ç–æ–≤–∞—Ä—É
                for i, image_info in enumerate(images):
                    new_image_name = f"product_{product.id}_row_{row}_{i+1}.jpg"
                    new_image_path = f"storage/images/products_parsed/{new_image_name}"
                    
                    try:
                        # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        shutil.copy2(image_info['image_path'], new_image_path)
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
                        image_type = 'main' if i == 0 else 'additional'
                        product_image = ProductImage(
                            product_id=product.id,
                            local_path=new_image_path,
                            image_type=image_type
                        )
                        session.add(product_image)
                        mapped_count += 1
                        
                        print(f"    üñºÔ∏è  {image_info['image_filename']} -> {new_image_name} ({image_type})")
                        
                    except Exception as e:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            else:
                print(f"  ‚ö†Ô∏è  –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: '{product_name}'")
        
        session.commit()
        print(f"\n‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {mapped_count}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Å—Ç—Ä–æ–∫–∞–º")
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    clear_existing_images()
    
    # –°–ø–∏—Å–æ–∫ Excel —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    excel_files = [
        "storage/excel_files/original_sheet.xlsx",
        "storage/excel_files/–í—Ç–æ—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞_1757933430.xlsx", 
        "storage/excel_files/–ú–µ—Ä—á –¥–ª—è Sense_1757934153.xlsx"
    ]
    
    # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    image_mapping = create_row_based_image_mapping(excel_files)
    
    print(f"\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_mapping)}")
    
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    map_images_to_products_by_rows(image_mapping)
    
    print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
