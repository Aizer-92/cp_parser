#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è v4 —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import pandas as pd
import openpyxl
from pathlib import Path
from database.manager_v4 import CommercialProposalsDB
from config import DATABASE_URL
import re

def parse_excel_final(excel_path):
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = CommercialProposalsDB(DATABASE_URL.replace('.db', '_v4.db'))
    
    # –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
    excel_path = Path(excel_path)
    
    if not excel_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_path}")
        return
    
    print(f"üîÑ –ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞: {excel_path}")
    
    # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    try:
        wb = openpyxl.load_workbook(excel_path)
        ws = wb.active
        
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {ws.max_row} —Å—Ç—Ä–æ–∫ x {ws.max_column} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        # –°—Ç—Ä–æ–∫–∞ 2: –§–æ—Ç–æ, –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –ö–∞—Å—Ç–æ–º, –¢–∏—Ä–∞–∂, –î–æ—Å—Ç–∞–≤–∫–∞ –ñ–î, ..., –î–æ—Å—Ç–∞–≤–∫–∞ –ê–í–ò–ê
        # –°—Ç—Ä–æ–∫–∞ 3: ..., –¶–µ–Ω–∞ –∑–∞ —à—Ç., $, –¶–µ–Ω–∞ –∑–∞ —à—Ç., —Ä—É–±, –°—Ä–æ–∫ —Ç–∏—Ä–∞–∂–∞, –∫.–¥., –¶–µ–Ω–∞ –∑–∞ —à—Ç., $
        
        product_name_col = 2  # B - –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        characteristics_col = 3  # C - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        custom_design_col = 4  # D - –ö–∞—Å—Ç–æ–º
        quantity_col = 5  # E - –¢–∏—Ä–∞–∂
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_variants = {
            '–ñ–î': {
                'price_usd_col': 6,  # F - –¶–µ–Ω–∞ –∑–∞ —à—Ç., $
                'price_rub_col': 7,  # G - –¶–µ–Ω–∞ –∑–∞ —à—Ç., —Ä—É–±
                'delivery_time_col': 8  # H - –°—Ä–æ–∫ —Ç–∏—Ä–∞–∂–∞, –∫.–¥.
            },
            '–ê–í–ò–ê': {
                'price_usd_col': 9,  # I - –¶–µ–Ω–∞ –∑–∞ —à—Ç., $
                'price_rub_col': 10,  # J - –¶–µ–Ω–∞ –∑–∞ —à—Ç., —Ä—É–±
                'delivery_time_col': 11  # K - –°—Ä–æ–∫ —Ç–∏—Ä–∞–∂–∞, –∫.–¥.
            },
            '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä': {
                'price_usd_col': 12,  # L - –¶–µ–Ω–∞ –∑–∞ —à—Ç., $
                'price_rub_col': 13,  # M - –¶–µ–Ω–∞ –∑–∞ —à—Ç., —Ä—É–±
                'delivery_time_col': 14  # N - –°—Ä–æ–∫ —Ç–∏—Ä–∞–∂–∞, –∫.–¥.
            }
        }
        
        print(f"üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫:")
        print(f"  - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product_name_col} (B)")
        print(f"  - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {characteristics_col} (C)")
        print(f"  - –ö–∞—Å—Ç–æ–º: {custom_design_col} (D)")
        print(f"  - –¢–∏—Ä–∞–∂: {quantity_col} (E)")
        print(f"üöö –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏:")
        for variant, cols in delivery_variants.items():
            print(f"  - {variant}: USD={cols['price_usd_col']}, RUB={cols['price_rub_col']}, –°—Ä–æ–∫={cols['delivery_time_col']}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å 4-–π —Å—Ç—Ä–æ–∫–∏ (–∏–Ω–¥–µ–∫—Å 4)
        products_created = 0
        offers_created = 0
        
        for row_num in range(4, ws.max_row + 1):
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            product_name_cell = ws.cell(row=row_num, column=product_name_col)
            product_name = product_name_cell.value
            
            if not product_name or str(product_name).strip() == '' or str(product_name).strip() == ' ':
                continue
            
            product_name = str(product_name).strip()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            characteristics_cell = ws.cell(row=row_num, column=characteristics_col)
            characteristics = str(characteristics_cell.value).strip() if characteristics_cell.value else None
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º
            custom_design_cell = ws.cell(row=row_num, column=custom_design_col)
            custom_design = str(custom_design_cell.value).strip() if custom_design_cell.value else None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏—Ä–∞–∂
            quantity_cell = ws.cell(row=row_num, column=quantity_col)
            quantity = None
            if quantity_cell.value:
                try:
                    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                    quantity_str = str(quantity_cell.value).replace(' ', '').replace(',', '')
                    quantity = int(float(quantity_str))
                except:
                    pass
            
            print(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä: {product_name}")
            if quantity:
                print(f"  üìä –¢–∏—Ä–∞–∂: {quantity:,} —à—Ç")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
            product = db.create_product(
                name=product_name,
                description=characteristics,
                custom_design=custom_design,
                sheet_id=1
            )
            products_created += 1
            
            # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
            for variant, cols in delivery_variants.items():
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤ USD
                price_usd_cell = ws.cell(row=row_num, column=cols['price_usd_col'])
                price_usd = None
                if price_usd_cell.value:
                    try:
                        price_usd = float(price_usd_cell.value)
                    except:
                        pass
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤ RUB
                price_rub_cell = ws.cell(row=row_num, column=cols['price_rub_col'])
                price_rub = None
                if price_rub_cell.value:
                    try:
                        price_rub = float(price_rub_cell.value)
                    except:
                        pass
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏
                delivery_time_cell = ws.cell(row=row_num, column=cols['delivery_time_col'])
                delivery_time = str(delivery_time_cell.value).strip() if delivery_time_cell.value else None
                
                # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–µ–Ω–∞
                if price_usd is not None or price_rub is not None:
                    offer = db.create_price_offer(
                        product_id=product.id,
                        route_name=variant,
                        quantity=quantity,
                        price_usd=price_usd,
                        price_rub=price_rub,
                        delivery_time=delivery_time
                    )
                    offers_created += 1
                    
                    print(f"  ‚úÖ {variant}: ${price_usd} / {price_rub} —Ä—É–± / {delivery_time} –¥–Ω–µ–π")
        
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"  - –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {products_created}")
        print(f"  - –°–æ–∑–¥–∞–Ω–æ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {offers_created}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = db.get_statistics()
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(f"  - –¢–æ–≤–∞—Ä–æ–≤: {stats['total_products']}")
        print(f"  - –¶–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats['total_price_offers']}")
        print(f"  - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats['total_images']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    parse_excel_final()
