#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.manager_v4 import CommercialProposalsDB
import shutil
import glob

def clear_all_images():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ë–î –∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üßπ –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    db = CommercialProposalsDB('sqlite:///commercial_proposals_v4.db')
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î
    with db.get_session() as session:
        from database.models_v4 import ProductImage
        deleted_count = session.query(ProductImage).count()
        session.query(ProductImage).delete()
        session.commit()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –∏–∑ –ë–î: {deleted_count}")
    
    # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    if os.path.exists('storage/images/products_parsed'):
        shutil.rmtree('storage/images/products_parsed')
        print("‚úÖ –û—á–∏—â–µ–Ω–∞ –ø–∞–ø–∫–∞ storage/images/products_parsed")
    
    os.makedirs('storage/images/products_parsed', exist_ok=True)
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞ storage/images/products_parsed")

def find_and_map_images():
    """–ù–∞—Ö–æ–¥–∏—Ç –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("üîç –ò—â–µ–º –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    db = CommercialProposalsDB('sqlite:///commercial_proposals_v4.db')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    products = db.get_all_products_with_details(limit=1000)
    products_by_name = {}
    
    for product, _, _ in products:
        normalized_name = product.name.lower().strip()
        if normalized_name not in products_by_name:
            products_by_name[normalized_name] = []
        products_by_name[normalized_name].append(product)
    
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_dirs = [
        'storage/images/products_original_sheet',
        'storage/images/products_–í—Ç–æ—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞_1757933430',
        'storage/images/products_–í—Ç–æ—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞_1757933504'
    ]
    
    all_images = []
    for img_dir in image_dirs:
        if os.path.exists(img_dir):
            images = glob.glob(os.path.join(img_dir, "*.jpg")) + glob.glob(os.path.join(img_dir, "*.png"))
            all_images.extend(images)
    
    print(f"üñºÔ∏è  –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(all_images)}")
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
    product_image_mapping = {
        '–∫–∞—Ä–¥—Ö–æ–ª–¥–µ—Ä': ['product_row_4_col_18_3.jpg', 'product_row_4_col_18_4.jpg'],
        '–æ–±–ª–æ–∂–∫–∞ –¥–ª—è –ø–∞—Å–ø–æ—Ä—Ç–∞': ['product_row_5_col_1_0.jpg', 'product_row_5_col_18_4.jpg'],
        '—Ñ—É—Ç–ª—è—Ä –¥–ª—è –æ—á–∫–æ–≤': ['product_row_6_col_1_1.jpg', 'product_row_6_col_18_16.jpg', 'product_row_6_col_18_17.jpg'],
        '—Ä—É—á–∫–∞': ['product_row_7_col_1_7.jpg', 'product_row_7_col_18_9.jpg', 'product_row_7_col_18_10.jpg'],
        '—Ç–∞–±–ª–µ—Ç–Ω–∏—Ü–∞': ['product_row_9_col_1_8.jpg', 'product_row_9_col_18_5.jpg', 'product_row_9_col_18_6.jpg'],
        '–Ω–∞–±–æ—Ä –∫–∞—Ä–∞–Ω–¥–∞—à–µ–π 6 —Ü–≤–µ—Ç–æ–≤': ['product_row_11_col_1_11.jpg', 'product_row_11_col_18_13.jpg'],
        '–∫—Ä—É–∂–∫–∞': ['product_row_13_col_1_12.jpg', 'product_row_13_col_18_14.jpg', 'product_row_13_col_18_15.jpg'],
        '–µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫': ['product_row_4_col_1_0.jpg', 'product_row_4_col_15_1.jpg', 'product_row_1_col_1_2.jpg']
    }
    
    mapped_count = 0
    
    for normalized_name, image_patterns in product_image_mapping.items():
        if normalized_name in products_by_name:
            products = products_by_name[normalized_name]
            for product in products:
                # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                found_images = []
                for img_path in all_images:
                    img_name = os.path.basename(img_path)
                    for pattern in image_patterns:
                        if pattern in img_name:
                            found_images.append(img_path)
                            break
                
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                for i, img_path in enumerate(found_images):
                    if os.path.exists(img_path):
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                        new_name = f"product_{product.id}_{'main' if i == 0 else f'additional_{i}'}.jpg"
                        new_path = os.path.join('storage/images/products_parsed', new_name)
                        
                        # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        shutil.copy2(img_path, new_path)
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
                        image_type = 'main' if i == 0 else 'additional'
                        db.create_product_image(
                            product_id=product.id,
                            image_path=new_path,
                            image_type=image_type
                        )
                        mapped_count += 1
                        print(f"  ‚úÖ {product.name} -> {new_name} ({image_type})")
    
    print(f"\n‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {mapped_count}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("=" * 50)
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    clear_all_images()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    find_and_map_images()
    
    print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
