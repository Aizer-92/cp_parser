#!/usr/bin/env python3
"""
–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Excel —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞
"""

import os
import sys
import zipfile
import xml.etree.ElementTree as ET
from openpyxl import load_workbook
import shutil
from PIL import Image
import io

sys.path.append('.')
from database.manager_v4 import CommercialProposalsDB
from config import DATABASE_URL_V4
from sqlalchemy import text

def extract_images_with_order(excel_file_path, output_dir):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ Excel"""
    
    print(f"üñºÔ∏è  –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Excel —Ñ–∞–π–ª–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel —Ñ–∞–π–ª
    workbook = load_workbook(excel_file_path, data_only=True)
    sheet = workbook.active
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    products_by_row = {}
    for row_num in range(4, sheet.max_row + 1):
        cell_c = sheet.cell(row=row_num, column=3)  # –ö–æ–ª–æ–Ω–∫–∞ C - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        if cell_c.value and isinstance(cell_c.value, str) and cell_c.value.strip():
            product_name = cell_c.value.strip()
            if product_name != '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ':
                products_by_row[row_num] = product_name
    
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Excel: {len(products_by_row)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏—Ö
    image_positions = []
    extracted_images = []
    
    try:
        with zipfile.ZipFile(excel_file_path, 'r') as z:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_files = [name for name in z.namelist() if name.startswith('xl/media/image')]
            print(f"üì∑ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Excel: {len(image_files)}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for i, name in enumerate(image_files):
                image_data = z.read(name)
                try:
                    img = Image.open(io.BytesIO(image_data))
                    img.verify()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    temp_name = f"image_{i+1:02d}_{os.path.basename(name)}"
                    temp_path = os.path.join(output_dir, temp_name)
                    with open(temp_path, 'wb') as f:
                        f.write(image_data)
                    
                    extracted_images.append({
                        'original_name': name,
                        'temp_path': temp_path,
                        'format': img.format,
                        'index': i
                    })
                    print(f"  ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ: {temp_name}")
                except Exception as e:
                    print(f"  ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {name}")
            
            # –¢–µ–ø–µ—Ä—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            drawing_files = [name for name in z.namelist() if 'xl/drawings/drawing' in name]
            print(f"üìê –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
            
            for drawing_file in drawing_files:
                try:
                    drawing_data = z.read(drawing_file)
                    root = ET.fromstring(drawing_data)
                    
                    for anchor in root.findall('.//{http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing}oneCellAnchor'):
                        from_elem = anchor.find('.//{http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing}from')
                        if from_elem is not None:
                            row_elem = from_elem.find('.//{http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing}row')
                            col_elem = from_elem.find('.//{http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing}col')
                            if row_elem is not None and col_elem is not None:
                                row = int(row_elem.text) + 1
                                col = int(col_elem.text) + 1
                                
                                # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
                                product_name = products_by_row.get(row, f"Unknown_row_{row}")
                                
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                if col == 1:  # –ö–æ–ª–æ–Ω–∫–∞ A - –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                    image_type = 'main'
                                elif col == 16:  # –ö–æ–ª–æ–Ω–∫–∞ P - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                    image_type = 'additional'
                                else:
                                    image_type = 'other'
                                
                                image_positions.append({
                                    'row': row,
                                    'col': col,
                                    'product_name': product_name,
                                    'image_type': image_type,
                                    'drawing_file': drawing_file
                                })
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {drawing_file}: {e}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Excel: {e}")
        return [], []
    
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(extracted_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(image_positions)} –ø–æ–∑–∏—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    return extracted_images, image_positions

def create_correct_mapping_with_order(extracted_images, image_positions, output_dir):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –ø–æ—Ä—è–¥–∫–∞"""
    
    print(f"\nüîó –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    products_images = {}
    for pos in image_positions:
        product_name = pos['product_name']
        if product_name not in products_images:
            products_images[product_name] = {'main': [], 'additional': []}
        products_images[product_name][pos['image_type']].append(pos)
    
    print(f"üì¶ –¢–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:")
    for product_name, images in products_images.items():
        main_count = len(images['main'])
        additional_count = len(images['additional'])
        print(f"  {product_name}: {main_count} –æ—Å–Ω–æ–≤–Ω—ã—Ö, {additional_count} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö")
    
    # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
    mappings = []
    image_index = 0
    
    for product_name, images in products_images.items():
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for i, pos in enumerate(images['main']):
            if image_index < len(extracted_images):
                img_info = extracted_images[image_index]
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                new_image_name = f"product_{product_name.replace(' ', '_').replace('/', '_')}_main_{i+1}.jpg"
                new_image_path = os.path.join(output_dir, new_image_name)
                
                # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                shutil.copy2(img_info['temp_path'], new_image_path)
                
                mappings.append({
                    'product_name': product_name,
                    'image_path': new_image_path,
                    'relative_path': f"storage/images/products_parsed/{new_image_name}",
                    'image_type': 'main',
                    'row': pos['row'],
                    'original_index': img_info['index']
                })
                
                print(f"  ‚úÖ {product_name} (—Å—Ç—Ä–æ–∫–∞ {pos['row']}) -> {new_image_name} (–æ—Å–Ω–æ–≤–Ω–æ–µ, –∏–Ω–¥–µ–∫—Å {img_info['index']})")
                image_index += 1
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for i, pos in enumerate(images['additional']):
            if image_index < len(extracted_images):
                img_info = extracted_images[image_index]
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                new_image_name = f"product_{product_name.replace(' ', '_').replace('/', '_')}_additional_{i+1}.jpg"
                new_image_path = os.path.join(output_dir, new_image_name)
                
                # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                shutil.copy2(img_info['temp_path'], new_image_path)
                
                mappings.append({
                    'product_name': product_name,
                    'image_path': new_image_path,
                    'relative_path': f"storage/images/products_parsed/{new_image_name}",
                    'image_type': 'additional',
                    'row': pos['row'],
                    'original_index': img_info['index']
                })
                
                print(f"  ‚úÖ {product_name} (—Å—Ç—Ä–æ–∫–∞ {pos['row']}) -> {new_image_name} (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ, –∏–Ω–¥–µ–∫—Å {img_info['index']})")
                image_index += 1
    
    return mappings

def fix_image_extraction():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    db = CommercialProposalsDB(DATABASE_URL_V4)
    
    # 1. –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ "–ú–µ—Ä—á –¥–ª—è Sense"
    print("üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ '–ú–µ—Ä—á –¥–ª—è Sense'...")
    session = db.get_session()
    try:
        session.execute(text('DELETE FROM product_images WHERE product_id >= 29'))
        session.commit()
        print("‚úÖ –û—á–∏—â–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ '–ú–µ—Ä—á –¥–ª—è Sense'")
    finally:
        session.close()
    
    # 2. –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    images_output_dir = "storage/images/products_parsed"
    if os.path.exists(images_output_dir):
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ "–ú–µ—Ä—á –¥–ª—è Sense"
        for file in os.listdir(images_output_dir):
            if file.startswith('product_') and any(name in file for name in ['–•—É–¥–∏', '–®–ê–ü–ö–ê', '–®–û–ü–ü–ï–†', '–ë—Ä–µ–ª–æ–∫–∏', '–î–£–¢–´–ô', '–ó–æ–Ω—Ç', '–ü–∏—Å—å–º–µ–Ω–Ω—ã–π', '–¢–µ—Ä–º–æ–∫—Ä—É–∂–∫–∞', '–°—É–º–∫–∞', '–®–æ–ø–ø–µ—Ä']):
                os.remove(os.path.join(images_output_dir, file))
        print(f"‚úÖ –û—á–∏—â–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ '–ú–µ—Ä—á –¥–ª—è Sense' –∏–∑ –ø–∞–ø–∫–∏")
    
    # 3. –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞
    excel_file = "storage/excel_files/–ú–µ—Ä—á –¥–ª—è Sense_1758096973.xlsx"
    if not os.path.exists(excel_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_file}")
        return
    
    extracted_images, image_positions = extract_images_with_order(excel_file, images_output_dir)
    
    if not extracted_images or not image_positions:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ–∑–∏—Ü–∏–∏")
        return
    
    # 4. –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É
    mappings = create_correct_mapping_with_order(extracted_images, image_positions, images_output_dir)
    
    # 5. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î
    products_with_details = db.get_all_products_with_details(limit=50)
    merch_sense_products = [(p, po, im) for p, po, im in products_with_details if p.id >= 29]
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤
    product_name_map = {}
    for product, price_offers, images in merch_sense_products:
        product_name_map[product.name.strip().lower()] = product
    
    # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    mapped_count = 0
    for mapping in mappings:
        product_name = mapping['product_name'].strip().lower()
        
        if product_name in product_name_map:
            product = product_name_map[product_name]
            
            try:
                db.create_product_image(
                    product_id=product.id,
                    image_path=mapping['relative_path'],
                    image_type=mapping['image_type']
                )
                mapped_count += 1
                print(f"  ‚úÖ {product.name} (ID: {product.id}) -> {os.path.basename(mapping['image_path'])} ({mapping['image_type']})")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product.name}: {e}")
        else:
            print(f"  ‚ö†Ô∏è –¢–æ–≤–∞—Ä '{mapping['product_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
    
    print(f"\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–∏–≤—è–∑–∞–Ω–æ {mapped_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
    
    # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    for product, price_offers, images in merch_sense_products:
        main_images = [img for img in images if img.image_type == 'main']
        additional_images = [img for img in images if img.image_type == 'additional']
        print(f"  {product.name} (ID: {product.id}) - {len(main_images)} –æ—Å–Ω–æ–≤–Ω—ã—Ö, {len(additional_images)} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö")

if __name__ == "__main__":
    fix_image_extraction()
