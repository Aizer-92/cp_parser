#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ —Ç–∏—Ä–∞–∂—É
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import pandas as pd
import openpyxl
from pathlib import Path
import re

def parse_excel_grouped(excel_path):
    """–ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π —Ç–æ–≤–∞—Ä–æ–≤"""
    
    excel_path = Path(excel_path)
    
    if not excel_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_path}")
        return []
    
    print(f"üîÑ –ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞: {excel_path}")
    
    try:
        wb = openpyxl.load_workbook(excel_path)
        ws = wb.active
        
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {ws.max_row} —Å—Ç—Ä–æ–∫ x {ws.max_column} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        product_name_col = 2  # B - –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        characteristics_col = 3  # C - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        custom_design_col = 4  # D - –ö–∞—Å—Ç–æ–º
        quantity_col = 5  # E - –¢–∏—Ä–∞–∂
        
        # –ò—â–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º (—Å—Ç—Ä–æ–∫–∞ 2) –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º (—Å—Ç—Ä–æ–∫–∞ 3)
        delivery_variants = {}
        header_row = 2
        subheader_row = 3
        
        for col in range(6, ws.max_column + 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (—Å—Ç—Ä–æ–∫–∞ 2)
            header_cell = ws.cell(row=header_row, column=col)
            header_value = header_cell.value
            if not header_value:
                continue
                
            header_text = str(header_value).strip().lower()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            route_type = None
            if '–∂–¥' in header_text or '–∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω' in header_text:
                route_type = '–ñ–î'
            elif '–∞–≤–∏–∞' in header_text or '—Å–∞–º–æ–ª–µ—Ç' in header_text:
                route_type = '–ê–í–ò–ê'
            elif '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä' in header_text:
                route_type = '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä'
            elif '–æ–±—Ä–∞–∑–µ—Ü' in header_text or 'sample' in header_text:
                route_type = '–û–±—Ä–∞–∑–µ—Ü'
            
            if route_type and route_type not in delivery_variants:
                delivery_variants[route_type] = {
                    'price_usd_col': None,
                    'price_rub_col': None,
                    'delivery_time_col': None,
                    'sample_price_col': None,
                    'sample_time_col': None
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Å—Ç—Ä–æ–∫–∞ 3) –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–ª–æ–Ω–∫–∏
            subheader_cell = ws.cell(row=subheader_row, column=col)
            subheader_value = subheader_cell.value
            if subheader_value:
                subheader_text = str(subheader_value).strip().lower()
                
                if route_type:
                    if '$' in subheader_text or 'usd' in subheader_text or '–¥–æ–ª–ª–∞—Ä' in subheader_text:
                        delivery_variants[route_type]['price_usd_col'] = col
                    elif '—Ä—É–±' in subheader_text or 'rub' in subheader_text:
                        delivery_variants[route_type]['price_rub_col'] = col
                    elif '—Å—Ä–æ–∫' in subheader_text and '—Ç–∏—Ä–∞–∂–∞' in subheader_text:
                        delivery_variants[route_type]['delivery_time_col'] = col
                    elif '—Å—Ä–æ–∫' in subheader_text and ('—Ñ–æ—Ç–æ' in subheader_text or '–≤–∏–¥–µ–æ' in subheader_text):
                        delivery_variants[route_type]['sample_time_col'] = col
                    elif '—Å—Ä–æ–∫' in subheader_text and '–¥–æ—Å—Ç–∞–≤–∫–æ–π' in subheader_text:
                        delivery_variants[route_type]['sample_time_col'] = col
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ—Å–µ–¥–Ω–∏–º –∫–æ–ª–æ–Ω–∫–∞–º –¥–ª—è —Ä—É–±–ª–µ–≤—ã—Ö —Ü–µ–Ω –∏ —Å—Ä–æ–∫–æ–≤
        for variant, cols in delivery_variants.items():
            if cols['price_usd_col'] and not cols['price_rub_col']:
                next_col = cols['price_usd_col'] + 1
                if next_col <= ws.max_column:
                    next_cell = ws.cell(row=subheader_row, column=next_col)
                    if next_cell.value and '—Ä—É–±' in str(next_cell.value).lower():
                        delivery_variants[variant]['price_rub_col'] = next_col
            
            if cols['price_rub_col'] and not cols['delivery_time_col']:
                next_col = cols['price_rub_col'] + 1
                if next_col <= ws.max_column:
                    next_cell = ws.cell(row=subheader_row, column=next_col)
                    if next_cell.value and '—Å—Ä–æ–∫' in str(next_cell.value).lower():
                        delivery_variants[variant]['delivery_time_col'] = next_col
        
        print(f"üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫:")
        print(f"  - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product_name_col} (B)")
        print(f"  - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {characteristics_col} (C)")
        print(f"  - –ö–∞—Å—Ç–æ–º: {custom_design_col} (D)")
        print(f"  - –¢–∏—Ä–∞–∂: {quantity_col} (E)")
        print(f"üöö –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏:")
        for variant, cols in delivery_variants.items():
            print(f"  - {variant}:")
            print(f"    USD: {cols['price_usd_col']}, RUB: {cols['price_rub_col']}")
            print(f"    –°—Ä–æ–∫: {cols['delivery_time_col']}, –û–±—Ä–∞–∑–µ—Ü: {cols['sample_price_col']}")
            print(f"    –°—Ä–æ–∫ –æ–±—Ä–∞–∑—Ü–∞: {cols['sample_time_col']}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        product_rows = []
        current_product_name = None
        
        for row_num in range(4, ws.max_row + 1):
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            product_name_cell = ws.cell(row=row_num, column=product_name_col)
            product_name = product_name_cell.value
            
            # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            if product_name and str(product_name).strip() != '' and str(product_name).strip() != ' ':
                current_product_name = str(product_name).strip()
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É
            if not current_product_name:
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            characteristics_cell = ws.cell(row=row_num, column=characteristics_col)
            characteristics = str(characteristics_cell.value).strip() if characteristics_cell.value else None
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º
            custom_design_cell = ws.cell(row=row_num, column=custom_design_col)
            custom_design = str(custom_design_cell.value).strip() if custom_design_cell.value else None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏—Ä–∞–∂
            quantity_cell = ws.cell(row=row_num, column=quantity_col)
            quantity = None
            if quantity_cell.value:
                try:
                    quantity_str = str(quantity_cell.value).replace(' ', '').replace(',', '')
                    quantity = int(float(quantity_str))
                except:
                    pass
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
            price_offers = []
            for variant, cols in delivery_variants.items():
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤ USD
                price_usd = None
                if cols['price_usd_col']:
                    price_usd_cell = ws.cell(row=row_num, column=cols['price_usd_col'])
                    if price_usd_cell.value:
                        try:
                            price_usd = float(price_usd_cell.value)
                        except:
                            pass
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤ RUB
                price_rub = None
                if cols['price_rub_col']:
                    price_rub_cell = ws.cell(row=row_num, column=cols['price_rub_col'])
                    if price_rub_cell.value:
                        try:
                            price_rub = float(price_rub_cell.value)
                        except:
                            pass
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏
                delivery_time = None
                if cols['delivery_time_col']:
                    delivery_time_cell = ws.cell(row=row_num, column=cols['delivery_time_col'])
                    if delivery_time_cell.value:
                        delivery_time = str(delivery_time_cell.value).strip()
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –æ–±—Ä–∞–∑—Ü–∞
                sample_price = None
                if cols['sample_price_col']:
                    sample_price_cell = ws.cell(row=row_num, column=cols['sample_price_col'])
                    if sample_price_cell.value:
                        try:
                            sample_price = float(sample_price_cell.value)
                        except:
                            pass
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–æ–∫ –æ–±—Ä–∞–∑—Ü–∞
                sample_time = None
                if cols['sample_time_col']:
                    sample_time_cell = ws.cell(row=row_num, column=cols['sample_time_col'])
                    if sample_time_cell.value:
                        sample_time = str(sample_time_cell.value).strip()
                
                # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–µ–Ω–∞
                if price_usd is not None or price_rub is not None or sample_price is not None:
                    is_sample = variant == '–û–±—Ä–∞–∑–µ—Ü'
                    
                    # –î–ª—è –æ–±—Ä–∞–∑—Ü–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É–±–ª–µ–≤—É—é —Ü–µ–Ω—É –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é
                    if is_sample and price_rub is not None:
                        sample_price = price_rub
                        price_rub = None
                    
                    offer = {
                        'route_name': variant,
                        'quantity': quantity,
                        'price_usd': price_usd,
                        'price_rub': price_rub,
                        'delivery_time': delivery_time,
                        'sample_price': sample_price,
                        'sample_time': sample_time,
                        'is_sample': is_sample
                    }
                    price_offers.append(offer)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–≤–∞—Ä–∞
            product_rows.append({
                'name': current_product_name,
                'description': characteristics,
                'characteristics': characteristics,
                'custom_design': custom_design,
                'quantity': quantity,
                'price_offers': price_offers,
                'images': []
            })
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ —Ç–∏—Ä–∞–∂—É
        grouped_products = {}
        
        for product_row in product_rows:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            key = f"{product_row['name']}_{product_row['quantity']}"
            
            if key not in grouped_products:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                grouped_products[key] = {
                    'name': product_row['name'],
                    'description': product_row['description'],
                    'characteristics': product_row['characteristics'],
                    'custom_design': product_row['custom_design'],
                    'quantity': product_row['quantity'],
                    'price_offers': [],
                    'images': []
                }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            grouped_products[key]['price_offers'].extend(product_row['price_offers'])
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
        products = list(grouped_products.values())
        
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"  - –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        
        total_offers = sum(len(p['price_offers']) for p in products)
        print(f"  - –ù–∞–π–¥–µ–Ω–æ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {total_offers}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É
        for product in products:
            print(f"\nüì¶ {product['name']} (—Ç–∏—Ä–∞–∂: {product['quantity']})")
            print(f"  –¶–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(product['price_offers'])}")
            for offer in product['price_offers']:
                if offer['is_sample']:
                    print(f"    üéØ {offer['route_name']}: {offer['sample_price']} —Ä—É–± ({offer['sample_time']} –¥–Ω–µ–π)")
                else:
                    price_usd = f"${offer['price_usd']}" if offer['price_usd'] else "N/A"
                    price_rub = f"{offer['price_rub']} —Ä—É–±" if offer['price_rub'] else "N/A"
                    delivery = f"({offer['delivery_time']} –¥–Ω–µ–π)" if offer['delivery_time'] else ""
                    print(f"    üì¶ {offer['route_name']}: {price_usd} / {price_rub} {delivery}")
        
        return products
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        import traceback
        traceback.print_exc()
        return []

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_file = "storage/excel_files/–í—Ç–æ—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞_1757933504.xlsx"
    products = parse_excel_grouped(test_file)
    print(f"\nüìä –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
