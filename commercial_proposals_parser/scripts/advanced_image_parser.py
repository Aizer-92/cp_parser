#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ç–æ—á–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é openpyxl –∏ zipfile –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
"""

import os
import sys
import zipfile
import shutil
from pathlib import Path
from openpyxl import load_workbook
from openpyxl.drawing.image import Image as OpenpyxlImage
from PIL import Image
import json
import xml.etree.ElementTree as ET

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.manager_v4 import CommercialProposalsDB
from config import DATABASE_URL

def clear_existing_images():
    """–û—á–∏—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    db = CommercialProposalsDB(DATABASE_URL.replace('.db', '_v4.db'))
    
    with db.get_session() as session:
        from database.models_v4 import ProductImage
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
        deleted_count = session.query(ProductImage).count()
        session.query(ProductImage).delete()
        session.commit()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –∏–∑ –ë–î: {deleted_count}")
    
    # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    images_dir = "storage/images/products_parsed"
    if os.path.exists(images_dir):
        shutil.rmtree(images_dir)
        print(f"‚úÖ –û—á–∏—â–µ–Ω–∞ –ø–∞–ø–∫–∞ {images_dir}")
    
    os.makedirs(images_dir, exist_ok=True)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞ {images_dir}")

def extract_images_from_zip(excel_path, output_dir):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Excel zip –∞—Ä—Ö–∏–≤–∞"""
    print(f"üì§ –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ zip: {excel_path}")
    
    try:
        with zipfile.ZipFile(excel_path, 'r') as zip_ref:
            # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ xl/media/
            image_files = [f for f in zip_ref.namelist() if f.startswith('xl/media/') and f.endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp'))]
            
            print(f"  üñºÔ∏è  –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∞—Ä—Ö–∏–≤–µ: {len(image_files)}")
            
            extracted_images = []
            
            for i, image_file in enumerate(image_files):
                try:
                    image_data = zip_ref.read(image_file)
                    original_name = os.path.basename(image_file)
                    new_name = f"image_{i+1}_{original_name}"
                    output_path = os.path.join(output_dir, new_name)
                    
                    with open(output_path, 'wb') as f:
                        f.write(image_data)
                    
                    extracted_images.append({
                        'original_path': image_file,
                        'saved_path': output_path,
                        'filename': new_name,
                        'index': i + 1
                    })
                    
                    print(f"    ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ: {original_name} -> {new_name}")
                    
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ {image_file}: {e}")
            
            return extracted_images
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ {excel_path}: {e}")
        return []

def analyze_drawing_relationships(excel_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ —è—á–µ–π–∫–∞–º–∏ —á–µ—Ä–µ–∑ drawing relationships"""
    print(f"üîç –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {excel_path}")
    
    try:
        with zipfile.ZipFile(excel_path, 'r') as zip_ref:
            # –ò—â–µ–º —Ñ–∞–π–ª—ã drawing relationships
            drawing_files = [f for f in zip_ref.namelist() if 'xl/drawings/drawing' in f and f.endswith('.xml')]
            
            print(f"  üìä –ù–∞–π–¥–µ–Ω–æ drawing —Ñ–∞–π–ª–æ–≤: {len(drawing_files)}")
            
            image_relationships = []
            
            for drawing_file in drawing_files:
                try:
                    # –ß–∏—Ç–∞–µ–º XML —Ñ–∞–π–ª
                    xml_content = zip_ref.read(drawing_file)
                    root = ET.fromstring(xml_content)
                    
                    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                    for elem in root.iter():
                        if 'pic' in elem.tag or 'picture' in elem.tag.lower():
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏
                            for child in elem.iter():
                                if 'anchor' in child.tag.lower():
                                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                                    for coord in child.iter():
                                        if 'col' in coord.tag.lower():
                                            col = int(coord.text) if coord.text else 0
                                        elif 'row' in coord.tag.lower():
                                            row = int(coord.text) if coord.text else 0
                                    
                                    image_relationships.append({
                                        'file': drawing_file,
                                        'row': row,
                                        'col': col
                                    })
                                    print(f"    üéØ –ù–∞–π–¥–µ–Ω–∞ —Å–≤—è–∑—å: —Å—Ç—Ä–æ–∫–∞ {row}, –∫–æ–ª–æ–Ω–∫–∞ {col}")
                    
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {drawing_file}: {e}")
                    continue
            
            return image_relationships
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–≤—è–∑–µ–π: {e}")
        return []

def analyze_excel_structure_advanced(excel_path):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Excel —Ñ–∞–π–ª–∞"""
    print(f"üîç –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {excel_path}")
    
    try:
        wb = load_workbook(excel_path, data_only=True)
        
        table_name = os.path.basename(excel_path).replace('.xlsx', '')
        
        analysis = {
            'file_path': excel_path,
            'table_name': table_name,
            'sheets': {},
            'products_found': [],
            'images_found': [],
            'image_relationships': []
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤—è–∑–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_relationships = analyze_drawing_relationships(excel_path)
        analysis['image_relationships'] = image_relationships
        
        for sheet_name in wb.sheetnames:
            ws = wb[sheet_name]
            print(f"  üìä –õ–∏—Å—Ç: {sheet_name}")
            
            sheet_info = {
                'name': sheet_name,
                'max_row': ws.max_row,
                'max_column': ws.max_column,
                'products': [],
                'images': []
            }
            
            # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –ø–µ—Ä–≤—ã—Ö 25 —Å—Ç—Ä–æ–∫–∞—Ö
            for row in range(1, min(26, ws.max_row + 1)):
                for col in range(1, min(26, ws.max_column + 1)):
                    try:
                        cell_value = ws.cell(row=row, column=col).value
                        if not cell_value:
                            continue
                            
                        cell_text = str(cell_value).strip()
                        if not cell_text or cell_text == 'None':
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
                        product_keywords = [
                            '–µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫', '—Ö—É–¥–∏', '—à–∞–ø–∫–∞', '–±–∏–Ω–∏', '—à–æ–ø–ø–µ—Ä', '–±—Ä–µ–ª–æ–∫', '—Ç–∞–±–ª–µ—Ç–Ω–∏—Ü–∞', 
                            '–∫–∞—Ä–¥—Ö–æ–ª–¥–µ—Ä', '–∑–æ–Ω—Ç', '–ø–∏—Å—å–º–µ–Ω–Ω—ã–π', '–Ω–∞–±–æ—Ä', '—Ç–µ—Ä–º–æ–∫—Ä—É–∂–∫–∞', '—Å—É–º–∫–∞',
                            '—Ñ—É—Ç–±–æ–ª–∫–∞', '–∫—Ä—É–∂–∫–∞', '—Ä—É—á–∫–∞', '–∫–∞—Ä–∞–Ω–¥–∞—à', '—Ñ—É—Ç–ª—è—Ä', '–æ–±–ª–æ–∂–∫–∞', '–∫–æ—Å–º–µ—Ç–∏—á–∫–∞',
                            '—á–µ—Ö–æ–ª', '–Ω–æ—É—Ç–±—É–∫', '–¥—É—Ç—ã–π', '–æ–±–ª–æ–∂–∫–∞ –¥–ª—è –ø–∞—Å–ø–æ—Ä—Ç–∞', '–Ω–∞–±–æ—Ä –∫–∞—Ä–∞–Ω–¥–∞—à–µ–π',
                            '—Ñ—É—Ç–ª—è—Ä –¥–ª—è –æ—á–∫–æ–≤', '–¥—É—Ç—ã–π —á–µ—Ö–æ–ª –¥–ª—è –Ω–æ—É—Ç–±—É–∫–∞'
                        ]
                        
                        for keyword in product_keywords:
                            if keyword.lower() in cell_text.lower():
                                product_info = {
                                    'name': cell_text,
                                    'row': row,
                                    'col': col,
                                    'keyword': keyword,
                                    'sheet': sheet_name
                                }
                                sheet_info['products'].append(product_info)
                                analysis['products_found'].append(product_info)
                                print(f"    üéØ –¢–æ–≤–∞—Ä: '{cell_text}' (—Å—Ç—Ä–æ–∫–∞ {row}, –∫–æ–ª–æ–Ω–∫–∞ {col})")
                                break
                    except Exception as e:
                        continue
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –ª–∏—Å—Ç–µ
            for i, image in enumerate(ws._images):
                try:
                    if hasattr(image, 'anchor') and image.anchor:
                        anchor = image.anchor
                        
                        if hasattr(anchor, '_from'):
                            from_cell = anchor._from
                            row = from_cell.row + 1
                            col = from_cell.col + 1
                        else:
                            row = getattr(anchor, 'row', 1)
                            col = getattr(anchor, 'col', 1)
                        
                        image_info = {
                            'index': i + 1,
                            'row': row,
                            'col': col,
                            'width': getattr(image, 'width', 0),
                            'height': getattr(image, 'height', 0),
                            'sheet': sheet_name
                        }
                        
                        sheet_info['images'].append(image_info)
                        analysis['images_found'].append(image_info)
                        print(f"    üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}: —Å—Ç—Ä–æ–∫–∞ {row}, –∫–æ–ª–æ–Ω–∫–∞ {col}")
                        
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {e}")
            
            analysis['sheets'][sheet_name] = sheet_info
        
        return analysis
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {excel_path}: {e}")
        return None

def find_closest_product_to_image(products, image_row, image_col, max_distance=5):
    """–ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π —Ç–æ–≤–∞—Ä –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è"""
    if not products:
        return None
    
    best_match = None
    best_distance = float('inf')
    
    for product in products:
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ —Ç–æ–≤–∞—Ä–∞
        distance = abs(product['row'] - image_row) + abs(product['col'] - image_col)
        
        if distance <= max_distance and distance < best_distance:
            best_distance = distance
            best_match = product
    
    return best_match

def process_single_excel_advanced(excel_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω Excel —Ñ–∞–π–ª –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º"""
    print(f"\nüìÅ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {excel_path}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    analysis = analyze_excel_structure_advanced(excel_path)
    if not analysis:
        return []
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    output_dir = f"storage/images/products_parsed/{analysis['table_name']}"
    os.makedirs(output_dir, exist_ok=True)
    
    extracted_images = extract_images_from_zip(excel_path, output_dir)
    
    # –°–≤—è–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    linked_images = []
    
    for i, extracted in enumerate(extracted_images):
        if i < len(analysis['images_found']):
            image_info = analysis['images_found'][i]
            
            # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ç–æ–≤–∞—Ä –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            closest_product = find_closest_product_to_image(
                analysis['products_found'], 
                image_info['row'], 
                image_info['col'],
                max_distance=3  # –£–º–µ–Ω—å—à–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            )
            
            if closest_product:
                linked_images.append({
                    'excel_file': excel_path,
                    'table_name': analysis['table_name'],
                    'sheet_name': image_info['sheet'],
                    'row': image_info['row'],
                    'col': image_info['col'],
                    'product_name': closest_product['name'],
                    'product_row': closest_product['row'],
                    'product_col': closest_product['col'],
                    'distance': abs(closest_product['row'] - image_info['row']) + abs(closest_product['col'] - image_info['col']),
                    'image_path': extracted['saved_path'],
                    'image_filename': extracted['filename']
                })
                print(f"    ‚úÖ {closest_product['name']} -> {extracted['filename']} (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {abs(closest_product['row'] - image_info['row']) + abs(closest_product['col'] - image_info['col'])})")
            else:
                print(f"    ‚ö†Ô∏è  –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {extracted['filename']} (—Å—Ç—Ä–æ–∫–∞ {image_info['row']}, –∫–æ–ª–æ–Ω–∫–∞ {image_info['col']})")
    
    return linked_images

def map_images_to_products_by_table(image_mapping):
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º —Å —É—á–µ—Ç–æ–º —Ç–∞–±–ª–∏—Ü—ã"""
    print("üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º —Å —É—á–µ—Ç–æ–º —Ç–∞–±–ª–∏—Ü—ã...")
    
    db = CommercialProposalsDB(DATABASE_URL.replace('.db', '_v4.db'))
    
    with db.get_session() as session:
        from database.models_v4 import Product, ProductImage
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        products = session.query(Product).all()
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: {len(products)}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        products_by_name = {}
        for product in products:
            normalized_name = product.name.strip().lower()
            if normalized_name not in products_by_name:
                products_by_name[normalized_name] = []
            products_by_name[normalized_name].append(product)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
        table_groups = {}
        for image_info in image_mapping:
            table_name = image_info['table_name']
            if table_name not in table_groups:
                table_groups[table_name] = []
            table_groups[table_name].append(image_info)
        
        print(f"üìä –ì—Ä—É–ø–ø —Ç–∞–±–ª–∏—Ü: {len(table_groups)}")
        
        mapped_count = 0
        
        for table_name, images in table_groups.items():
            print(f"\nüìã –¢–∞–±–ª–∏—Ü–∞: {table_name} ({len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
            
            for image_info in images:
                product_name = image_info['product_name'].strip()
                
                # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                normalized_name = product_name.lower()
                matching_products = products_by_name.get(normalized_name, [])
                
                if not matching_products:
                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
                    for norm_name, prods in products_by_name.items():
                        if normalized_name in norm_name or norm_name in normalized_name:
                            matching_products = prods
                            break
                
                if matching_products:
                    product = matching_products[0]
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã
                    new_image_name = f"product_{product.id}_{table_name}_{mapped_count + 1}.jpg"
                    new_image_path = f"storage/images/products_parsed/{new_image_name}"
                    
                    try:
                        # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        shutil.copy2(image_info['image_path'], new_image_path)
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
                        product_image = ProductImage(
                            product_id=product.id,
                            local_path=new_image_path,
                            image_type='main' if mapped_count == 0 else 'additional'
                        )
                        session.add(product_image)
                        mapped_count += 1
                        
                        print(f"  ‚úÖ {product_name} -> {product.name} #{product.id} -> {new_image_name}")
                        
                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                else:
                    print(f"  ‚ö†Ô∏è  –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: '{product_name}'")
        
        session.commit()
        print(f"\n‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {mapped_count}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ç–æ—á–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    clear_existing_images()
    
    # –°–ø–∏—Å–æ–∫ Excel —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    excel_files = [
        "storage/excel_files/original_sheet.xlsx",
        "storage/excel_files/–í—Ç–æ—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞_1757933430.xlsx", 
        "storage/excel_files/–ú–µ—Ä—á –¥–ª—è Sense_1757934153.xlsx"
    ]
    
    all_linked_images = []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω–æ
    for excel_file in excel_files:
        if os.path.exists(excel_file):
            linked_images = process_single_excel_advanced(excel_file)
            all_linked_images.extend(linked_images)
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_file}")
    
    print(f"\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(all_linked_images)}")
    
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º —Å —É—á–µ—Ç–æ–º —Ç–∞–±–ª–∏—Ü—ã
    map_images_to_products_by_table(all_linked_images)
    
    print("\n‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()
