#!/usr/bin/env python3
"""
–°–∫–∞—á–∏–≤–∞–Ω–∏–µ Google Sheets —Ç–∞–±–ª–∏—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel
"""

import os
import sys
import requests
from pathlib import Path
from urllib.parse import urlparse, parse_qs
import time

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from config import GOOGLE_SCOPES
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
import io

def get_google_service():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ Google Sheets API"""
    try:
        credentials_path = project_root / 'credentials' / 'service_account.json'
        credentials = Credentials.from_service_account_file(
            str(credentials_path),
            scopes=GOOGLE_SCOPES
        )
        service = build('sheets', 'v4', credentials=credentials)
        return service
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Google —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return None

def get_drive_service():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ Google Drive API"""
    try:
        credentials_path = project_root / 'credentials' / 'service_account.json'
        credentials = Credentials.from_service_account_file(
            str(credentials_path),
            scopes=GOOGLE_SCOPES
        )
        service = build('drive', 'v3', credentials=credentials)
        return service
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Google Drive —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return None

def extract_sheet_id(url):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ URL"""
    try:
        # –ü–∞—Ä—Å–∏–º URL
        parsed_url = urlparse(url)
        
        # –ò—â–µ–º ID –≤ –ø—É—Ç–∏
        path_parts = parsed_url.path.split('/')
        if 'd' in path_parts:
            sheet_id_index = path_parts.index('d') + 1
            if sheet_id_index < len(path_parts):
                sheet_id = path_parts[sheet_id_index]
                return sheet_id
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–æ–∏—Å–∫ –≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        query_params = parse_qs(parsed_url.query)
        if 'id' in query_params:
            return query_params['id'][0]
        
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ URL: {url}")
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID: {e}")
        return None

def download_sheet_as_excel(sheet_url, sheet_title=None):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ Google Sheets —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel"""
    
    print(f"üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {sheet_url}")
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∞–±–ª–∏—Ü—ã
        sheet_id = extract_sheet_id(sheet_url)
        if not sheet_id:
            return None
        
        print(f"üìã ID —Ç–∞–±–ª–∏—Ü—ã: {sheet_id}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Google Drive
        drive_service = get_drive_service()
        if not drive_service:
            return None
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel
        request = drive_service.files().export_media(
            fileId=sheet_id,
            mimeType='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è Excel —Ñ–∞–π–ª–æ–≤
        excel_dir = project_root / 'storage' / 'excel_files'
        excel_dir.mkdir(parents=True, exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        if not sheet_title:
            sheet_title = f"sheet_{sheet_id[:8]}"
        
        timestamp = int(time.time())
        filename = f"{sheet_title}_{timestamp}.xlsx"
        excel_path = excel_dir / filename
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        with open(excel_path, 'wb') as f:
            downloader = MediaIoBaseDownload(f, request)
            done = False
            while done is False:
                status, done = downloader.next_chunk()
                if status:
                    print(f"üì• –ü—Ä–æ–≥—Ä–µ—Å—Å: {int(status.progress() * 100)}%")
        
        print(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {excel_path}")
        return str(excel_path)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        return None

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ URL
    test_urls = [
        'https://docs.google.com/spreadsheets/d/1iB1J0TJevoHzrduqeySqO6gI_xLdhSDV9jxOdKICDY8/edit?gid=1464438736#gid=1464438736',
        'https://docs.google.com/spreadsheets/d/13DOK6_4ox-pmqurespTyWkAuHezBnHsbqFxAfIFnXd4/edit?gid=1628889079#gid=1628889079'
    ]
    
    for i, url in enumerate(test_urls, 1):
        print(f"\nüìä –¢–µ—Å—Ç {i}: {url}")
        result = download_sheet_as_excel(url, f"test_sheet_{i}")
        if result:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {result}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")

if __name__ == "__main__":
    main()
