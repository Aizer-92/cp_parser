#!/usr/bin/env python3
"""
–£–º–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–æ–≤–∞—Ä–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
"""

import os
import sys
import zipfile
import xml.etree.ElementTree as ET
from openpyxl import load_workbook
import shutil
from PIL import Image
import io

sys.path.append('.')
from database.manager_v4 import CommercialProposalsDB
from config import DATABASE_URL_V4
from sqlalchemy import text

def analyze_excel_structure(excel_file_path):
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Excel —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞: {excel_file_path}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel —Ñ–∞–π–ª
    workbook = load_workbook(excel_file_path, data_only=True)
    sheet = workbook.active
    
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ (–∏—â–µ–º –≤ –∫–æ–ª–æ–Ω–∫–µ C - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞)
    products_info = []
    for row_num in range(1, sheet.max_row + 1):
        cell_c = sheet.cell(row=row_num, column=3)  # –ö–æ–ª–æ–Ω–∫–∞ C - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        if cell_c.value and isinstance(cell_c.value, str) and cell_c.value.strip():
            product_name = cell_c.value.strip()
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if product_name not in ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']:
                products_info.append({
                    'row': row_num,
                    'name': product_name,
                    'cell': f'C{row_num}'
                })
    
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Excel: {len(products_info)}")
    for i, product in enumerate(products_info[:10], 1):
        print(f"  {i}. –°—Ç—Ä–æ–∫–∞ {product['row']}: {product['name']}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Excel
    extracted_images = []
    try:
        with zipfile.ZipFile(excel_file_path, 'r') as z:
            for name in z.namelist():
                if name.startswith('xl/media/image'):
                    image_data = z.read(name)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    try:
                        img = Image.open(io.BytesIO(image_data))
                        img.verify()
                        
                        extracted_images.append({
                            'original_name': name,
                            'image_data': image_data,
                            'format': img.format
                        })
                    except Exception as e:
                        print(f"  ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {name}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        return [], []
    
    print(f"üñºÔ∏è  –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(extracted_images)}")
    
    return products_info, extracted_images

def create_smart_mapping(products_info, extracted_images, output_dir):
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–º–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–æ–≤–∞—Ä–∞–º"""
    
    print(f"\nüîó –°–æ–∑–¥–∞–µ–º —É–º–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º –ø–æ –ø–æ—Ä—è–¥–∫—É
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    
    mappings = []
    
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    for i, product in enumerate(products_info):
        if i < len(extracted_images):
            img_info = extracted_images[i]
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            new_image_name = f"product_{product['name'].replace(' ', '_').replace('/', '_')}_main.jpg"
            new_image_path = os.path.join(output_dir, new_image_name)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with open(new_image_path, 'wb') as f:
                f.write(img_info['image_data'])
            
            mappings.append({
                'product_name': product['name'],
                'product_row': product['row'],
                'image_path': new_image_path,
                'original_name': img_info['original_name']
            })
            
            print(f"  ‚úÖ {product['name']} (—Å—Ç—Ä–æ–∫–∞ {product['row']}) -> {new_image_name}")
    
    return mappings

def fix_image_mapping_smart():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    db = CommercialProposalsDB(DATABASE_URL_V4)
    
    # 1. –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ "–ú–µ—Ä—á –¥–ª—è Sense"
    print("üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ '–ú–µ—Ä—á –¥–ª—è Sense'...")
    session = db.get_session()
    try:
        # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å ID >= 29 (–ú–µ—Ä—á –¥–ª—è Sense)
        session.execute(text('DELETE FROM product_images WHERE product_id >= 29'))
        session.commit()
        print("‚úÖ –û—á–∏—â–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ '–ú–µ—Ä—á –¥–ª—è Sense'")
    finally:
        session.close()
    
    # 2. –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    images_output_dir = "storage/images/products_parsed"
    if os.path.exists(images_output_dir):
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ "–ú–µ—Ä—á –¥–ª—è Sense"
        for file in os.listdir(images_output_dir):
            if file.startswith('product_') and any(name in file for name in ['–•—É–¥–∏', '–®–ê–ü–ö–ê', '–®–û–ü–ü–ï–†', '–ë—Ä–µ–ª–æ–∫–∏', '–î–£–¢–´–ô', '–ó–æ–Ω—Ç', '–ü–∏—Å—å–º–µ–Ω–Ω—ã–π', '–¢–µ—Ä–º–æ–∫—Ä—É–∂–∫–∞', '–°—É–º–∫–∞', '–®–æ–ø–ø–µ—Ä']):
                os.remove(os.path.join(images_output_dir, file))
        print(f"‚úÖ –û—á–∏—â–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ '–ú–µ—Ä—á –¥–ª—è Sense' –∏–∑ –ø–∞–ø–∫–∏")
    
    # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
    excel_file = "storage/excel_files/–ú–µ—Ä—á –¥–ª—è Sense_1758096973.xlsx"
    if not os.path.exists(excel_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_file}")
        return
    
    products_info, extracted_images = analyze_excel_structure(excel_file)
    
    if not products_info or not extracted_images:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞")
        return
    
    # 4. –°–æ–∑–¥–∞–µ–º —É–º–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É
    mappings = create_smart_mapping(products_info, extracted_images, images_output_dir)
    
    # 5. –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã "–ú–µ—Ä—á –¥–ª—è Sense" –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    products_with_details = db.get_all_products_with_details(limit=50)
    merch_sense_products = [(p, po, im) for p, po, im in products_with_details if p.id >= 29]
    
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ '–ú–µ—Ä—á –¥–ª—è Sense' –≤ –ë–î: {len(merch_sense_products)}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤
    product_name_map = {}
    for product, price_offers, images in merch_sense_products:
        product_name_map[product.name.strip().lower()] = product
    
    mapped_count = 0
    for mapping in mappings:
        product_name = mapping['product_name'].strip().lower()
        
        if product_name in product_name_map:
            product = product_name_map[product_name]
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤ –ë–î
            relative_path = f"storage/images/products_parsed/{os.path.basename(mapping['image_path'])}"
            db.create_product_image(
                product_id=product.id,
                image_path=relative_path,
                image_type='main'
            )
            
            mapped_count += 1
            print(f"  ‚úÖ {product.name} (ID: {product.id}) -> {os.path.basename(mapping['image_path'])}")
        else:
            print(f"  ‚ö†Ô∏è –¢–æ–≤–∞—Ä '{mapping['product_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
    
    print(f"\n‚úÖ –£–º–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–∏–≤—è–∑–∞–Ω–æ {mapped_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    for product, price_offers, images in merch_sense_products:
        print(f"  {product.name} (ID: {product.id}) - {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

if __name__ == "__main__":
    fix_image_mapping_smart()
