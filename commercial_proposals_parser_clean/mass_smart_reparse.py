#!/usr/bin/env python3
"""
–ú–∞—Å—Å–æ–≤—ã–π —É–º–Ω—ã–π –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å –æ—á–∏—Å—Ç–∫–æ–π –ë–î
"""

from smart_adaptive_parser import SmartAdaptiveParser
from database.manager_v4 import DatabaseManager
from database.models_v4 import SheetMetadata, Product, PriceOffer
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MassSmartReparser:
    """–ú–∞—Å—Å–æ–≤—ã–π —É–º–Ω—ã–π –ø–µ—Ä–µ–ø–∞—Ä—Å–µ—Ä"""
    
    def __init__(self):
        self.session = DatabaseManager.get_session()
        self.parser = SmartAdaptiveParser()
        
    def clean_and_reparse_all(self):
        """–û—á–∏—â–∞–µ—Ç –ë–î –∏ –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–º–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º"""
        
        print("üßπ –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•...")
        self._clean_database()
        
        print("\nü§ñ –ú–ê–°–°–û–í–´–ô –£–ú–ù–´–ô –ü–ê–†–°–ò–ù–ì...")
        self._reparse_all_tables()
        
        print("\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self._print_final_stats()
        
        print("\nüìö –û–¢–ß–ï–¢ –ü–û –ù–ï–û–ü–û–ó–ù–ê–ù–ù–´–ú –¢–ê–ë–õ–ò–¶–ê–ú:")
        print(self.parser.get_unknown_tables_report())
    
    def _clean_database(self):
        """–û—á–∏—â–∞–µ—Ç –ë–î –æ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–µ–Ω (–ù–û –ù–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø!)"""
        
        try:
            # –°—á–∏—Ç–∞–µ–º —á—Ç–æ –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å
            products_count = self.session.query(Product).count()
            prices_count = self.session.query(PriceOffer).count()
            
            print(f"   –¢–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {products_count}")
            print(f"   –¶–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {prices_count}")
            
            # –£–¥–∞–ª—è–µ–º —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            self.session.query(PriceOffer).delete()
            
            # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞—Å–∫–∞–¥–∞)
            self.session.query(Product).delete()
            
            self.session.commit()
            
            print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)")
            
        except Exception as e:
            self.session.rollback()
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")
            raise
    
    def _reparse_all_tables(self):
        """–ü–µ—Ä–µ–ø–∞—Ä—Å–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–º–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º"""
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
        sheets = self.session.query(SheetMetadata).filter(
            SheetMetadata.local_file_path.isnot(None),
            SheetMetadata.local_file_path != ''
        ).all()
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(sheets)}")
        
        success_count = 0
        error_count = 0
        
        for i, sheet in enumerate(sheets, 1):
            file_name = Path(sheet.local_file_path).name if sheet.local_file_path else "unknown"
            print(f"   [{i}/{len(sheets)}] –ü–∞—Ä—Å–∏–Ω–≥: {file_name}")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if not Path(sheet.local_file_path).exists():
                    print(f"      ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {sheet.local_file_path}")
                    error_count += 1
                    continue
                
                # –£–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                success = self.parser.parse_excel_smart(sheet.id)
                
                if success:
                    success_count += 1
                    print(f"      ‚úÖ –£—Å–ø–µ—à–Ω–æ")
                else:
                    error_count += 1
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–∞")
                    
            except Exception as e:
                error_count += 1
                print(f"      ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        print(f"\n   üìà –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–†–°–ò–ù–ì–ê:")
        print(f"      –£—Å–ø–µ—à–Ω–æ: {success_count}")
        print(f"      –û—à–∏–±–æ–∫: {error_count}")
        print(f"      –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_count/(success_count+error_count)*100:.1f}%")
    
    def _print_final_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        
        products_count = self.session.query(Product).count()
        prices_count = self.session.query(PriceOffer).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º
        products_with_prices = self.session.query(Product).join(PriceOffer).distinct().count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä—É–±–ª–µ–≤—ã–º —Ü–µ–Ω–∞–º
        rub_prices_count = self.session.query(PriceOffer).filter(
            PriceOffer.price_rub.isnot(None),
            PriceOffer.price_rub > 0
        ).count()
        
        # –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ç–æ–≤–∞—Ä
        avg_prices_per_product = prices_count / max(1, products_count)
        
        print(f"   üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: {products_count}")
        print(f"   üí∞ –¶–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {prices_count}")
        print(f"   üéØ –¢–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏: {products_with_prices} ({products_with_prices/max(1,products_count)*100:.1f}%)")
        print(f"   üá∑üá∫ –¶–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö: {rub_prices_count}")
        print(f"   üìä –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Ç–æ–≤–∞—Ä: {avg_prices_per_product:.2f}")
    
    def test_single_table(self, sheet_id: int):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        
        sheet = self.session.query(SheetMetadata).get(sheet_id)
        if not sheet:
            print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ —Å ID {sheet_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        file_name = Path(sheet.local_file_path).name if sheet.local_file_path else "unknown"
        print(f"üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´: {file_name}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        structure = self.parser.analyzer.analyze_file_structure(sheet.local_file_path)
        
        print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {structure.table_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {structure.confidence:.2f})")
        print(f"   –ö–æ–ª–æ–Ω–∫–∏: {list(structure.columns.keys())}")
        
        if structure.issues:
            print(f"   –ü—Ä–æ–±–ª–µ–º—ã: {structure.issues}")
        
        # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å
        success = self.parser.parse_excel_smart(sheet_id)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")

if __name__ == "__main__":
    reparser = MassSmartReparser()
    
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Å–Ω–∞—á–∞–ª–∞ –æ–¥–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞
    print("üß™ –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    # –ù–∞–π–¥–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    session = DatabaseManager.get_session()
    test_sheet = session.query(SheetMetadata).filter(
        SheetMetadata.local_file_path.contains("sheet_1nav9w2d_public.xlsx")
    ).first()
    
    if test_sheet:
        reparser.test_single_table(test_sheet.id)
    else:
        print("‚ùå –¢–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    session.close()
    
    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–Ω–≥–∞:
    # print("\n" + "="*50)
    # print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ü–ï–†–ï–ü–ê–†–°–ò–ù–ì–ê")
    # reparser.clean_and_reparse_all()


