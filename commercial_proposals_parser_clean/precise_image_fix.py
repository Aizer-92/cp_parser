#!/usr/bin/env python3
"""
–¢–æ—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä–æ–∫ –∏ –ø–æ–∑–∏—Ü–∏–π
"""

from database.manager_v4 import DatabaseManager
from database.models_v4 import Product, ProductImage, SheetMetadata
from sqlalchemy import text
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def precise_image_rebind():
    """–¢–æ—á–Ω–æ–µ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–æ–≤–∞—Ä–∞–º"""
    
    session = DatabaseManager.get_session()
    
    try:
        print("üéØ –¢–û–ß–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–†–ò–í–Ø–ó–û–ö –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
        print("=" * 60)
        
        # 1. –û–ß–ò–°–¢–ö–ê –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–• –ü–†–ò–í–Ø–ó–û–ö
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–æ–∫...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º product_id = NULL
        session.execute(text("UPDATE product_images SET product_id = NULL"))
        session.commit()
        
        # 2. –¢–û–ß–ù–ê–Ø –ü–ï–†–ï–ü–†–ò–í–Ø–ó–ö–ê –ü–û –ü–†–ê–í–ò–õ–ê–ú
        print("üéØ –¢–æ—á–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ –∫–æ–ª–æ–Ω–∫–∞–º...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = session.query(ProductImage).all()
        print(f"   –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
        products_by_sheet = {}
        products = session.query(Product).all()
        for product in products:
            sheet_id = product.sheet_id
            if sheet_id not in products_by_sheet:
                products_by_sheet[sheet_id] = []
            products_by_sheet[sheet_id].append(product)
        
        print(f"   –¢–∞–±–ª–∏—Ü —Å —Ç–æ–≤–∞—Ä–∞–º–∏: {len(products_by_sheet)}")
        
        # –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        fixed_count = 0
        failed_count = 0
        
        for img in images:
            try:
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–≤–∞—Ä
                best_product = _find_best_product_for_image(img, products_by_sheet, session)
                
                if best_product:
                    img.product_id = best_product.id
                    session.add(img)
                    fixed_count += 1
                    logger.debug(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {img.id} ‚Üí –¢–æ–≤–∞—Ä {best_product.id} ({best_product.name})")
                else:
                    failed_count += 1
                    logger.debug(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img.id}")
                    
            except Exception as e:
                failed_count += 1
                logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img.id}: {e}")
        
        # 3. –°–û–•–†–ê–ù–Ø–ï–ú –ò–ó–ú–ï–ù–ï–ù–ò–Ø
        session.commit()
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–û–ß–ù–û–ô –ü–ï–†–ï–ü–†–ò–í–Ø–ó–ö–ò:")
        print(f"‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω–æ: {fixed_count}")
        print(f"‚ùå –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ: {failed_count}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {fixed_count/(fixed_count+failed_count)*100:.1f}%")
        
        # 4. –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
        _validate_results(session)
        
        return fixed_count
        
    except Exception as e:
        session.rollback()
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return 0
        
    finally:
        session.close()

def _find_best_product_for_image(img, products_by_sheet, session):
    """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–π —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    sheet_id = img.sheet_id
    img_row = getattr(img, 'row', None)
    img_col = getattr(img, 'column', None)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –∏–∑ —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
    if sheet_id not in products_by_sheet:
        return None
    
    products = products_by_sheet[sheet_id]
    
    # –ü–†–ê–í–ò–õ–û 1: –¢–æ—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–æ–∫ —Ç–æ–≤–∞—Ä–∞
    for product in products:
        if img_row and product.start_row <= img_row <= product.end_row:
            return product
    
    # –ü–†–ê–í–ò–õ–û 2: –ë–ª–∏–∂–∞–π—à–∏–π —Ç–æ–≤–∞—Ä –ø–æ —Å—Ç—Ä–æ–∫–µ (¬±2 —Å—Ç—Ä–æ–∫–∏)
    if img_row:
        best_product = None
        min_distance = float('inf')
        
        for product in products:
            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ —Ç–æ–≤–∞—Ä–∞
            distance = min(
                abs(product.start_row - img_row),
                abs(product.end_row - img_row)
            )
            
            if distance <= 2 and distance < min_distance:
                min_distance = distance
                best_product = product
        
        if best_product:
            return best_product
    
    # –ü–†–ê–í–ò–õ–û 3: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ A - –≥–ª–∞–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    if img_col and img_col == 1:  # –ö–æ–ª–æ–Ω–∫–∞ A
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (–æ–±—ã—á–Ω–æ –≤ –Ω–∞—á–∞–ª–µ)
        products.sort(key=lambda p: p.start_row)
        return products[0] if products else None
    
    # –ü–†–ê–í–ò–õ–û 4: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
    if products:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
        sheet_images = session.query(ProductImage).filter(
            ProductImage.sheet_id == sheet_id
        ).order_by(ProductImage.id).all()
        
        img_index = next((i for i, si in enumerate(sheet_images) if si.id == img.id), 0)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
        product_index = img_index % len(products)
        return products[product_index]
    
    return None

def _validate_results(session):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∏"""
    
    print(f"\nüîç –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤
    sample_products = session.query(Product).limit(5).all()
    
    for product in sample_products:
        images = session.query(ProductImage).filter(
            ProductImage.product_id == product.id
        ).all()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        wrong_sheet_images = [img for img in images if img.sheet_id != product.sheet_id]
        
        print(f"üì¶ {product.name[:30]}...")
        print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
        if wrong_sheet_images:
            print(f"   ‚ùå {len(wrong_sheet_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —á—É–∂–∏—Ö —Ç–∞–±–ª–∏—Ü!")
        else:
            print(f"   ‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã")

if __name__ == "__main__":
    fixed = precise_image_rebind()
    
    print(f"\nüéâ –¢–û–ß–ù–ê–Ø –ü–ï–†–ï–ü–†–ò–í–Ø–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤—è–∑–æ–∫: {fixed}")
