#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–∞—Å—Å–æ–≤–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö Excel —Ç–∞–±–ª–∏—Ü —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AdvancedNormalizer
"""

import os
import sys
import logging
from pathlib import Path
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from advanced_normalizer import AdvancedNormalizer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def find_all_excel_files():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ Excel —Ñ–∞–π–ª—ã –≤ storage/excel_files"""
    
    excel_dir = Path("storage/excel_files")
    if not excel_dir.exists():
        logger.error("–ü–∞–ø–∫–∞ storage/excel_files –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return []
    
    # –ò—â–µ–º –≤—Å–µ xlsx —Ñ–∞–π–ª—ã (–∏—Å–∫–ª—é—á–∞—è —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ)
    excel_files = []
    for file_path in excel_dir.glob("*.xlsx"):
        if "_normalized" not in file_path.name:
            excel_files.append(file_path)
    
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤: {len(excel_files)}")
    return excel_files

def mass_normalize_all_tables():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
    
    print("üîß –ú–ê–°–°–û–í–ê–Ø –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –í–°–ï–• –¢–ê–ë–õ–ò–¶")
    print("=" * 80)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Excel —Ñ–∞–π–ª—ã
    excel_files = find_all_excel_files()
    
    if not excel_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏")
        return
    
    print(f"üìä –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(excel_files)} —Ñ–∞–π–ª–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä
    normalizer = AdvancedNormalizer()
    
    # –°—á–µ—Ç—á–∏–∫–∏
    success_count = 0
    error_count = 0
    start_time = time.time()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for i, file_path in enumerate(excel_files, 1):
        
        print(f"\nüìã [{i}/{len(excel_files)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {file_path.name}")
        
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É
            normalized_path = normalizer.normalize_table(str(file_path))
            
            if normalized_path:
                success_count += 1
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {Path(normalized_path).name}")
            else:
                error_count += 1
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {file_path.name}")
                
        except Exception as e:
            error_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path.name}: {e}")
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        if i % 10 == 0:
            elapsed = time.time() - start_time
            avg_time = elapsed / i
            remaining = (len(excel_files) - i) * avg_time
            print(f"‚è±Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(excel_files)} | –û—Å—Ç–∞–ª–æ—Å—å: ~{remaining/60:.1f} –º–∏–Ω")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    elapsed_total = time.time() - start_time
    
    print("\nüéØ –ò–¢–û–ì–ò –ú–ê–°–°–û–í–û–ô –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò:")
    print("=" * 80)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {elapsed_total/60:.1f} –º–∏–Ω")
    print(f"üìä –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {elapsed_total/len(excel_files):.1f} —Å–µ–∫/—Ñ–∞–π–ª")
    
    if success_count > 0:
        print(f"\nüóÇÔ∏è –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ storage/excel_files/")
        print(f"üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *_metadata.json")
        print(f"üîÑ –ì–æ—Ç–æ–≤–æ –∫ –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–Ω–≥—É –≤ –ë–î!")

def check_normalized_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    excel_dir = Path("storage/excel_files")
    
    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    original_files = list(excel_dir.glob("*.xlsx"))
    original_count = len([f for f in original_files if "_normalized" not in f.name])
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    normalized_files = list(excel_dir.glob("*_normalized.xlsx"))
    normalized_count = len(normalized_files)
    
    # –§–∞–π–ª—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    metadata_files = list(excel_dir.glob("*_metadata.json"))
    metadata_count = len(metadata_files)
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ê–ô–õ–û–í:")
    print("-" * 40)
    print(f"üìÅ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {original_count}")
    print(f"üîß –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {normalized_count}")
    print(f"üìã –§–∞–π–ª–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {metadata_count}")
    
    if normalized_count == original_count:
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã!")
    else:
        print(f"‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {original_count - normalized_count} –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    if metadata_count == normalized_count:
        print("‚úÖ –í—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!")
    else:
        print(f"‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {normalized_count - metadata_count} —Ñ–∞–π–ª–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    check_normalized_files()
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("\n" + "=" * 80)
    response = input("üöÄ –ù–∞—á–∞—Ç—å –º–∞—Å—Å–æ–≤—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é? (y/N): ")
    
    if response.lower() in ['y', 'yes', '–¥–∞']:
        mass_normalize_all_tables()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        check_normalized_files()
    else:
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
