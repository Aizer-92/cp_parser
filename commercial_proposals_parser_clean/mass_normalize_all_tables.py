#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–∞—Å—Å–æ–≤–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –í–°–ï–• —Ç–∞–±–ª–∏—Ü Excel –≤ –ø—Ä–æ–µ–∫—Ç–µ
"""

import os
import sys
import logging
import glob
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from table_normalizer import TableNormalizer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('mass_normalize.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def normalize_all_tables():
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –í–°–ï Excel —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Excel —Ñ–∞–π–ª—ã 
    excel_patterns = [
        'storage/excel_files/*.xlsx',
        'storage/excel_files/*.xls'
    ]
    
    all_files = []
    for pattern in excel_patterns:
        files = glob.glob(pattern)
        all_files.extend(files)
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    original_files = [f for f in all_files if '_normalized' not in f]
    
    print("üè≠ –ú–ê–°–°–û–í–ê–Ø –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –í–°–ï–• –¢–ê–ë–õ–ò–¶")
    print("=" * 90)
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {len(original_files)}")
    print()
    
    normalizer = TableNormalizer()
    
    results = {
        'success': [],
        'failed': [],
        'skipped': []
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for i, file_path in enumerate(original_files, 1):
        
        print(f"üìÑ [{i:3}/{len(original_files)}] {os.path.basename(file_path)}")
        print("-" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        base_name = os.path.splitext(file_path)[0]
        normalized_path = f"{base_name}_normalized.xlsx"
        
        if os.path.exists(normalized_path):
            print("‚ö†Ô∏è  –£–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            results['skipped'].append(file_path)
            print()
            continue
        
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–∞–π–ª
            result_path = normalizer.normalize_table(file_path)
            
            if result_path:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ ‚Üí {os.path.basename(result_path)}")
                results['success'].append(file_path)
                
                # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                check_result = quick_check_normalized(result_path)
                print(f"   üìä –ö–æ–ª–æ–Ω–æ–∫: {check_result['columns']}, –°—Ç—Ä–æ–∫: {check_result['rows']}")
                if check_result['routes']:
                    print(f"   üöö –ú–∞—Ä—à—Ä—É—Ç—ã: {', '.join(check_result['routes'])}")
                
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏")
                results['failed'].append(file_path)
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ {file_path}: {e}")
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            results['failed'].append(file_path)
        
        print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("=" * 90)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ú–ê–°–°–û–í–û–ô –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò")
    print("=" * 90)
    
    total = len(original_files)
    success = len(results['success'])
    failed = len(results['failed'])
    skipped = len(results['skipped'])
    
    print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total}")
    print(f"   ‚Ä¢ ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}")
    print(f"   ‚Ä¢ ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")  
    print(f"   ‚Ä¢ ‚ùå –û—à–∏–±–∫–∏: {failed}")
    print(f"   ‚Ä¢ üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success/total*100:.1f}%")
    
    if results['failed']:
        print(f"\n‚ùå –§–ê–ô–õ–´ –° –û–®–ò–ë–ö–ê–ú–ò:")
        for file_path in results['failed']:
            print(f"   ‚Ä¢ {os.path.basename(file_path)}")
    
    if success > 0:
        print(f"\n‚úÖ –£–°–ü–ï–®–ù–û –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–´:")
        for file_path in results['success']:
            base_name = os.path.basename(file_path)
            print(f"   ‚Ä¢ {base_name} ‚Üí {base_name.replace('.xlsx', '_normalized.xlsx')}")
    
    print(f"\nüéØ –ò–¢–û–ì: {success} —Ç–∞–±–ª–∏—Ü –≥–æ—Ç–æ–≤—ã –∫ –∏–¥–µ–∞–ª—å–Ω–æ–º—É –ø–∞—Ä—Å–∏–Ω–≥—É!")
    
    return results

def quick_check_normalized(normalized_path):
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    try:
        import openpyxl
        
        wb = openpyxl.load_workbook(normalized_path, data_only=True)
        ws = wb.active
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        columns = ws.max_column
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        rows = 0
        for row in range(3, ws.max_row + 1):
            has_data = False
            for col in range(1, min(6, columns + 1)):
                if ws.cell(row=row, column=col).value:
                    has_data = True
                    break
            if has_data:
                rows += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        routes = set()
        for col in range(1, columns + 1):
            header = ws.cell(row=2, column=col).value
            if header:
                header_str = str(header)
                if '–ê–í–ò–ê' in header_str:
                    routes.add('–ê–í–ò–ê')
                elif '–ñ–î' in header_str:
                    routes.add('–ñ–î')
                elif '–û–ë–†–ê–ó–ï–¶' in header_str:
                    routes.add('–û–ë–†–ê–ó–ï–¶')
        
        wb.close()
        
        return {
            'columns': columns,
            'rows': rows,
            'routes': list(routes)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {normalized_path}: {e}")
        return {'columns': 0, 'rows': 0, 'routes': []}

if __name__ == "__main__":
    normalize_all_tables()
