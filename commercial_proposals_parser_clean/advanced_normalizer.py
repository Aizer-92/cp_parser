#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∏—Ä–∞–∂–µ–π
"""

import os
import sys
import logging
import openpyxl
from typing import Dict, List, Tuple, Optional
from datetime import datetime
from dataclasses import dataclass

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from table_normalizer import TableNormalizer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class ProductVariant:
    """–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–∏—Ä–∞–∂–æ–º –∏ —Ü–µ–Ω–∞–º–∏"""
    name: str
    quantity: Optional[int]
    prices_usd: Dict[str, float]  # {'–ê–í–ò–ê': 1.5, '–ñ–î': 1.3}
    prices_rub: Dict[str, float]  # {'–ê–í–ò–ê': 120, '–ñ–î': 110}
    delivery_times: Dict[str, str]  # {'–ê–í–ò–ê': '20-25', '–ñ–î': '35-40'}
    base_data: Dict[str, str]  # description, material, size, etc.
    original_row: int

class AdvancedNormalizer(TableNormalizer):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∏—Ä–∞–∂–µ–π"""
    
    def __init__(self):
        super().__init__()
        self.product_variants = []
        
    def _detect_product_variants(self, source_ws, structure: Dict) -> List[ProductVariant]:
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏—Ä–∞–∂–∞–º–∏, –≤–∫–ª—é—á–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏"""
        
        variants = []
        data_start = structure['data_start_row']
        
        logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–∏—Ä–∞–∂–∞–º–∏ (–≤–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)...")
        logger.info(f"   –ù–∞—á–∏–Ω–∞–µ–º —Å —Å—Ç—Ä–æ–∫–∏: {data_start}")
        
        current_product_name = None
        current_base_data = {}
        current_product_rows = []  # –í—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—è —Å data_start-1 –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—â–µ–Ω—ã
        # –ò–Ω–æ–≥–¥–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ç–æ—á–Ω–æ
        actual_start = max(data_start - 1, 3)  # –ù–æ –Ω–µ —Ä–∞–Ω—å—à–µ 3-–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
        logger.info(f"   –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –Ω–∞ —Å—Ç—Ä–æ–∫—É: {actual_start}")
        
        for row in range(actual_start, source_ws.max_row + 1):
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ (—Ç–∏—Ä–∞–∂–∏, —Ü–µ–Ω—ã)
            has_quantity_or_price = self._has_quantity_or_price_data(source_ws, row, structure)
            
            if not has_quantity_or_price:
                continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
            variant_data = self._extract_variant_data(source_ws, row, structure)
            
            if variant_data['name']:
                # –ù–û–í–´–ô –¢–û–í–ê–† - –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –µ—Å–ª–∏ –±—ã–ª
                if current_product_name and current_product_rows:
                    self._finalize_product_variants(variants, current_product_name, current_base_data, current_product_rows)
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                current_product_name = variant_data['name']
                current_base_data = variant_data['base_data']
                current_product_rows = [{'row': row, 'data': variant_data}]
                
                logger.debug(f"üÜï –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä: {current_product_name} (—Å—Ç—Ä–æ–∫–∞ {row})")
                
            else:
                # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –í–ê–†–ò–ê–ù–¢ –¢–ò–†–ê–ñ–ê –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
                if current_product_name and (variant_data['quantity'] or variant_data['prices_usd'] or variant_data['prices_rub']):
                    current_product_rows.append({'row': row, 'data': variant_data})
                    logger.debug(f"üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∏—Ä–∞–∂ –¥–ª—è {current_product_name}: {variant_data['quantity']} —à—Ç (—Å—Ç—Ä–æ–∫–∞ {row})")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä
        if current_product_name and current_product_rows:
            self._finalize_product_variants(variants, current_product_name, current_base_data, current_product_rows)
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {len(variants)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–∏—Ä–∞–∂–∞–º–∏
        from collections import defaultdict
        products_with_variants = defaultdict(int)
        products_with_rows = defaultdict(list)
        
        for variant in variants:
            products_with_variants[variant.name] += 1
            products_with_rows[variant.name].append(variant.original_row)
        
        multiple_variants = [(name, count) for name, count in products_with_variants.items() if count > 1]
        if multiple_variants:
            logger.info(f"üéØ –¢–æ–≤–∞—Ä—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏—Ä–∞–∂–∞–º–∏:")
            for name, count in multiple_variants[:7]:
                rows = products_with_rows[name]
                logger.info(f"   ‚Ä¢ {name}: {count} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (—Å—Ç—Ä–æ–∫–∏: {rows})")
        
        return variants
    
    def _has_quantity_or_price_data(self, ws, row: int, structure: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏—Ä–∞–∂–∞—Ö –∏–ª–∏ —Ü–µ–Ω–∞—Ö"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if 'quantity' in structure['base_columns']:
            qty_col = structure['base_columns']['quantity']
            qty_value = ws.cell(row=row, column=qty_col).value
            if qty_value and str(qty_value).strip():
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        for route_data in structure['routes'].values():
            for field_type, col in route_data.items():
                if field_type in ['quantity', 'price_usd', 'price_rub']:
                    value = ws.cell(row=row, column=col).value
                    if value and str(value).strip():
                        return True
        
        return False
    
    def _finalize_product_variants(self, variants: List[ProductVariant], product_name: str, 
                                 base_data: Dict, product_rows: List[Dict]):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–æ–≤–∞—Ä–∞ - —Å–æ–∑–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –µ–≥–æ —Å—Ç—Ä–æ–∫"""
        
        logger.debug(f"üîö –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–æ–≤–∞—Ä {product_name}: {len(product_rows)} —Å—Ç—Ä–æ–∫")
        
        for row_info in product_rows:
            row = row_info['row']
            variant_data = row_info['data']
            
            # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–∞
            variants.append(ProductVariant(
                name=product_name,
                quantity=variant_data['quantity'],
                prices_usd=variant_data['prices_usd'],
                prices_rub=variant_data['prices_rub'],
                delivery_times=variant_data['delivery_times'],
                base_data=base_data,
                original_row=row
            ))
    
    def _extract_variant_data(self, ws, row: int, structure: Dict) -> Dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        
        result = {
            'name': '',
            'quantity': None,
            'prices_usd': {},
            'prices_rub': {},
            'delivery_times': {},
            'base_data': {}
        }
        
        logger.debug(f"–ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ {row}")
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
        for field_type, col in structure['base_columns'].items():
            value = ws.cell(row=row, column=col).value
            if value and str(value).strip():
                logger.debug(f"  –ë–∞–∑–æ–≤–æ–µ –ø–æ–ª–µ {field_type} (–∫–æ–ª–æ–Ω–∫–∞ {col}): {value}")
                if field_type == 'name':
                    result['name'] = str(value).strip()
                elif field_type == 'quantity':
                    try:
                        # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        qty_str = str(value).replace(' ', '').replace(',', '')
                        if qty_str.replace('.', '').isdigit():
                            result['quantity'] = int(float(qty_str))
                            logger.debug(f"    –ù–∞–π–¥–µ–Ω —Ç–∏—Ä–∞–∂: {result['quantity']}")
                    except Exception as e:
                        logger.debug(f"    –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–∏—Ä–∞–∂–∞: {e}")
                else:
                    result['base_data'][field_type] = str(value).strip()
        
        # –ú–∞—Ä—à—Ä—É—Ç-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è
        for route, route_data in structure['routes'].items():
            logger.debug(f"  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç {route}: {route_data}")
            for field_type, col in route_data.items():
                value = ws.cell(row=row, column=col).value
                if value and str(value).strip():
                    logger.debug(f"    {route} {field_type} (–∫–æ–ª–æ–Ω–∫–∞ {col}): {value}")
                    if field_type == 'quantity' and not result['quantity']:
                        try:
                            qty_str = str(value).replace(' ', '').replace(',', '')
                            if qty_str.replace('.', '').isdigit():
                                result['quantity'] = int(float(qty_str))
                                logger.debug(f"      –ù–∞–π–¥–µ–Ω —Ç–∏—Ä–∞–∂ –º–∞—Ä—à—Ä—É—Ç–∞: {result['quantity']}")
                        except Exception as e:
                            logger.debug(f"      –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–∏—Ä–∞–∂–∞ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
                    elif field_type == 'price_usd':
                        try:
                            result['prices_usd'][route] = float(value)
                            logger.debug(f"      –ù–∞–π–¥–µ–Ω–∞ USD —Ü–µ–Ω–∞: {result['prices_usd'][route]}")
                        except Exception as e:
                            logger.debug(f"      –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ USD: {e}")
                    elif field_type == 'price_rub':
                        try:
                            result['prices_rub'][route] = float(value)
                            logger.debug(f"      –ù–∞–π–¥–µ–Ω–∞ RUB —Ü–µ–Ω–∞: {result['prices_rub'][route]}")
                        except Exception as e:
                            logger.debug(f"      –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ RUB: {e}")
                    elif field_type == 'delivery_time':
                        result['delivery_times'][route] = str(value).strip()
        
        logger.debug(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: name='{result['name']}', quantity={result['quantity']}, prices_usd={result['prices_usd']}, prices_rub={result['prices_rub']}")
        return result
    
    def _copy_variants_to_normalized(self, variants: List[ProductVariant], target_ws, 
                                   headers: List[str], structure: Dict):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É"""
        
        header_to_col = {header: col for col, header in enumerate(headers, 1)}
        target_row = 3  # –ù–∞—á–∏–Ω–∞–µ–º —Å 3-–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        structure['row_mappings'] = {}
        structure['variant_mappings'] = {}  # –æ—Ä–∏–≥–∏–Ω–∞–ª_—Å—Ç—Ä–æ–∫–∞ ‚Üí [–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ_—Å—Ç—Ä–æ–∫–∏]
        structure['product_row_groups'] = {}  # —Ç–æ–≤–∞—Ä ‚Üí [–≤—Å–µ_–µ–≥–æ_–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ_—Å—Ç—Ä–æ–∫–∏]
        
        logger.info(f"üìã –ö–æ–ø–∏—Ä—É–µ–º {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤...")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        from collections import defaultdict
        product_original_rows = defaultdict(list)
        
        for variant in variants:
            product_original_rows[variant.name].append(variant.original_row)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—ã —Å—Ç—Ä–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        structure['product_row_groups'] = dict(product_original_rows)
        
        for variant in variants:
            
            logger.debug(f"–ö–æ–ø–∏—Ä—É–µ–º: {variant.name} (—Ç–∏—Ä–∞–∂: {variant.quantity}, —Å—Ç—Ä–æ–∫–∞: {variant.original_row})")
            
            # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–æ–∫
            structure['row_mappings'][variant.original_row] = target_row
            
            if variant.original_row not in structure['variant_mappings']:
                structure['variant_mappings'][variant.original_row] = []
            structure['variant_mappings'][variant.original_row].append(target_row)
            
            # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
            target_ws.cell(row=target_row, column=header_to_col['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'], value=variant.name)
            
            for field, value in variant.base_data.items():
                if field == 'description':
                    target_col = header_to_col.get('–û–ø–∏—Å–∞–Ω–∏–µ')
                elif field == 'material':
                    target_col = header_to_col.get('–ú–∞—Ç–µ—Ä–∏–∞–ª')
                elif field == 'size':
                    target_col = header_to_col.get('–†–∞–∑–º–µ—Ä')
                elif field == 'color':
                    target_col = header_to_col.get('–¶–≤–µ—Ç')
                elif field == 'packaging':
                    target_col = header_to_col.get('–£–ø–∞–∫–æ–≤–∫–∞')
                else:
                    target_col = None
                
                if target_col and value:
                    target_ws.cell(row=target_row, column=target_col, value=value)
            
            # –î–∞–Ω–Ω—ã–µ –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º
            for route in structure['routes'].keys():
                
                # –¢–∏—Ä–∞–∂
                qty_col = header_to_col.get(f'–¢–∏—Ä–∞–∂ ({route}), —à—Ç')
                if qty_col and variant.quantity:
                    target_ws.cell(row=target_row, column=qty_col, value=variant.quantity)
                
                # –¶–µ–Ω–∞ USD
                usd_col = header_to_col.get(f'–¶–µ–Ω–∞ ({route}), $')
                if usd_col and route in variant.prices_usd:
                    target_ws.cell(row=target_row, column=usd_col, value=variant.prices_usd[route])
                
                # –¶–µ–Ω–∞ RUB
                rub_col = header_to_col.get(f'–¶–µ–Ω–∞ ({route}), ‚ÇΩ')
                if rub_col and route in variant.prices_rub:
                    target_ws.cell(row=target_row, column=rub_col, value=variant.prices_rub[route])
                
                # –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏
                time_col = header_to_col.get(f'–°—Ä–æ–∫ ({route}), –¥–Ω.')
                if time_col and route in variant.delivery_times:
                    target_ws.cell(row=target_row, column=time_col, value=variant.delivery_times[route])
            
            target_row += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        structure['normalized_data_range'] = {
            'start_row': 3,
            'end_row': target_row - 1,
            'total_products': target_row - 3
        }
        
        logger.info(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {target_row - 3} —Å—Ç—Ä–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
    
    def normalize_table(self, file_path: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∏—Ä–∞–∂–µ–π"""
        
        logger.info(f"üîß –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: {file_path}")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        source_wb = openpyxl.load_workbook(file_path, data_only=True)
        source_ws = source_wb.active
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–≤—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥)
        structure = TableNormalizer._analyze_current_structure(self, source_ws)
        structure['original_file'] = os.path.basename(file_path)
        structure['original_end_row'] = source_ws.max_row
        
        if not structure['routes'] and not structure['base_columns']:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã: {file_path}")
            source_wb.close()
            return None
        
        # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤
        variants = self._detect_product_variants(source_ws, structure)
        
        if not variants:
            logger.warning(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {file_path}")
            source_wb.close()
            return None
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        target_wb = openpyxl.Workbook()
        target_ws = target_wb.active
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = TableNormalizer._create_normalized_headers(self, structure)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        TableNormalizer._write_headers(self, target_ws, headers)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤
        self._copy_variants_to_normalized(variants, target_ws, headers, structure)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        TableNormalizer._apply_formatting(self, target_ws, headers)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        target_path = file_path.replace('.xlsx', '_normalized.xlsx')
        target_wb.save(target_path)
        target_wb.close()
        source_wb.close()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –≥—Ä—É–ø–ø–∞–º–∏ —Å—Ç—Ä–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        self._save_advanced_metadata(target_path, structure)
        
        logger.info(f"‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {target_path}")
        return target_path
    
    def _save_advanced_metadata(self, normalized_path: str, structure: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–ø–ø–∞—Ö —Å—Ç—Ä–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
        
        import json
        
        metadata = {
            'normalized_file': os.path.basename(normalized_path),
            'original_file': structure.get('original_file', ''),
            'data_ranges': {
                'original_start_row': structure['data_start_row'],
                'original_end_row': structure.get('original_end_row', 0),
                'normalized_start_row': structure['normalized_data_range']['start_row'],
                'normalized_end_row': structure['normalized_data_range']['end_row'],
                'total_products': structure['normalized_data_range']['total_products']
            },
            'row_mappings': structure['row_mappings'],  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞ ‚Üí –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞
            'variant_mappings': structure.get('variant_mappings', {}),  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞ ‚Üí [–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ_—Å—Ç—Ä–æ–∫–∏]
            'product_row_groups': structure.get('product_row_groups', {}),  # —Ç–æ–≤–∞—Ä ‚Üí [–≤—Å–µ_–µ–≥–æ_–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ_—Å—Ç—Ä–æ–∫–∏]
            'found_routes': list(structure['routes'].keys()),
            'base_columns': list(structure['base_columns'].keys()),
            'advanced_parsing': True,  # –§–ª–∞–≥ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            'multiple_quantity_support': True,  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∏—Ä–∞–∂–µ–π
            'created_at': str(datetime.now())
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª —Ä—è–¥–æ–º —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π
        metadata_path = normalized_path.replace('.xlsx', '_metadata.json')
        
        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
            
        logger.info(f"üìã –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {metadata_path}")
        
        return metadata_path

if __name__ == "__main__":
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–∏—Ä–∞–∂–∞–º–∏
    test_file = 'storage/excel_files/original_sheet.xlsx'
    
    if os.path.exists(test_file):
        normalizer = AdvancedNormalizer()
        result = normalizer.normalize_table(test_file)
        print(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {result}")
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
