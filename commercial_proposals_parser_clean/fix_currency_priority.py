#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ - –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞ VS —Ü–µ–Ω–∞ –æ–±—Ä–∞–∑—Ü–∞
"""

from database.manager_v4 import DatabaseManager
from database.models_v4 import Product, PriceOffer, SheetMetadata
from adaptive_table_analyzer import TableStructureAnalyzer
import openpyxl
import re

class FixedCurrencyParser:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –≤–∞–ª—é—Ç–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫"""
    
    def __init__(self):
        self.analyzer = TableStructureAnalyzer()
    
    def fix_currency_priorities(self):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤–∞–ª—é—Ç–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫"""
        
        session = DatabaseManager.get_session()
        
        try:
            print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ò–û–†–ò–¢–ï–¢–ê –í–ê–õ–Æ–¢–ù–´–• –ö–û–õ–û–ù–û–ö")
            print("=" * 60)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ (–∫—É—Ä—Å > 200)
            suspicious_products = []
            products = session.query(Product).all()
            
            for product in products:
                prices = session.query(PriceOffer).filter(PriceOffer.product_id == product.id).all()
                for price in prices:
                    if price.price_usd and price.price_rub:
                        rate = price.price_rub / price.price_usd
                        if rate > 200:  # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–π –∫—É—Ä—Å
                            suspicious_products.append((product, price, rate))
            
            print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏: {len(suspicious_products)}")
            
            fixed_count = 0
            
            for product, price_offer, rate in suspicious_products:
                print(f"\nüîç –¢–æ–≤–∞—Ä: {product.name}")
                print(f"   –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {rate:.2f} ‚ÇΩ/$")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                sheet = session.query(SheetMetadata).get(product.sheet_id)
                if not sheet or not sheet.local_file_path:
                    continue
                
                # –ò—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ Excel
                correct_rub = self._find_correct_rub_price(sheet.local_file_path, product.start_row)
                
                if correct_rub and correct_rub != price_offer.price_rub:
                    print(f"   –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: {price_offer.price_rub} ‚ÇΩ ‚Üí {correct_rub} ‚ÇΩ")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
                    price_offer.price_rub = correct_rub
                    session.add(price_offer)
                    
                    new_rate = correct_rub / price_offer.price_usd
                    print(f"   –ù–æ–≤—ã–π –∫—É—Ä—Å: {new_rate:.2f} ‚ÇΩ/$")
                    
                    fixed_count += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            session.commit()
            
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ü–µ–Ω: {fixed_count}")
            
            return fixed_count
            
        except Exception as e:
            session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return 0
            
        finally:
            session.close()
    
    def _find_correct_rub_price(self, file_path, product_row):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä—É–±–ª–µ–≤—É—é —Ü–µ–Ω—É (–ù–ï –æ–±—Ä–∞–∑–µ—Ü)"""
        
        try:
            wb = openpyxl.load_workbook(file_path, data_only=True)
            ws = wb.active
            
            # –ò—â–µ–º –≤—Å–µ —Ä—É–±–ª–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            rub_columns = []
            
            for col in range(1, min(16, ws.max_column + 1)):
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = []
                for row in range(1, 4):
                    cell_value = ws.cell(row=row, column=col).value
                    if cell_value:
                        headers.append(str(cell_value).lower())
                
                combined_header = ' '.join(headers)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Ä—É–±–ª–µ–≤–æ–π
                if any(word in combined_header for word in ['—Ä—É–±', '‚ÇΩ', 'rub']) and '—Ü–µ–Ω–∞' in combined_header:
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                    priority = self._get_rub_column_priority(combined_header)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    cell_value = ws.cell(row=product_row, column=col).value
                    if cell_value and isinstance(cell_value, (int, float)):
                        rub_columns.append({
                            'column': col,
                            'value': float(cell_value),
                            'header': combined_header,
                            'priority': priority
                        })
            
            wb.close()
            
            if not rub_columns:
                return None
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–±–æ–ª—å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = –ª—É—á—à–µ)
            rub_columns.sort(key=lambda x: x['priority'], reverse=True)
            
            best_column = rub_columns[0]
            print(f"   –ù–∞–π–¥–µ–Ω–æ {len(rub_columns)} —Ä—É–±–ª–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫, –≤—ã–±–∏—Ä–∞–µ–º: {best_column['header']} = {best_column['value']}")
            
            return best_column['value']
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return None
    
    def _get_rub_column_priority(self, header_text):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä—É–±–ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏"""
        
        # –í–´–°–û–ö–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞
        if any(phrase in header_text for phrase in [
            '—Ü–µ–Ω–∞ –∑–∞ —à—Ç., —Ä—É–±',
            '—Ü–µ–Ω–∞ –∑–∞ —à—Ç —Ä—É–±', 
            '—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä—É–±',
            'price rub'
        ]) and '–æ–±—Ä–∞–∑–µ—Ü' not in header_text:
            return 100
        
        # –°–†–ï–î–ù–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –¥—Ä—É–≥–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–Ω—ã
        if any(phrase in header_text for phrase in [
            '—Ü–µ–Ω–∞ —Ä—É–±',
            '—Å—Ç–æ–∏–º–æ—Å—Ç—å',
            'price'
        ]) and '–æ–±—Ä–∞–∑–µ—Ü' not in header_text:
            return 50
        
        # –ù–ò–ó–ö–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –æ–±—Ä–∞–∑—Ü—ã, –æ–ø—Ü–∏–æ–Ω—ã
        if any(phrase in header_text for phrase in [
            '–æ–±—Ä–∞–∑–µ—Ü',
            'sample',
            '–æ–ø—Ü–∏—è',
            '–¥–æ–ø'
        ]):
            return 10
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return 30

def test_currency_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö"""
    
    parser = FixedCurrencyParser()
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ 104, 114
    session = DatabaseManager.get_session()
    
    print("üîç –°–û–°–¢–û–Ø–ù–ò–ï –¢–û–í–ê–†–û–í –î–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    for product_id in [104, 114]:
        product = session.query(Product).get(product_id)
        if product:
            prices = session.query(PriceOffer).filter(PriceOffer.product_id == product_id).all()
            for price in prices:
                rate = price.price_rub / price.price_usd if price.price_usd else 0
                print(f"ID {product_id}: ${price.price_usd} / {price.price_rub} ‚ÇΩ = {rate:.2f}")
    
    session.close()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º
    fixed = parser.fix_currency_priorities()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    session = DatabaseManager.get_session()
    
    print(f"\n‚úÖ –°–û–°–¢–û–Ø–ù–ò–ï –¢–û–í–ê–†–û–í –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    for product_id in [104, 114]:
        product = session.query(Product).get(product_id)
        if product:
            prices = session.query(PriceOffer).filter(PriceOffer.product_id == product_id).all()
            for price in prices:
                rate = price.price_rub / price.price_usd if price.price_usd else 0
                print(f"ID {product_id}: ${price.price_usd} / {price.price_rub} ‚ÇΩ = {rate:.2f}")
    
    session.close()

if __name__ == "__main__":
    test_currency_fix()

