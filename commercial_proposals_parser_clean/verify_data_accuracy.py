#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö - —Å–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ Excel —Ñ–∞–π–ª–∞–º–∏
"""

from database.manager_v4 import DatabaseManager
from database.models_v4 import SheetMetadata, Product, PriceOffer
from pathlib import Path
import openpyxl
import pandas as pd
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def verify_specific_products():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    session = DatabaseManager.get_session()
    
    try:
        # –ù–∞–π–¥–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–Å–ª–æ—á–Ω–∞—è –∏–≥—Ä—É—à–∫–∞" –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        xmas_toys = session.query(Product).filter(
            Product.name.contains('–ª–æ—á–Ω–∞—è –∏–≥—Ä—É—à–∫–∞')
        ).all()
        
        print("üéÑ –ù–ê–ô–î–ï–ù–ù–´–ï –¢–û–í–ê–†–´ '–Å–õ–û–ß–ù–ê–Ø –ò–ì–†–£–®–ö–ê':")
        print("=" * 60)
        
        for product in xmas_toys:
            sheet = session.query(SheetMetadata).get(product.sheet_id)
            prices = session.query(PriceOffer).filter(PriceOffer.product_id == product.id).all()
            
            print(f"\nüì¶ –¢–æ–≤–∞—Ä: {product.name}")
            print(f"   üìä –¢–∞–±–ª–∏—Ü–∞: {sheet.sheet_title if sheet else 'Unknown'}")
            print(f"   üìÅ –§–∞–π–ª: {sheet.local_file_path if sheet else 'Unknown'}")
            print(f"   üìè –°—Ç—Ä–æ–∫–∏: {product.start_row}-{product.end_row}")
            print(f"   üí∞ –¶–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(prices)}")
            
            for i, price in enumerate(prices, 1):
                print(f"      {i}. –¢–∏—Ä–∞–∂: {price.quantity} —à—Ç")
                print(f"         USD: ${price.price_usd}")
                print(f"         RUB: {price.price_rub} ‚ÇΩ" if price.price_rub else "         RUB: None")
                print(f"         –ú–∞—Ä—à—Ä—É—Ç: {price.route_name}")
                print(f"         –ó–∞–º–µ—Ç–∫–∏: {price.notes or 'None'}")
            
            # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π Excel —Ñ–∞–π–ª
            if sheet and sheet.local_file_path and Path(sheet.local_file_path).exists():
                print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ò–°–•–û–î–ù–û–ì–û –§–ê–ô–õ–ê:")
                verify_excel_data(sheet.local_file_path, product.start_row, product.end_row)
            
            print("-" * 60)
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –ª—é–±—ã–µ —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏ –æ–∫–æ–ª–æ $2.3-$3.7 –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
        print(f"\nüí∞ –¢–û–í–ê–†–´ –° –¶–ï–ù–ê–ú–ò $2-$4 (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ):")
        print("=" * 60)
        
        similar_price_products = session.query(Product).join(PriceOffer).filter(
            PriceOffer.price_usd >= 2.0,
            PriceOffer.price_usd <= 4.0
        ).limit(5).all()
        
        for product in similar_price_products:
            sheet = session.query(SheetMetadata).get(product.sheet_id)
            prices = session.query(PriceOffer).filter(PriceOffer.product_id == product.id).all()
            
            print(f"\nüì¶ {product.name}")
            print(f"   üìä {sheet.sheet_title if sheet else 'Unknown'}")
            for price in prices:
                if 2.0 <= price.price_usd <= 4.0:
                    print(f"   üí∞ ${price.price_usd} | {price.quantity} —à—Ç | RUB: {price.price_rub or 'None'}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –∏—Å—Ö–æ–¥–Ω–∏–∫
            if sheet and sheet.local_file_path and Path(sheet.local_file_path).exists():
                verify_excel_data(sheet.local_file_path, product.start_row, product.end_row, brief=True)
        
        return xmas_toys + similar_price_products
        
    finally:
        session.close()

def verify_excel_data(file_path, start_row, end_row, brief=False):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Excel —Ñ–∞–π–ª–µ"""
    try:
        file_path = Path(file_path)
        
        if not file_path.exists():
            print(f"      ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        if file_path.suffix.lower() == '.csv':
            # CSV —Ñ–∞–π–ª
            try:
                df = pd.read_csv(file_path, encoding='utf-8')
                print(f"      üìÑ CSV —Ñ–∞–π–ª, —Å—Ç—Ä–æ–∫–∏ {start_row}-{end_row}:")
                
                for row_idx in range(max(0, start_row-1), min(len(df), end_row)):
                    row_data = df.iloc[row_idx]
                    if not brief:
                        print(f"         –°—Ç—Ä–æ–∫–∞ {row_idx+1}: {dict(row_data.dropna())}")
                    else:
                        # –ò—â–µ–º —Ü–µ–Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã
                        price_cols = [col for col in df.columns if any(word in str(col).lower() 
                                    for word in ['price', '—Ü–µ–Ω–∞', 'usd', 'rub', '—Ä—É–±'])]
                        qty_cols = [col for col in df.columns if any(word in str(col).lower() 
                                  for word in ['quantity', '—Ç–∏—Ä–∞–∂', '—à—Ç', 'pcs'])]
                        
                        prices = {col: row_data[col] for col in price_cols if pd.notna(row_data[col])}
                        qtys = {col: row_data[col] for col in qty_cols if pd.notna(row_data[col])}
                        
                        if prices or qtys:
                            print(f"         –°—Ç—Ä–æ–∫–∞ {row_idx+1}: –¶–µ–Ω—ã={prices}, –¢–∏—Ä–∞–∂–∏={qtys}")
                        
            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
                
        else:
            # Excel —Ñ–∞–π–ª
            try:
                wb = openpyxl.load_workbook(file_path, data_only=True)
                ws = wb.active
                
                print(f"      üìÑ Excel —Ñ–∞–π–ª, —Å—Ç—Ä–æ–∫–∏ {start_row}-{end_row}:")
                
                for row_idx in range(start_row, end_row + 1):
                    row_data = []
                    for col_idx in range(1, min(15, ws.max_column + 1)):  # –ü–µ—Ä–≤—ã–µ 15 –∫–æ–ª–æ–Ω–æ–∫
                        cell_value = ws.cell(row=row_idx, column=col_idx).value
                        if cell_value is not None:
                            row_data.append(f"{openpyxl.utils.get_column_letter(col_idx)}: {cell_value}")
                    
                    if row_data and not brief:
                        print(f"         –°—Ç—Ä–æ–∫–∞ {row_idx}: {', '.join(row_data[:5])}{'...' if len(row_data) > 5 else ''}")
                    elif row_data and brief:
                        # –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Ü–µ–Ω—ã/—Ç–∏—Ä–∞–∂–∏)
                        numbers = []
                        for item in row_data[:10]:  # –ü–µ—Ä–≤—ã–µ 10 –∫–æ–ª–æ–Ω–æ–∫
                            try:
                                if ':' in item:
                                    val = item.split(':')[1].strip()
                                    if val.replace('.', '').replace(',', '').isdigit():
                                        numbers.append(item)
                            except:
                                pass
                        
                        if numbers:
                            print(f"         –°—Ç—Ä–æ–∫–∞ {row_idx}: {', '.join(numbers)}")
                
                wb.close()
                
            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel: {e}")
                
    except Exception as e:
        print(f"      ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

def check_rub_prices_display():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–µ–º—É —Ä—É–±–ª–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
    
    session = DatabaseManager.get_session()
    
    try:
        # –ù–∞–π–¥–µ–º —Ç–æ–≤–∞—Ä—ã —Å RUB —Ü–µ–Ω–∞–º–∏
        rub_prices = session.query(PriceOffer).filter(
            PriceOffer.price_rub.isnot(None)
        ).limit(10).all()
        
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –†–£–ë–õ–ï–ô:")
        print("=" * 50)
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å RUB: {len(rub_prices)}")
        
        for price in rub_prices[:5]:
            product = session.query(Product).get(price.product_id)
            print(f"\nüì¶ {product.name}")
            print(f"   USD: ${price.price_usd}")
            print(f"   RUB: {price.price_rub} ‚ÇΩ")
            print(f"   –¢–∏—Ä–∞–∂: {price.quantity}")
            print(f"   –ó–∞–º–µ—Ç–∫–∏: {price.notes}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        web_app_path = Path("web_app_v4/main.py")
        if web_app_path.exists():
            print(f"\nüåê –ü–†–û–í–ï–†–ö–ê –í–ï–ë–ê:")
            with open(web_app_path, 'r', encoding='utf-8') as f:
                content = f.read()
                if 'price_rub' in content:
                    print("   ‚úÖ price_rub —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ –∫–æ–¥–µ –≤–µ–±–∞")
                else:
                    print("   ‚ùå price_rub –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–¥–µ –≤–µ–±–∞!")
                    
                if 'RUB' in content or '—Ä—É–±' in content:
                    print("   ‚úÖ –†—É–±–ª–µ–≤—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    print("   ‚ùå –†—É–±–ª–µ–≤—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ù–ï –Ω–∞–π–¥–µ–Ω—ã!")
        
        return len(rub_prices)
        
    finally:
        session.close()

if __name__ == "__main__":
    print("üîç –ü–†–û–í–ï–†–ö–ê –¢–û–ß–ù–û–°–¢–ò –î–ê–ù–ù–´–•")
    print("=" * 80)
    
    products = verify_specific_products()
    rub_count = check_rub_prices_display()
    
    print(f"\nüìä –ò–¢–û–ì:")
    print(f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products) if products else 0}")
    print(f"   –¢–æ–≤–∞—Ä–æ–≤ —Å RUB —Ü–µ–Ω–∞–º–∏: {rub_count}")
    print(f"   \nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print(f"   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω –∏ —Ç–∏—Ä–∞–∂–µ–π")
    print(f"   2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä—É–±–ª–µ–π –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ") 
    print(f"   3. –°–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º—É–ª—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç")


