#!/usr/bin/env python3
"""
–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è Excel —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
–ü—Ä–∏–≤–æ–¥–∏—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∫ –µ–¥–∏–Ω–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
"""

import os
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils import get_column_letter
import re
from typing import Dict, List, Tuple, Optional
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TableNormalizer:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É"""
    
    def __init__(self):
        # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.header_translations = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞
            'name': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
            'product name': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', 
            'product': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
            '—Ç–æ–≤–∞—Ä': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
            '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
            '–∞—Ä—Ç–∏–∫—É–ª': '–ê—Ä—Ç–∏–∫—É–ª',
            'article': '–ê—Ä—Ç–∏–∫—É–ª',
            'sku': '–ê—Ä—Ç–∏–∫—É–ª',
            
            # –û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
            '–æ–ø–∏—Å–∞–Ω–∏–µ': '–û–ø–∏—Å–∞–Ω–∏–µ', 
            '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏': '–û–ø–∏—Å–∞–Ω–∏–µ',
            'material': '–ú–∞—Ç–µ—Ä–∏–∞–ª',
            '–º–∞—Ç–µ—Ä–∏–∞–ª': '–ú–∞—Ç–µ—Ä–∏–∞–ª',
            'size': '–†–∞–∑–º–µ—Ä',
            '—Ä–∞–∑–º–µ—Ä': '–†–∞–∑–º–µ—Ä',
            'color': '–¶–≤–µ—Ç',
            '—Ü–≤–µ—Ç': '–¶–≤–µ—Ç',
            'packaging': '–£–ø–∞–∫–æ–≤–∫–∞',
            '—É–ø–∞–∫–æ–≤–∫–∞': '–£–ø–∞–∫–æ–≤–∫–∞',
            
            # –¢–∏—Ä–∞–∂/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            'quantity': '–¢–∏—Ä–∞–∂, —à—Ç',
            'qty': '–¢–∏—Ä–∞–∂, —à—Ç',
            '—Ç–∏—Ä–∞–∂': '–¢–∏—Ä–∞–∂, —à—Ç',
            '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': '–¢–∏—Ä–∞–∂, —à—Ç',
            '–∫–æ–ª-–≤–æ': '–¢–∏—Ä–∞–∂, —à—Ç',
            '—à—Ç': '–¢–∏—Ä–∞–∂, —à—Ç',
            
            # –¶–µ–Ω—ã USD
            'price usd': '–¶–µ–Ω–∞ –∑–∞ —à—Ç., $',
            'price $': '–¶–µ–Ω–∞ –∑–∞ —à—Ç., $',
            'usd': '–¶–µ–Ω–∞ –∑–∞ —à—Ç., $',
            'dollar': '–¶–µ–Ω–∞ –∑–∞ —à—Ç., $',
            '—Ü–µ–Ω–∞ $': '–¶–µ–Ω–∞ –∑–∞ —à—Ç., $',
            '—Ü–µ–Ω–∞ usd': '–¶–µ–Ω–∞ –∑–∞ —à—Ç., $',
            '—Ü–µ–Ω–∞ –¥–æ–ª–ª': '–¶–µ–Ω–∞ –∑–∞ —à—Ç., $',
            
            # –¶–µ–Ω—ã RUB
            'price rub': '–¶–µ–Ω–∞ –∑–∞ —à—Ç., ‚ÇΩ',
            'price —Ä—É–±': '–¶–µ–Ω–∞ –∑–∞ —à—Ç., ‚ÇΩ', 
            'rub': '–¶–µ–Ω–∞ –∑–∞ —à—Ç., ‚ÇΩ',
            '—Ä—É–±': '–¶–µ–Ω–∞ –∑–∞ —à—Ç., ‚ÇΩ',
            '—Ä—É–±–ª—å': '–¶–µ–Ω–∞ –∑–∞ —à—Ç., ‚ÇΩ',
            '—Ü–µ–Ω–∞ —Ä—É–±': '–¶–µ–Ω–∞ –∑–∞ —à—Ç., ‚ÇΩ',
            '—Ü–µ–Ω–∞ ‚ÇΩ': '–¶–µ–Ω–∞ –∑–∞ —à—Ç., ‚ÇΩ',
            
            # –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            'delivery time': '–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏, –¥–Ω.',
            '—Å—Ä–æ–∫': '–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏, –¥–Ω.',
            '–¥–Ω–∏': '–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏, –¥–Ω.',
            '–≤—Ä–µ–º—è': '–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏, –¥–Ω.',
            'delivery': '–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏, –¥–Ω.',
            
            # –ú–∞—Ä—à—Ä—É—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
            '—Å—Ç–∞–Ω–¥–∞—Ä—Ç': '–°–¢–ê–ù–î–ê–†–¢',
            'standard': '–°–¢–ê–ù–î–ê–†–¢', 
            '–∂–¥': '–ñ–î',
            'railway': '–ñ–î',
            'train': '–ñ–î',
            '–∞–≤–∏–∞': '–ê–í–ò–ê',
            'air': '–ê–í–ò–ê',
            'plane': '–ê–í–ò–ê',
            'aviation': '–ê–í–ò–ê',
            '–æ–±—Ä–∞–∑–µ—Ü': '–û–ë–†–ê–ó–ï–¶',
            'sample': '–û–ë–†–ê–ó–ï–¶'
        }
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        self.route_columns = {
            '–°–¢–ê–ù–î–ê–†–¢': ['–¢–∏—Ä–∞–∂ (–°–¢–ê–ù–î–ê–†–¢), —à—Ç', '–¶–µ–Ω–∞ (–°–¢–ê–ù–î–ê–†–¢), $', '–¶–µ–Ω–∞ (–°–¢–ê–ù–î–ê–†–¢), ‚ÇΩ', '–°—Ä–æ–∫ (–°–¢–ê–ù–î–ê–†–¢), –¥–Ω.'],
            '–ñ–î': ['–¢–∏—Ä–∞–∂ (–ñ–î), —à—Ç', '–¶–µ–Ω–∞ (–ñ–î), $', '–¶–µ–Ω–∞ (–ñ–î), ‚ÇΩ', '–°—Ä–æ–∫ (–ñ–î), –¥–Ω.'],
            '–ê–í–ò–ê': ['–¢–∏—Ä–∞–∂ (–ê–í–ò–ê), —à—Ç', '–¶–µ–Ω–∞ (–ê–í–ò–ê), $', '–¶–µ–Ω–∞ (–ê–í–ò–ê), ‚ÇΩ', '–°—Ä–æ–∫ (–ê–í–ò–ê), –¥–Ω.'],
            '–û–ë–†–ê–ó–ï–¶': ['–¢–∏—Ä–∞–∂ (–û–ë–†–ê–ó–ï–¶), —à—Ç', '–¶–µ–Ω–∞ (–û–ë–†–ê–ó–ï–¶), $', '–¶–µ–Ω–∞ (–û–ë–†–ê–ó–ï–¶), ‚ÇΩ', '–°—Ä–æ–∫ (–û–ë–†–ê–ó–ï–¶), –¥–Ω.']
        }
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞
        self.base_columns = [
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
            '–ê—Ä—Ç–∏–∫—É–ª', 
            '–û–ø–∏—Å–∞–Ω–∏–µ',
            '–ú–∞—Ç–µ—Ä–∏–∞–ª',
            '–†–∞–∑–º–µ—Ä', 
            '–¶–≤–µ—Ç',
            '–£–ø–∞–∫–æ–≤–∫–∞'
        ]

    def normalize_table(self, file_path: str, output_path: str = None) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É"""
        
        if not output_path:
            output_path = file_path.replace('.xlsx', '_normalized.xlsx')
        
        logger.info(f"üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã: {file_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        wb = openpyxl.load_workbook(file_path)
        ws = wb.active
        
        # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        current_structure = self._analyze_current_structure(ws)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {list(current_structure['routes'].keys())}")
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –±–∞–∑–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫: {list(current_structure['base_columns'].keys())}")
        
        # 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        new_wb = openpyxl.Workbook()
        new_ws = new_wb.active
        new_ws.title = "–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞"
        
        # 3. –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        normalized_headers = self._create_normalized_headers(current_structure)
        self._write_headers(new_ws, normalized_headers)
        
        # 4. –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
        self._copy_normalized_data(ws, new_ws, current_structure, normalized_headers)
        
        # 5. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._apply_formatting(new_ws, normalized_headers)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        new_wb.save(output_path)
        wb.close()
        new_wb.close()
        
        logger.info(f"‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
        return output_path

    def _analyze_current_structure(self, ws) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã"""
        
        structure = {
            'base_columns': {},  # {—Ç–∏–ø: –∫–æ–ª–æ–Ω–∫–∞}
            'routes': {},        # {–º–∞—Ä—à—Ä—É—Ç: {—Ç–∏–ø: –∫–æ–ª–æ–Ω–∫–∞}}
            'header_rows': [],   # —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            'data_start_row': None
        }
        
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤—ã—Ö 5 —Å—Ç—Ä–æ–∫–∞—Ö
        for row in range(1, 6):
            has_headers = False
            for col in range(1, min(20, ws.max_column + 1)):
                cell = ws.cell(row=row, column=col)
                if cell.value and isinstance(cell.value, str):
                    header_text = str(cell.value).lower().strip()
                    if len(header_text) > 2:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        has_headers = True
            
            if has_headers:
                structure['header_rows'].append(row)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö (–æ–±—ã—á–Ω–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ 4 –¥–ª—è —Ç–∞–∫–∏—Ö —Ç–∞–±–ª–∏—Ü)
        structure['data_start_row'] = 4 if structure['header_rows'] else 3
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–æ–Ω–∫—É
        for col in range(1, min(20, ws.max_column + 1)):
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–∫–∏
            column_headers = []
            for row in structure['header_rows']:
                cell_value = ws.cell(row=row, column=col).value
                if cell_value:
                    column_headers.append(str(cell_value).lower().strip())
            
            combined_header = ' '.join(column_headers)
            
            if not combined_header:
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ª—É—á—à–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            context_headers = []
            for ctx_col in range(max(1, col-2), min(ws.max_column + 1, col+3)):
                if ctx_col != col:  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–ª–æ–Ω–∫—É
                    ctx_combined = []
                    for row in structure['header_rows']:
                        cell_value = ws.cell(row=row, column=ctx_col).value
                        if cell_value:
                            ctx_combined.append(str(cell_value).lower().strip())
                    if ctx_combined:
                        context_headers.append(' '.join(ctx_combined))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏ –∏ –º–∞—Ä—à—Ä—É—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            column_type, route = self._classify_column(combined_header, context_headers)
            
            if column_type and route:
                # –ú–∞—Ä—à—Ä—É—Ç-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞
                if route not in structure['routes']:
                    structure['routes'][route] = {}
                structure['routes'][route][column_type] = col
                
            elif column_type:
                # –ë–∞–∑–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞
                structure['base_columns'][column_type] = col
            
            logger.info(f"–ö–æ–ª–æ–Ω–∫–∞ {get_column_letter(col)}: '{combined_header}' ‚Üí {column_type} ({route or '–±–∞–∑–æ–≤–∞—è'})")
        
        return structure

    def _classify_column(self, header_text: str, context_headers: List[str] = None) -> Tuple[Optional[str], Optional[str]]:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∫–æ–ª–æ–Ω–∫—É –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫"""
        
        if context_headers is None:
            context_headers = []
        
        # –£–õ–£–ß–®–ï–ù–ù–û–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        route = None
        route_mappings = {
            '–ê–í–ò–ê': ['–∞–≤–∏–∞', '–∞–≤—Ç–æ', 'air', 'aviation', 'avia', '—Å–∞–º–æ–ª–µ—Ç', '–¥—É–±–∞–π', 'dubai'],  # –î–æ–±–∞–≤–ª—è–µ–º –¥—É–±–∞–π
            '–ñ–î': ['–∂–¥', '–∂–µ–ª', '–ø–æ–µ–∑–¥', 'railway', 'train', '–∂–µ–ª–µ–∑–Ω', '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä'],
            '–û–ë–†–ê–ó–ï–¶': ['–æ–±—Ä–∞–∑–µ—Ü', 'sample', '–ø—Ä–æ–±–Ω', '–ø—Ä–æ–±–∞']  # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞!
        }
        
        for route_name, keywords in route_mappings.items():
            if any(kw in header_text for kw in keywords):
                route = route_name
                break
                
        # –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–ª–æ–Ω–∫–µ, –∏—â–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        if not route:
            for ctx_header in context_headers:
                for route_name, keywords in route_mappings.items():
                    if any(kw in ctx_header for kw in keywords):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–æ—Å–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
                        if any(price_word in header_text for price_word in ['—Ü–µ–Ω–∞', 'price', '$', '‚ÇΩ', '—Ä—É–±']):
                            route = route_name
                            break
                if route:
                    break
        
        # –£–õ–£–ß–®–ï–ù–ù–û–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–ª–æ–Ω–∫–∏
        column_type = None
        
        # –¶–µ–Ω—ã: —Å–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –ø–æ—Ç–æ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞
        if any(word in header_text for word in ['$', 'usd', '–¥–æ–ª–ª']):
            if any(word in header_text for word in ['—Ü–µ–Ω–∞', 'price']):
                column_type = 'price_usd'
        elif any(word in header_text for word in ['‚ÇΩ', '—Ä—É–±', 'rub']):
            if any(word in header_text for word in ['—Ü–µ–Ω–∞', 'price']):
                column_type = 'price_rub'
        elif '—Ü–µ–Ω–∞' in header_text or 'price' in header_text:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            is_rub_context = any('‚ÇΩ' in ctx or '—Ä—É–±' in ctx for ctx in context_headers)
            column_type = 'price_rub' if is_rub_context else 'price_usd'
        
        # –¢–∏—Ä–∞–∂/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        elif any(word in header_text for word in ['—Ç–∏—Ä–∞–∂', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–∫–æ–ª-–≤–æ', 'quantity', 'qty']):
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ –Ω–µ —Ü–µ–Ω–∞ —Å "—à—Ç"
            if not any(price_word in header_text for price_word in ['—Ü–µ–Ω–∞', 'price', '$', '‚ÇΩ', '—Ä—É–±']):
                # –ö–†–ò–¢–ò–ß–ù–û: –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ "–¢–∏—Ä–∞–∂, —à—Ç" - —ç—Ç–æ –ë–ê–ó–û–í–û–ï –ø–æ–ª–µ, –ù–ï –æ–±—Ä–∞–∑–µ—Ü!
                if not route:  # –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç - —ç—Ç–æ –±–∞–∑–æ–≤—ã–π —Ç–∏—Ä–∞–∂
                    column_type = 'quantity'
                    route = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
                else:
                    column_type = 'quantity'  # –° –º–∞—Ä—à—Ä—É—Ç–æ–º
        
        # –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        elif any(word in header_text for word in ['—Å—Ä–æ–∫', '–¥–Ω', '–¥–Ω–µ–π', '–≤—Ä–µ–º—è', 'delivery', 'time']):
            column_type = 'delivery_time'
        
        # –ü–†–ò–û–†–ò–¢–ï–¢: –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞ (—Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–º–µ—é—Ç –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if any(word in header_text for word in ['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '—Ç–æ–≤–∞—Ä', 'name', 'product']):
            column_type = 'name'
            route = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç - —ç—Ç–æ –±–∞–∑–æ–≤–æ–µ –ø–æ–ª–µ!
        elif any(word in header_text for word in ['–∞—Ä—Ç–∏–∫—É–ª', 'article', 'sku']):
            column_type = 'article'  
            route = None
        elif any(word in header_text for word in ['–æ–ø–∏—Å–∞–Ω–∏–µ', 'description', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏']):
            column_type = 'description'
            route = None
        elif any(word in header_text for word in ['–º–∞—Ç–µ—Ä–∏–∞–ª', 'material']):
            column_type = 'material'
            route = None
        elif any(word in header_text for word in ['—Ä–∞–∑–º–µ—Ä', 'size']):
            column_type = 'size'
            route = None
        elif any(word in header_text for word in ['—Ü–≤–µ—Ç', 'color']):
            column_type = 'color'
            route = None
        elif any(word in header_text for word in ['—É–ø–∞–∫–æ–≤–∫–∞', 'packaging']):
            column_type = 'packaging'
            route = None
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–ª—è –∏ –µ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã
        elif route:
            pass  # –≠—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤—ã—à–µ
        
        return column_type, route

    def _create_normalized_headers(self, structure: Dict) -> List[str]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        
        headers = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        for base_col in self.base_columns:
            headers.append(base_col)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        for route in sorted(structure['routes'].keys()):
            if route in self.route_columns:
                headers.extend(self.route_columns[route])
        
        return headers
    
    def _save_row_ranges_metadata(self, normalized_path: str, structure: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        
        import json
        
        metadata = {
            'normalized_file': os.path.basename(normalized_path),
            'original_file': structure.get('original_file', ''),
            'data_ranges': {
                'original_start_row': structure['data_start_row'],
                'original_end_row': structure.get('original_end_row', 0),
                'normalized_start_row': structure['normalized_data_range']['start_row'],
                'normalized_end_row': structure['normalized_data_range']['end_row'],
                'total_products': structure['normalized_data_range']['total_products']
            },
            'row_mappings': structure['row_mappings'],  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞ ‚Üí –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞
            'found_routes': list(structure['routes'].keys()),
            'base_columns': list(structure['base_columns'].keys()),
            'created_at': str(datetime.now())
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª —Ä—è–¥–æ–º —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π
        metadata_path = normalized_path.replace('.xlsx', '_metadata.json')
        
        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
            
        logger.info(f"üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {metadata_path}")
        
        return metadata_path

    def _write_headers(self, ws, headers: List[str]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã  
        ws.cell(row=1, column=1, value="–ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ì–û –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø")
        ws.merge_cells(start_row=1, start_column=1, end_row=1, end_column=len(headers))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for col, header in enumerate(headers, 1):
            ws.cell(row=2, column=col, value=header)

    def _copy_normalized_data(self, source_ws, target_ws, structure: Dict, headers: List[str]):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        
        data_start = structure['data_start_row']
        target_row = 3  # –ù–∞—á–∏–Ω–∞–µ–º —Å 3-–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫ –∫–æ–ª–æ–Ω–∫–∞–º
        header_to_col = {header: col for col, header in enumerate(headers, 1)}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        structure['row_mappings'] = {}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"–ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å—Ç—Ä–æ–∫–∏ {data_start} –¥–æ {source_ws.max_row}")
        
        for row in range(data_start, source_ws.max_row + 1):
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ (–ø—Ä–æ–≤–µ—Ä—è–µ–º key –∫–æ–ª–æ–Ω–∫–∏)
            key_columns_to_check = [col for col in structure['base_columns'].values()] + \
                                 [col for route_data in structure['routes'].values() 
                                  for col in route_data.values()]
            
            has_data = False
            for col in key_columns_to_check[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –≤–∞–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                cell_value = source_ws.cell(row=row, column=col).value
                if cell_value and str(cell_value).strip():
                    has_data = True
                    break
            
            if not has_data:
                continue
            
            logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É {row} ‚Üí –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ {target_row}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–æ–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Üí –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
            structure['row_mappings'][row] = target_row
            
            # –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
            for field_type, source_col in structure['base_columns'].items():
                if field_type == 'name':
                    target_col = header_to_col.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
                elif field_type == 'article':
                    target_col = header_to_col.get('–ê—Ä—Ç–∏–∫—É–ª')
                elif field_type == 'description':
                    target_col = header_to_col.get('–û–ø–∏—Å–∞–Ω–∏–µ')
                elif field_type == 'material':
                    target_col = header_to_col.get('–ú–∞—Ç–µ—Ä–∏–∞–ª')
                elif field_type == 'size':
                    target_col = header_to_col.get('–†–∞–∑–º–µ—Ä')
                elif field_type == 'color':
                    target_col = header_to_col.get('–¶–≤–µ—Ç')
                elif field_type == 'packaging':
                    target_col = header_to_col.get('–£–ø–∞–∫–æ–≤–∫–∞')
                else:
                    continue
                
                if target_col:
                    value = source_ws.cell(row=row, column=source_col).value
                    if value is not None:  # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        target_ws.cell(row=target_row, column=target_col, value=value)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for route, route_fields in structure['routes'].items():
                for field_type, source_col in route_fields.items():
                    
                    if field_type == 'quantity':
                        target_col = header_to_col.get(f'–¢–∏—Ä–∞–∂ ({route}), —à—Ç')
                    elif field_type == 'price_usd':
                        target_col = header_to_col.get(f'–¶–µ–Ω–∞ ({route}), $')
                    elif field_type == 'price_rub':
                        target_col = header_to_col.get(f'–¶–µ–Ω–∞ ({route}), ‚ÇΩ')
                    elif field_type == 'delivery_time':
                        target_col = header_to_col.get(f'–°—Ä–æ–∫ ({route}), –¥–Ω.')
                    else:
                        continue
                    
                    if target_col:
                        value = source_ws.cell(row=row, column=source_col).value
                        if value is not None:  # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                            target_ws.cell(row=target_row, column=target_col, value=value)
                            logger.debug(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {field_type} –¥–ª—è {route}: {value} –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ {source_col} –≤ {target_col}")
            
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Ü–µ–Ω—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å  
            if 'quantity' in structure['base_columns']:
                base_quantity = source_ws.cell(row=row, column=structure['base_columns']['quantity']).value
                # –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –≥–¥–µ –Ω–µ—Ç —Å–≤–æ–µ–≥–æ
                for route in structure['routes'].keys():
                    if 'quantity' not in structure['routes'][route]:
                        target_col = header_to_col.get(f'–¢–∏—Ä–∞–∂ ({route}), —à—Ç')
                        if target_col and base_quantity:
                            target_ws.cell(row=target_row, column=target_col, value=base_quantity)
            
            target_row += 1
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö
        structure['normalized_data_range'] = {
            'start_row': 3,  # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
            'end_row': target_row - 1,  # –ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            'total_products': target_row - 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        }

    def _apply_formatting(self, ws, headers: List[str]):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        title_cell = ws.cell(row=1, column=1)
        title_cell.font = Font(bold=True, size=14)
        title_cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        title_cell.font = Font(bold=True, size=14, color="FFFFFF")
        title_cell.alignment = Alignment(horizontal="center", vertical="center")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        for col in range(1, len(headers) + 1):
            header_cell = ws.cell(row=2, column=col)
            header_cell.font = Font(bold=True, size=11)
            header_cell.fill = PatternFill(start_color="D9E1F2", end_color="D9E1F2", fill_type="solid")
            header_cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in range(1, len(headers) + 1):
            ws.column_dimensions[get_column_letter(col)].width = 15


def test_normalization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ"""
    
    import os
    
    normalizer = TableNormalizer()
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    excel_files_dir = "storage/excel_files"
    test_files = []
    
    if os.path.exists(excel_files_dir):
        for file in os.listdir(excel_files_dir):
            if file.endswith('.xlsx') and not file.startswith('~'):
                test_files.append(os.path.join(excel_files_dir, file))
    
    if not test_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –ë–µ—Ä–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    test_file = "storage/excel_files/original_sheet.xlsx"
    print(f"üß™ –¢–ï–°–¢–ò–†–£–ï–ú –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Æ –ù–ê –§–ê–ô–õ–ï: {test_file}")
    print("=" * 80)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    print("\nüìä –ê–ù–ê–õ–ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–´:")
    wb = openpyxl.load_workbook(test_file, data_only=True)
    ws = wb.active
    
    print(f"–†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {ws.max_row} —Å—Ç—Ä–æ–∫ √ó {ws.max_column} –∫–æ–ª–æ–Ω–æ–∫")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    print("\nüîç –¢–ï–ö–£–©–ò–ï –ó–ê–ì–û–õ–û–í–ö–ò:")
    for row in range(1, min(4, ws.max_row + 1)):
        headers = []
        for col in range(1, min(15, ws.max_column + 1)):
            cell_value = ws.cell(row=row, column=col).value
            if cell_value:
                headers.append(f"{get_column_letter(col)}={cell_value}")
        if headers:
            print(f"  –°—Ç—Ä–æ–∫–∞ {row}: {' | '.join(headers)}")
    
    wb.close()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
    print(f"\nüîß –í–´–ü–û–õ–ù–Ø–ï–ú –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Æ...")
    normalized_file = normalizer.normalize_table(test_file)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò:")
    print(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {normalized_file}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    wb_norm = openpyxl.load_workbook(normalized_file, data_only=True)
    ws_norm = wb_norm.active
    
    print(f"–†–∞–∑–º–µ—Ä –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {ws_norm.max_row} —Å—Ç—Ä–æ–∫ √ó {ws_norm.max_column} –∫–æ–ª–æ–Ω–æ–∫")
    
    print("\nüéØ –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –ó–ê–ì–û–õ–û–í–ö–ò:")
    for col in range(1, ws_norm.max_column + 1):
        header = ws_norm.cell(row=2, column=col).value
        if header:
            print(f"  {get_column_letter(col)}: {header}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüìã –û–ë–†–ê–ó–ï–¶ –î–ê–ù–ù–´–• (–ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏):")
    for row in range(3, min(6, ws_norm.max_row + 1)):
        data = []
        for col in range(1, min(8, ws_norm.max_column + 1)):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 7 –∫–æ–ª–æ–Ω–æ–∫
            cell_value = ws_norm.cell(row=row, column=col).value
            data.append(str(cell_value) if cell_value else "")
        print(f"  –°—Ç—Ä–æ–∫–∞ {row-2}: {' | '.join(data)}")
    
    wb_norm.close()
    
    return normalized_file

if __name__ == "__main__":
    test_normalization()
