#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Ñ–∞–π–ª–µ vs –ë–î
"""

import openpyxl
from openpyxl.utils import get_column_letter
from pathlib import Path
from database.manager_v4 import DatabaseManager
from database.models_v4 import Product, PriceOffer, SheetMetadata

def debug_excel_file(file_path, specific_rows=None):
    """–î–µ—Ç–∞–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª"""
    
    print(f"üìÅ –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê: {file_path}")
    print("=" * 80)
    
    if not Path(file_path).exists():
        print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        wb = openpyxl.load_workbook(file_path, data_only=True)
        ws = wb.active
        
        print(f"üìä –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {ws.max_row} —Å—Ç—Ä–æ–∫, {ws.max_column} –∫–æ–ª–æ–Ω–æ–∫")
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏)
        print("üìã –ó–ê–ì–û–õ–û–í–ö–ò –¢–ê–ë–õ–ò–¶–´:")
        for row in range(1, min(4, ws.max_row + 1)):
            row_data = []
            for col in range(1, min(20, ws.max_column + 1)):
                cell = ws.cell(row=row, column=col)
                col_letter = get_column_letter(col)
                if cell.value is not None:
                    row_data.append(f"{col_letter}: {str(cell.value)[:50]}")
            
            if row_data:
                print(f"   –°—Ç—Ä–æ–∫–∞ {row}: {' | '.join(row_data)}")
        
        print("\n" + "="*80)
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö –¥–µ—Ç–∞–ª—å–Ω–æ
        if specific_rows:
            print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –£–ö–ê–ó–ê–ù–ù–´–• –°–¢–†–û–ö:")
            for row_num in specific_rows:
                print(f"\nüìç –°–¢–†–û–ö–ê {row_num}:")
                print("-" * 40)
                
                for col in range(1, min(20, ws.max_column + 1)):
                    cell = ws.cell(row=row_num, column=col)
                    col_letter = get_column_letter(col)
                    
                    if cell.value is not None:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        cell_value = cell.value
                        cell_type = type(cell_value).__name__
                        
                        print(f"   {col_letter}{row_num}: {cell_value} (—Ç–∏–ø: {cell_type})")
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ - –ø—Ä–æ–≤–µ—Ä–∏–º –º–æ–∂–µ—Ç –ª–∏ –±—ã—Ç—å —Ç–∏—Ä–∞–∂–æ–º
                        if isinstance(cell_value, (int, float)):
                            if 1 <= cell_value <= 100000:
                                print(f"      üéØ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ô –¢–ò–†–ê–ñ: {cell_value}")
                            elif cell_value > 0.1 and cell_value < 1000:
                                print(f"      üí∞ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –¶–ï–ù–ê: {cell_value}")
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏—Ä–∞–∂–∏/—Ü–µ–Ω—ã)
        print(f"\nüîç –ü–û–ò–°–ö –ß–ò–°–õ–û–í–´–• –ö–û–õ–û–ù–û–ö (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏—Ä–∞–∂–∏ –∏ —Ü–µ–Ω—ã):")
        print("=" * 60)
        
        for col in range(1, min(15, ws.max_column + 1)):
            col_letter = get_column_letter(col)
            numbers = []
            
            # –°–º–æ—Ç—Ä–∏–º –ø–µ—Ä–≤—ã–µ 30 —Å—Ç—Ä–æ–∫
            for row in range(1, min(31, ws.max_row + 1)):
                cell_value = ws.cell(row=row, column=col).value
                if isinstance(cell_value, (int, float)) and cell_value > 0:
                    numbers.append((row, cell_value))
            
            if numbers:
                print(f"\nüìä –ö–æ–ª–æ–Ω–∫–∞ {col_letter}:")
                for row, value in numbers[:10]:  # –ü–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π
                    if isinstance(value, float) and 1 <= value <= 100000:
                        print(f"      –°—Ç—Ä–æ–∫–∞ {row}: {value} ‚Üê –ü–û–•–û–ñ–ï –ù–ê –¢–ò–†–ê–ñ")
                    elif isinstance(value, int) and 1 <= value <= 100000:
                        print(f"      –°—Ç—Ä–æ–∫–∞ {row}: {value} ‚Üê –ü–û–•–û–ñ–ï –ù–ê –¢–ò–†–ê–ñ")  
                    elif 0.1 <= value <= 1000:
                        print(f"      –°—Ç—Ä–æ–∫–∞ {row}: {value} ‚Üê –ü–û–•–û–ñ–ï –ù–ê –¶–ï–ù–£")
                    else:
                        print(f"      –°—Ç—Ä–æ–∫–∞ {row}: {value}")
        
        wb.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}")

def compare_with_db():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —á—Ç–æ –∏–∑–≤–ª–µ–∫ –ø–∞—Ä—Å–µ—Ä —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    session = DatabaseManager.get_session()
    
    try:
        # –ù–∞–π–¥–µ–º —Ç–æ–≤–∞—Ä—ã "–Å–ª–æ—á–Ω–∞—è –∏–≥—Ä—É—à–∫–∞"
        xmas_products = session.query(Product).filter(
            Product.name.contains('–ª–æ—á–Ω–∞—è –∏–≥—Ä—É—à–∫–∞')
        ).all()
        
        print("\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•:")
        print("=" * 60)
        
        for product in xmas_products:
            sheet = session.query(SheetMetadata).get(product.sheet_id)
            prices = session.query(PriceOffer).filter(PriceOffer.product_id == product.id).all()
            
            print(f"\nüì¶ {product.name}")
            print(f"   üìè –°—Ç—Ä–æ–∫–∏ –≤ Excel: {product.start_row}-{product.end_row}")
            print(f"   üìä –§–∞–π–ª: {sheet.local_file_path if sheet else 'Unknown'}")
            
            for price in prices:
                print(f"   üí∞ –ü–∞—Ä—Å–µ—Ä –∏–∑–≤–ª–µ–∫:")
                print(f"      –¢–∏—Ä–∞–∂: {price.quantity}")
                print(f"      USD: ${price.price_usd}")
                print(f"      RUB: {price.price_rub} ‚ÇΩ")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π Excel —Ñ–∞–π–ª
            if sheet and sheet.local_file_path:
                print(f"   üîç –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel:")
                debug_excel_file(sheet.local_file_path, [product.start_row])
    
    finally:
        session.close()

if __name__ == "__main__":
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
    file_path = "/Users/bakirovresad/Downloads/Reshad 1/projects/commercial_proposals_parser_clean/storage/excel_files/sheet_1nav9w2d_public.xlsx"
    
    print("üéØ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê –° –Å–õ–û–ß–ù–´–ú–ò –ò–ì–†–£–®–ö–ê–ú–ò")
    print("=" * 80)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)
    problem_rows = [17, 19, 21, 23, 25]
    debug_excel_file(file_path, problem_rows)
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ë–î
    compare_with_db()


