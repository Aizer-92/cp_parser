#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏—Ä–∞–∂–∞–º–∏
"""

from smart_adaptive_parser import SmartAdaptiveParser
from database.manager_v4 import DatabaseManager
from database.models_v4 import Product, PriceOffer, SheetMetadata
import openpyxl
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class FixedSmartParser(SmartAdaptiveParser):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —É–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def _extract_products_smart(self, ws, structure, columns):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        products = []
        name_col = None
        quantity_col = None
        
        # –ù–∞—Ö–æ–¥–∏–º –ü–†–ê–í–ò–õ–¨–ù–£–Æ –∫–æ–ª–æ–Ω–∫—É name
        for col_key, col_info in columns.items():
            if col_key == 'name' and hasattr(col_info, 'index'):
                name_col = col_info.index
                break
        
        # –ù–∞—Ö–æ–¥–∏–º –ü–†–ê–í–ò–õ–¨–ù–£–Æ –∫–æ–ª–æ–Ω–∫—É quantity (–ù–ï –∏–∑ —Ü–µ–Ω!)
        for col_key, col_info in columns.items():
            if col_key == 'quantity' and hasattr(col_info, 'index'):
                quantity_col = col_info.index
                break
        
        if not name_col:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏")
            return products
        
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–æ–Ω–∫—É name: {name_col} (–∫–æ–ª–æ–Ω–∫–∞ {openpyxl.utils.get_column_letter(name_col)})")
        if quantity_col:
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–æ–Ω–∫—É quantity: {quantity_col} (–∫–æ–ª–æ–Ω–∫–∞ {openpyxl.utils.get_column_letter(quantity_col)})")
        
        # –û–î–ù–û–ö–†–ê–¢–ù–´–ô –ø—Ä–æ—Ö–æ–¥ –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Ç–æ–≤–∞—Ä–æ–≤
        processed_rows = set()  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        
        for row in range(structure.data_start_row, structure.data_end_row + 1):
            if row in processed_rows:
                continue
                
            name_value = ws.cell(row=row, column=name_col).value
            
            if not name_value or not self._is_valid_product_name(str(name_value)):
                continue
            
            product_name = str(name_value).strip()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–∞
            product_data = {
                'name': product_name,
                'row': row,
                'prices': []
            }
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏—Ä–∞–∂–∞
            base_quantity = None
            if quantity_col:
                qty_value = ws.cell(row=row, column=quantity_col).value
                if qty_value:
                    base_quantity = self._validate_quantity(qty_value)
                    if base_quantity:
                        logger.info(f"–¢–æ–≤–∞—Ä '{product_name}' (—Å—Ç—Ä–æ–∫–∞ {row}): —Ç–∏—Ä–∞–∂ {base_quantity}")
                    else:
                        logger.warning(f"–¢–æ–≤–∞—Ä '{product_name}' (—Å—Ç—Ä–æ–∫–∞ {row}): –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∏—Ä–∞–∂ {qty_value}")
            
            if not base_quantity:
                base_quantity = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            product_data['base_quantity'] = base_quantity
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –í–°–ï —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            self._extract_all_price_variants(ws, row, columns, product_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            if product_data['prices']:
                products.append(product_data)
                processed_rows.add(row)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {product_name} —Å {len(product_data['prices'])} —Ü–µ–Ω–æ–≤—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏")
        
        return products
    
    def _extract_all_price_variants(self, ws, row, columns, product_data):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –í–°–ï —Ü–µ–Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        
        base_quantity = product_data.get('base_quantity', 1)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ü–µ–Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º
        price_variants = {}
        
        for col_key, col_info in columns.items():
            if not col_key.startswith('price_'):
                continue
                
            if not hasattr(col_info, 'index'):
                continue
            
            col_type = getattr(col_info, 'type', '')
            route_type = self._extract_route_from_key(col_key)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
            cell_value = ws.cell(row=row, column=col_info.index).value
            if not cell_value:
                continue
                
            price = self._validate_price(cell_value)
            if not price:
                continue
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
            if route_type not in price_variants:
                price_variants[route_type] = {
                    'route_name': self._get_route_display_name(route_type),
                    'quantity': base_quantity
                }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É
            if col_type == 'price_usd':
                price_variants[route_type]['price_usd'] = price
            elif col_type == 'price_rub':
                price_variants[route_type]['price_rub'] = price
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        for route_type, variant in price_variants.items():
            if variant.get('price_usd') or variant.get('price_rub'):
                product_data['prices'].append({
                    'route_name': variant['route_name'],
                    'quantity': variant['quantity'],
                    'price_usd': variant.get('price_usd'),
                    'price_rub': variant.get('price_rub'),
                    'delivery_time': None
                })
    
    def _extract_route_from_key(self, col_key):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ –∫–ª—é—á–∞ –∫–æ–ª–æ–Ω–∫–∏"""
        if '_railway' in col_key:
            return 'railway'
        elif '_air' in col_key:
            return 'air'
        elif '_sample' in col_key:
            return 'sample'
        else:
            return 'standard'
    
    def _get_route_display_name(self, route_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞"""
        route_names = {
            'railway': '–ñ–î –¥–æ—Å—Ç–∞–≤–∫–∞',
            'air': '–ê–í–ò–ê –¥–æ—Å—Ç–∞–≤–∫–∞', 
            'sample': '–û–±—Ä–∞–∑–µ—Ü',
            'standard': '–°—Ç–∞–Ω–¥–∞—Ä—Ç'
        }
        return route_names.get(route_type, route_type)

def test_fixed_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä"""
    
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–ê–†–°–ï–†–ê")
    print("=" * 60)
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    session = DatabaseManager.get_session()
    
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        sheet = session.query(SheetMetadata).filter(
            SheetMetadata.local_file_path.contains("sheet_1nav9w2d_public.xlsx")
        ).first()
        
        if sheet:
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —Ç–æ–≤–∞—Ä—ã
            products = session.query(Product).filter(Product.sheet_id == sheet.id).all()
            for product in products:
                session.query(PriceOffer).filter(PriceOffer.product_id == product.id).delete()
            session.query(Product).filter(Product.sheet_id == sheet.id).delete()
            session.commit()
            
            print(f"‚úÖ –û—á–∏—â–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {sheet.id}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
            fixed_parser = FixedSmartParser()
            success = fixed_parser.parse_excel_smart(sheet.id)
            
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")
            
        else:
            print("‚ùå –¢–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    finally:
        session.close()

if __name__ == "__main__":
    test_fixed_parser()
