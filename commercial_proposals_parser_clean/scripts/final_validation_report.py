#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.manager_v4 import DatabaseManager
from database.models_v4 import Product, PriceOffer, ProductImage, SheetMetadata
from sqlalchemy import text, func

def generate_final_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ë–î"""
    session = DatabaseManager.get_session()
    
    try:
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 70)
        
        # 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_products = session.query(Product).count()
        total_sheets = session.query(SheetMetadata).count()
        total_prices = session.query(PriceOffer).count()
        total_images = session.query(ProductImage).count()
        
        print(f"\\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {total_sheets}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ü–µ–Ω: {total_prices}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
        
        # 2. –¢–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏
        products_with_prices = session.query(Product.id).join(PriceOffer).distinct().count()
        products_without_prices = total_products - products_with_prices
        price_coverage = (products_with_prices / total_products * 100) if total_products > 0 else 0
        
        print(f"\\nüí∞ –ü–û–ö–†–´–¢–ò–ï –¶–ï–ù–ê–ú–ò:")
        print(f"   ‚Ä¢ –¢–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏: {products_with_prices} ({price_coverage:.1f}%)")
        print(f"   ‚Ä¢ –¢–æ–≤–∞—Ä—ã –±–µ–∑ —Ü–µ–Ω: {products_without_prices}")
        
        # 3. –¢–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        products_with_images = session.query(Product.id).join(ProductImage).distinct().count()
        products_without_images = total_products - products_with_images
        image_coverage = (products_with_images / total_products * 100) if total_products > 0 else 0
        
        print(f"\\nüñºÔ∏è  –ü–û–ö–†–´–¢–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò:")
        print(f"   ‚Ä¢ –¢–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {products_with_images} ({image_coverage:.1f}%)")
        print(f"   ‚Ä¢ –¢–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {products_without_images}")
        
        # 4. –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        print(f"\\nüîç –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–•:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ —Ç–∏—Ä–∞–∂–∏
        huge_quantities = session.execute(text("""
            SELECT COUNT(DISTINCT product_id) 
            FROM price_offers 
            WHERE quantity > 50000
        """)).scalar()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
        huge_prices = session.execute(text("""
            SELECT COUNT(DISTINCT product_id) 
            FROM price_offers 
            WHERE price_usd > 500
        """)).scalar()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ü–µ–Ω
        too_many_prices = session.execute(text("""
            SELECT COUNT(*) FROM (
                SELECT product_id 
                FROM price_offers 
                GROUP BY product_id 
                HAVING COUNT(*) > 10
            ) as subq
        """)).scalar()
        
        print(f"   ‚Ä¢ –¢–æ–≤–∞—Ä—ã —Å –∞–Ω–æ–º–∞–ª—å–Ω—ã–º–∏ —Ç–∏—Ä–∞–∂–∞–º–∏ (>50k): {huge_quantities}")
        print(f"   ‚Ä¢ –¢–æ–≤–∞—Ä—ã —Å –∞–Ω–æ–º–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ (>$500): {huge_prices}")
        print(f"   ‚Ä¢ –¢–æ–≤–∞—Ä—ã —Å–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –∫–æ–ª-–≤–æ–º —Ü–µ–Ω (>10): {too_many_prices}")
        
        # 5. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
        print(f"\\nüìã –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ê–ë–õ–ò–¶–ê–ú:")
        
        table_stats = session.execute(text("""
            SELECT 
                sm.sheet_title,
                COUNT(p.id) as product_count,
                COUNT(DISTINCT po.product_id) as products_with_prices,
                COUNT(DISTINCT pi.product_id) as products_with_images
            FROM sheets_metadata sm
            LEFT JOIN products p ON sm.id = p.sheet_id
            LEFT JOIN price_offers po ON p.id = po.product_id
            LEFT JOIN product_images pi ON p.id = pi.product_id
            GROUP BY sm.id, sm.sheet_title
            ORDER BY COUNT(p.id) DESC
            LIMIT 10
        """)).fetchall()
        
        for row in table_stats:
            if row[1] > 0:  # –¢–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
                price_pct = (row[2] / row[1] * 100) if row[1] > 0 else 0
                image_pct = (row[3] / row[1] * 100) if row[1] > 0 else 0
                print(f"   ‚Ä¢ {row[0][:40]}...")
                print(f"     –¢–æ–≤–∞—Ä–æ–≤: {row[1]}, –¶–µ–Ω—ã: {price_pct:.0f}%, –§–æ—Ç–æ: {image_pct:.0f}%")
        
        # 6. –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        print(f"\\n‚úÖ –ü–†–ò–ú–ï–†–´ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –¢–û–í–ê–†–û–í:")
        
        # –¢–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∏—Å–ø—Ä–∞–≤–ª—è–ª–∏
        fixed_products = [444, 436, 367, 22, 460, 458, 427, 50, 51, 303, 423, 452]
        
        for product_id in fixed_products[:5]:
            product = session.query(Product).filter(Product.id == product_id).first()
            if product:
                price_count = session.query(PriceOffer).filter(PriceOffer.product_id == product_id).count()
                image_count = session.query(ProductImage).filter(ProductImage.product_id == product_id).count()
                print(f"   ‚Ä¢ ID {product_id}: {product.name[:40]}... ({price_count} —Ü–µ–Ω, {image_count} —Ñ–æ—Ç–æ)")
        
        # 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if products_without_prices > 0:
            print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å {products_without_prices} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ü–µ–Ω")
        
        if products_without_images > 0:
            print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å {products_without_images} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        if huge_quantities > 0 or huge_prices > 0 or too_many_prices > 0:
            print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –∞–Ω–æ–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        else:
            print(f"   ‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã!")
        
        # 8. –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞
        print(f"\\nüîß –°–¢–ê–¢–£–° –ü–ê–†–°–ï–†–ê:")
        print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º")
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π")
        print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Ñ–∞–Ω—Ç–æ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print(f"   ‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–æ–±–ª–µ–º")
        
        return {
            'total_products': total_products,
            'price_coverage': price_coverage,
            'image_coverage': image_coverage,
            'quality_issues': huge_quantities + huge_prices + too_many_prices
        }
        
    finally:
        session.close()

def main():
    print("üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê")
    print("=" * 70)
    
    stats = generate_final_report()
    
    print(f"\\n" + "=" * 70)
    print(f"‚úÖ –û–¢–ß–ï–¢ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù")
    print(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ —Ü–µ–Ω–∞–º–∏: {stats['price_coverage']:.1f}%")
    print(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {stats['image_coverage']:.1f}%")
    print(f"   –ü—Ä–æ–±–ª–µ–º —Å –∫–∞—á–µ—Å—Ç–≤–æ–º: {stats['quality_issues']}")

if __name__ == "__main__":
    main()
