#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ 10 –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü –∏–∑ —Å–ø–∏—Å–∫–∞
"""

import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.manager_v4 import DatabaseManager
from database.models_v4 import ProjectMetadata, SheetMetadata
from scripts.complete_parsing_pipeline import CompleteParsing

def get_next_urls_to_process(limit=10):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    session = DatabaseManager.get_session()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        unprocessed_projects = session.query(ProjectMetadata).filter(
            ProjectMetadata.processing_status == 'pending',
            ProjectMetadata.google_sheets_url.isnot(None)
        ).limit(limit).all()
        
        return unprocessed_projects
        
    finally:
        session.close()

def process_next_sheets(count=10):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Å–ø–∏—Å–∫–∞"""
    print(f"üöÄ –û–ë–†–ê–ë–û–¢–ö–ê {count} –ù–û–í–´–• –¢–ê–ë–õ–ò–¶")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    projects_to_process = get_next_urls_to_process(count)
    
    if not projects_to_process:
        print("‚úÖ –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(projects_to_process)}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = CompleteParsing()
    
    success_count = 0
    error_count = 0
    
    for i, project in enumerate(projects_to_process, 1):
        print(f"\nüìä –ü—Ä–æ–µ–∫—Ç {i}/{len(projects_to_process)}")
        print(f"   üìÑ {project.project_title[:60]}...")
        print(f"   üë§ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {project.counterparty or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
        print(f"   üåç –†–µ–≥–∏–æ–Ω: {project.region or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
        
        try:
            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π
            project.processing_status = 'processing'
            parser.session.commit()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            success = parser.process_single_sheet(project.google_sheets_url)
            
            if success:
                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
                project.processing_status = 'completed'
                project.parsed_at = datetime.utcnow()
                
                # –°–≤—è–∑—ã–≤–∞–µ–º —Å —Å–æ–∑–¥–∞–Ω–Ω–æ–π SheetMetadata
                latest_sheet = parser.session.query(SheetMetadata).filter(
                    SheetMetadata.sheet_url == project.google_sheets_url
                ).first()
                
                if latest_sheet:
                    project.sheet_metadata_id = latest_sheet.id
                
                success_count += 1
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            else:
                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É
                project.processing_status = 'error'
                error_count += 1
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            parser.session.commit()
            
        except Exception as e:
            print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            project.processing_status = 'error'
            parser.session.rollback()
            parser.session.commit()
            error_count += 1
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        if i < len(projects_to_process):
            print("   ‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...")
            import time
            time.sleep(3)
    
    print(f"\nüéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
    print(f"   ‚ùå –û—à–∏–±–∫–∏: {error_count}")
    print(f"   üìä –í—Å–µ–≥–æ: {len(projects_to_process)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    session = DatabaseManager.get_session()
    try:
        total_projects = session.query(ProjectMetadata).count()
        completed_projects = session.query(ProjectMetadata).filter(
            ProjectMetadata.processing_status == 'completed'
        ).count()
        pending_projects = session.query(ProjectMetadata).filter(
            ProjectMetadata.processing_status == 'pending'
        ).count()
        error_projects = session.query(ProjectMetadata).filter(
            ProjectMetadata.processing_status == 'error'
        ).count()
        
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–û–í:")
        print(f"   üìä –í—Å–µ–≥–æ: {total_projects}")
        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {completed_projects}")
        print(f"   ‚è≥ –û–∂–∏–¥–∞–µ—Ç: {pending_projects}")
        print(f"   ‚ùå –û—à–∏–±–∫–∏: {error_projects}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        from database.models_v4 import Product, ProductImage
        total_products = session.query(Product).count()
        total_images = session.query(ProductImage).count()
        
        print(f"\nüì¶ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–ù–ù–´–•:")
        print(f"   üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
        print(f"   üñºÔ∏è –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
        
    finally:
        session.close()

if __name__ == "__main__":
    try:
        count = int(sys.argv[1]) if len(sys.argv) > 1 else 10
        process_next_sheets(count)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
