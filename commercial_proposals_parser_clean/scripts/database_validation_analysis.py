#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–∞–∑–º–µ—Ç–∫–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.manager_v4 import DatabaseManager
from database.models_v4 import SheetMetadata, Product, ProductImage, PriceOffer
import pandas as pd
from pathlib import Path
import re
from collections import defaultdict
import json

class DatabaseValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ë–î –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self):
        self.session = DatabaseManager.get_session()
        self.validation_results = {
            'products': [],
            'images': [],
            'prices': [],
            'summary': {}
        }
    
    def analyze_products(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å"""
        print("üîç –ê–ù–ê–õ–ò–ó –¢–û–í–ê–†–û–í")
        print("=" * 50)
        
        products = self.session.query(Product).all()
        
        categories = {
            'valid': [],
            'suspicious_name': [],
            'no_characteristics': [],
            'huge_row_range': [],
            'no_images': [],
            'no_prices': [],
            'phantom': []
        }
        
        for product in products:
            product_data = {
                'id': product.id,
                'name': product.name,
                'sheet_id': product.sheet_id,
                'start_row': product.start_row,
                'end_row': product.end_row,
                'row_range': product.end_row - product.start_row + 1,
                'has_characteristics': bool(product.characteristics and product.characteristics.strip()),
                'characteristics_length': len(product.characteristics or ''),
                'issues': []
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
            if not product.name or len(product.name.strip()) < 2:
                categories['suspicious_name'].append(product_data)
                product_data['issues'].append('empty_or_short_name')
            elif self._is_service_name(product.name):
                categories['suspicious_name'].append(product_data)
                product_data['issues'].append('service_name')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            if not product_data['has_characteristics']:
                categories['no_characteristics'].append(product_data)
                product_data['issues'].append('no_characteristics')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—Ç—Ä–æ–∫
            if product_data['row_range'] > 50:
                categories['huge_row_range'].append(product_data)
                product_data['issues'].append('huge_row_range')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            images_count = self.session.query(ProductImage).filter(ProductImage.product_id == product.id).count()
            product_data['images_count'] = images_count
            if images_count == 0:
                categories['no_images'].append(product_data)
                product_data['issues'].append('no_images')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω
            prices_count = self.session.query(PriceOffer).filter(PriceOffer.product_id == product.id).count()
            product_data['prices_count'] = prices_count
            if prices_count == 0:
                categories['no_prices'].append(product_data)
                product_data['issues'].append('no_prices')
            
            # –§–∞–Ω—Ç–æ–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–æ–≥—Ä–æ–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–æ–∫)
            if product_data['row_range'] > 100:
                categories['phantom'].append(product_data)
                product_data['issues'].append('phantom_product')
            
            # –í–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            if not product_data['issues']:
                categories['valid'].append(product_data)
            
            self.validation_results['products'].append(product_data)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {len(categories['valid'])}")
        print(f"‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {len(categories['suspicious_name'])}")
        print(f"üìù –ë–µ–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {len(categories['no_characteristics'])}")
        print(f"üìè –û–≥—Ä–æ–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–æ–∫: {len(categories['huge_row_range'])}")
        print(f"üñºÔ∏è  –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(categories['no_images'])}")
        print(f"üí∞ –ë–µ–∑ —Ü–µ–Ω: {len(categories['no_prices'])}")
        print(f"üëª –§–∞–Ω—Ç–æ–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã: {len(categories['phantom'])}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        if categories['phantom']:
            print(f"\\nüëª –§–ê–ù–¢–û–ú–ù–´–ï –¢–û–í–ê–†–´ (—Ç–æ–ø-5):")
            for product_data in sorted(categories['phantom'], key=lambda x: x['row_range'], reverse=True)[:5]:
                print(f"  ID {product_data['id']}: {product_data['name']} ({product_data['row_range']} —Å—Ç—Ä–æ–∫)")
        
        if categories['suspicious_name']:
            print(f"\\n‚ö†Ô∏è  –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–ó–í–ê–ù–ò–Ø (—Ç–æ–ø-5):")
            for product_data in categories['suspicious_name'][:5]:
                print(f"  ID {product_data['id']}: '{product_data['name']}'")
        
        return categories
    
    def analyze_images(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        print(f"\\nüñºÔ∏è  –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
        print("=" * 50)
        
        images = self.session.query(ProductImage).all()
        
        categories = {
            'valid': [],
            'missing_files': [],
            'wrong_type': [],
            'orphaned': []
        }
        
        storage_path = Path('storage/images')
        
        for image in images:
            image_data = {
                'id': image.id,
                'product_id': image.product_id,
                'local_path': image.local_path,
                'row': image.row,
                'column': image.column,
                'image_type': image.image_type,
                'issues': []
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            if image.local_path:
                file_path = Path(image.local_path)
                if not file_path.exists():
                    categories['missing_files'].append(image_data)
                    image_data['issues'].append('file_not_found')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if image.image_type not in ['main', 'additional']:
                categories['wrong_type'].append(image_data)
                image_data['issues'].append('wrong_type')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å —Ç–æ–≤–∞—Ä–æ–º
            product = self.session.query(Product).filter(Product.id == image.product_id).first()
            if not product:
                categories['orphaned'].append(image_data)
                image_data['issues'].append('orphaned')
            
            if not image_data['issues']:
                categories['valid'].append(image_data)
            
            self.validation_results['images'].append(image_data)
        
        print(f"üìä –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
        print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {len(categories['valid'])}")
        print(f"üìÅ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {len(categories['missing_files'])}")
        print(f"üè∑Ô∏è  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø: {len(categories['wrong_type'])}")
        print(f"üîó –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —Å–≤—è–∑–∏: {len(categories['orphaned'])}")
        
        return categories
    
    def analyze_prices(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–Ω—ã"""
        print(f"\\nüí∞ –ê–ù–ê–õ–ò–ó –¶–ï–ù")
        print("=" * 50)
        
        prices = self.session.query(PriceOffer).all()
        
        categories = {
            'valid': [],
            'suspicious_quantity': [],
            'suspicious_price': [],
            'missing_route': [],
            'orphaned': []
        }
        
        for price in prices:
            price_data = {
                'id': price.id,
                'product_id': price.product_id,
                'quantity': price.quantity,
                'price_usd': price.price_usd,
                'route_name': price.route_name,
                'delivery_time': price.delivery_time,
                'issues': []
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ä–∞–∂–∞
            if price.quantity is None or price.quantity < 1:
                categories['suspicious_quantity'].append(price_data)
                price_data['issues'].append('invalid_quantity')
            elif price.quantity > 100000:
                categories['suspicious_quantity'].append(price_data)
                price_data['issues'].append('huge_quantity')
            elif price.quantity < 10:
                categories['suspicious_quantity'].append(price_data)
                price_data['issues'].append('small_quantity')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
            if price.price_usd is None or price.price_usd <= 0:
                categories['suspicious_price'].append(price_data)
                price_data['issues'].append('invalid_price')
            elif price.price_usd > 1000:
                categories['suspicious_price'].append(price_data)
                price_data['issues'].append('huge_price')
            elif price.price_usd < 0.01:
                categories['suspicious_price'].append(price_data)
                price_data['issues'].append('tiny_price')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
            if not price.route_name or price.route_name.strip() == '':
                categories['missing_route'].append(price_data)
                price_data['issues'].append('missing_route')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å —Ç–æ–≤–∞—Ä–æ–º
            product = self.session.query(Product).filter(Product.id == price.product_id).first()
            if not product:
                categories['orphaned'].append(price_data)
                price_data['issues'].append('orphaned')
            
            if not price_data['issues']:
                categories['valid'].append(price_data)
            
            self.validation_results['prices'].append(price_data)
        
        print(f"üìä –í—Å–µ–≥–æ —Ü–µ–Ω: {len(prices)}")
        print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {len(categories['valid'])}")
        print(f"üì¶ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏—Ä–∞–∂–∏: {len(categories['suspicious_quantity'])}")
        print(f"üíµ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã: {len(categories['suspicious_price'])}")
        print(f"üöö –ë–µ–∑ –º–∞—Ä—à—Ä—É—Ç–∞: {len(categories['missing_route'])}")
        print(f"üîó –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —Å–≤—è–∑–∏: {len(categories['orphaned'])}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        if categories['suspicious_quantity']:
            print(f"\\nüì¶ –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –¢–ò–†–ê–ñ–ò (—Ç–æ–ø-5):")
            for price_data in sorted(categories['suspicious_quantity'], key=lambda x: x['quantity'] or 0, reverse=True)[:5]:
                product = self.session.query(Product).filter(Product.id == price_data['product_id']).first()
                product_name = product.name if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                print(f"  ID {price_data['product_id']} ({product_name}): —Ç–∏—Ä–∞–∂ {price_data['quantity']}")
        
        if categories['suspicious_price']:
            print(f"\\nüíµ –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –¶–ï–ù–´ (—Ç–æ–ø-5):")
            for price_data in sorted(categories['suspicious_price'], key=lambda x: x['price_usd'] or 0, reverse=True)[:5]:
                product = self.session.query(Product).filter(Product.id == price_data['product_id']).first()
                product_name = product.name if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                print(f"  ID {price_data['product_id']} ({product_name}): ${price_data['price_usd']}")
        
        return categories
    
    def analyze_sheets_coverage(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü"""
        print(f"\\nüìä –ê–ù–ê–õ–ò–ó –ü–û–ö–†–´–¢–ò–Ø –¢–ê–ë–õ–ò–¶")
        print("=" * 50)
        
        sheets = self.session.query(SheetMetadata).all()
        
        for sheet in sheets:
            products_count = self.session.query(Product).filter(Product.sheet_id == sheet.id).count()
            images_count = self.session.query(ProductImage).filter(ProductImage.sheet_id == sheet.id).count()
            
            print(f"üìã {sheet.sheet_title} (ID {sheet.id}):")
            print(f"   üì¶ –¢–æ–≤–∞—Ä–æ–≤: {products_count}")
            print(f"   üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_count}")
            print(f"   üìÅ –°—Ç–∞—Ç—É—Å: {sheet.status}")
    
    def _is_service_name(self, name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        name_lower = name.lower().strip()
        
        service_patterns = [
            r'–º–µ–Ω–µ–¥–∂–µ—Ä|email|—Ç–µ–ª–µ—Ñ–æ–Ω|–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ|—Ñ–∞–±—Ä–∏–∫–∞',
            r'—Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞|—Å—Ä–æ–∫ —Ç–∏—Ä–∞–∂–∞|–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ|–¥–æ—Å—Ç–∞–≤–∫–∞',
            r'^–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ$',
            r'copy of|—Ü–µ–Ω–∞|–¥–æ—Å—Ç–∞–≤–∫–∞|–æ–±—Ä–∞–∑–µ—Ü',
            r'^–º–∞—Ç–µ—Ä–∏–∞–ª|^—Ä–∞–∑–º–µ—Ä|^—Ü–≤–µ—Ç|^—É–ø–∞–∫–æ–≤–∫–∞'
        ]
        
        for pattern in service_patterns:
            if re.search(pattern, name_lower):
                return True
        
        return False
    
    def create_validation_report(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print(f"\\nüìù –°–û–ó–î–ê–ù–ò–ï –û–¢–ß–ï–¢–ê –í–ê–õ–ò–î–ê–¶–ò–ò")
        print("=" * 50)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π JSON –æ—Ç—á–µ—Ç
        report_path = Path('validation_report.json')
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(self.validation_results, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        
        # –°–æ–∑–¥–∞–µ–º CSV –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        if self.validation_results['products']:
            df_products = pd.DataFrame(self.validation_results['products'])
            df_products.to_csv('problematic_products.csv', index=False, encoding='utf-8')
            print(f"‚úÖ CSV —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏: problematic_products.csv")
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
        summary = {
            'total_products': len(self.validation_results['products']),
            'total_images': len(self.validation_results['images']),
            'total_prices': len(self.validation_results['prices']),
            'products_with_issues': len([p for p in self.validation_results['products'] if p['issues']]),
            'images_with_issues': len([i for i in self.validation_results['images'] if i['issues']]),
            'prices_with_issues': len([p for p in self.validation_results['prices'] if p['issues']])
        }
        
        self.validation_results['summary'] = summary
        
        print(f"\\nüìä –°–í–û–î–ö–ê:")
        print(f"  –¢–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {summary['products_with_issues']}/{summary['total_products']}")
        print(f"  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {summary['images_with_issues']}/{summary['total_images']}")
        print(f"  –¶–µ–Ω —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {summary['prices_with_issues']}/{summary['total_prices']}")
        
        return summary
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é"""
        self.session.close()

def main():
    print("üîç –ê–ù–ê–õ–ò–ó –í–ê–õ–ò–î–ù–û–°–¢–ò –î–ê–ù–ù–´–• –í –ë–î")
    print("=" * 60)
    print("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–∞–Ω–Ω—ã–µ –ù–ï –∏–∑–º–µ–Ω—è—é—Ç—Å—è, —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è")
    print("=" * 60)
    
    validator = DatabaseValidator()
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
        products_analysis = validator.analyze_products()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images_analysis = validator.analyze_images()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã
        prices_analysis = validator.analyze_prices()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü
        validator.analyze_sheets_coverage()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        summary = validator.create_validation_report()
        
        print("\\n" + "=" * 60)
        print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        print("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        
    finally:
        validator.close()

if __name__ == "__main__":
    main()
