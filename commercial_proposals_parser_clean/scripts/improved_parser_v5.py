#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä v5 —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.manager_v4 import DatabaseManager
from database.models_v4 import SheetMetadata, Product, ProductImage, PriceOffer
import openpyxl
from pathlib import Path
import re
import logging
from typing import Dict, List, Tuple, Optional, Any
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ImprovedParser:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º"""
    
    def __init__(self):
        self.session = DatabaseManager.get_session()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        self.column_keywords = {
            'name': ['–Ω–∞–∑–≤–∞–Ω–∏–µ', '—Ç–æ–≤–∞—Ä', '–ø—Ä–æ–¥—É–∫—Ç', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', 'item', 'product', 'name', 'title', 'goods'],
            'material': ['–º–∞—Ç–µ—Ä–∏–∞–ª', 'material', '—Å–æ—Å—Ç–∞–≤', 'composition'],
            'size': ['—Ä–∞–∑–º–µ—Ä', 'size', '–≥–∞–±–∞—Ä–∏—Ç—ã', 'dimensions', '—Å–º', 'cm'],
            'color': ['—Ü–≤–µ—Ç', 'color', 'colours', '—Ñ–∞–±—Ä–∏—á–Ω—ã–µ —Ü–≤–µ—Ç–∞'],
            'packaging': ['—É–ø–∞–∫–æ–≤–∫–∞', 'package', 'packaging', '–ø–∞–∫–µ—Ç'],
            'quantity': ['—Ç–∏—Ä–∞–∂', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'qty', 'quantity', '—à—Ç', 'pcs', 'pieces'],
            'price_usd': ['—Ü–µ–Ω–∞', 'price', 'usd', '$', 'dollar', '—Å—Ç–æ–∏–º–æ—Å—Ç—å'],
            'price_rub': ['—Ä—É–±', 'rub', '—Ä—É–±–ª—å', 'ruble', '—Ä.'],
            'price_aed': ['aed', '–¥–∏—Ä—Ö–∞–º', 'dirham'],
            'delivery': ['–¥–æ—Å—Ç–∞–≤–∫–∞', 'delivery', '—Å—Ä–æ–∫', '–¥–Ω', 'days', '–¥–µ–Ω—å'],
            'route': ['–º–∞—Ä—à—Ä—É—Ç', 'route', '–ø—É—Ç—å', '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']
        }
    
    def detect_columns(self, worksheet, max_header_rows=5) -> Dict[str, int]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º"""
        columns = {}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for row in range(1, max_header_rows + 1):
            for col in range(1, worksheet.max_column + 1):
                cell_value = worksheet.cell(row=row, column=col).value
                if not cell_value:
                    continue
                
                cell_text = str(cell_value).lower().strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏
                for col_type, keywords in self.column_keywords.items():
                    if col_type in columns:  # –£–∂–µ –Ω–∞–π–¥–µ–Ω–∞
                        continue
                    
                    for keyword in keywords:
                        if keyword in cell_text:
                            columns[col_type] = col
                            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {col_type} –≤ {openpyxl.utils.get_column_letter(col)}{row}: '{cell_value}'")
                            break
        
        return columns
    
    def validate_product_name(self, name: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        if not name or len(name.strip()) < 2:
            return False
        
        name_clean = name.strip().lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ü–µ–Ω–∞ –∏–ª–∏ —Ç–∏—Ä–∞–∂
        if re.match(r'^\d+[.,]?\d*\s*[$‚ÇΩ—Ä—É–±]?$', name_clean):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        service_patterns = [
            r'^(–º–∞—Ç–µ—Ä–∏–∞–ª|—Ä–∞–∑–º–µ—Ä|—Ü–≤–µ—Ç|—É–ø–∞–∫–æ–≤–∫–∞)',
            r'^\d+\s*[x√ó]\s*\d+',  # —Ä–∞–∑–º–µ—Ä—ã
            r'^\d+\s*(—Å–º|mm|–º–º|cm)$',    # —Ä–∞–∑–º–µ—Ä—ã
            r'–º–µ–Ω–µ–¥–∂–µ—Ä|email|—Ç–µ–ª–µ—Ñ–æ–Ω|–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ',
            r'—Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞|—Å—Ä–æ–∫ —Ç–∏—Ä–∞–∂–∞|–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
            r'^(–ø–ª–∞—Å—Ç–∏–∫|–º–µ—Ç–∞–ª–ª|–¥–µ—Ä–µ–≤–æ|–∫–∞—Ä—Ç–æ–Ω|–Ω–µ–π–ª–æ–Ω|–ø–æ–ª–∏—ç—Å—Ç–µ—Ä)$',
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü
            r'^(name|–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ|—Ç–æ–≤–∞—Ä|–ø—Ä–æ–¥—É–∫—Ç|item|product|title|goods)$',
            r'^(quantity|—Ç–∏—Ä–∞–∂|–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ|—à—Ç|pcs|pieces|qty)$',
            r'^(price|—Ü–µ–Ω–∞|—Å—Ç–æ–∏–º–æ—Å—Ç—å|cost|\$|usd|—Ä—É–±|rub|aed)$',
            r'^(delivery|–¥–æ—Å—Ç–∞–≤–∫–∞|—Å—Ä–æ–∫|–¥–Ω|days|–¥–µ–Ω—å)$',
            r'^(material|–º–∞—Ç–µ—Ä–∏–∞–ª|—Å–æ—Å—Ç–∞–≤)$',
            r'^(size|—Ä–∞–∑–º–µ—Ä|–≥–∞–±–∞—Ä–∏—Ç—ã|dimensions)$',
            r'^(color|—Ü–≤–µ—Ç|colours)$',
            r'^(packaging|—É–ø–∞–∫–æ–≤–∫–∞|package|–ø–∞–∫–µ—Ç)$',
            r'^(custom|–∫–∞—Å—Ç–æ–º|–¥–∏–∑–∞–π–Ω|design)$',
            r'^(photo|—Ñ–æ—Ç–æ|image|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)$'
        ]
        
        for pattern in service_patterns:
            if re.search(pattern, name_clean):
                return False
        
        return True
    
    def validate_quantity(self, value: Any) -> Optional[int]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏—Ä–∞–∂–∞"""
        if value is None:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if isinstance(value, (int, float)):
            qty = int(value)
        else:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
            match = re.search(r'(\\d+)', str(value).replace(',', '').replace(' ', ''))
            if not match:
                return None
            qty = int(match.group(1))
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if qty < 1 or qty > 100000:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
            logger.warning(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∏—Ä–∞–∂: {qty}")
            return None
        
        return qty
    
    def validate_price(self, value: Any) -> Optional[float]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã"""
        if value is None:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if isinstance(value, (int, float)):
            price = float(value)
        else:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏, —É–±–∏—Ä–∞–µ–º –≤–∞–ª—é—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            text = str(value).replace('$', '').replace('‚ÇΩ', '').replace(',', '').strip()
            match = re.search(r'(\\d+[.,]?\\d*)', text)
            if not match:
                return None
            price = float(match.group(1).replace(',', '.'))
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if price < 0.01 or price > 1000:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è —Ü–µ–Ω—ã –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
            logger.warning(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${price}")
            return None
        
        return price
    
    def find_product_rows(self, worksheet, columns: Dict[str, int]) -> List[Tuple[int, int]]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
        if 'name' not in columns:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤")
            return []
        
        name_col = columns['name']
        product_rows = []
        current_start = None
        
        logger.info(f"üîç –ü–û–ò–°–ö –¢–û–í–ê–†–û–í –≤ –∫–æ–ª–æ–Ω–∫–µ {name_col} (–ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫):")
        
        for row in range(1, min(21, worksheet.max_row + 1)):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            cell_value = worksheet.cell(row=row, column=name_col).value
            cell_str = str(cell_value) if cell_value else "NULL"
            if len(cell_str) > 50:
                cell_str = cell_str[:47] + "..."
            
            is_valid = cell_value and self.validate_product_name(str(cell_value))
            logger.info(f"   Row {row:2d}: {cell_str} -> {'‚úÖ' if is_valid else '‚ùå'}")
            
            if cell_value and self.validate_product_name(str(cell_value)):
                if current_start is None:
                    current_start = row
                    logger.info(f"   üü¢ –ù–∞—á–∞–ª–æ —Ç–æ–≤–∞—Ä–∞: —Å—Ç—Ä–æ–∫–∞ {row}")
            else:
                if current_start is not None:
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä
                    product_rows.append((current_start, row - 1))
                    logger.info(f"   üî¥ –ö–æ–Ω–µ—Ü —Ç–æ–≤–∞—Ä–∞: —Å—Ç—Ä–æ–∫–∏ {current_start}-{row - 1}")
                    current_start = None
        
        # –û–±—Ä–∞–±–æ—Ç–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        for row in range(21, worksheet.max_row + 1):
            cell_value = worksheet.cell(row=row, column=name_col).value
            
            if cell_value and self.validate_product_name(str(cell_value)):
                if current_start is None:
                    current_start = row
            else:
                if current_start is not None:
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä
                    product_rows.append((current_start, row - 1))
                    current_start = None
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if current_start is not None:
            product_rows.append((current_start, worksheet.max_row))
            logger.info(f"   üî¥ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä: —Å—Ç—Ä–æ–∫–∏ {current_start}-{worksheet.max_row}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã (–≤–µ—Ä–æ—è—Ç–Ω–æ, –æ—à–∏–±–∫–∏)
        filtered_rows = []
        for start, end in product_rows:
            if end - start + 1 <= 50:  # –ú–∞–∫—Å–∏–º—É–º 50 —Å—Ç—Ä–æ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä
                filtered_rows.append((start, end))
            else:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–æ–∫: {start}-{end}")
        
        return filtered_rows
    
    def extract_product_data(self, worksheet, columns: Dict[str, int], start_row: int, end_row: int) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞"""
        data = {
            'name': None,
            'characteristics': [],
            'prices': [],
            'images': []
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ (–ø–µ—Ä–≤–∞—è –Ω–µ–ø—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ –Ω–∞–∑–≤–∞–Ω–∏–π)
        if 'name' in columns:
            for row in range(start_row, end_row + 1):
                name_value = worksheet.cell(row=row, column=columns['name']).value
                if name_value and self.validate_product_name(str(name_value)):
                    data['name'] = str(name_value).strip()
                    break
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        char_parts = []
        for col_type in ['material', 'size', 'color', 'packaging']:
            if col_type in columns:
                col = columns[col_type]
                for row in range(start_row, end_row + 1):
                    value = worksheet.cell(row=row, column=col).value
                    if value and str(value).strip():
                        char_parts.append(f"{col_type.title()}: {str(value).strip()}")
        
        data['characteristics'] = '\\n'.join(char_parts)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω
        self.extract_price_variants(worksheet, columns, start_row, end_row, data)
        
        return data
    
    def extract_price_variants(self, worksheet, columns: Dict[str, int], start_row: int, end_row: int, data: Dict[str, Any]):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω"""
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ü–µ–Ω–∞–º–∏
        for row in range(start_row, end_row + 1):
            price_data = {}
            
            # –¢–∏—Ä–∞–∂
            if 'quantity' in columns:
                qty_value = worksheet.cell(row=row, column=columns['quantity']).value
                qty = self.validate_quantity(qty_value)
                if qty:
                    price_data['quantity'] = qty
            
            # –¶–µ–Ω–∞ –≤ USD
            if 'price_usd' in columns:
                price_value = worksheet.cell(row=row, column=columns['price_usd']).value
                price = self.validate_price(price_value)
                if price:
                    price_data['price_usd'] = price
            
            # –ú–∞—Ä—à—Ä—É—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
            if 'route' in columns:
                route_value = worksheet.cell(row=row, column=columns['route']).value
                if route_value:
                    price_data['route'] = str(route_value).strip()
            
            # –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏
            if 'delivery' in columns:
                delivery_value = worksheet.cell(row=row, column=columns['delivery']).value
                if delivery_value:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –¥–Ω–µ–π
                    match = re.search(r'(\\d+)', str(delivery_value))
                    if match:
                        days = int(match.group(1))
                        if 1 <= days <= 365:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
                            price_data['delivery_time'] = f"{days} –¥–Ω"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Ü–µ–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if 'quantity' in price_data and 'price_usd' in price_data:
                data['prices'].append(price_data)
    
    def parse_sheet_improved(self, sheet_id: int) -> bool:
        """–ü–∞—Ä—Å–∏—Ç —Ç–∞–±–ª–∏—Ü—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
        try:
            sheet = self.session.query(SheetMetadata).filter(SheetMetadata.id == sheet_id).first()
            if not sheet:
                logger.error(f"–¢–∞–±–ª–∏—Ü–∞ {sheet_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            if not sheet.local_file_path:
                logger.error(f"–ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {sheet_id}")
                return False
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å, –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            if 'storage/excel_files' in sheet.local_file_path:
                excel_path = Path(sheet.local_file_path)
            else:
                excel_path = Path('storage/excel_files') / sheet.local_file_path
            if not excel_path.exists():
                logger.error(f"Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_path}")
                return False
            
            logger.info(f"–ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É {sheet_id}: {sheet.sheet_title}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel
            workbook = openpyxl.load_workbook(excel_path)
            worksheet = workbook.active
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
            columns = self.detect_columns(worksheet)
            logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: {columns}")
            
            if not columns:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ {sheet_id}")
                return False
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
            product_rows = self.find_product_rows(worksheet, columns)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(product_rows)}")
            
            if not product_rows:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ {sheet_id}")
                return False
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            old_products = self.session.query(Product).filter(Product.sheet_id == sheet_id).all()
            for product in old_products:
                # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self.session.query(ProductImage).filter(ProductImage.product_id == product.id).delete()
                self.session.query(PriceOffer).filter(PriceOffer.product_id == product.id).delete()
                self.session.delete(product)
            
            # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
            parsed_count = 0
            for start_row, end_row in product_rows:
                try:
                    product_data = self.extract_product_data(worksheet, columns, start_row, end_row)
                    
                    if not product_data['name']:
                        logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö {start_row}-{end_row}")
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
                    product = Product(
                        sheet_id=sheet_id,
                        name=product_data['name'],
                        characteristics=product_data['characteristics'],
                        start_row=start_row,
                        end_row=end_row
                    )
                    
                    self.session.add(product)
                    self.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω
                    for price_data in product_data['prices']:
                        price_offer = PriceOffer(
                            product_id=product.id,
                            quantity=price_data['quantity'],
                            price_usd=price_data['price_usd'],
                            route_name=price_data.get('route', '–°—Ç–∞–Ω–¥–∞—Ä—Ç'),
                            delivery_time=price_data.get('delivery_time')
                        )
                        self.session.add(price_offer)
                    
                    parsed_count += 1
                    logger.info(f"–°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: {product_data['name']} ({len(product_data['prices'])} —Ü–µ–Ω)")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞ –≤ —Å—Ç—Ä–æ–∫–∞—Ö {start_row}-{end_row}: {e}")
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.session.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–±–ª–∏—Ü—ã
            sheet.products_count = parsed_count
            sheet.status = 'completed'
            self.session.commit()
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {sheet_id}: {parsed_count} —Ç–æ–≤–∞—Ä–æ–≤")
            return True
            
        except Exception as e:
            self.session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü—ã {sheet_id}: {e}")
            return False
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é"""
        self.session.close()

def test_improved_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö"""
    parser = ImprovedParser()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
        problem_sheet_id = 1  # original_sheet
        
        print(f"üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–ê–†–°–ï–†–ê")
        print(f"=" * 60)
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É ID {problem_sheet_id}")
        
        success = parser.parse_sheet_improved(problem_sheet_id)
        
        if success:
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            session = DatabaseManager.get_session()
            products = session.query(Product).filter(Product.sheet_id == problem_sheet_id).all()
            print(f"üì¶ –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            
            for product in products[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                prices_count = session.query(PriceOffer).filter(PriceOffer.product_id == product.id).count()
                print(f"  - {product.name} (—Å—Ç—Ä–æ–∫–∏ {product.start_row}-{product.end_row}, {prices_count} —Ü–µ–Ω)")
            
            session.close()
        else:
            print(f"‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è")
    
    finally:
        parser.close()

if __name__ == "__main__":
    test_improved_parser()
