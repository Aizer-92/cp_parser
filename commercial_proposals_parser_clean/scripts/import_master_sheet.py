#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∞—Å—Ç–µ—Ä-—Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
"""

import os
import sys
import re
import requests
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.manager_v4 import DatabaseManager
from database.models_v4 import ProjectMetadata
import openpyxl

class MasterSheetImporter:
    def __init__(self):
        self.session = DatabaseManager.get_session()
        self.master_sheet_url = "https://docs.google.com/spreadsheets/d/1UJXbLdFEwsCHhzPPkU6wfiq2bMGZMHWEzCd4bJ5TtpY/export?format=xlsx&gid=1417349258"
        
    def __del__(self):
        if hasattr(self, 'session'):
            self.session.close()
    
    def download_master_sheet(self):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –º–∞—Å—Ç–µ—Ä-—Ç–∞–±–ª–∏—Ü—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel"""
        print("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-—Ç–∞–±–ª–∏—Ü—ã...")
        
        try:
            response = requests.get(self.master_sheet_url, timeout=60)
            response.raise_for_status()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = "temp_master_sheet.xlsx"
            with open(temp_file, 'wb') as f:
                f.write(response.content)
            
            print(f"‚úÖ –ú–∞—Å—Ç–µ—Ä-—Ç–∞–±–ª–∏—Ü–∞ —Å–∫–∞—á–∞–Ω–∞: {len(response.content)} bytes")
            return temp_file
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä-—Ç–∞–±–ª–∏—Ü—ã: {e}")
            return None
    
    def parse_excel_file(self, file_path):
        """–ü–∞—Ä—Å–∏—Ç Excel —Ñ–∞–π–ª –º–∞—Å—Ç–µ—Ä-—Ç–∞–±–ª–∏—Ü—ã"""
        print("üìä –ü–∞—Ä—Å–∏–Ω–≥ –º–∞—Å—Ç–µ—Ä-—Ç–∞–±–ª–∏—Ü—ã...")
        
        try:
            workbook = openpyxl.load_workbook(file_path)
            print(f"   üìã –õ–∏—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ: {len(workbook.sheetnames)}")
            print(f"   üìÑ –ò–º–µ–Ω–∞ –ª–∏—Å—Ç–æ–≤: {workbook.sheetnames}")
            
            worksheet = workbook.active
            print(f"   üìä –ê–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç: {worksheet.title}")
            print(f"   üìè –†–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞: {worksheet.max_row} —Å—Ç—Ä–æ–∫, {worksheet.max_column} —Å—Ç–æ–ª–±—Ü–æ–≤")
            
            projects = []
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            header_row = None
            for check_row in range(1, 20):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫
                row_cells = list(worksheet.iter_rows(min_row=check_row, max_row=check_row, values_only=True))
                if row_cells and row_cells[0]:
                    row = row_cells[0]
                    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    if any(cell and ('—Ç–∏—Ä–∞–∂' in str(cell).lower() or '—Ç–æ–≤–∞—Ä—ã' in str(cell).lower() or '—Å—Ç–æ–∏–º–æ—Å—Ç—å' in str(cell).lower()) for cell in row):
                        header_row = check_row
                        print(f"   üìã –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {header_row}")
                        print(f"   üìÑ –ó–∞–≥–æ–ª–æ–≤–∫–∏: {[str(cell)[:20] for cell in row[:10] if cell]}")
                        break
            
            if not header_row:
                print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
                return []
            
            # –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ - –∏—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "[–ü—Ä–æ—Å—á–µ—Ç"
            data_start_row = None
            for check_row in range(header_row + 1, min(worksheet.max_row + 1, header_row + 100)):
                row_cells = list(worksheet.iter_rows(min_row=check_row, max_row=check_row, values_only=True))
                if row_cells and row_cells[0]:
                    row = row_cells[0]
                    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é "[–ü—Ä–æ—Å—á–µ—Ç" - —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
                    if any(cell and '[–ü—Ä–æ—Å—á–µ—Ç' in str(cell) for cell in row):
                        data_start_row = check_row
                        print(f"   üìã –ù–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {data_start_row}")
                        # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
                        non_empty_cells = [(i, str(cell)[:50]) for i, cell in enumerate(row) if cell and str(cell).strip()]
                        print(f"   üìÑ –ù–µ–ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏: {non_empty_cells[:5]}")
                        break
            
            if not data_start_row:
                print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤")
                return []
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ, –Ω–∞—á–∏–Ω–∞—è —Å –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            for row_idx in range(data_start_row, worksheet.max_row + 1):
                try:
                    row_cells = list(worksheet.iter_rows(min_row=row_idx, max_row=row_idx, values_only=True))
                    
                    if not row_cells:
                        continue
                        
                    row = row_cells[0]
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if not row or not any(str(cell).strip() for cell in row if cell):
                        continue
                        
                    print(f"   üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É {row_idx}")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row_idx}: {e}")
                    continue
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                def safe_get(index):
                    return row[index] if len(row) > index else None
                
                # –°—É–¥—è –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–∫–∞—è:
                # 0: –¢–∏—Ä–∞–∂ (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞) = —Å—Ç–æ–ª–±–µ—Ü 9 (J)
                # 1: –¢–∏—Ä–∞–∂ MIN = —Å—Ç–æ–ª–±–µ—Ü 10 (K) 
                # 2: –¢–∏—Ä–∞–∂ MAX = —Å—Ç–æ–ª–±–µ—Ü 11 (L)
                # 3: –¢–æ–≤–∞—Ä—ã = —Å—Ç–æ–ª–±–µ—Ü 12 (M)
                # 4-7: –¶–µ–Ω—ã
                # 8: –û–ø–∏—Å–∞–Ω–∏–µ
                # 9: –ù–∞–∑–≤–∞–Ω–∏–µ = —Å—Ç–æ–ª–±–µ—Ü A (–≤–∏–¥–∏–º–æ –ø—Ä–æ–µ–∫—Ç)
                # 10: –ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫ = —Å—Ç–æ–ª–±–µ—Ü B
                # 11: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ = —Å—Ç–æ–ª–±–µ—Ü C  
                # 12: URL = —Å—Ç–æ–ª–±–µ—Ü D
                # 13: –î–∞—Ç–∞ = —Å—Ç–æ–ª–±–µ—Ü E
                # 14: –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç = —Å—Ç–æ–ª–±–µ—Ü F
                # 15: –†–µ–≥–∏–æ–Ω = —Å—Ç–æ–ª–±–µ—Ü G
                
                # –°—É–¥—è –ø–æ –≤—ã–≤–æ–¥—É, –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–æ–∑–∏—Ü–∏—è—Ö 9-15
                # 9: project_name (–æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞)
                # 10: manager (–ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫)
                # 11: executors (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏) 
                # 12: google_sheets_url (URL)
                # 13: creation_date (–¥–∞—Ç–∞)
                # 14: counterparty (–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç)
                # 15: region (—Ä–µ–≥–∏–æ–Ω)
                
                project_data = {
                    'project_title': self.clean_text(safe_get(9)),   # J: –û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
                    'min_quantity': self.clean_text(safe_get(10)),   # K: –ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Ç–∏—Ä–∞–∂ MIN)
                    'max_quantity': self.clean_text(safe_get(11)),   # L: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Ç–∏—Ä–∞–∂ MAX)
                    'products_info': self.clean_text(safe_get(3)),   # D: –¢–æ–≤–∞—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    'min_price_usd': self.parse_float(safe_get(4)),  # E: –ú–∏–Ω —Ü–µ–Ω–∞ USD (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    'max_price_usd': self.parse_float(safe_get(5)),  # F: –ú–∞–∫—Å —Ü–µ–Ω–∞ USD (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    'min_price_rub': self.parse_float(safe_get(6)),  # G: –ú–∏–Ω —Ü–µ–Ω–∞ RUB (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    'max_price_rub': self.parse_float(safe_get(7)),  # H: –ú–∞–∫—Å —Ü–µ–Ω–∞ RUB (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    'description': self.clean_text(safe_get(8)),     # I: –û–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    'project_name': self.clean_text(safe_get(0)),    # A: –î–æ–ø –Ω–∞–∑–≤–∞–Ω–∏–µ (—Ç–∏—Ä–∞–∂)
                    'manager': self.clean_text(safe_get(10)),        # K: –ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫
                    'executors': self.clean_text(safe_get(11)),      # L: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
                    'google_sheets_url': self.clean_url(safe_get(12)), # M: URL
                    'creation_date': self.clean_text(safe_get(13)),  # N: –î–∞—Ç–∞
                    'counterparty': self.clean_text(safe_get(14)),   # O: –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç
                    'region': self.clean_text(safe_get(15))          # P: –†–µ–≥–∏–æ–Ω
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ URL
                if project_data['project_title'] or project_data['google_sheets_url']:
                    projects.append(project_data)
                    title_preview = str(project_data['project_title'])[:50] if project_data['project_title'] else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                    print(f"   ‚úÖ –ü—Ä–æ–µ–∫—Ç: {title_preview}...")
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
            return projects
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Ñ–∞–π–ª–∞: {e}")
            return []
    
    def clean_text(self, value):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        if value is None:
            return None
        
        text = str(value).strip()
        return text if text else None
    
    def clean_url(self, value):
        """–û—á–∏—â–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç URL"""
        if value is None:
            return None
        
        url = str(value).strip()
        if url and ('docs.google.com/spreadsheets' in url or 'drive.google.com' in url):
            return url
        return None
    
    def parse_float(self, value):
        """–ü–∞—Ä—Å–∏—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        if value is None:
            return None
        
        try:
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
            cleaned = re.sub(r'[^\d.,]', '', str(value))
            if cleaned:
                return float(cleaned.replace(',', '.'))
        except:
            pass
        
        return None
    
    def save_projects_to_db(self, projects):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            saved_count = 0
            updated_count = 0
            
            for project_data in projects:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç
                existing_project = None
                
                if project_data['google_sheets_url']:
                    existing_project = self.session.query(ProjectMetadata).filter(
                        ProjectMetadata.google_sheets_url == project_data['google_sheets_url']
                    ).first()
                
                if existing_project:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç
                    for key, value in project_data.items():
                        setattr(existing_project, key, value)
                    existing_project.updated_at = datetime.utcnow()
                    updated_count += 1
                    title_preview = str(project_data['project_title'])[:50] if project_data['project_title'] else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                    print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {title_preview}...")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
                    project = ProjectMetadata(**project_data)
                    self.session.add(project)
                    saved_count += 1
                    title_preview = str(project_data['project_title'])[:50] if project_data['project_title'] else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                    print(f"   ‚ûï –î–æ–±–∞–≤–ª–µ–Ω: {title_preview}...")
            
            self.session.commit()
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_count} –Ω–æ–≤—ã—Ö, {updated_count} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            
            return saved_count + updated_count
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
            self.session.rollback()
            return 0
    
    def get_urls_for_parsing(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å URL, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
            projects = self.session.query(ProjectMetadata).filter(
                ProjectMetadata.google_sheets_url.isnot(None),
                ProjectMetadata.processing_status == 'pending'
            ).all()
            
            urls = []
            for project in projects:
                urls.append({
                    'url': project.google_sheets_url,
                    'project_id': project.id,
                    'project_title': project.project_title,
                    'counterparty': project.counterparty
                })
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(urls)}")
            return urls
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL: {e}")
            return []
    
    def create_urls_file(self, urls):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª google_sheets_urls.txt —Å URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ google_sheets_urls.txt...")
        
        try:
            with open('google_sheets_urls.txt', 'w', encoding='utf-8') as f:
                f.write("# –°–ø–∏—Å–æ–∫ URL Google Sheets –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞\n")
                f.write("# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –º–∞—Å—Ç–µ—Ä-—Ç–∞–±–ª–∏—Ü—ã\n\n")
                
                for url_data in urls:
                    f.write(f"# –ü—Ä–æ–µ–∫—Ç: {url_data['project_title']}\n")
                    f.write(f"# –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {url_data['counterparty']}\n")
                    f.write(f"# ID: {url_data['project_id']}\n")
                    f.write(f"{url_data['url']}\n\n")
            
            print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {len(urls)} URL –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
    
    def run_import(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –º–∞—Å—Ç–µ—Ä-—Ç–∞–±–ª–∏—Ü—ã"""
        print("üöÄ –ò–ú–ü–û–†–¢ –ú–ê–°–¢–ï–†-–¢–ê–ë–õ–ò–¶–´")
        print("=" * 50)
        
        try:
            # 1. –°–∫–∞—á–∏–≤–∞–µ–º –º–∞—Å—Ç–µ—Ä-—Ç–∞–±–ª–∏—Ü—É
            excel_file = self.download_master_sheet()
            if not excel_file:
                return False
            
            # 2. –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            projects = self.parse_excel_file(excel_file)
            if not projects:
                print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
                return False
            
            # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            saved_count = self.save_projects_to_db(projects)
            
            # 4. –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            urls = self.get_urls_for_parsing()
            
            # 5. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å URL
            if urls:
                self.create_urls_file(urls)
            
            # 6. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(excel_file):
                os.remove(excel_file)
            
            print(f"\nüéâ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù!")
            print(f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {saved_count}")
            print(f"üîó URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(urls)}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        importer = MasterSheetImporter()
        importer.run_import()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
