#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Google Sheets —Ñ–∞–π–ª–æ–≤ –≤ 4 —ç—Ç–∞–ø–∞:
1. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Google Sheets —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏ ID —Ç–∞–±–ª–∏—Ü—ã
3. –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ —Å—Ç—Ä–æ–∫
4. –ü—Ä–∏–≤—è–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–æ–≤–∞—Ä–∞–º –∏ –ø–∞—Ä—Å–∏–Ω–≥ –º–∞—Ç—Ä–∏—Ü—ã —Ü–µ–Ω
"""

import os
import sys
import time
import re
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.manager_v4 import DatabaseManager
from database.models_v4 import Product, ProductImage, PriceOffer, SheetMetadata, Base, ProjectMetadata
from sqlalchemy import text
import openpyxl
from openpyxl.drawing.image import Image as OpenpyxlImage
from PIL import Image, ImageDraw
import requests
import json

class CompleteParsing:
    def __init__(self, google_sheets_urls_file="google_sheets_urls.txt"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
        
        Args:
            google_sheets_urls_file: —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º URL Google Sheets
        """
        self.base_dir = Path(__file__).parent.parent
        self.storage_dir = self.base_dir / "storage"
        self.images_dir = self.storage_dir / "images"
        self.excel_dir = self.storage_dir / "excel_files"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.images_dir.mkdir(parents=True, exist_ok=True)
        self.excel_dir.mkdir(parents=True, exist_ok=True)
        
        self.session = DatabaseManager.get_session()
        self.urls_file = self.base_dir / google_sheets_urls_file
        
        print(f"üìÅ –†–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
        print(f"   üìä Excel —Ñ–∞–π–ª—ã: {self.excel_dir}")
        print(f"   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {self.images_dir}")
        
    def __del__(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        if hasattr(self, 'session'):
            self.session.close()
    
    def load_google_sheets_urls(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ URL Google Sheets –∏–∑ —Ñ–∞–π–ª–∞"""
        if not self.urls_file.exists():
            print(f"‚ùå –§–∞–π–ª {self.urls_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª google_sheets_urls.txt —Å–æ —Å–ø–∏—Å–∫–æ–º URL, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É")
            return []
        
        urls = []
        with open(self.urls_file, 'r', encoding='utf-8') as f:
            for line in f:
                url = line.strip()
                if url and not url.startswith('#'):  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    urls.append(url)
        
        print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(urls)} URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return urls
    
    def get_processed_sheets(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        processed = set()
        sheets = self.session.query(SheetMetadata).all()
        for sheet in sheets:
            if sheet.sheet_url:
                processed.add(sheet.sheet_url)
        
        print(f"‚úÖ –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(processed)}")
        return processed
    
    def convert_google_sheets_url_to_excel(self, url):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç URL Google Sheets –≤ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ URL
        if '/spreadsheets/d/' in url:
            sheet_id = url.split('/spreadsheets/d/')[1].split('/')[0]
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel
            download_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=xlsx"
            return download_url
        return None
    
    def download_excel_file(self, url, filename):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç Excel —Ñ–∞–π–ª —Å Google Sheets"""
        download_url = self.convert_google_sheets_url_to_excel(url)
        if not download_url:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {url}")
            return None
        
        file_path = self.excel_dir / filename
        
        try:
            print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º: {filename}")
            response = requests.get(download_url, timeout=60)
            response.raise_for_status()
            
            with open(file_path, 'wb') as f:
                f.write(response.content)
            
            print(f"‚úÖ –°–∫–∞—á–∞–Ω: {file_path} ({len(response.content)} bytes)")
            return file_path
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {filename}: {e}")
            return None
    
    def extract_images_from_excel(self, excel_path, sheet_metadata_id):
        """
        –≠–¢–ê–ü 1: –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Excel —Ñ–∞–π–ª–∞ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
        """
        print(f"\nüì∏ –≠–¢–ê–ü 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ {excel_path.name}")
        
        try:
            workbook = openpyxl.load_workbook(excel_path)
            extracted_count = 0
            
            for sheet_name in workbook.sheetnames:
                worksheet = workbook[sheet_name]
                print(f"   üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: {sheet_name}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ª–∏—Å—Ç–∞
                if hasattr(worksheet, '_images') and worksheet._images:
                    for img in worksheet._images:
                        try:
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            anchor = img.anchor
                            if hasattr(anchor, '_from'):
                                col_idx = anchor._from.col
                                row_idx = anchor._from.row + 1  # openpyxl –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 0-based –∏–Ω–¥–µ–∫—Å—ã
                                
                                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –≤ –±—É–∫–≤—É
                                col_letter = openpyxl.utils.get_column_letter(col_idx + 1)
                                
                                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ A1 (–ª–æ–≥–æ—Ç–∏–ø—ã)
                                if col_letter == 'A' and row_idx == 1:
                                    print(f"   üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –∏–∑ A1")
                                    continue
                                
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                image_type = 'main' if col_letter == 'A' else 'additional'
                                
                                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                                timestamp = int(time.time())
                                safe_sheet_name = re.sub(r'[^\w\-_]', '_', sheet_name)
                                filename = f"{safe_sheet_name}_{col_letter}{row_idx}_{image_type}_{timestamp}.png"
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                image_path = self.images_dir / filename
                                
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                if hasattr(img, '_data'):
                                    image_data = img._data()
                                    with open(image_path, 'wb') as f:
                                        f.write(image_data)
                                elif hasattr(img, 'ref'):
                                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
                                    pil_img = Image.open(img.ref)
                                    pil_img.save(image_path, 'PNG')
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                                product_image = ProductImage(
                                    sheet_id=sheet_metadata_id,
                                    local_path=str(image_path.relative_to(self.base_dir)),
                                    image_type=image_type,
                                    row=row_idx,
                                    column=col_letter,
                                    position={
                                        'row': row_idx,
                                        'col': col_idx,
                                        'cell': f"{col_letter}{row_idx}",
                                        'worksheet': sheet_name,
                                        'found': True
                                    }
                                )
                                
                                self.session.add(product_image)
                                extracted_count += 1
                                
                                print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ: {filename} ({col_letter}{row_idx}, {image_type})")
                                
                        except Exception as e:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                            continue
            
            self.session.commit()
            print(f"‚úÖ –≠–¢–ê–ü 1 –∑–∞–≤–µ—Ä—à–µ–Ω: –∏–∑–≤–ª–µ—á–µ–Ω–æ {extracted_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            return extracted_count
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            self.session.rollback()
            return 0
    
    def parse_products_from_excel(self, excel_path, sheet_metadata_id):
        """
        –≠–¢–ê–ü 2: –ü–∞—Ä—Å–∏—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ Excel —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ —Å—Ç—Ä–æ–∫
        """
        print(f"\nüì¶ –≠–¢–ê–ü 2: –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {excel_path.name}")
        
        try:
            workbook = openpyxl.load_workbook(excel_path)
            products_count = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–∏—Å—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ (–∏—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ)
            main_sheets = []
            for sheet_name in workbook.sheetnames:
                # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ª–∏—Å—Ç—ã
                skip_keywords = ['—Ü–µ–Ω–∞', 'price', '–¥–æ—Å—Ç–∞–≤–∫–∞', 'delivery', '–æ–±—Ä–∞–∑–µ—Ü', 'sample', '—É—Å–ª–æ–≤–∏—è', 'terms']
                if not any(keyword in sheet_name.lower() for keyword in skip_keywords):
                    main_sheets.append(sheet_name)
            
            if not main_sheets:
                main_sheets = [workbook.sheetnames[0]]  # –ï—Å–ª–∏ –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω—ã, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
            
            print(f"   üìã –ù–∞–π–¥–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤: {len(main_sheets)} –∏–∑ {len(workbook.sheetnames)}")
            
            for sheet_name in main_sheets:
                worksheet = workbook[sheet_name]
                print(f"   üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: {sheet_name}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–æ–ª–±—Ü–æ–≤ - –∏—â–µ–º –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ
                header_row = None
                for row_idx in range(1, 10):  # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–æ–∫–∞—Ö
                    row = list(worksheet.iter_rows(min_row=row_idx, max_row=row_idx, values_only=True))[0]
                    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü
                    header_keywords = [
                        '–Ω–∞–∑–≤–∞–Ω–∏–µ', '—Ç–æ–≤–∞—Ä', 'product', 'name', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–∞—Ä—Ç–∏–∫—É–ª', '–∫–æ–¥',
                        'item', 'title', 'description', 'goods', 'merchandise'
                    ]
                    if any(cell and any(keyword in str(cell).lower() for keyword in header_keywords) for cell in row):
                        header_row = row_idx
                        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {row_idx}")
                        break
                
                if not header_row:
                    print(f"   ‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ª–∏—Å—Ç–µ {sheet_name}")
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = list(worksheet.iter_rows(min_row=header_row, max_row=header_row, values_only=True))[0]
                
                # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
                name_col = None
                for col_idx, header in enumerate(headers):
                    if header and any(keyword in str(header).lower() for keyword in header_keywords):
                        name_col = col_idx
                        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {col_idx} ('{header}')")
                        break
                
                if name_col is None:
                    print(f"   ‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–∏—Å—Ç–µ {sheet_name}")
                    continue
                
                # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã
                current_product = None
                product_start_row = None
                
                for row_idx in range(header_row + 1, worksheet.max_row + 1):
                    row = list(worksheet.iter_rows(min_row=row_idx, max_row=row_idx, values_only=True))[0]
                    
                    if len(row) > name_col and row[name_col]:
                        product_name = str(row[name_col]).strip()
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                        if any(skip_word in product_name.lower() for skip_word in ['–º–µ–Ω–µ–¥–∂–µ—Ä', '–∏—Ç–æ–≥–æ', '–≤—Å–µ–≥–æ', '—Å—É–º–º–∞']):
                            continue
                        
                        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–æ–≤–∞—Ä
                        if current_product and product_start_row:
                            current_product.end_row = row_idx - 1
                            self.session.add(current_product)
                            products_count += 1
                            print(f"   ‚úÖ –¢–æ–≤–∞—Ä: {current_product.name} (—Å—Ç—Ä–æ–∫–∏ {current_product.start_row}-{current_product.end_row})")
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                        current_product = Product(
                            sheet_id=sheet_metadata_id,
                            name=product_name,
                            start_row=row_idx,
                            end_row=row_idx  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
                        )
                        product_start_row = row_idx
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä
                if current_product and product_start_row:
                    current_product.end_row = worksheet.max_row
                    self.session.add(current_product)
                    products_count += 1
                    print(f"   ‚úÖ –¢–æ–≤–∞—Ä: {current_product.name} (—Å—Ç—Ä–æ–∫–∏ {current_product.start_row}-{current_product.end_row})")
            
            self.session.commit()
            print(f"‚úÖ –≠–¢–ê–ü 2 –∑–∞–≤–µ—Ä—à–µ–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–æ {products_count} —Ç–æ–≤–∞—Ä–æ–≤")
            return products_count
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            self.session.rollback()
            return 0
    
    def assign_images_to_products(self, sheet_metadata_id):
        """
        –≠–¢–ê–ü 3: –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–æ–≤–∞—Ä—ã –∏–∑ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        """
        print(f"\nüîó –≠–¢–ê–ü 3: –ü—Ä–∏–≤—è–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–æ–≤–∞—Ä–∞–º (–°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê)")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            images = self.session.query(ProductImage).filter(
                ProductImage.sheet_id == sheet_metadata_id,
                ProductImage.row.isnot(None)
            ).all()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            products = self.session.query(Product).filter(
                Product.sheet_id == sheet_metadata_id
            ).all()
            
            print(f"   üìä –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ {sheet_metadata_id}: {len(images)}")
            print(f"   üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ {sheet_metadata_id}: {len(products)}")
            
            # –ö–†–ò–¢–ò–ß–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤—è–∑—ã–≤–∞–µ–º –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü
            wrong_images = self.session.query(ProductImage).filter(
                ProductImage.product_id.isnot(None)
            ).join(Product, ProductImage.product_id == Product.id).filter(
                Product.sheet_id != sheet_metadata_id,
                ProductImage.sheet_id == sheet_metadata_id
            ).all()
            
            if wrong_images:
                print(f"   ‚ùå –ù–∞–π–¥–µ–Ω–æ {len(wrong_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–æ–π - –æ—Ç–≤—è–∑—ã–≤–∞–µ–º")
                for img in wrong_images:
                    img.product_id = None
            
            assigned_count = 0
            
            for image in images:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ A1 (–ª–æ–≥–æ—Ç–∏–ø—ã)
                if image.column == 'A' and image.row == 1:
                    continue
                
                # –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∏—â–µ–º —Ç–æ–≤–∞—Ä –¢–û–õ–¨–ö–û –≤ —Ç–æ–π –∂–µ —Ç–∞–±–ª–∏—Ü–µ
                target_product = None
                for product in products:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç–æ–≤–∞—Ä –∏–∑ —Ç–æ–π –∂–µ —Ç–∞–±–ª–∏—Ü—ã
                    if (product.sheet_id == sheet_metadata_id and 
                        product.start_row <= image.row <= product.end_row):
                        target_product = product
                        break
                
                if target_product:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º
                    if target_product.sheet_id == sheet_metadata_id and image.sheet_id == sheet_metadata_id:
                        image.product_id = target_product.id
                        assigned_count += 1
                        print(f"   ‚úÖ {image.column}{image.row} ‚Üí {target_product.name} (—Ç–∞–±–ª–∏—Ü–∞ {sheet_metadata_id})")
                    else:
                        print(f"   ‚ùå –ë–õ–û–ö–ò–†–û–í–ê–ù–û: –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã {image.sheet_id} –∫ —Ç–æ–≤–∞—Ä—É —Ç–∞–±–ª–∏—Ü—ã {target_product.sheet_id}")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image.column}{image.row} –≤ —Ç–∞–±–ª–∏—Ü–µ {sheet_metadata_id}")
            
            self.session.commit()
            print(f"‚úÖ –≠–¢–ê–ü 3 –∑–∞–≤–µ—Ä—à–µ–Ω: –ø—Ä–∏–≤—è–∑–∞–Ω–æ {assigned_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–°–¢–†–û–ì–û –≤ —Ä–∞–º–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ã {sheet_metadata_id})")
            return assigned_count
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            self.session.rollback()
            return 0
    
    def parse_price_matrix(self, excel_path, sheet_metadata_id):
        """
        –≠–¢–ê–ü 4: –ü–∞—Ä—Å–∏—Ç –º–∞—Ç—Ä–∏—Ü—É —Ü–µ–Ω (—Ç–∏—Ä–∞–∂ + –º–∞—Ä—à—Ä—É—Ç)
        """
        print(f"\nüí∞ –≠–¢–ê–ü 4: –ü–∞—Ä—Å–∏–Ω–≥ –º–∞—Ç—Ä–∏—Ü—ã —Ü–µ–Ω –∏–∑ {excel_path.name}")
        
        try:
            workbook = openpyxl.load_workbook(excel_path)
            variants_count = 0
            
            for sheet_name in workbook.sheetnames:
                worksheet = workbook[sheet_name]
                print(f"   üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: {sheet_name}")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
                products = self.session.query(Product).filter(
                    Product.sheet_id == sheet_metadata_id
                ).all()
                
                # –ò—â–µ–º –º–∞—Ç—Ä–∏—Ü—É —Ü–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                for product in products:
                    product_variants = self.extract_price_variants_for_product(
                        worksheet, product, sheet_metadata_id
                    )
                    variants_count += len(product_variants)
            
            print(f"‚úÖ –≠–¢–ê–ü 4 –∑–∞–≤–µ—Ä—à–µ–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–æ {variants_count} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ü–µ–Ω")
            return variants_count
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞—Ç—Ä–∏—Ü—ã —Ü–µ–Ω: {e}")
            self.session.rollback()
            return 0
    
    def extract_price_variants_for_product(self, worksheet, product, sheet_metadata_id):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        variants = []
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            header_row = None
            for row_idx in range(1, 10):
                row = list(worksheet.iter_rows(min_row=row_idx, max_row=row_idx, values_only=True))[0]
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ü–µ–Ω–∞–º–∏ (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
                price_keywords = ['—Ü–µ–Ω–∞', 'price', '—Ç–∏—Ä–∞–∂', 'quantity', '$', 'usd', '—Ä—É–±', 'rub']
                if any(cell and any(keyword in str(cell).lower() for keyword in price_keywords) for cell in row):
                    header_row = row_idx
                    break
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤
            quantity_cols = []
            usd_cols = []
            rub_cols = []
            delivery_cols = []
            
            if header_row:
                headers = list(worksheet.iter_rows(min_row=header_row, max_row=header_row, values_only=True))[0]
                for col_idx, header in enumerate(headers):
                    if header:
                        header_str = str(header).lower()
                        # –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å —Ç–∏—Ä–∞–∂–∞–º–∏ (—Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
                        if any(word in header_str for word in ['—Ç–∏—Ä–∞–∂', '—à—Ç', 'quantity', 'pcs']):
                            quantity_cols.append(col_idx)
                        # –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
                        elif any(word in header_str for word in ['$', 'usd', 'dollar']) or ('price' in header_str and '$' in header_str):
                            usd_cols.append(col_idx)
                        # –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ –≤ —Ä—É–±–ª—è—Ö/–¥–∏—Ä—Ö–∞–º–∞—Ö
                        elif any(word in header_str for word in ['—Ä—É–±', 'rub', 'ruble', 'aed', '–¥–∏—Ä—Ö–∞–º']):
                            rub_cols.append(col_idx)
                        # –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å–æ —Å—Ä–æ–∫–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
                        elif any(word in header_str for word in ['–¥–æ—Å—Ç–∞–≤–∫–∞', '—Å—Ä–æ–∫', 'delivery', 'period', 'time']):
                            delivery_cols.append(col_idx)
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ü–µ–Ω–∞–º–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ç–æ–≤–∞—Ä–∞
            for row_idx in range(product.start_row, product.end_row + 1):
                row = list(worksheet.iter_rows(min_row=row_idx, max_row=row_idx, values_only=True))[0]
                
                quantity = None
                price_usd = None
                price_rub = None
                delivery_time = None
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤
                for col_idx, cell_value in enumerate(row):
                    if cell_value is None:
                        continue
                    
                    cell_str = str(cell_value).strip()
                    
                    # –¢–∏—Ä–∞–∂ –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                    if col_idx in quantity_cols and cell_str.replace('.', '').isdigit():
                        potential_quantity = int(float(cell_str))
                        if 10 <= potential_quantity <= 100000:
                            quantity = potential_quantity
                    
                    # USD –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                    elif col_idx in usd_cols and self.is_decimal_number(cell_str):
                        try:
                            price_usd = float(cell_str.replace(',', '.'))
                        except:
                            pass
                    
                    # RUB –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                    elif col_idx in rub_cols and self.is_decimal_number(cell_str):
                        try:
                            price_rub = float(cell_str.replace(',', '.'))
                        except:
                            pass
                    
                    # –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                    elif col_idx in delivery_cols:
                        delivery_time = cell_str
                    
                    # Fallback: –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
                    elif not quantity and cell_str.isdigit():
                        potential_quantity = int(cell_str)
                        if 10 <= potential_quantity <= 100000:
                            quantity = potential_quantity
                    
                    elif not price_usd and ('$' in cell_str or self.is_decimal_number(cell_str)):
                        try:
                            price_usd = float(re.sub(r'[^\d.,]', '', cell_str).replace(',', '.'))
                        except:
                            pass
                    
                    elif not price_rub and ('‚ÇΩ' in cell_str or '—Ä—É–±' in cell_str):
                        try:
                            price_rub = float(re.sub(r'[^\d.,]', '', cell_str).replace(',', '.'))
                        except:
                            pass
                    
                    elif not delivery_time and ('–¥–Ω' in cell_str or '–¥–µ–Ω—å' in cell_str or '—Ä–∞–±' in cell_str):
                        delivery_time = cell_str
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã —Ç–∏—Ä–∞–∂ –∏ –æ–¥–Ω—É —Ü–µ–Ω—É, —Å–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç
                if quantity and (price_usd or price_rub):
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —Ü–µ–Ω–µ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏
                    route_name = "Standard"
                    if delivery_time:
                        if any(word in delivery_time.lower() for word in ['–∞–≤–∏–∞', 'air', 'fast']):
                            route_name = "–ê–í–ò–ê"
                        elif any(word in delivery_time.lower() for word in ['–∂–¥', 'rail', 'train']):
                            route_name = "–ñ–î"
                        elif any(word in delivery_time.lower() for word in ['–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä', 'container', 'sea']):
                            route_name = "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä"
                    
                    variant = PriceOffer(
                        product_id=product.id,
                        route_name=route_name,
                        quantity=quantity,
                        price_usd=price_usd,
                        price_rub=price_rub,
                        delivery_time=delivery_time
                    )
                    
                    self.session.add(variant)
                    variants.append(variant)
                    
                    print(f"     ‚úÖ –í–∞—Ä–∏–∞–Ω—Ç: {quantity} —à—Ç, ${price_usd or '‚Äî'}, {price_rub or '‚Äî'} ‚ÇΩ, {delivery_time or '‚Äî'}")
        
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è {product.name}: {e}")
        
        try:
            self.session.commit()
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {e}")
            self.session.rollback()
        
        return variants
    
    def is_decimal_number(self, s):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–µ—Å—è—Ç–∏—á–Ω—ã–º —á–∏—Å–ª–æ–º"""
        try:
            float(s.replace(',', '.'))
            return True
        except:
            return False
    
    def process_single_sheet(self, url):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É Google Sheets —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª–Ω–æ—Å—Ç—å—é"""
        print(f"\n{'='*60}")
        print(f"üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ –¢–ê–ë–õ–ò–¶–´")
        print(f"üìÑ URL: {url}")
        print(f"{'='*60}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"google_sheet_{timestamp}.xlsx"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        excel_path = self.download_excel_file(url, filename)
        if not excel_path:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –æ —Ç–∞–±–ª–∏—Ü–µ –≤ –ë–î
        google_sheet_id = url.split('/')[-2] if '/d/' in url else filename.replace('.xlsx', '')
        existing_sheet = self.session.query(SheetMetadata).filter(
            SheetMetadata.sheet_id == google_sheet_id
        ).first()
        
        if existing_sheet:
            print(f"   üìã –¢–∞–±–ª–∏—Ü–∞ —É–∂–µ –µ—Å—Ç—å –≤ –ë–î (ID: {existing_sheet.id})")
            sheet_metadata = existing_sheet
        else:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç–∞–±–ª–∏—Ü–µ –≤ –ë–î
            sheet_metadata = SheetMetadata(
                sheet_title=filename.replace('.xlsx', ''),
                sheet_url=url,
                sheet_id=google_sheet_id,
                local_file_path=str(excel_path.relative_to(self.base_dir)),
                products_count=0
            )
            
            self.session.add(sheet_metadata)
            self.session.commit()
            print(f"   üìã –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –ë–î (ID: {sheet_metadata.id})")
        
        sheet_id = sheet_metadata.id
        
        try:
            # –≠–¢–ê–ü 1: –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã –°–ù–ê–ß–ê–õ–ê
            products_count = self.parse_products_from_excel(excel_path, sheet_id)
            
            # –≠–¢–ê–ü 2: –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images_count = self.extract_images_from_excel(excel_path, sheet_id)
            
            # –≠–¢–ê–ü 3: –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º
            assigned_count = self.assign_images_to_products(sheet_id)
            
            # –≠–¢–ê–ü 4: –ü–∞—Ä—Å–∏–º –º–∞—Ç—Ä–∏—Ü—É —Ü–µ–Ω
            variants_count = self.parse_price_matrix(excel_path, sheet_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            sheet_metadata.products_count = products_count
            self.session.commit()
            
            print(f"\nüéâ –¢–ê–ë–õ–ò–¶–ê –û–ë–†–ê–ë–û–¢–ê–ù–ê –£–°–ü–ï–®–ù–û!")
            print(f"   üìä –¢–æ–≤–∞—Ä–æ–≤: {products_count}")
            print(f"   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_count}")
            print(f"   üîó –ü—Ä–∏–≤—è–∑–∞–Ω–æ: {assigned_count}")
            print(f"   üí∞ –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ü–µ–Ω: {variants_count}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.session.delete(sheet_metadata)
            self.session.commit()
            return False
    
    def run_complete_parsing(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê GOOGLE SHEETS")
        print("=" * 60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ URL
        urls = self.load_google_sheets_urls()
        if not urls:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        processed_urls = self.get_processed_sheets()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ URL
        new_urls = [url for url in urls if url not in processed_urls]
        
        if not new_urls:
            print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
            return
        
        print(f"üìã –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(new_urls)} –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
        success_count = 0
        for i, url in enumerate(new_urls, 1):
            print(f"\nüìä –¢–∞–±–ª–∏—Ü–∞ {i}/{len(new_urls)}")
            
            if self.process_single_sheet(url):
                success_count += 1
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}/{i}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {i}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            if i < len(new_urls):
                print("‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...")
                time.sleep(2)
        
        print(f"\nüéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}/{len(new_urls)} —Ç–∞–±–ª–∏—Ü")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
        parser = CompleteParsing()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        parser.run_complete_parsing()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

def parse_single_sheet(google_sheets_url):
    """
    –ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É Google Sheets —Ç–∞–±–ª–∏—Ü—É
    
    Args:
        google_sheets_url: URL Google Sheets —Ç–∞–±–ª–∏—Ü—ã
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —É—Å–ø–µ—Ö–µ/–æ—à–∏–±–∫–µ
    """
    try:
        parser = CompleteParsing()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –æ–¥–Ω–∏–º URL
        temp_urls_file = parser.base_dir / "temp_single_url.txt"
        with open(temp_urls_file, 'w', encoding='utf-8') as f:
            f.write(google_sheets_url + '\n')
        
        # –ú–µ–Ω—è–µ–º —Ñ–∞–π–ª URL –≤ –ø–∞—Ä—Å–µ—Ä–µ
        parser.urls_file = temp_urls_file
        
        print(f"üéØ –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {google_sheets_url}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        result = parser.run_complete_parsing()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if temp_urls_file.exists():
            temp_urls_file.unlink()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        session = DatabaseManager.get_session()
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            latest_sheet = session.query(SheetMetadata).filter(
                SheetMetadata.sheet_url == google_sheets_url
            ).first()
            
            if latest_sheet:
                products_count = session.query(Product).filter(
                    Product.sheet_id == latest_sheet.id
                ).count()
                
                images_count = session.query(ProductImage).filter(
                    ProductImage.sheet_id == latest_sheet.id
                ).count()
                
                return {
                    'success': True,
                    'sheet_id': latest_sheet.id,
                    'products_count': products_count,
                    'images_count': images_count,
                    'message': f'–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {products_count} —Ç–æ–≤–∞—Ä–æ–≤, {images_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
                }
            else:
                return {
                    'success': False,
                    'error': '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
                }
                
        finally:
            session.close()
            
    except Exception as e:
        return {
            'success': False,
            'error': str(e)
        }

if __name__ == "__main__":
    main()
