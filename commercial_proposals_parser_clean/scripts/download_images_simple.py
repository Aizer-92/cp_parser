#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Google Sheets
"""

import sys
import os
import re
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent.absolute()))

import openpyxl
from database.manager_v4 import DatabaseManager
from database.models_v4 import SheetMetadata, Product, ProductImage

def download_images_from_excel(excel_file_path, sheet_title):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Excel —Ñ–∞–π–ª–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)"""
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Google Sheets
    # –ü–æ–∫–∞ —á—Ç–æ —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–≥–ª—É—à–∫—É —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    
    images = []
    
    try:
        wb = openpyxl.load_workbook(excel_file_path)
        ws = wb.active
        
        # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ A (—Å—Ç–æ–ª–±–µ—Ü 1)
        for row in range(1, min(50, ws.max_row + 1)):
            cell_value = ws.cell(row=row, column=1).value
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —è—á–µ–π–∫–µ
            if cell_value and 'image' in str(cell_value).lower():
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_filename = f"{sheet_title}_image{row}.png"
                image_path = f"storage/images/{image_filename}"
                
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
                os.makedirs("storage/images", exist_ok=True)
                with open(image_path, 'w') as f:
                    f.write("")
                
                images.append({
                    'filename': image_filename,
                    'local_path': image_path,
                    'row': row,
                    'column': 1
                })
        
        wb.close()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {excel_file_path}: {e}")
    
    return images

def find_product_for_image_position(excel_file_path, image_position):
    """–ù–∞—Ö–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –µ–≥–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ Excel —Ñ–∞–π–ª–µ"""
    try:
        wb = openpyxl.load_workbook(excel_file_path)
        ws = wb.active
        
        # –°—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ (–æ–±—ã—á–Ω–æ 2)
        name_column = 2
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–µ image_position –∏–ª–∏ —Ä–∞–Ω—å—à–µ
        # –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–µ image_position –∏–ª–∏ –ø–æ–∑–∂–µ
        current_product = None
        current_start = None
        current_end = None
        
        for row in range(1, min(100, ws.max_row + 1)):
            cell_value = ws.cell(row=row, column=name_column).value
            
            if cell_value and str(cell_value).strip() and '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' not in str(cell_value).lower() and '–º–µ–Ω–µ–¥–∂–µ—Ä' not in str(cell_value).lower():
                # –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                if current_product and current_start and current_end:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ image_position –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
                    if current_start <= image_position <= current_end:
                        wb.close()
                        return current_product, current_start, current_end
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                current_product = str(cell_value).strip()
                current_start = row
                current_end = row
                
                # –ò—â–µ–º –∫–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ (—Å–ª–µ–¥—É—é—â—É—é –Ω–µ–ø—É—Å—Ç—É—é —è—á–µ–π–∫—É –≤ —Å—Ç–æ–ª–±—Ü–µ –Ω–∞–∑–≤–∞–Ω–∏–π)
                for next_row in range(row + 1, min(row + 20, ws.max_row + 1)):
                    next_cell_value = ws.cell(row=next_row, column=name_column).value
                    if next_cell_value and str(next_cell_value).strip() and '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' not in str(next_cell_value).lower() and '–º–µ–Ω–µ–¥–∂–µ—Ä' not in str(next_cell_value).lower():
                        # –ù–∞–π–¥–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–ø—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
                        current_end = next_row - 1
                        break
                    else:
                        # –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
                        current_end = next_row
            elif current_product and current_start and current_end:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ image_position –≤ –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
                if current_start <= image_position <= current_end:
                    wb.close()
                    return current_product, current_start, current_end
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä
        if current_product and current_start and current_end and current_start <= image_position <= current_end:
            wb.close()
            return current_product, current_start, current_end
            
        wb.close()
        return None, None, None
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞ {excel_file_path}: {e}")
        return None, None, None

def download_images_simple():
    """–ü—Ä–æ—Å—Ç–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    session = DatabaseManager.get_session()
    
    print("=== –ü–†–û–°–¢–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ===\n")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    sheets = session.query(SheetMetadata).all()
    
    total_downloaded = 0
    total_errors = 0
    
    for sheet in sheets:
        print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É: {sheet.sheet_title}")
        
        if not os.path.exists(sheet.local_file_path):
            print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {sheet.local_file_path}")
            continue
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
            images_info = download_images_from_excel(sheet.local_file_path, sheet.sheet_title)
            
            print(f"   üì• –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images_info)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            for image_info in images_info:
                try:
                    image_position = image_info['row']
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    product_name, start_row, end_row = find_product_for_image_position(
                        sheet.local_file_path, image_position
                    )
                    
                    if product_name is None:
                        print(f"   ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {image_position}: {image_info['filename']}")
                        total_errors += 1
                        continue
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    product = session.query(Product).filter(
                        Product.name == product_name,
                        Product.sheet_id == sheet.id
                    ).first()
                    
                    if not product:
                        print(f"   ‚ö†Ô∏è  –¢–æ–≤–∞—Ä '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                        total_errors += 1
                        continue
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (main –µ—Å–ª–∏ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ A, additional –∏–Ω–∞—á–µ)
                    image_type = 'main' if image_info['column'] == 1 else 'additional'
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                    product_image = ProductImage(
                        product_id=product.id,
                        local_path=image_info['local_path'],
                        image_type=image_type,
                        file_size=os.path.getsize(image_info['local_path']) if os.path.exists(image_info['local_path']) else 0,
                        width=0,
                        height=0,
                        format=os.path.splitext(image_info['local_path'])[1][1:].lower()
                    )
                    
                    session.add(product_image)
                    total_downloaded += 1
                    
                    print(f"   ‚úÖ {image_info['filename']} ‚Üí {product_name} (—Å—Ç—Ä–æ–∫–∏ {start_row}-{end_row})")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {image_info['filename']}: {e}")
                    total_errors += 1
            
            session.commit()
            print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {sheet.sheet_title} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã {sheet.sheet_title}: {e}")
            total_errors += 1
    
    session.close()
    
    print(f"\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
    print(f"–°–∫–∞—á–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_downloaded}")
    print(f"–û—à–∏–±–æ–∫: {total_errors}")
    print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    try:
        download_images_simple()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

