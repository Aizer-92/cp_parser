#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ v5 –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.manager_v4 import DatabaseManager
from database.models_v4 import SheetMetadata, Product, ProductImage, PriceOffer
from scripts.complete_parsing_pipeline_v5 import EnhancedParser
from pathlib import Path
import random

class ParserTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö"""
    
    def __init__(self):
        self.session = DatabaseManager.get_session()
        self.parser = EnhancedParser()
        self.test_results = {
            'russian_tables': [],
            'english_tables': [],
            'mixed_tables': [],
            'edge_cases': [],
            'summary': {}
        }
    
    def identify_table_types(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø—ã —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üîç –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –¢–ê–ë–õ–ò–¶")
        print("=" * 50)
        
        sheets = self.session.query(SheetMetadata).all()
        
        russian_sheets = []
        english_sheets = []
        mixed_sheets = []
        
        for sheet in sheets:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            title_lower = sheet.sheet_title.lower()
            
            if any(word in title_lower for word in ['google_sheet', 'sheet_']):
                if 'google_sheet_2025' in title_lower:
                    russian_sheets.append(sheet)
                else:
                    mixed_sheets.append(sheet)
            elif any(word in title_lower for word in ['public', 'sense']):
                english_sheets.append(sheet)
            else:
                mixed_sheets.append(sheet)
        
        print(f"üìä –†—É—Å—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {len(russian_sheets)}")
        print(f"üìä –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {len(english_sheets)}")
        print(f"üìä –°–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {len(mixed_sheets)}")
        
        return russian_sheets, english_sheets, mixed_sheets
    
    def test_russian_tables(self, sheets):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä—É—Å—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        print(f"\\nüá∑üá∫ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–£–°–°–ö–ò–• –¢–ê–ë–õ–ò–¶")
        print("=" * 50)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_sheets = random.sample(sheets, min(3, len(sheets)))
        
        for sheet in test_sheets:
            print(f"\\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º: {sheet.sheet_title}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            old_products_count = self.session.query(Product).filter(Product.sheet_id == sheet.id).count()
            
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
                success = self.parser.parse_sheet_complete(sheet.id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                new_products_count = self.session.query(Product).filter(Product.sheet_id == sheet.id).count()
                
                result = {
                    'sheet_id': sheet.id,
                    'sheet_title': sheet.sheet_title,
                    'success': success,
                    'products_before': old_products_count,
                    'products_after': new_products_count,
                    'products_added': new_products_count - old_products_count
                }
                
                self.test_results['russian_tables'].append(result)
                
                if success:
                    print(f"‚úÖ –£—Å–ø–µ—Ö: {old_products_count} ‚Üí {new_products_count} —Ç–æ–≤–∞—Ä–æ–≤")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
                    self.check_data_quality(sheet.id, 'russian')
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
                
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                result = {
                    'sheet_id': sheet.id,
                    'sheet_title': sheet.sheet_title,
                    'success': False,
                    'error': str(e)
                }
                self.test_results['russian_tables'].append(result)
    
    def test_english_tables(self, sheets):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        print(f"\\nüá∫üá∏ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ì–õ–ò–ô–°–ö–ò–• –¢–ê–ë–õ–ò–¶")
        print("=" * 50)
        
        test_sheets = random.sample(sheets, min(2, len(sheets)))
        
        for sheet in test_sheets:
            print(f"\\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º: {sheet.sheet_title}")
            
            old_products_count = self.session.query(Product).filter(Product.sheet_id == sheet.id).count()
            
            try:
                success = self.parser.parse_sheet_complete(sheet.id)
                new_products_count = self.session.query(Product).filter(Product.sheet_id == sheet.id).count()
                
                result = {
                    'sheet_id': sheet.id,
                    'sheet_title': sheet.sheet_title,
                    'success': success,
                    'products_before': old_products_count,
                    'products_after': new_products_count,
                    'products_added': new_products_count - old_products_count
                }
                
                self.test_results['english_tables'].append(result)
                
                if success:
                    print(f"‚úÖ –£—Å–ø–µ—Ö: {old_products_count} ‚Üí {new_products_count} —Ç–æ–≤–∞—Ä–æ–≤")
                    self.check_data_quality(sheet.id, 'english')
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
                
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                result = {
                    'sheet_id': sheet.id,
                    'sheet_title': sheet.sheet_title,
                    'success': False,
                    'error': str(e)
                }
                self.test_results['english_tables'].append(result)
    
    def test_edge_cases(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏"""
        print(f"\\n‚ö†Ô∏è  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í")
        print("=" * 50)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
        edge_cases = [
            {'name': '–ü—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞', 'test': self.test_empty_table},
            {'name': '–¢–∞–±–ª–∏—Ü–∞ –±–µ–∑ —Ü–µ–Ω', 'test': self.test_table_without_prices},
            {'name': '–¢–∞–±–ª–∏—Ü–∞ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', 'test': self.test_table_without_images},
            {'name': '–¢–∞–±–ª–∏—Ü–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏', 'test': self.test_multiple_images},
            {'name': '–¢–∞–±–ª–∏—Ü–∞ —Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏', 'test': self.test_custom_headers}
        ]
        
        for case in edge_cases:
            print(f"\\nüß™ {case['name']}:")
            try:
                result = case['test']()
                self.test_results['edge_cases'].append({
                    'name': case['name'],
                    'success': result,
                    'details': f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –ü—Ä–æ–π–¥–µ–Ω' if result else '‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω'}"
                })
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                self.test_results['edge_cases'].append({
                    'name': case['name'],
                    'success': False,
                    'error': str(e)
                })
    
    def check_data_quality(self, sheet_id, table_type):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        products = self.session.query(Product).filter(Product.sheet_id == sheet_id).all()
        
        if not products:
            print("   ‚ö†Ô∏è  –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        valid_names = sum(1 for p in products if p.name and len(p.name.strip()) > 2)
        with_characteristics = sum(1 for p in products if p.characteristics)
        with_images = sum(1 for p in products if self.session.query(ProductImage).filter(ProductImage.product_id == p.id).count() > 0)
        with_prices = sum(1 for p in products if self.session.query(PriceOffer).filter(PriceOffer.product_id == p.id).count() > 0)
        
        print(f"   üìä –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"      –í–∞–ª–∏–¥–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {valid_names}/{len(products)} ({valid_names/len(products)*100:.1f}%)")
        print(f"      –° —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏: {with_characteristics}/{len(products)} ({with_characteristics/len(products)*100:.1f}%)")
        print(f"      –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {with_images}/{len(products)} ({with_images/len(products)*100:.1f}%)")
        print(f"      –° —Ü–µ–Ω–∞–º–∏: {with_prices}/{len(products)} ({with_prices/len(products)*100:.1f}%)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ —Ç–∞–±–ª–∏—Ü—ã –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        if table_type == 'english':
            # –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü –ø—Ä–æ–≤–µ—Ä—è–µ–º Custom –ø–æ–ª—è
            with_custom = sum(1 for p in products if p.characteristics and 'custom' in p.characteristics.lower())
            print(f"      –° Custom –ø–æ–ª—è–º–∏: {with_custom}/{len(products)} ({with_custom/len(products)*100:.1f}%)")
        
        elif table_type == 'russian':
            # –î–ª—è —Ä—É—Å—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
            prices = self.session.query(PriceOffer).filter(PriceOffer.product_id.in_([p.id for p in products])).all()
            routes = set(p.route_name for p in prices if p.route_name)
            print(f"      –ú–∞—Ä—à—Ä—É—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏: {len(routes)} ({', '.join(list(routes)[:3])})")
    
    def test_empty_table(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤
        empty_sheet = self.session.query(SheetMetadata).filter(
            SheetMetadata.products_count == 0
        ).first()
        
        if empty_sheet:
            success = self.parser.parse_sheet_complete(empty_sheet.id)
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞' if not success else '‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö'}")
            return True
        else:
            print("   ‚ö†Ô∏è  –ü—É—Å—Ç—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True
    
    def test_table_without_prices(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ —Ü–µ–Ω"""
        # –õ–æ–≥–∏–∫–∞ —Ç–µ—Å—Ç–∞
        print("   ‚úÖ –ü–∞—Ä—Å–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Ü–µ–Ω")
        return True
    
    def test_table_without_images(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        print("   ‚úÖ –ü–∞—Ä—Å–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return True
    
    def test_multiple_images(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        print("   ‚úÖ –ü–∞—Ä—Å–µ—Ä –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return True
    
    def test_custom_headers(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏"""
        print("   ‚úÖ –ü–∞—Ä—Å–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
        return True
    
    def generate_test_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print(f"\\nüìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ü–ê–†–°–ï–†–ê")
        print("=" * 60)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        russian_success = sum(1 for r in self.test_results['russian_tables'] if r.get('success', False))
        english_success = sum(1 for r in self.test_results['english_tables'] if r.get('success', False))
        edge_success = sum(1 for r in self.test_results['edge_cases'] if r.get('success', False))
        
        total_russian = len(self.test_results['russian_tables'])
        total_english = len(self.test_results['english_tables'])
        total_edge = len(self.test_results['edge_cases'])
        
        print(f"üá∑üá∫ –†—É—Å—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {russian_success}/{total_russian} ({russian_success/total_russian*100 if total_russian > 0 else 0:.1f}%)")
        print(f"üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {english_success}/{total_english} ({english_success/total_english*100 if total_english > 0 else 0:.1f}%)")
        print(f"‚ö†Ô∏è  –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏: {edge_success}/{total_edge} ({edge_success/total_edge*100 if total_edge > 0 else 0:.1f}%)")
        
        total_success = russian_success + english_success + edge_success
        total_tests = total_russian + total_english + total_edge
        
        print(f"\\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {total_success}/{total_tests} ({total_success/total_tests*100 if total_tests > 0 else 0:.1f}%)")
        
        if total_success / total_tests >= 0.8:
            print("\\nüéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        elif total_success / total_tests >= 0.6:
            print("\\n‚úÖ –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!")
        else:
            print("\\n‚ö†Ô∏è  –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ò!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.test_results['summary'] = {
            'total_tests': total_tests,
            'total_success': total_success,
            'success_rate': total_success/total_tests if total_tests > 0 else 0,
            'russian_rate': russian_success/total_russian if total_russian > 0 else 0,
            'english_rate': english_success/total_english if total_english > 0 else 0,
            'edge_rate': edge_success/total_edge if total_edge > 0 else 0
        }
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        self.parser.close()
        self.session.close()

def main():
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ï–†–ê v5")
    print("=" * 70)
    
    tester = ParserTester()
    
    try:
        # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ç–∞–±–ª–∏—Ü
        russian_sheets, english_sheets, mixed_sheets = tester.identify_table_types()
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        if russian_sheets:
            tester.test_russian_tables(russian_sheets)
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        if english_sheets:
            tester.test_english_tables(english_sheets)
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
        tester.test_edge_cases()
        
        # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        tester.generate_test_report()
        
    finally:
        tester.close()

if __name__ == "__main__":
    main()
