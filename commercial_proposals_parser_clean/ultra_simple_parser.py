#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–£–õ–¨–¢–†–ê-–ü–†–û–°–¢–û–ô –ü–ê–†–°–ï–† –ö–û–ú–ú–ï–†–ß–ï–°–ö–ò–• –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô
============================================

–õ–û–ì–ò–ö–ê:
- 1 —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞ = 1 —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ
- –ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è = –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É
- –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (–Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ)
- –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏
"""

import os
import sys
import pandas as pd
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.manager_v4 import DatabaseManager
from database.models_v4 import Product, ProductImage, SheetMetadata, PriceOffer

class UltraSimpleParser:
    def __init__(self):
        self.db = DatabaseManager  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        self.setup_logging()
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('ultra_simple_parser.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)

    def find_excel_files(self):
        """–ü–æ–∏—Å–∫ –¢–û–õ–¨–ö–û –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö Excel —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ normalized)"""
        excel_files = []
        storage_path = os.path.join(os.path.dirname(__file__), 'storage', 'excel_files')
        
        if not os.path.exists(storage_path):
            self.logger.error(f"‚ùå –ü–∞–ø–∫–∞ {storage_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return []
            
        for file in os.listdir(storage_path):
            if (file.endswith('.xlsx') and 
                not file.startswith('~') and 
                'normalized' not in file):  # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ
                full_path = os.path.join(storage_path, file)
                excel_files.append(full_path)
                
        self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(excel_files)} –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö Excel —Ñ–∞–π–ª–æ–≤")
        return excel_files

    def extract_sheet_id(self, filename):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ sheet_id –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        basename = os.path.basename(filename)
        # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ —Å—É—Ñ—Ñ–∏–∫—Å—ã
        sheet_id = basename.replace('.xlsx', '').replace('_normalized', '')
        return sheet_id

    def parse_single_file(self, file_path):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞ - –¢–û–õ–¨–ö–û –æ—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
        self.logger.info(f"üìÑ –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª: {os.path.basename(file_path)}")
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª - –¢–û–õ–¨–ö–û –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç (–æ—Å–Ω–æ–≤–Ω–æ–π)
            df = pd.read_excel(file_path, sheet_name=0)
            
            # –ü–æ–ª—É—á–∞–µ–º sheet_id –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            sheet_id = self.extract_sheet_id(file_path)
            session = self.db.get_session()
            
            sheet_metadata = session.query(SheetMetadata).filter_by(sheet_id=sheet_id).first()
            if not sheet_metadata:
                self.logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è {sheet_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ")
                sheet_metadata = SheetMetadata(
                    sheet_id=sheet_id,
                    sheet_name=f"Sheet_{sheet_id}",
                    total_rows=len(df),
                    total_columns=len(df.columns)
                )
                session.add(sheet_metadata)
                session.flush()

            products_created = 0
            
            # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –∏—â–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
            product_column = None
            
            # –ò—â–µ–º —Å—Ç–æ–ª–±–µ—Ü, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏–ª–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
            for col in df.columns:
                col_name = str(col).lower()
                first_row_value = str(df[col].iloc[0]).lower() if len(df) > 0 else ""
                
                # –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–∏–∑–±–µ–≥–∞–µ–º –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π)
                if (('–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in col_name or '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in first_row_value) or
                    ('—Ç–æ–≤–∞—Ä' in col_name or '—Ç–æ–≤–∞—Ä' in first_row_value) or
                    ('–ø—Ä–æ–¥—É–∫—Ç' in col_name or '–ø—Ä–æ–¥—É–∫—Ç' in first_row_value) or
                    (first_row_value == 'name') or  # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è "name"
                    ('product name' in col_name or 'product name' in first_row_value) or
                    (col_name == 'name') or  # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    ('item' in col_name or first_row_value == 'item')):
                    product_column = col
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º, –∏—â–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if product_column is None:
                max_non_empty = 0
                for col in df.columns:
                    non_empty_count = df[col].notna().sum() - (df[col] == '').sum()
                    if non_empty_count > max_non_empty and col != df.columns[0]:  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–§–æ—Ç–æ)
                        max_non_empty = non_empty_count
                        product_column = col
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü
            if product_column is None and len(df.columns) > 1:
                product_column = df.columns[1]
            
            self.logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤: {product_column}")
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –∏ –∏—â–µ–º —Ç–æ–≤–∞—Ä—ã
            for index, row in df.iterrows():
                if product_column and product_column in row.index:
                    product_name = str(row[product_column]).strip()
                    
                    # –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è, –∏–ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏–ª–∏ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    if (not product_name or 
                        product_name == 'nan' or 
                        product_name == '' or
                        product_name == 'None' or
                        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü
                        product_name.lower() == 'name' or
                        product_name.lower() == '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' or
                        product_name.lower() == '–Ω–∞–∑–≤–∞–Ω–∏–µ' or
                        product_name.lower() == '—Ç–æ–≤–∞—Ä' or
                        product_name.lower() == 'product' or
                        product_name.lower() == 'item' or
                        '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in product_name.lower() or
                        '–Ω–∞–∑–≤–∞–Ω–∏–µ' in product_name.lower() or
                        '—Ç–æ–≤–∞—Ä' in product_name.lower() or
                        'manager' in product_name.lower() or
                        '–º–µ–Ω–µ–¥–∂–µ—Ä' in product_name.lower() or
                        'email' in product_name.lower() or
                        '—Ç–µ–ª–µ—Ñ–æ–Ω' in product_name.lower() or
                        'phone' in product_name.lower() or
                        # –°–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ Excel
                        'circulation period' in product_name.lower() or
                        'price per item' in product_name.lower() or
                        'price per pcs' in product_name.lower() or
                        'sea delivery' in product_name.lower() or
                        'production:' in product_name.lower() or
                        'delivery:' in product_name.lower() or
                        'calendar days' in product_name.lower() or
                        '—Å—Ç–æ–ª–±–µ—Ü' in product_name.lower() or
                        'unnamed:' in product_name.lower() or
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —Ü–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∞)
                        product_name.replace('.', '').replace(',', '').replace('$', '').replace(' ', '').isdigit() or
                        len(product_name) < 3):  # –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
                        continue
                        
                    # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
                    product = Product(
                        name=product_name,
                        description=self.extract_description(row),
                        characteristics=self.format_characteristics(row),  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        sheet_id=sheet_metadata.id,
                        start_row=index + 1,  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ Excel —Å—á–∏—Ç–∞–µ—Ç —Å 1
                        end_row=index + 1  # –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ = –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä
                    )
                    
                    session.add(product)
                    session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
                    
                    # –ù–ï —Å–æ–∑–¥–∞–µ–º —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã!
                    # –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ characteristics
                    
                    products_created += 1
                    self.logger.debug(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: {product_name} (—Å—Ç—Ä–æ–∫–∞ {index + 1})")

            session.commit()
            self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ {os.path.basename(file_path)}: {products_created}")
            session.close()
            return products_created
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            if 'session' in locals():
                session.rollback()
                session.close()
            return 0

    def extract_description(self, row):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        try:
            # –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            description_parts = []
            for col_name in row.index:
                col_name_lower = str(col_name).lower()
                if any(keyword in col_name_lower for keyword in ['–æ–ø–∏—Å–∞–Ω–∏–µ', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫', '–¥–∏–∑–∞–π–Ω', '–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç']):
                    value = str(row[col_name]).strip()
                    if value and value != 'nan':
                        description_parts.append(f"{col_name}: {value}")
            
            return ' | '.join(description_parts) if description_parts else ''
        except:
            return ''

    def format_characteristics(self, row):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ"""
        try:
            formatted_data = []
            
            for col_name, value in row.items():
                if pd.isna(value) or str(value).strip() == '' or str(value) == 'nan':
                    continue
                    
                # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
                clean_col_name = str(col_name).strip()
                if 'Unnamed:' in clean_col_name:
                    clean_col_name = f"–°—Ç–æ–ª–±–µ—Ü {clean_col_name.split(':')[1].strip()}"
                
                # –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                clean_value = str(value).strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –º—É—Å–æ—Ä)
                if len(clean_value) > 200:
                    clean_value = clean_value[:200] + "..."
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ "–ù–∞–∑–≤–∞–Ω–∏–µ: –ó–Ω–∞—á–µ–Ω–∏–µ"
                if len(clean_value) > 0:
                    formatted_data.append(f"**{clean_col_name}**: {clean_value}")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            if formatted_data:
                return "\n".join(formatted_data)
            else:
                return "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {e}")
            return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"

    def row_to_json(self, row):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ JSON –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import json
            row_dict = {}
            for col_name, value in row.items():
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ –æ—á–∏—â–∞–µ–º
                str_value = str(value).strip()
                if str_value and str_value != 'nan':
                    row_dict[str(col_name)] = str_value
            return json.dumps(row_dict, ensure_ascii=False)
        except:
            return '{}'

    def attach_images(self, session, product, sheet_metadata, row_number):
        """–ü—Ä–∏–≤—è–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–æ–≤–∞—Ä—É –ø–æ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏"""
        try:
            # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –∏ —Å—Ç—Ä–æ–∫–∏
            images = session.query(ProductImage).filter_by(
                sheet_id=sheet_metadata.id,
                row=row_number
            ).all()
            
            if images:
                for img in images:
                    img.product_id = product.id
                    # –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ –¥–µ–ª–∞–µ–º –≥–ª–∞–≤–Ω—ã–º
                    if img == images[0]:
                        img.image_type = 'main'
                
                self.logger.debug(f"üñºÔ∏è –ü—Ä–∏–≤—è–∑–∞–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–æ–≤–∞—Ä—É '{product.name}' (—Å—Ç—Ä–æ–∫–∞ {row_number})")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")

    def clear_database(self):
        """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
        self.logger.info("üßπ –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        session = self.db.get_session()
        try:
            # –û—á–∏—â–∞–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            session.query(ProductImage).update({'product_id': None, 'image_type': 'additional'})
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            session.query(PriceOffer).delete()
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
            session.query(Product).delete()
            session.commit()
            self.logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ (—Ç–æ–≤–∞—Ä—ã + —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")
            session.rollback()
        finally:
            session.close()

    def run_full_parsing(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self.logger.info("üöÄ –ó–ê–ü–£–°–ö –£–õ–¨–¢–†–ê-–ü–†–û–°–¢–û–ì–û –ü–ê–†–°–ï–†–ê")
        self.logger.info("=" * 50)
        
        # –û—á–∏—â–∞–µ–º –ë–î
        self.clear_database()
        
        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã
        files = self.find_excel_files()
        if not files:
            self.logger.error("‚ùå –§–∞–π–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        total_products = 0
        processed_files = 0
        
        # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for file_path in files:
            products = self.parse_single_file(file_path)
            total_products += products
            if products > 0:
                processed_files += 1
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.logger.info("=" * 50)
        self.logger.info(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê:")
        self.logger.info(f"   üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {processed_files}/{len(files)}")
        self.logger.info(f"   üì¶ –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        session = self.db.get_session()
        products_with_images = session.query(Product).join(ProductImage).distinct().count()
        total_images = session.query(ProductImage).filter(ProductImage.product_id.isnot(None)).count()
        session.close()
        
        self.logger.info(f"   üñºÔ∏è –¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {products_with_images}")
        self.logger.info(f"   üì∑ –í—Å–µ–≥–æ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
        self.logger.info("=" * 50)
        
        return total_products

if __name__ == "__main__":
    parser = UltraSimpleParser()
    parser.run_full_parsing()
