#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.manager_v4 import CommercialProposalsDB
from database.models_v4 import Product, PriceOffer, ProductImage
from config import DATABASE_URL_V4

def clean_bad_products():
    """–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"""
    
    print("üßπ –û–ß–ò–°–¢–ö–ê –ü–†–û–ë–õ–ï–ú–ù–´–• –¢–û–í–ê–†–û–í")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    bad_names = [
        'Circulation period',
        'Production: 10 calendar days + Delivery: 25-30 calendar days',
        'Production:  calendar days + Delivery:  calendar days',
        'Sample price (does not include delivery)',
        'Add Photos',
        'Custom',
        'Quantity, pcs',
        'Price per item, including air delivery t',
    ]
    
    db = CommercialProposalsDB(DATABASE_URL_V4)
    session = db.get_session()
    
    try:
        total_to_delete = 0
        for bad_name in bad_names:
            count = session.query(Product).filter(Product.name == bad_name).count()
            total_to_delete += count
            if count > 0:
                print(f"üìä '{bad_name}': {count} —Ç–æ–≤–∞—Ä–æ–≤")
        
        print(f"\nüéØ –í–°–ï–ì–û –ö –£–î–ê–õ–ï–ù–ò–Æ: {total_to_delete} —Ç–æ–≤–∞—Ä–æ–≤")
        
        if total_to_delete == 0:
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        response = input("\n‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã? (y/N): ")
        
        if response.lower() in ['y', 'yes', '–¥–∞']:
            deleted_count = 0
            
            for bad_name in bad_names:
                # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã
                bad_products = session.query(Product).filter(Product.name == bad_name).all()
                
                for product in bad_products:
                    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ü–µ–Ω—ã —É–¥–∞–ª—è—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ)
                    deleted_count += 1
                    session.delete(product)
                    
                    if deleted_count % 50 == 0:
                        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {deleted_count}/{total_to_delete}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            session.commit()
            
            print(f"\n‚úÖ –£–î–ê–õ–ï–ù–û: {deleted_count} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            remaining_products = session.query(Product).count()
            remaining_prices = session.query(PriceOffer).count()
            
            print(f"üìä –û–°–¢–ê–ï–¢–°–Ø:")
            print(f"   –¢–æ–≤–∞—Ä–æ–≤: {remaining_products}")
            print(f"   –¶–µ–Ω: {remaining_prices}")
            
        else:
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    except Exception as e:
        session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    finally:
        session.close()

if __name__ == "__main__":
    clean_bad_products()
