#!/usr/bin/env python3
"""
–£–º–Ω—ã–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–µ—Ä - –ø–∞—Ä—Å–∏—Ç —Ç–∞–±–ª–∏—Ü—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
"""

from adaptive_table_analyzer import TableStructureAnalyzer, TableStructure
from database.manager_v4 import DatabaseManager
from database.models_v4 import SheetMetadata, Product, PriceOffer, ProductImage
import openpyxl
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple
import logging
import re

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SmartAdaptiveParser:
    """–£–º–Ω—ã–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–∞–±–ª–∏—Ü"""
    
    def __init__(self):
        self.analyzer = TableStructureAnalyzer()
        self.session = DatabaseManager.get_session()
        
        # –°—Ç–µ–∫ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        self.unknown_tables = []
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.min_confidence = 0.6
        self.required_columns = ['name']  # –ú–∏–Ω–∏–º—É–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    
    def parse_excel_smart(self, sheet_id: int) -> bool:
        """–£–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
        sheet_meta = self.session.query(SheetMetadata).get(sheet_id)
        if not sheet_meta or not sheet_meta.local_file_path:
            logger.error(f"–§–∞–π–ª –¥–ª—è sheet_id {sheet_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        file_path = sheet_meta.local_file_path
        logger.info(f"ü§ñ –£–ú–ù–´–ô –ü–ê–†–°–ò–ù–ì: {Path(file_path).name}")
        
        try:
            # 1. –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –°–¢–†–£–ö–¢–£–†–£
            structure = self.analyzer.analyze_file_structure(file_path)
            
            # 2. –ü–†–û–í–ï–†–Ø–ï–ú –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ –ü–ê–†–°–ò–ù–ì–ê
            if not self._can_parse_table(structure):
                logger.warning(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∞—Ä—Å–µ–Ω–∞: {structure.issues}")
                self._add_to_unknown_stack(structure)
                return False
            
            # 3. –ü–ê–†–°–ò–ú –ü–û –ù–ê–ô–î–ï–ù–ù–û–ô –°–¢–†–£–ö–¢–£–†–ï
            success = self._parse_with_structure(sheet_id, structure)
            
            if success:
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–∞")
                return True
            else:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü—ã")
                self._add_to_unknown_stack(structure)
                return False
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {file_path}: {e}")
            return False
    
    def _can_parse_table(self, structure: TableStructure) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –ø–∞—Ä—Å–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if structure.confidence < self.min_confidence:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        for required_col in self.required_columns:
            if required_col not in structure.columns:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
        critical_issues = [
            "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤",
            "–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö"
        ]
        
        for issue in structure.issues:
            if any(critical in issue for critical in critical_issues):
                return False
        
        return True
    
    def _parse_with_structure(self, sheet_id: int, structure: TableStructure) -> bool:
        """–ü–∞—Ä—Å–∏—Ç —Ç–∞–±–ª–∏—Ü—É —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ"""
        
        wb = openpyxl.load_workbook(structure.file_path, data_only=True)
        ws = wb.active
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö (–≤–∫–ª—é—á–∞—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã)
            extended_columns = self._find_all_price_columns(ws, structure)
            
            logger.info(f"–ù–∞–π–¥–µ–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(extended_columns.keys())}")
            
            # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã
            products_data = self._extract_products_smart(ws, structure, extended_columns)
            
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products_data)}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            saved_count = 0
            for product_data in products_data:
                if self._save_product_smart(product_data, sheet_id):
                    saved_count += 1
            
            wb.close()
            
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {saved_count}/{len(products_data)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∞–±–ª–∏—Ü—ã
            sheet_meta = self.session.query(SheetMetadata).get(sheet_id)
            sheet_meta.status = 'completed'
            self.session.commit()
            
            return saved_count > 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π: {e}")
            wb.close()
            return False
    
    def _find_all_price_columns(self, ws, structure: TableStructure) -> Dict[str, Any]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Å —Ü–µ–Ω–∞–º–∏ (–¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏)"""
        
        columns = dict(structure.columns)
        
        # –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        price_groups = []  # –ì—Ä—É–ø–ø—ã —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ü–µ–Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_routes = []
        for row in structure.header_rows:
            for col in range(1, min(21, ws.max_column + 1)):
                cell_value = ws.cell(row=row, column=col).value
                if cell_value:
                    header_text = str(cell_value).lower()
                    
                    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
                    if any(route in header_text for route in ['–∂–¥', '–∞–≤–∏–∞', '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä', '–¥–æ—Å—Ç–∞–≤–∫–∞']):
                        delivery_routes.append({
                            'name': str(cell_value).strip(),
                            'start_col': col,
                            'type': self._detect_delivery_type(header_text)
                        })
        
        logger.info(f"–ù–∞–π–¥–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏: {[r['name'] for r in delivery_routes]}")
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –∏—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å —Ü–µ–Ω–∞–º–∏
        for route in delivery_routes:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 5 –∫–æ–ª–æ–Ω–æ–∫ –ø–æ—Å–ª–µ –º–∞—Ä—à—Ä—É—Ç–∞
            for offset in range(0, 6):
                col = route['start_col'] + offset
                if col > ws.max_column:
                    break
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏
                header_texts = []
                for row in structure.header_rows:
                    cell_value = ws.cell(row=row, column=col).value
                    if cell_value:
                        header_texts.append(str(cell_value).lower())
                
                combined_header = ' '.join(header_texts)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ü–µ–Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
                if any(word in combined_header for word in ['$', 'usd', '–¥–æ–ª–ª']) and '—Ü–µ–Ω–∞' in combined_header:
                    key = f"price_usd_{route['type']}"
                    from adaptive_table_analyzer import ColumnDefinition
                    columns[key] = ColumnDefinition(
                        index=col,
                        letter=openpyxl.utils.get_column_letter(col), 
                        name=combined_header,
                        type='price_usd',
                        confidence=0.9,
                        sample_values=[]
                    )
                elif any(word in combined_header for word in ['—Ä—É–±', '‚ÇΩ', 'rub']) and '—Ü–µ–Ω–∞' in combined_header:
                    key = f"price_rub_{route['type']}"
                    from adaptive_table_analyzer import ColumnDefinition
                    columns[key] = ColumnDefinition(
                        index=col,
                        letter=openpyxl.utils.get_column_letter(col),
                        name=combined_header, 
                        type='price_rub',
                        confidence=0.9,
                        sample_values=[]
                    )
        
        return columns
    
    def _detect_delivery_type(self, header_text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É"""
        if '–∂–¥' in header_text or '–∂–µ–ª–µ–∑–Ω' in header_text:
            return 'railway'
        elif '–∞–≤–∏–∞' in header_text:
            return 'air'
        elif '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä' in header_text:
            return 'container'
        elif '–æ–±—Ä–∞–∑–µ—Ü' in header_text or 'sample' in header_text:
            return 'sample'
        else:
            return 'standard'
    
    def _extract_products_smart(self, ws, structure: TableStructure, columns: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        
        products = []
        name_col = columns['name'].index if 'name' in columns else None
        
        if not name_col:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏")
            return products
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        for row in range(structure.data_start_row, structure.data_end_row + 1):
            name_value = ws.cell(row=row, column=name_col).value
            
            if not name_value or not self._is_valid_product_name(str(name_value)):
                continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
            product_data = {
                'name': str(name_value).strip(),
                'row': row,
                'prices': []
            }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if 'quantity' in columns:
                qty_value = ws.cell(row=row, column=columns['quantity'].index).value
                if qty_value:
                    product_data['quantity'] = self._validate_quantity(qty_value)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            self._extract_all_prices(ws, row, columns, product_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if product_data['prices'] or product_data.get('quantity'):
                products.append(product_data)
        
        return products
    
    def _extract_all_prices(self, ws, row: int, columns: Dict[str, Any], product_data: Dict[str, Any]):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ü–µ–Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º
        price_groups = {}
        base_quantity = product_data.get('quantity')
        
        for col_key, col_info in columns.items():
            if col_key.startswith('price_'):
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º ColumnDefinition
                col_type = getattr(col_info, 'type', '') if hasattr(col_info, 'type') else col_info.get('type', '')
                route = getattr(col_info, 'route', 'standard') if hasattr(col_info, 'route') else 'standard'
                
                if route not in price_groups:
                    price_groups[route] = {}
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                col_index = getattr(col_info, 'index', None) if hasattr(col_info, 'index') else col_info.get('index')
                cell_value = ws.cell(row=row, column=col_index).value
                if cell_value:
                    if col_type == 'price_usd':
                        price = self._validate_price(cell_value)
                        if price:
                            price_groups[route]['price_usd'] = price
                    elif col_type == 'price_rub':
                        price = self._validate_price(cell_value)
                        if price:
                            price_groups[route]['price_rub'] = price
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        for route, prices in price_groups.items():
            if prices:  # –ï—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–µ–Ω–∞
                price_offer = {
                    'route_name': route,
                    'quantity': base_quantity or 1,
                    'price_usd': prices.get('price_usd'),
                    'price_rub': prices.get('price_rub'),
                    'delivery_time': None  # TODO: –∏–∑–≤–ª–µ–∫–∞—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞
                }
                
                product_data['prices'].append(price_offer)
    
    def _is_valid_product_name(self, name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        name = name.strip()
        
        if len(name) < 3:
            return False
        
        # –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        exclude_patterns = [
            r'^\d+$',  # –¢–æ–ª—å–∫–æ —á–∏—Å–ª–∞
            r'^—Ñ–æ—Ç–æ$',
            r'^–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ$',
            r'^–Ω–∞–∑–≤–∞–Ω–∏–µ$',
            r'^—Ç–æ–≤–∞—Ä$',
            r'^–ø—Ä–æ–¥—É–∫—Ç$',
            r'^unnamed:\s*\d+$'
        ]
        
        for pattern in exclude_patterns:
            if re.match(pattern, name.lower()):
                return False
        
        return True
    
    def _validate_quantity(self, value: Any) -> Optional[int]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏—Ä–∞–∂–∞"""
        if isinstance(value, (int, float)):
            qty = int(value)
            if 1 <= qty <= 100000:
                return qty
        return None
    
    def _validate_price(self, value: Any) -> Optional[float]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã"""
        if isinstance(value, (int, float)):
            price = float(value)
            if 0.01 <= price <= 10000:
                return price
        return None
    
    def _save_product_smart(self, product_data: Dict[str, Any], sheet_id: int) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –ë–î —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
            product = Product(
                name=product_data['name'],
                sheet_id=sheet_id,
                start_row=product_data['row'],
                end_row=product_data['row']
            )
            
            self.session.add(product)
            self.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            saved_prices = 0
            for price_data in product_data['prices']:
                if price_data.get('price_usd') or price_data.get('price_rub'):
                    price_offer = PriceOffer(
                        product_id=product.id,
                        route_name=price_data['route_name'],
                        quantity=price_data['quantity'],
                        price_usd=price_data.get('price_usd'),
                        price_rub=price_data.get('price_rub'),
                        delivery_time=price_data.get('delivery_time')
                    )
                    self.session.add(price_offer)
                    saved_prices += 1
            
            self.session.commit()
            
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–≤–∞—Ä: {product_data['name']} —Å {saved_prices} —Ü–µ–Ω–æ–≤—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏")
            return True
            
        except Exception as e:
            self.session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_data['name']}: {e}")
            return False
    
    def _add_to_unknown_stack(self, structure: TableStructure):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ —Å—Ç–µ–∫"""
        self.unknown_tables.append(structure)
        logger.warning(f"üìö –¢–∞–±–ª–∏—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å—Ç–µ–∫ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö: {Path(structure.file_path).name}")
    
    def get_unknown_tables_report(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º"""
        if not self.unknown_tables:
            return "‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–æ–∑–Ω–∞–Ω—ã –∏ —Å–ø–∞—Ä—Å–µ–Ω—ã"
        
        report = f"üìö –ù–ï–û–ü–û–ó–ù–ê–ù–ù–´–ï –¢–ê–ë–õ–ò–¶–´ ({len(self.unknown_tables)}):\n"
        report += "=" * 60 + "\n"
        
        for i, structure in enumerate(self.unknown_tables, 1):
            report += f"\n{i}. {Path(structure.file_path).name}\n"
            report += f"   –¢–∏–ø: {structure.table_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {structure.confidence:.2f})\n"
            report += f"   –ö–æ–ª–æ–Ω–∫–∏: {list(structure.columns.keys())}\n"
            report += f"   –ü—Ä–æ–±–ª–µ–º—ã: {structure.issues}\n"
        
        return report

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    parser = SmartAdaptiveParser()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    test_sheet_id = 1  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
    success = parser.parse_excel_smart(test_sheet_id)
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")
    print(parser.get_unknown_tables_report())
