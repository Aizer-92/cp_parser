#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞–∑–Ω–æ–ø–ª–∞–Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
"""

import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from table_normalizer import TableNormalizer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('test_normalization.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def test_multiple_tables():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö"""
    
    # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_files = [
        'storage/excel_files/original_sheet.xlsx',
        'storage/excel_files/google_sheet_20250923_100121.xlsx', 
        'storage/excel_files/google_sheet_20250923_095052.xlsx',
        'storage/excel_files/google_sheet_20250923_154510.xlsx',
        'storage/excel_files/google_sheet_20250923_152539.xlsx'
    ]
    
    normalizer = TableNormalizer()
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò –ù–ê –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –¢–ê–ë–õ–ò–¶–ê–•")
    print("=" * 90)
    
    results = []
    
    for i, file_path in enumerate(test_files, 1):
        if not os.path.exists(file_path):
            logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue
            
        print(f"\nüìä –¢–ï–°–¢ {i}: {os.path.basename(file_path)}")
        print("-" * 60)
        
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É
            normalized_path = normalizer.normalize_table(file_path)
            
            if normalized_path:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = analyze_normalized_table(normalized_path, file_path)
                results.append({
                    'original': file_path,
                    'normalized': normalized_path,
                    'result': result
                })
                
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ ‚Üí {normalized_path}")
                print_result_summary(result)
                
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏")
                results.append({
                    'original': file_path,
                    'normalized': None,
                    'result': None
                })
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ {file_path}: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –û–±—â–∏–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 90)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò")
    print("=" * 90)
    
    successful = sum(1 for r in results if r['result'] is not None)
    total = len(results)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {successful}/{total} —Ç–∞–±–ª–∏—Ü")
    
    if successful > 0:
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –£–°–ü–ï–®–ù–´–ú –¢–ê–ë–õ–ò–¶–ê–ú:")
        
        total_rows = sum(r['result']['data_rows'] for r in results if r['result'])
        total_columns = sum(r['result']['normalized_columns'] for r in results if r['result'])
        
        print(f"   ‚Ä¢ –û–±—â–∏—Ö —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {total_rows}")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: {total_columns/successful:.1f}")
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        all_routes = []
        for r in results:
            if r['result'] and r['result']['routes']:
                all_routes.extend(r['result']['routes'])
        
        if all_routes:
            from collections import Counter
            route_counts = Counter(all_routes)
            print(f"\nüöö –ù–ê–ô–î–ï–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´:")
            for route, count in route_counts.most_common():
                print(f"   ‚Ä¢ {route}: {count} —Ç–∞–±–ª–∏—Ü")
    
    return results

def analyze_normalized_table(normalized_path, original_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    try:
        import openpyxl
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        wb_norm = openpyxl.load_workbook(normalized_path, data_only=True)
        ws_norm = wb_norm.active
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        headers = []
        for col in range(1, ws_norm.max_column + 1):
            header = ws_norm.cell(row=2, column=col).value
            if header:
                headers.append(str(header).strip())
        
        # –°—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data_rows = 0
        for row in range(3, ws_norm.max_row + 1):
            has_data = False
            for col in range(1, min(6, ws_norm.max_column + 1)):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–æ–ª–æ–Ω–æ–∫
                if ws_norm.cell(row=row, column=col).value:
                    has_data = True
                    break
            if has_data:
                data_rows += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        routes = []
        for header in headers:
            if '–ê–í–ò–ê' in header:
                routes.append('–ê–í–ò–ê')
            elif '–ñ–î' in header:
                routes.append('–ñ–î')
            elif '–û–ë–†–ê–ó–ï–¶' in header:
                routes.append('–û–ë–†–ê–ó–ï–¶')
        
        routes = list(set(routes))  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        has_names = any('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in h for h in headers)
        has_prices = any('–¶–µ–Ω–∞' in h for h in headers)
        has_quantities = any('–¢–∏—Ä–∞–∂' in h for h in headers)
        
        wb_norm.close()
        
        return {
            'normalized_columns': len(headers),
            'data_rows': data_rows,
            'routes': routes,
            'has_names': has_names,
            'has_prices': has_prices,
            'has_quantities': has_quantities,
            'headers': headers[:10]  # –ü–µ—Ä–≤—ã–µ 10 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {normalized_path}: {e}")
        return None

def print_result_summary(result):
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    
    if not result:
        return
        
    print(f"   üìà –ö–æ–ª–æ–Ω–æ–∫: {result['normalized_columns']}")
    print(f"   üìä –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {result['data_rows']}")
    
    if result['routes']:
        print(f"   üöö –ú–∞—Ä—à—Ä—É—Ç—ã: {', '.join(result['routes'])}")
    
    quality_scores = []
    if result['has_names']:
        quality_scores.append("–ù–∞–∑–≤–∞–Ω–∏—è ‚úÖ")
    if result['has_prices']: 
        quality_scores.append("–¶–µ–Ω—ã ‚úÖ")
    if result['has_quantities']:
        quality_scores.append("–¢–∏—Ä–∞–∂–∏ ‚úÖ")
        
    if quality_scores:
        print(f"   üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {' | '.join(quality_scores)}")

if __name__ == "__main__":
    test_multiple_tables()
