#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ë–î –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–Ω–≥–æ–º –∏–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
"""

import os
import sys
import json
import logging
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.manager_v4 import CommercialProposalsDB
from database.models_v4 import Product, PriceOffer, ProductImage, SheetMetadata

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def backup_current_data():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ë–î"""
    
    print("üíæ –°–û–ó–î–ê–ù–ò–ï –ë–≠–ö–ê–ü–ê –¢–ï–ö–£–©–ò–• –î–ê–ù–ù–´–• –ë–î")
    print("=" * 80)
    
    from config import DATABASE_URL_V4
    db_manager = CommercialProposalsDB(DATABASE_URL_V4)
    session = db_manager.get_session()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        backup_dir = Path("backups")
        backup_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = backup_dir / f"db_backup_before_normalized_parsing_{timestamp}.json"
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        backup_data = {
            'timestamp': timestamp,
            'description': 'Backup before parsing from normalized tables',
            'statistics': {},
            'products': [],
            'price_offers': [],
            'product_images': [],
            'sheet_metadata': []
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        products_count = session.query(Product).count()
        price_offers_count = session.query(PriceOffer).count()
        images_count = session.query(ProductImage).count()
        sheets_count = session.query(SheetMetadata).count()
        
        backup_data['statistics'] = {
            'products': products_count,
            'price_offers': price_offers_count,
            'product_images': images_count,
            'sheet_metadata': sheets_count
        }
        
        print(f"üìä –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {products_count}")
        print(f"   ‚Ä¢ –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ü–µ–Ω: {price_offers_count}")
        print(f"   ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_count}")
        print(f"   ‚Ä¢ –¢–∞–±–ª–∏—Ü: {sheets_count}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã
        print("\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã...")
        products = session.query(Product).all()
        for product in products:
            backup_data['products'].append({
                'id': product.id,
                'name': product.name,
                'description': product.description,
                'characteristics': product.characteristics,
                'custom_design': product.custom_design,
                'sheet_id': product.sheet_id,
                'row_number': getattr(product, 'row_number', None),
                'created_at': product.created_at.isoformat() if product.created_at else None,
                'updated_at': product.updated_at.isoformat() if product.updated_at else None
            })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω
        print("üí∞ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω...")
        price_offers = session.query(PriceOffer).all()
        for offer in price_offers:
            backup_data['price_offers'].append({
                'id': offer.id,
                'product_id': offer.product_id,
                'route_name': offer.route_name,
                'quantity': offer.quantity,
                'price_usd': offer.price_usd,
                'price_rub': offer.price_rub,
                'delivery_time': offer.delivery_time,
                'is_available': offer.is_available,
                'is_sample': offer.is_sample,
                'sample_price': offer.sample_price,
                'sample_time': offer.sample_time,
                'sample_price_currency': offer.sample_price_currency,
                'notes': offer.notes,
                'created_at': offer.created_at.isoformat() if offer.created_at else None,
                'updated_at': offer.updated_at.isoformat() if offer.updated_at else None
            })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print("üñºÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        images = session.query(ProductImage).all()
        for image in images:
            backup_data['product_images'].append({
                'id': image.id,
                'product_id': image.product_id,
                'sheet_id': image.sheet_id,
                'local_path': image.local_path,
                'image_type': image.image_type,
                'width': image.width,
                'height': image.height,
                'row': image.row,
                'column': image.column,
                'created_at': image.created_at.isoformat() if image.created_at else None
            })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü
        print("üìã –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü...")
        sheets = session.query(SheetMetadata).all()
        for sheet in sheets:
            backup_data['sheet_metadata'].append({
                'id': sheet.id,
                'sheet_title': sheet.sheet_title,
                'sheet_id': sheet.sheet_id,
                'status': sheet.status,
                'products_count': sheet.products_count,
                'local_file_path': sheet.local_file_path,
                'created_at': sheet.created_at.isoformat() if sheet.created_at else None
            })
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±—ç–∫–∞–ø
        with open(backup_file, 'w', encoding='utf-8') as f:
            json.dump(backup_data, f, ensure_ascii=False, indent=2)
        
        print(f"\n‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_file}")
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {backup_file.stat().st_size / 1024 / 1024:.1f} MB")
        
        return str(backup_file)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        return None
        
    finally:
        session.close()

def create_summary_report():
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ë–î"""
    
    print("\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –¢–ï–ö–£–©–ï–ú –°–û–°–¢–û–Ø–ù–ò–ò:")
    print("-" * 60)
    
    from config import DATABASE_URL_V4
    db_manager = CommercialProposalsDB(DATABASE_URL_V4)
    session = db_manager.get_session()
    
    try:
        # –¢–æ–≤–∞—Ä—ã –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
        from sqlalchemy import func
        
        sheets_stats = session.query(
            SheetMetadata.original_filename,
            func.count(Product.id).label('products_count'),
            func.count(PriceOffer.id).label('price_offers_count')
        ).outerjoin(Product).outerjoin(PriceOffer).group_by(SheetMetadata.id).limit(10).all()
        
        print("üìã –ü–µ—Ä–≤—ã–µ 10 —Ç–∞–±–ª–∏—Ü:")
        for sheet_name, products, prices in sheets_stats:
            print(f"   ‚Ä¢ {sheet_name[:50]:<50} | {products:3} —Ç–æ–≤–∞—Ä–æ–≤ | {prices:3} —Ü–µ–Ω")
        
        # –¢–æ–≤–∞—Ä—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        products_with_multiple_prices = session.query(
            Product.name,
            func.count(PriceOffer.id).label('price_count')
        ).join(PriceOffer).group_by(Product.id).having(func.count(PriceOffer.id) > 1).limit(5).all()
        
        if products_with_multiple_prices:
            print(f"\nüí∞ –¢–æ–≤–∞—Ä—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ü–µ–Ω:")
            for product_name, price_count in products_with_multiple_prices:
                print(f"   ‚Ä¢ {product_name[:40]:<40} | {price_count} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        
        # –¢–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        products_with_images = session.query(
            Product.name,
            func.count(ProductImage.id).label('images_count')
        ).join(ProductImage).group_by(Product.id).limit(5).all()
        
        if products_with_images:
            print(f"\nüñºÔ∏è –¢–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:")
            for product_name, images_count in products_with_images:
                print(f"   ‚Ä¢ {product_name[:40]:<40} | {images_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        
    finally:
        session.close()

if __name__ == "__main__":
    
    print("üéØ –ü–û–î–ì–û–¢–û–í–ö–ê –ö –ü–ï–†–ï–ü–ê–†–°–ò–ù–ì–£ –ò–ó –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–• –¢–ê–ë–õ–ò–¶")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    backup_file = backup_current_data()
    
    if backup_file:
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        create_summary_report()
        
        print(f"\n‚úÖ –ë–≠–ö–ê–ü –ì–û–¢–û–í!")
        print(f"üìÅ –§–∞–π–ª: {backup_file}")
        print(f"üîÑ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–ø–∞—Ä—Å–∏—Ç—å –ë–î –∏–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü")
    else:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ë–≠–ö–ê–ü–ê!")
        print(f"‚ö†Ô∏è –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –±–µ–∑ –±—ç–∫–∞–ø–∞")
