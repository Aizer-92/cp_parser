#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –ø–∞—Ä—Å–∏–Ω–≥–∞ - –ø–æ—á–µ–º—É –∏–∑ 145 —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ç–æ–ª—å–∫–æ 19 —Ç–æ–≤–∞—Ä–æ–≤
"""

import os
from pathlib import Path
import pandas as pd
from openpyxl import load_workbook
from database.manager_v4 import DatabaseManager
from database.models_v4 import SheetMetadata, Product
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def analyze_parsing_problems():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –ü–ê–†–°–ò–ù–ì–ê")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    storage_path = Path("storage/excel_files")
    all_files = list(storage_path.glob("*.xlsx"))
    non_empty_files = [f for f in all_files if f.stat().st_size > 0]
    
    print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(all_files)}")
    print(f"üìÅ –ù–µ–ø—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(non_empty_files)}")
    print(f"üìÅ –ü—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(all_files) - len(non_empty_files)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
    session = DatabaseManager.get_session()
    try:
        total_sheets = session.query(SheetMetadata).count()
        completed_sheets = session.query(SheetMetadata).filter(
            SheetMetadata.status == 'completed'
        ).count()
        downloaded_sheets = session.query(SheetMetadata).filter(
            SheetMetadata.local_file_path.isnot(None)
        ).count()
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–î:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π SheetMetadata: {total_sheets}")
        print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_sheets}")
        print(f"   –° –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏: {downloaded_sheets}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
        total_products = session.query(Product).count()
        print(f"   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –¢–ê–ë–õ–ò–¶:")
        recent_sheets = session.query(SheetMetadata).filter(
            SheetMetadata.local_file_path.isnot(None)
        ).order_by(SheetMetadata.id.desc()).limit(20).all()
        
        for i, sheet in enumerate(recent_sheets, 1):
            file_path = Path(sheet.local_file_path)
            exists = file_path.exists() if file_path else False
            size = file_path.stat().st_size if exists else 0
            
            print(f"   {i:2d}. {sheet.sheet_title[:50]:<50} "
                  f"| {sheet.status:<10} | {size:>8} bytes")
            
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
            if exists and size > 0:
                try:
                    wb = load_workbook(file_path, read_only=True)
                    sheets_count = len(wb.sheetnames)
                    first_sheet = wb[wb.sheetnames[0]]
                    rows_count = first_sheet.max_row
                    cols_count = first_sheet.max_column
                    
                    print(f"       ‚îî‚îÄ –õ–∏—Å—Ç–æ–≤: {sheets_count}, –°—Ç—Ä–æ–∫: {rows_count}, –ö–æ–ª–æ–Ω–æ–∫: {cols_count}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
                    sample_data = []
                    for row in range(1, min(6, rows_count + 1)):
                        row_data = []
                        for col in range(1, min(6, cols_count + 1)):
                            cell_value = first_sheet.cell(row=row, column=col).value
                            if cell_value:
                                row_data.append(str(cell_value)[:20])
                        if row_data:
                            sample_data.append(" | ".join(row_data))
                    
                    if sample_data:
                        print(f"       ‚îî‚îÄ –û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö:")
                        for j, row_data in enumerate(sample_data[:3], 1):
                            print(f"          {j}: {row_data}")
                    
                    wb.close()
                    
                except Exception as e:
                    print(f"       ‚îî‚îÄ ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
    
    finally:
        session.close()
    
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print(f"   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á–µ–º—É –º–Ω–æ–≥–∏–µ —Ñ–∞–π–ª—ã –ø—É—Å—Ç—ã–µ (0 bytes)")
    print(f"   2. –ò–∑—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É CSV —Ñ–∞–π–ª–æ–≤ –æ—Ç AdvancedDownloader") 
    print(f"   3. –£–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü")
    print(f"   4. –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞")

if __name__ == "__main__":
    analyze_parsing_problems()


