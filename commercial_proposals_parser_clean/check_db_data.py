#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.manager_v4 import CommercialProposalsDB
from database.models_v4 import Product, PriceOffer, ProductImage
from config import DATABASE_URL_V4

def check_database():
    db = CommercialProposalsDB(DATABASE_URL_V4)
    session = db.get_session()
    
    try:
        print("üîç –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –í –ë–î")
        print("=" * 60)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_products = session.query(Product).count()
        total_prices = session.query(PriceOffer).count()
        total_images = session.query(ProductImage).count()
        
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –¢–æ–≤–∞—Ä–æ–≤: {total_products}")
        print(f"   –¶–µ–Ω: {total_prices}")
        print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤
        products = session.query(Product).limit(10).all()
        print("üîç –ü–ï–†–í–´–ï 10 –¢–û–í–ê–†–û–í:")
        print("-" * 60)
        
        for i, product in enumerate(products, 1):
            prices = session.query(PriceOffer).filter_by(product_id=product.id).all()
            images = session.query(ProductImage).filter_by(product_id=product.id).count()
            
            print(f"{i}. ID={product.id} | –ù–∞–∑–≤–∞–Ω–∏–µ: '{product.name}'")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {product.description}")
            print(f"   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {product.characteristics}")
            print(f"   –¶–µ–Ω: {len(prices)} | –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images}")
            
            if prices:
                for price in prices:
                    print(f"   üìà {price.route_name}: {price.quantity} —à—Ç, ${price.price_usd}, {price.price_rub}‚ÇΩ")
            else:
                print("   ‚ö†Ô∏è –ù–µ—Ç —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!")
            print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π
        unique_names = session.query(Product.name).distinct().count()
        print(f"üìä –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ù–ê–ó–í–ê–ù–ò–Ø: {unique_names} –∏–∑ {total_products}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        from sqlalchemy import func
        name_counts = session.query(Product.name, func.count(Product.id).label('count')).group_by(Product.name).order_by(func.count(Product.id).desc()).limit(5).all()
        
        print("\nüî¢ –°–ê–ú–´–ï –ß–ê–°–¢–´–ï –ù–ê–ó–í–ê–ù–ò–Ø:")
        for name, count in name_counts:
            print(f"   '{name}': {count} —Ç–æ–≤–∞—Ä–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        session.close()

if __name__ == "__main__":
    check_database()
