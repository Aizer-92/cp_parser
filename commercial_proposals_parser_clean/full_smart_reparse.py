#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –º–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å —É–º–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
"""

from fix_duplicate_parsing import FixedSmartParser
from database.manager_v4 import DatabaseManager
from database.models_v4 import SheetMetadata, Product, PriceOffer
from pathlib import Path
import time
import logging

logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

def full_smart_reparse():
    """–ü–æ–ª–Ω—ã–π –º–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–Ω–≥ —Å —É–º–Ω—ã–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –£–ú–ù–û–ì–û –ü–ï–†–ï–ü–ê–†–°–ò–ù–ì–ê")
    print("=" * 60)
    
    session = DatabaseManager.get_session()
    parser = FixedSmartParser()
    
    try:
        # 1. –û–ß–ò–°–¢–ö–ê –ë–î (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!)
        print("üßπ –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)...")
        
        products_before = session.query(Product).count()
        prices_before = session.query(PriceOffer).count()
        
        print(f"   –£–¥–∞–ª—è–µ–º {prices_before} —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...")
        session.query(PriceOffer).delete()
        
        print(f"   –£–¥–∞–ª—è–µ–º {products_before} —Ç–æ–≤–∞—Ä–æ–≤...")
        session.query(Product).delete()
        
        session.commit()
        print("   ‚úÖ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞")
        
        # 2. –ü–û–õ–£–ß–ê–ï–ú –°–ü–ò–°–û–ö –¢–ê–ë–õ–ò–¶ –î–õ–Ø –ü–ê–†–°–ò–ù–ì–ê
        sheets = session.query(SheetMetadata).filter(
            SheetMetadata.local_file_path.isnot(None),
            SheetMetadata.local_file_path != ''
        ).all()
        
        print(f"\nüìä –ù–ê–ô–î–ï–ù–û –¢–ê–ë–õ–ò–¶ –î–õ–Ø –ü–ê–†–°–ò–ù–ì–ê: {len(sheets)}")
        
        # 3. –ú–ê–°–°–û–í–´–ô –ü–ê–†–°–ò–ù–ì –° –ê–ù–ê–õ–ò–ó–û–ú –°–¢–†–£–ö–¢–£–†–´
        start_time = time.time()
        results = {
            'success': 0,
            'failed': 0,
            'unknown': 0,
            'errors': []
        }
        
        for i, sheet in enumerate(sheets, 1):
            file_name = Path(sheet.local_file_path).name
            
            print(f"\nüìã [{i}/{len(sheets)}] –ê–ù–ê–õ–ò–ó –ò –ü–ê–†–°–ò–ù–ì: {file_name}")
            print("-" * 50)
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                if not Path(sheet.local_file_path).exists():
                    print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {sheet.local_file_path}")
                    results['failed'] += 1
                    results['errors'].append(f"{file_name}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    continue
                
                # –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –ø–∞—Ä—Å–∏–Ω–≥
                print(f"   üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
                structure = parser.analyzer.analyze_file_structure(sheet.local_file_path)
                
                print(f"   üìä –¢–∏–ø: {structure.table_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {structure.confidence:.2f})")
                print(f"   üìã –ö–æ–ª–æ–Ω–∫–∏: {list(structure.columns.keys())}")
                
                if structure.issues:
                    print(f"   ‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã: {structure.issues[:2]}...")  # –ü–µ—Ä–≤—ã–µ 2 –ø—Ä–æ–±–ª–µ–º—ã
                
                # –ü–∞—Ä—Å–∏–Ω–≥
                print(f"   ü§ñ –£–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥...")
                success = parser.parse_excel_smart(sheet.id)
                
                if success:
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–≤–∞—Ä–∞–º
                    new_products = session.query(Product).filter(Product.sheet_id == sheet.id).count()
                    new_prices = session.query(PriceOffer).join(Product).filter(Product.sheet_id == sheet.id).count()
                    
                    print(f"   ‚úÖ –£–°–ü–ï–®–ù–û: {new_products} —Ç–æ–≤–∞—Ä–æ–≤, {new_prices} —Ü–µ–Ω")
                    results['success'] += 1
                else:
                    print(f"   ‚ùå –û–®–ò–ë–ö–ê: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å–ø–∞—Ä—Å–µ–Ω–∞")
                    results['failed'] += 1
                    results['errors'].append(f"{file_name}: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
                    
            except Exception as e:
                print(f"   üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)[:100]}")
                results['failed'] += 1
                results['errors'].append(f"{file_name}: {str(e)[:50]}")
        
        # 4. –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
        elapsed = time.time() - start_time
        
        print(f"\nüèÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ê–°–°–û–í–û–ì–û –ü–ê–†–°–ò–ù–ì–ê")
        print("=" * 60)
        
        products_after = session.query(Product).count()
        prices_after = session.query(PriceOffer).count()
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {results['success']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {results['failed']}")
        print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {products_after}")
        print(f"üí∞ –¶–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {prices_after}")
        
        if products_after > 0:
            avg_prices = prices_after / products_after
            print(f"üìä –°—Ä–µ–¥–Ω–µ–µ —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä: {avg_prices:.2f}")
        
        success_rate = results['success'] / len(sheets) * 100
        print(f"üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        # 5. –û–¢–ß–ï–¢ –ü–û –ù–ï–û–ü–û–ó–ù–ê–ù–ù–´–ú –¢–ê–ë–õ–ò–¶–ê–ú
        print(f"\nüìö –û–¢–ß–ï–¢ –ü–û –ù–ï–û–ü–û–ó–ù–ê–ù–ù–´–ú –¢–ê–ë–õ–ò–¶–ê–ú:")
        unknown_report = parser.get_unknown_tables_report()
        print(unknown_report)
        
        # 6. –¢–û–ü –û–®–ò–ë–û–ö
        if results['errors']:
            print(f"\n‚ùå –¢–ò–ü–ò–ß–ù–´–ï –û–®–ò–ë–ö–ò:")
            for error in results['errors'][:5]:  # –ü–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                print(f"   ‚Ä¢ {error}")
        
        return results
        
    finally:
        session.close()

if __name__ == "__main__":
    results = full_smart_reparse()
    
    print(f"\nüéâ –ú–ê–°–°–û–í–´–ô –ü–ï–†–ï–ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
    print(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {results['success']} —Ç–∞–±–ª–∏—Ü")
    print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {results['failed']} —Ç–∞–±–ª–∏—Ü")

