#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ª–∏–Ω–∫–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ sheet_id
"""

import os
import sys
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.manager_v4 import DatabaseManager
from database.models_v4 import Product, ProductImage, SheetMetadata

class ImprovedImageLinker:
    def __init__(self):
        self.db = DatabaseManager
        self.setup_logging()
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)

    def link_images_by_text_sheet_id(self):
        """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º sheet_id"""
        self.logger.info("üîó –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ù–û–ô –ü–†–ò–í–Ø–ó–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
        self.logger.info("=" * 60)
        
        session = self.db.get_session()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
            products = session.query(Product).all()
            self.logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º
            unlinked_images = session.query(ProductImage).filter_by(product_id=None).all()
            self.logger.info(f"üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏: {len(unlinked_images)}")
            
            linked_count = 0
            main_images_linked = 0
            additional_images_linked = 0
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ sheet_id (—Ç–µ–∫—Å—Ç–æ–≤–æ–º—É)
            products_by_sheet = {}
            for product in products:
                # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                sheet_meta = session.query(SheetMetadata).filter_by(id=product.sheet_id).first()
                if sheet_meta:
                    sheet_text_id = sheet_meta.sheet_id
                    if sheet_text_id not in products_by_sheet:
                        products_by_sheet[sheet_text_id] = []
                    products_by_sheet[sheet_text_id].append(product)
            
            self.logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏: {len(products_by_sheet)}")
            
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for image in unlinked_images:
                if not image.original_sheet_id:
                    continue
                
                # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–æ–≥–æ –∂–µ –ª–∏—Å—Ç–∞
                if image.original_sheet_id in products_by_sheet:
                    # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ
                    matching_products = [
                        p for p in products_by_sheet[image.original_sheet_id] 
                        if p.start_row == image.row
                    ]
                    
                    if matching_products:
                        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ø–µ—Ä–≤–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É
                        product = matching_products[0]
                        image.product_id = product.id
                        linked_count += 1
                        
                        if image.image_type == 'main':
                            main_images_linked += 1
                        else:
                            additional_images_linked += 1
                        
                        self.logger.debug(f"üîó –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {os.path.basename(image.local_path)} –∫ —Ç–æ–≤–∞—Ä—É '{product.name}'")
                    else:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π —Ç–æ–≤–∞—Ä –≤—ã—à–µ –≤ —Ç–æ–º –∂–µ –ª–∏—Å—Ç–µ
                        above_products = [
                            p for p in products_by_sheet[image.original_sheet_id] 
                            if p.start_row < image.row
                        ]
                        if above_products:
                            # –ë–µ—Ä–µ–º —Ç–æ–≤–∞—Ä —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–±–ª–∏–∂–∞–π—à–∏–π —Å–≤–µ—Ä—Ö—É)
                            closest_product = max(above_products, key=lambda p: p.start_row)
                            image.product_id = closest_product.id
                            linked_count += 1
                            
                            if image.image_type == 'main':
                                main_images_linked += 1
                            else:
                                additional_images_linked += 1
                            
                            self.logger.debug(f"üîó –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {os.path.basename(image.local_path)} –∫ –±–ª–∏–∂–∞–π—à–µ–º—É —Ç–æ–≤–∞—Ä—É '{closest_product.name}' (—Å—Ç—Ä–æ–∫–∞ {closest_product.start_row})")
            
            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            session.commit()
            
            self.logger.info("=" * 60)
            self.logger.info("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–õ–£–ß–®–ï–ù–ù–û–ô –ü–†–ò–í–Ø–ó–ö–ò:")
            self.logger.info(f"   üîó –í—Å–µ–≥–æ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {linked_count}")
            self.logger.info(f"   ‚≠ê –ì–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {main_images_linked}")
            self.logger.info(f"   üñºÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {additional_images_linked}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö
            remaining_unlinked = session.query(ProductImage).filter_by(product_id=None).count()
            self.logger.info(f"   üì∑ –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö: {remaining_unlinked}")
            self.logger.info("=" * 60)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            session.rollback()
        finally:
            session.close()

    def show_linking_results(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        session = self.db.get_session()
        
        try:
            self.logger.info("üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            self.logger.info("-" * 50)
            
            # –¢–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            products_with_images = session.query(Product).join(ProductImage).distinct().count()
            total_products = session.query(Product).count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
            total_images = session.query(ProductImage).filter(ProductImage.product_id.isnot(None)).count()
            main_images = session.query(ProductImage).filter(ProductImage.image_type == 'main', ProductImage.product_id.isnot(None)).count()
            additional_images = session.query(ProductImage).filter(ProductImage.image_type == 'additional', ProductImage.product_id.isnot(None)).count()
            unlinked_images = session.query(ProductImage).filter_by(product_id=None).count()
            
            self.logger.info(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {products_with_images} –∏–∑ {total_products} ({products_with_images/total_products*100:.1f}%)")
            self.logger.info(f"üì∑ –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
            self.logger.info(f"‚≠ê –ì–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {main_images}")
            self.logger.info(f"üñºÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {additional_images}")
            self.logger.info(f"‚ùå –ù–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {unlinked_images}")
            
            if products_with_images > 0:
                avg_images = total_images / products_with_images
                self.logger.info(f"üìä –°—Ä–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Ç–æ–≤–∞—Ä: {avg_images:.1f}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        finally:
            session.close()

    def test_specific_product(self, product_id):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        session = self.db.get_session()
        
        try:
            product = session.query(Product).filter_by(id=product_id).first()
            if not product:
                self.logger.error(f"‚ùå –¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            self.logger.info(f"üîç –¢–ï–°–¢ –¢–û–í–ê–†–ê ID {product_id}:")
            self.logger.info(f"   üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}")
            self.logger.info(f"   üìä –°—Ç—Ä–æ–∫–∞: {product.start_row}")
            self.logger.info(f"   üÜî Sheet ID: {product.sheet_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞
            sheet_meta = session.query(SheetMetadata).filter_by(id=product.sheet_id).first()
            if sheet_meta:
                self.logger.info(f"   üìã –õ–∏—Å—Ç: {sheet_meta.sheet_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = session.query(ProductImage).filter_by(product_id=product.id).all()
            self.logger.info(f"   üì∑ –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
            
            for img in images:
                self.logger.info(f"      - {os.path.basename(img.local_path)} ({img.image_type})")
                self.logger.info(f"        Original sheet_id: {img.original_sheet_id}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        finally:
            session.close()

if __name__ == "__main__":
    linker = ImprovedImageLinker()
    linker.link_images_by_text_sheet_id()
    linker.show_linking_results()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä ID 229
    print()
    linker.test_specific_product(229)


