#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–∞–≥–æ–≤ –≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
"""

from pathlib import Path
import sys
sys.path.append(str(Path(__file__).parent))

def fix_enhanced_parser_price_extraction():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–∞–≥–∏ –≤ EnhancedParser"""
    
    parser_file = Path("scripts/complete_parsing_pipeline_v5.py")
    content = parser_file.read_text(encoding='utf-8')
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω
    old_code = '''    def extract_price_variants_enhanced(self, worksheet, columns: Dict[str, int], start_row: int, end_row: int, data: Dict[str, Any]):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ü–µ–Ω"""
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ü–µ–Ω–∞–º–∏
        for row in range(start_row, end_row + 1):
            price_data = {}
            
            # –¢–∏—Ä–∞–∂
            if 'quantity' in columns:
                qty_value = worksheet.cell(row=row, column=columns['quantity']).value
                qty = self.validate_quantity_enhanced(qty_value)
                if qty:
                    price_data['quantity'] = qty
            
            # –¶–µ–Ω–∞ –≤ USD
            if 'price_usd' in columns:
                price_value = worksheet.cell(row=row, column=columns['price_usd']).value
                price = self.validate_price_enhanced(price_value)
                if price:
                    price_data['price_usd'] = price
            
            # –¶–µ–Ω–∞ –≤ RUB  
            if 'price_rub' in columns:
                price_value = worksheet.cell(row=row, column=columns['price_rub']).value
                price = self.validate_price_enhanced(price_value)
                if price:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD (—Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å 1 USD ‚âà 95 RUB)
                    price_data['price_usd'] = round(price / 95, 2)
                    logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Ü–µ–Ω–∞: {price} RUB ‚Üí ${price_data['price_usd']} USD")
            
            # –¶–µ–Ω–∞ –≤ AED (—Ç—Ä–∞–∫—Ç—É–µ—Ç—Å—è –∫–∞–∫ USD - –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –∑–Ω–∞–∫ $ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è AED)'''

    new_code = '''    def extract_price_variants_enhanced(self, worksheet, columns: Dict[str, int], start_row: int, end_row: int, data: Dict[str, Any]):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ü–µ–Ω - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
        
        # –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ç–æ–≤–∞—Ä–∞ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        for row in range(start_row, end_row + 1):
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏—Ä–∞–∂ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
            quantity = None
            if 'quantity' in columns:
                qty_value = worksheet.cell(row=row, column=columns['quantity']).value
                quantity = self.validate_quantity_enhanced(qty_value)
            
            if not quantity:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Ç–∏—Ä–∞–∂–∞
                continue
            
            # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç –û–¢–î–ï–õ–¨–ù–û
            variants = []
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: USD —Ü–µ–Ω–∞
            if 'price_usd' in columns:
                price_value = worksheet.cell(row=row, column=columns['price_usd']).value
                price_usd = self.validate_price_enhanced(price_value)
                if price_usd:
                    usd_variant = {
                        'quantity': quantity,
                        'price_usd': price_usd,
                        'price_rub': None,
                        'currency': 'USD',
                        'route': '–°—Ç–∞–Ω–¥–∞—Ä—Ç'
                    }
                    variants.append(usd_variant)
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: RUB —Ü–µ–Ω–∞ (–æ—Ç–¥–µ–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!)
            if 'price_rub' in columns:
                price_value = worksheet.cell(row=row, column=columns['price_rub']).value
                price_rub = self.validate_price_enhanced(price_value)
                if price_rub:
                    rub_variant = {
                        'quantity': quantity,
                        'price_usd': round(price_rub / 95, 2),  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ë–î
                        'price_rub': price_rub,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                        'currency': 'RUB', 
                        'route': '–°—Ç–∞–Ω–¥–∞—Ä—Ç',
                        'notes': f'–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price_rub} RUB'
                    }
                    variants.append(rub_variant)
                    logger.info(f"RUB —Ü–µ–Ω–∞: {price_rub} ‚ÇΩ = ${rub_variant['price_usd']} (—Ç–∏—Ä–∞–∂ {quantity})")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: AED —Ü–µ–Ω–∞ (—Ç—Ä–∞–∫—Ç—É–µ—Ç—Å—è –∫–∞–∫ USD)'''

    # –¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    old_save_code = '''            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Ü–µ–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if price_data.get('price_usd'):
                data['prices'].append(price_data)'''

    new_save_code = '''            # –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            data['prices'].extend(variants)'''
    
    if old_code in content and old_save_code in content:
        content = content.replace(old_code, new_code)
        content = content.replace(old_save_code, new_save_code)
        
        parser_file.write_text(content, encoding='utf-8')
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω EnhancedParser - —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è USD –∏ RUB")
        return True
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–¥ –¥–ª—è –∑–∞–º–µ–Ω—ã")
        return False

def fix_price_offer_saving():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    
    parser_file = Path("scripts/complete_parsing_pipeline_v5.py")
    content = parser_file.read_text(encoding='utf-8')
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    old_save_method = '''                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω
                    for price_data in product_data['prices']:
                        price_offer = PriceOffer(
                            product_id=product.id,
                            quantity=price_data['quantity'],
                            price_usd=price_data['price_usd'],
                            route_name=price_data.get('route', '–°—Ç–∞–Ω–¥–∞—Ä—Ç'),
                            delivery_time=price_data.get('delivery_time')
                        )
                        self.session.add(price_offer)'''
    
    new_save_method = '''                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω (–ò–°–ü–†–ê–í–õ–ï–ù–û)
                    for price_data in product_data['prices']:
                        price_offer = PriceOffer(
                            product_id=product.id,
                            quantity=price_data['quantity'],
                            price_usd=price_data['price_usd'],
                            price_rub=price_data.get('price_rub'),  # –î–æ–±–∞–≤–ª–µ–Ω–æ!
                            route_name=price_data.get('route', '–°—Ç–∞–Ω–¥–∞—Ä—Ç'),
                            delivery_time=price_data.get('delivery_time'),
                            notes=price_data.get('notes')  # –î–æ–±–∞–≤–ª–µ–Ω–æ!
                        )
                        self.session.add(price_offer)'''
    
    if old_save_method in content:
        content = content.replace(old_save_method, new_save_method)
        parser_file.write_text(content, encoding='utf-8')
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π - —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç price_rub")
        return True
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã")
        return False

if __name__ == "__main__":
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ë–ê–ì–û–í –í –ò–ó–í–õ–ï–ß–ï–ù–ò–ò –¶–ï–ù")
    print("=" * 70)
    
    success1 = fix_enhanced_parser_price_extraction()
    success2 = fix_price_offer_saving()
    
    if success1 and success2:
        print("\nüéâ –í–°–ï –ë–ê–ì–ò –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        print("   –¢–µ–ø–µ—Ä—å –ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç:")
        print("   ‚úÖ –°–æ–∑–¥–∞–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è USD –∏ RUB")
        print("   ‚úÖ –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ü–µ–Ω—ã")
        print("   ‚úÖ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö")
        print("   ‚úÖ –°–æ–∑–¥–∞–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    else:
        print("\n‚ùå –ù–µ –≤—Å–µ –±–∞–≥–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã, –Ω—É–∂–Ω–∞ —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")


