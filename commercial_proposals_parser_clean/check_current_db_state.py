#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î –ø–µ—Ä–µ–¥ –º–∞—Å—Å–æ–≤—ã–º –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–Ω–≥–æ–º
"""

from database.manager_v4 import DatabaseManager
from database.models_v4 import SheetMetadata, Product, PriceOffer, ProductImage
from sqlalchemy import func
from pathlib import Path

def check_current_state():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î"""
    
    session = DatabaseManager.get_session()
    
    try:
        print("üìä –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 60)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        sheets_total = session.query(SheetMetadata).count()
        sheets_with_files = session.query(SheetMetadata).filter(
            SheetMetadata.local_file_path.isnot(None),
            SheetMetadata.local_file_path != ''
        ).count()
        
        products_total = session.query(Product).count()
        prices_total = session.query(PriceOffer).count()
        images_total = session.query(ProductImage).count()
        
        print(f"üìã –¢–∞–±–ª–∏—Ü –≤—Å–µ–≥–æ: {sheets_total}")
        print(f"üìÅ –¢–∞–±–ª–∏—Ü —Å —Ñ–∞–π–ª–∞–º–∏: {sheets_with_files}")
        print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {products_total}")
        print(f"üí∞ –¶–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {prices_total}")
        print(f"üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_total}")
        
        if products_total > 0:
            avg_prices = prices_total / products_total
            print(f"üìä –°—Ä–µ–¥–Ω–µ–µ —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä: {avg_prices:.2f}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º –≤ –≤–∞–ª—é—Ç–∞—Ö
        usd_prices = session.query(PriceOffer).filter(
            PriceOffer.price_usd.isnot(None),
            PriceOffer.price_usd > 0
        ).count()
        
        rub_prices = session.query(PriceOffer).filter(
            PriceOffer.price_rub.isnot(None),
            PriceOffer.price_rub > 0
        ).count()
        
        print(f"üíµ –¶–µ–Ω—ã –≤ USD: {usd_prices}")
        print(f"üí∑ –¶–µ–Ω—ã –≤ RUB: {rub_prices}")
        
        # –¢–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        products_with_images = session.query(Product).join(ProductImage).distinct().count()
        if products_total > 0:
            image_coverage = products_with_images / products_total * 100
            print(f"üñºÔ∏è  –¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {products_with_images} ({image_coverage:.1f}%)")
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        unnamed_products = session.query(Product).filter(
            Product.name.like('%Unnamed%')
        ).count()
        
        if unnamed_products > 0:
            print(f"‚ùå –¢–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏: {unnamed_products}")
        
        # –¢–æ–ø-5 —Ç–∞–±–ª–∏—Ü –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤
        print(f"\nüèÜ –¢–û–ü-5 –¢–ê–ë–õ–ò–¶ –ü–û –¢–û–í–ê–†–ê–ú:")
        top_sheets = session.query(
            SheetMetadata.sheet_title,
            func.count(Product.id).label('products_count')
        ).join(Product).group_by(SheetMetadata.id, SheetMetadata.sheet_title).order_by(
            func.count(Product.id).desc()
        ).limit(5).all()
        
        for i, (title, count) in enumerate(top_sheets, 1):
            print(f"   {i}. {title}: {count} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –§–∞–π–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        print(f"\nüìÅ –§–ê–ô–õ–´ –î–õ–Ø –ü–ê–†–°–ò–ù–ì–ê:")
        parseable_sheets = session.query(SheetMetadata).filter(
            SheetMetadata.local_file_path.isnot(None),
            SheetMetadata.local_file_path != ''
        ).all()
        
        existing_files = 0
        missing_files = 0
        
        for sheet in parseable_sheets:
            if Path(sheet.local_file_path).exists():
                existing_files += 1
            else:
                missing_files += 1
                print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {Path(sheet.local_file_path).name}")
        
        print(f"   ‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {existing_files}")
        print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {missing_files}")
        
    finally:
        session.close()

if __name__ == "__main__":
    check_current_state()

