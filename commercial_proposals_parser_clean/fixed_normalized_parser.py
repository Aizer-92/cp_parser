#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–∞—Ä—Å–µ—Ä –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü - —á–∏—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
"""

import os
import sys
import json
import logging
import openpyxl
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Optional, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.manager_v4 import CommercialProposalsDB
from database.models_v4 import Product, PriceOffer, ProductImage, SheetMetadata
from config import DATABASE_URL_V4

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class FixedNormalizedParser:
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–∞—Ä—Å–µ—Ä –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —á—Ç–µ–Ω–∏–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    
    def __init__(self):
        self.db = CommercialProposalsDB(DATABASE_URL_V4)
    
    def parse_normalized_table(self, file_path: str, metadata_path: str) -> Tuple[int, int]:
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É"""
        
        logger.info(f"üìã –ü–∞—Ä—Å–∏–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É: {Path(file_path).name}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        try:
            with open(metadata_path, 'r', encoding='utf-8') as f:
                metadata = json.load(f)
        except:
            metadata = {}
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        wb = openpyxl.load_workbook(file_path, data_only=True)
        ws = wb.active
        
        session = self.db.get_session()
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º SheetMetadata
            sheet_metadata = self._get_or_create_sheet_metadata(file_path, metadata, session)
            
            # –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò —á–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ 2
            column_mapping = self._read_headers(ws)
            
            if not column_mapping:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ {file_path}")
                return 0, 0
                
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: {len(column_mapping)}")
            
            products_count = 0
            price_offers_count = 0
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å 3-–π —Å—Ç—Ä–æ–∫–∏
            for row in range(3, ws.max_row + 1):
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
                product_data = self._extract_product_data(ws, row, column_mapping)
                
                if not product_data['name']:
                    continue
                
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
                product = Product(
                    name=product_data['name'],
                    description=product_data['description'],
                    characteristics=product_data['characteristics'],
                    custom_design=product_data['custom_design'],
                    sheet_id=sheet_metadata.id
                )
                
                session.add(product)
                session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
                
                products_count += 1
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
                price_offers = self._extract_price_offers(ws, row, product.id, column_mapping)
                
                for offer in price_offers:
                    session.add(offer)
                    price_offers_count += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            session.commit()
            wb.close()
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {products_count} —Ç–æ–≤–∞—Ä–æ–≤, {price_offers_count} —Ü–µ–Ω")
            return products_count, price_offers_count
            
        except Exception as e:
            session.rollback()
            wb.close()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {file_path}: {e}")
            return 0, 0
            
        finally:
            session.close()
    
    def _read_headers(self, ws) -> Dict[str, int]:
        """–î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò —á–∏—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ 2 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–µ->–∫–æ–ª–æ–Ω–∫–∞"""
        
        column_mapping = {}
        
        # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ 2
        for col in range(1, ws.max_column + 1):
            header_value = ws.cell(row=2, column=col).value
            
            if header_value:
                header = str(header_value).strip()
                
                # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                field_name = self._classify_header(header)
                if field_name:
                    column_mapping[field_name] = col
        
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {column_mapping}")
        return column_mapping
    
    def _classify_header(self, header: str) -> Optional[str]:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è"""
        
        header_lower = header.lower()
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞
        if '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in header_lower or header_lower == 'name':
            return 'name'
        elif '–∞—Ä—Ç–∏–∫—É–ª' in header_lower or header_lower == 'article':
            return 'article'
        elif '–æ–ø–∏—Å–∞–Ω–∏–µ' in header_lower or header_lower == 'description':
            return 'description'
        elif '–º–∞—Ç–µ—Ä–∏–∞–ª' in header_lower or header_lower == 'material':
            return 'material'
        elif '—Ä–∞–∑–º–µ—Ä' in header_lower or header_lower == 'size':
            return 'size'
        elif '—Ü–≤–µ—Ç' in header_lower or header_lower == 'color':
            return 'color'
        elif '—É–ø–∞–∫–æ–≤–∫–∞' in header_lower or header_lower == 'packaging':
            return 'packaging'
        
        # –ü–æ–ª—è –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–ê–í–ò–ê, –ñ–î, –û–ë–†–ê–ó–ï–¶)
        elif '–∞–≤–∏–∞' in header_lower and '—Ç–∏—Ä–∞–∂' in header_lower:
            return 'quantity_avia'
        elif '–∞–≤–∏–∞' in header_lower and ('—Ü–µ–Ω–∞' in header_lower and '$' in header):
            return 'price_avia_usd'
        elif '–∞–≤–∏–∞' in header_lower and ('—Ü–µ–Ω–∞' in header_lower and '‚ÇΩ' in header):
            return 'price_avia_rub'
        elif '–∞–≤–∏–∞' in header_lower and '—Å—Ä–æ–∫' in header_lower:
            return 'delivery_avia'
            
        elif '–∂–¥' in header_lower and '—Ç–∏—Ä–∞–∂' in header_lower:
            return 'quantity_jd'
        elif '–∂–¥' in header_lower and ('—Ü–µ–Ω–∞' in header_lower and '$' in header):
            return 'price_jd_usd'
        elif '–∂–¥' in header_lower and ('—Ü–µ–Ω–∞' in header_lower and '‚ÇΩ' in header):
            return 'price_jd_rub'
        elif '–∂–¥' in header_lower and '—Å—Ä–æ–∫' in header_lower:
            return 'delivery_jd'
            
        elif '–æ–±—Ä–∞–∑–µ—Ü' in header_lower and '—Ç–∏—Ä–∞–∂' in header_lower:
            return 'quantity_sample'
        elif '–æ–±—Ä–∞–∑–µ—Ü' in header_lower and ('—Ü–µ–Ω–∞' in header_lower and '$' in header):
            return 'price_sample_usd'
        elif '–æ–±—Ä–∞–∑–µ—Ü' in header_lower and ('—Ü–µ–Ω–∞' in header_lower and '‚ÇΩ' in header):
            return 'price_sample_rub'
        elif '–æ–±—Ä–∞–∑–µ—Ü' in header_lower and '—Å—Ä–æ–∫' in header_lower:
            return 'delivery_sample'
        
        return None
    
    def _extract_product_data(self, ws, row: int, column_mapping: Dict[str, int]) -> Dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        
        def get_cell_value(field_name: str) -> Optional[str]:
            if field_name in column_mapping:
                col = column_mapping[field_name]
                value = ws.cell(row=row, column=col).value
                return str(value).strip() if value else None
            return None
        
        # –°–æ–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        characteristics_parts = []
        for field in ['material', 'size', 'color', 'packaging']:
            value = get_cell_value(field)
            if value:
                characteristics_parts.append(f"{field.title()}: {value}")
        
        characteristics = "; ".join(characteristics_parts) if characteristics_parts else None
        
        return {
            'name': get_cell_value('name'),
            'description': get_cell_value('description'),
            'characteristics': characteristics,
            'custom_design': None,  # –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
        }
    
    def _extract_price_offers(self, ws, row: int, product_id: int, column_mapping: Dict[str, int]) -> List[PriceOffer]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
        
        offers = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ä—à—Ä—É—Ç
        routes = [
            ('–ê–í–ò–ê', 'quantity_avia', 'price_avia_usd', 'price_avia_rub', 'delivery_avia'),
            ('–ñ–î', 'quantity_jd', 'price_jd_usd', 'price_jd_rub', 'delivery_jd'), 
            ('–û–ë–†–ê–ó–ï–¶', 'quantity_sample', 'price_sample_usd', 'price_sample_rub', 'delivery_sample')
        ]
        
        for route_name, qty_field, usd_field, rub_field, delivery_field in routes:
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
            quantity = self._get_cell_number(ws, row, column_mapping.get(qty_field))
            price_usd = self._get_cell_number(ws, row, column_mapping.get(usd_field))
            price_rub = self._get_cell_number(ws, row, column_mapping.get(rub_field))
            delivery_time = self._get_cell_text(ws, row, column_mapping.get(delivery_field))
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ
            if quantity or price_usd or price_rub:
                
                offer = PriceOffer(
                    product_id=product_id,
                    route_name=route_name,
                    quantity=int(quantity) if quantity else None,
                    price_usd=float(price_usd) if price_usd else None,
                    price_rub=float(price_rub) if price_rub else None,
                    delivery_time=delivery_time,
                    is_sample=(route_name == '–û–ë–†–ê–ó–ï–¶'),
                    is_available=True
                )
                
                offers.append(offer)
        
        return offers
    
    def _get_cell_number(self, ws, row: int, col: Optional[int]) -> Optional[float]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ –∏–∑ —è—á–µ–π–∫–∏"""
        
        if not col:
            return None
            
        value = ws.cell(row=row, column=col).value
        
        if value is None:
            return None
        
        if isinstance(value, (int, float)):
            return float(value)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É
        clean_str = str(value).replace(' ', '').replace(',', '.').strip()
        
        # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç
        for symbol in ['$', '‚ÇΩ', '—Ä—É–±', '—à—Ç', 'pcs']:
            clean_str = clean_str.replace(symbol, '')
        
        try:
            return float(clean_str) if clean_str else None
        except:
            return None
    
    def _get_cell_text(self, ws, row: int, col: Optional[int]) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —è—á–µ–π–∫–∏"""
        
        if not col:
            return None
            
        value = ws.cell(row=row, column=col).value
        return str(value).strip() if value else None
    
    def _get_or_create_sheet_metadata(self, file_path: str, metadata: Dict, session) -> SheetMetadata:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç SheetMetadata"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π sheet_id –∏–∑ –ø—É—Ç–∏
        sheet_id_str = Path(file_path).stem.replace('_normalized', '')
        
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        sheet_meta = session.query(SheetMetadata).filter_by(sheet_id=sheet_id_str).first()
        
        if not sheet_meta:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            sheet_meta = SheetMetadata(
                sheet_url=f"file://{file_path}",
                sheet_title=Path(file_path).name,
                sheet_id=sheet_id_str,
                status='normalized_parsed',
                products_count=0,
                local_file_path=file_path
            )
            session.add(sheet_meta)
            session.flush()
        
        return sheet_meta

def clear_all_products():
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –ë–î –æ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–µ–Ω (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è)"""
    
    print("üóëÔ∏è –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ë–î")
    print("=" * 60)
    
    db = CommercialProposalsDB(DATABASE_URL_V4)
    session = db.get_session()
    
    try:
        # –°—á–∏—Ç–∞–µ–º —á—Ç–æ —É–¥–∞–ª—è–µ–º
        products_count = session.query(Product).count()
        prices_count = session.query(PriceOffer).count()
        images_count = session.query(ProductImage).count()
        
        print(f"üìä –ö —É–¥–∞–ª–µ–Ω–∏—é:")
        print(f"   ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {products_count}")
        print(f"   ‚Ä¢ –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ü–µ–Ω: {prices_count}")
        print(f"üñºÔ∏è –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –û–°–¢–ê–Æ–¢–°–Ø: {images_count} (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º)")
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—ã –∏ —Ç–æ–≤–∞—Ä—ã - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ù–ï –¢–†–û–ì–ê–ï–ú!
        session.query(PriceOffer).delete()
        session.query(Product).delete()
        
        session.commit()
        
        print("‚úÖ –ë–î –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!")
        print("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
    except Exception as e:
        session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        raise
        
    finally:
        session.close()

def parse_all_fixed():
    """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú –ø–∞—Ä—Å–µ—Ä–æ–º"""
    
    print("üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–ê–†–°–ò–ù–ì –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–• –¢–ê–ë–õ–ò–¶")
    print("=" * 80)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    excel_dir = Path("storage/excel_files")
    normalized_files = list(excel_dir.glob("*_normalized.xlsx"))
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(normalized_files)}")
    
    parser = FixedNormalizedParser()
    
    total_products = 0
    total_prices = 0
    success_count = 0
    error_count = 0
    
    for i, file_path in enumerate(normalized_files, 1):
        
        # –ò—â–µ–º —Ñ–∞–π–ª –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        metadata_path = str(file_path).replace('_normalized.xlsx', '_normalized_metadata.json')
        
        if not Path(metadata_path).exists():
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è {file_path.name}")
            metadata_path = None
        
        print(f"\nüìã [{i}/{len(normalized_files)}] {file_path.name}")
        
        try:
            products, prices = parser.parse_normalized_table(str(file_path), metadata_path or "")
            
            if products > 0:
                total_products += products
                total_prices += prices
                success_count += 1
                print(f"   ‚úÖ {products} —Ç–æ–≤–∞—Ä–æ–≤, {prices} —Ü–µ–Ω")
            else:
                error_count += 1
                print(f"   ‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞")
                
        except Exception as e:
            error_count += 1
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 25 —Ñ–∞–π–ª–æ–≤
        if i % 25 == 0:
            print(f"   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(normalized_files)} | –¢–æ–≤–∞—Ä–æ–≤: {total_products} | –¶–µ–Ω: {total_prices}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüéØ –ò–¢–û–ì–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê:")
    print("=" * 80)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
    print(f"üìä –¢–æ–≤–∞—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {total_products}")
    print(f"üí∞ –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ü–µ–Ω: {total_prices}")
    print(f"üìã –°—Ä–µ–¥–Ω–µ–µ —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä: {total_prices/total_products:.1f}" if total_products > 0 else "")

if __name__ == "__main__":
    
    print("üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–î")
    print("=" * 80)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("‚ö†Ô∏è –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ë–î –∏–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü? (y/N): ")
    
    if response.lower() in ['y', 'yes', '–¥–∞']:
        
        # 1. –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –ë–î
        clear_all_products()
        
        # 2. –ü–∞—Ä—Å–∏–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú –ø–∞—Ä—Å–µ—Ä–æ–º
        parse_all_fixed()
        
        print(f"\nüéâ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞–ª–∏—Å—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–≤—è–∑–∫–∞–º–∏!")
        
    else:
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
