#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è Excel —Ñ–∞–π–ª–æ–≤ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os
from pathlib import Path
import pandas as pd
from openpyxl import load_workbook
from database.manager_v4 import DatabaseManager
from database.models_v4 import SheetMetadata, Product
import logging
import re

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def analyze_excel_file(file_path):
    """–ê–Ω–∞–ª–∏–∑ Excel —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–∫ Excel
        wb = load_workbook(file_path, read_only=True)
        first_sheet = wb[wb.sheetnames[0]]
        
        if first_sheet.max_row is None:
            return {"products": 0, "error": "Empty sheet"}
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã - —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏—Å–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏
        product_count = 0
        for row in range(1, min(first_sheet.max_row + 1, 100)):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø–µ—Ä–≤—ã–º–∏ 100 —Å—Ç—Ä–æ–∫–∞–º–∏
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–≤—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
            row_data = []
            for col in range(1, min(6, first_sheet.max_column + 1)):
                cell_value = first_sheet.cell(row=row, column=col).value
                if cell_value:
                    row_data.append(str(cell_value).strip())
            
            if row_data:
                # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ —ç—Ç–æ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                row_text = " ".join(row_data).lower()
                if (not any(header in row_text for header in ['manager', '–º–µ–Ω–µ–¥–∂–µ—Ä', 'name', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', 'photo', '—Ñ–æ—Ç–æ', 'email', 'phone']) 
                    and len(row_text) > 5):
                    product_count += 1
        
        wb.close()
        return {"products": max(0, product_count - 2), "error": None}  # -2 –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        
    except Exception as e:
        # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ CSV –µ—Å–ª–∏ Excel –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        try:
            df = pd.read_csv(file_path, encoding='utf-8', sep=None, engine='python')
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
            non_empty_rows = len([row for _, row in df.iterrows() 
                                if row.notna().sum() > 1])  # –°—Ç—Ä–æ–∫–∏ —Å –±–æ–ª–µ–µ —á–µ–º –æ–¥–Ω–∏–º –Ω–µ–ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            return {"products": max(0, non_empty_rows - 1), "error": None}  # -1 –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        except:
            return {"products": 0, "error": str(e)}

def verify_consistency():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è Excel —Ñ–∞–π–ª–æ–≤ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø EXCEL –§–ê–ô–õ–û–í –ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 80)
    
    session = DatabaseManager.get_session()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏
        storage_path = Path("storage/excel_files")
        excel_files = list(storage_path.glob("*.xlsx"))
        excel_files.extend(list(storage_path.glob("*.csv")))
        
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(excel_files)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        file_analysis = {}
        total_products_in_files = 0
        
        for file_path in excel_files:
            if file_path.stat().st_size == 0:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
            
            analysis = analyze_excel_file(file_path)
            file_analysis[file_path.name] = analysis
            total_products_in_files += analysis["products"]
            
            if analysis["error"]:
                logger.warning(f"‚ùå {file_path.name}: {analysis['error']}")
            else:
                logger.info(f"‚úÖ {file_path.name}: {analysis['products']} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        all_sheets = session.query(SheetMetadata).all()
        completed_sheets = session.query(SheetMetadata).filter(SheetMetadata.status == 'completed').all()
        all_products = session.query(Product).all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
        products_by_sheet = {}
        for product in all_products:
            sheet_id = product.sheet_id
            if sheet_id not in products_by_sheet:
                products_by_sheet[sheet_id] = []
            products_by_sheet[sheet_id].append(product)
        
        print(f"\nüìä –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üìÅ –í—Å–µ–≥–æ Excel —Ñ–∞–π–ª–æ–≤: {len([f for f in excel_files if f.stat().st_size > 0])}")
        print(f"   üßÆ –¢–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö (–ø–æ–¥—Å—á–µ—Ç): {total_products_in_files}")
        print(f"   üìë –ó–∞–ø–∏—Å–µ–π SheetMetadata: {len(all_sheets)}")
        print(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(completed_sheets)}")
        print(f"   üõçÔ∏è  –¢–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: {len(all_products)}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ñ–∞–π–ª–∞–º
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –§–ê–ô–õ–ê–ú:")
        print("-" * 80)
        
        matched_files = 0
        unmatched_files = 0
        
        for file_name, analysis in file_analysis.items():
            if analysis["products"] == 0 and analysis["error"]:
                continue
                
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–∞
            matching_sheet = None
            for sheet in all_sheets:
                if sheet.local_file_path and file_name in sheet.local_file_path:
                    matching_sheet = sheet
                    break
            
            if matching_sheet:
                products_in_db = len(products_by_sheet.get(matching_sheet.id, []))
                status_icon = "‚úÖ" if matching_sheet.status == 'completed' else "‚è≥"
                match_icon = "‚úÖ" if products_in_db > 0 else "‚ùå" if analysis["products"] > 0 else "‚≠ï"
                
                print(f"   {match_icon} {status_icon} {file_name[:50]:<50} | –§–∞–π–ª: {analysis['products']:2d} | –ë–î: {products_in_db:2d}")
                
                if products_in_db > 0 or analysis["products"] == 0:
                    matched_files += 1
                else:
                    unmatched_files += 1
            else:
                print(f"   ‚ùì ‚≠ï {file_name[:50]:<50} | –§–∞–π–ª: {analysis['products']:2d} | –ë–î: –Ω–µ—Ç –∑–∞–ø–∏—Å–∏")
                if analysis["products"] > 0:
                    unmatched_files += 1
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
        coverage = (matched_files / max(1, matched_files + unmatched_files)) * 100 if (matched_files + unmatched_files) > 0 else 0
        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {matched_files}")
        print(f"   ‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {unmatched_files}")
        print(f"   üìä –ü–æ–∫—Ä—ã—Ç–∏–µ: {coverage:.1f}%")
        
        if coverage > 90:
            print(f"   üéâ –û—Ç–ª–∏—á–Ω–æ! –ü–æ—á—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        elif coverage > 70:
            print(f"   üëç –•–æ—Ä–æ—à–æ! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        else:
            print(f"   üîß –ù—É–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞: –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if unmatched_files > 0:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print(f"   üì• –ó–∞–ø—É—Å—Ç–∏—Ç—å: python3 parse_existing_tables.py")
            print(f"   üîÑ –ò–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–µ—Ä–µ–ø–∞—Ä—Å–∏—Ç—å")
        
        return {
            "total_files": len(excel_files),
            "products_in_files": total_products_in_files,
            "products_in_db": len(all_products),
            "coverage": coverage,
            "matched_files": matched_files,
            "unmatched_files": unmatched_files
        }
        
    finally:
        session.close()

if __name__ == "__main__":
    verify_consistency()


