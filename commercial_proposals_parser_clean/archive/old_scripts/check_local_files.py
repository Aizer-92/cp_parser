#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö Excel —Ñ–∞–π–ª–æ–≤ –∏ –∏—Ö –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.manager_v4 import DatabaseManager
from database.models_v4 import SheetMetadata, Product, ProductImage

def check_local_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ Excel —Ñ–∞–π–ª—ã –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫—É"""
    print("üìÅ –ü–†–û–í–ï–†–ö–ê –õ–û–ö–ê–õ–¨–ù–´–• EXCEL –§–ê–ô–õ–û–í")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏
    base_dir = Path(__file__).parent.parent
    excel_dir = base_dir / "storage" / "excel_files"
    
    if not excel_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {excel_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Excel —Ñ–∞–π–ª—ã
    excel_files = list(excel_dir.glob("*.xlsx"))
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤: {len(excel_files)}")
    
    session = DatabaseManager.get_session()
    
    try:
        processed_files = []
        unprocessed_files = []
        
        for excel_file in excel_files:
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: {excel_file.name}")
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ SheetMetadata
            relative_path = str(excel_file.relative_to(base_dir))
            sheet = session.query(SheetMetadata).filter(
                SheetMetadata.local_file_path.like(f"%{excel_file.name}%")
            ).first()
            
            if sheet:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                products_count = session.query(Product).filter(Product.sheet_id == sheet.id).count()
                images_count = session.query(ProductImage).filter(ProductImage.sheet_id == sheet.id).count()
                
                if products_count > 0:
                    print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {products_count} —Ç–æ–≤–∞—Ä–æ–≤, {images_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                    processed_files.append({
                        'file': excel_file.name,
                        'sheet_id': sheet.id,
                        'products': products_count,
                        'images': images_count
                    })
                else:
                    print(f"   ‚ö†Ô∏è –ó–∞–ø–∏—Å–∞–Ω –≤ –ë–î, –Ω–æ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
                    unprocessed_files.append({
                        'file': excel_file.name,
                        'sheet_id': sheet.id,
                        'reason': '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤'
                    })
            else:
                print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ SheetMetadata")
                unprocessed_files.append({
                    'file': excel_file.name,
                    'sheet_id': None,
                    'reason': '–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î'
                })
        
        print(f"\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(processed_files)}")
        print(f"   ‚ùå –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(unprocessed_files)}")
        
        if unprocessed_files:
            print(f"\nüîß –§–ê–ô–õ–´, –¢–†–ï–ë–£–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò:")
            for file_info in unprocessed_files:
                print(f"   üìÑ {file_info['file']} - {file_info['reason']}")
        
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        if processed_files:
            print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–• –§–ê–ô–õ–û–í:")
            total_products = sum(f['products'] for f in processed_files)
            total_images = sum(f['images'] for f in processed_files)
            print(f"   üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
            print(f"   üñºÔ∏è –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
            
            # –¢–æ–ø-5 —Ñ–∞–π–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤
            top_files = sorted(processed_files, key=lambda x: x['products'], reverse=True)[:5]
            print(f"\nüèÜ –¢–û–ü-5 —Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º:")
            for i, file_info in enumerate(top_files, 1):
                print(f"   {i}. {file_info['file']}: {file_info['products']} —Ç–æ–≤–∞—Ä–æ–≤, {file_info['images']} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        return unprocessed_files
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []
    finally:
        session.close()

def process_unprocessed_files(unprocessed_files):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    if not unprocessed_files:
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
        return
    
    print(f"\nüîß –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–• –§–ê–ô–õ–û–í")
    print("=" * 40)
    
    from scripts.complete_parsing_pipeline import CompleteParsing
    
    base_dir = Path(__file__).parent.parent
    excel_dir = base_dir / "storage" / "excel_files"
    
    for file_info in unprocessed_files:
        if file_info['reason'] == '–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î':
            print(f"\nüìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {file_info['file']}")
            
            excel_path = excel_dir / file_info['file']
            if excel_path.exists():
                try:
                    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
                    parser = CompleteParsing()
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ SheetMetadata
                    session = parser.session
                    from database.models_v4 import SheetMetadata
                    
                    sheet_metadata = SheetMetadata(
                        sheet_title=file_info['file'].replace('.xlsx', ''),
                        sheet_url='',  # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                        local_file_path=str(excel_path.relative_to(base_dir)),
                        total_products=0,
                        total_images=0
                    )
                    
                    session.add(sheet_metadata)
                    session.commit()
                    
                    sheet_id = sheet_metadata.id
                    print(f"   üìã –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å SheetMetadata —Å ID: {sheet_id}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                    images_count = parser.extract_images_from_excel(excel_path, sheet_id)
                    products_count = parser.parse_products_from_excel(excel_path, sheet_id)
                    assigned_count = parser.assign_images_to_products(sheet_id)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    sheet_metadata.total_images = images_count
                    sheet_metadata.total_products = products_count
                    session.commit()
                    
                    print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {products_count} —Ç–æ–≤–∞—Ä–æ–≤, {images_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, {assigned_count} –ø—Ä–∏–≤—è–∑–∞–Ω–æ")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            else:
                print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_path}")

if __name__ == "__main__":
    unprocessed = check_local_files()
    
    if unprocessed:
        response = input(f"\n‚ùì –û–±—Ä–∞–±–æ—Ç–∞—Ç—å {len(unprocessed)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤? (y/n): ")
        if response.lower() in ['y', 'yes', '–¥–∞']:
            process_unprocessed_files(unprocessed)
