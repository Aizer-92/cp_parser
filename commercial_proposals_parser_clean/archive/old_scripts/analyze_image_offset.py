#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–≤–∏–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
"""

import sys
import os
import re
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent.absolute()))

import openpyxl
from database.manager_v4 import DatabaseManager
from database.models_v4 import SheetMetadata, Product, ProductImage

def analyze_image_offset():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–¥–≤–∏–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    session = DatabaseManager.get_session()
    
    print("=== –ê–ù–ê–õ–ò–ó –°–î–í–ò–ì–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ===\n")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º original_sheet
    original_sheet = session.query(SheetMetadata).filter(
        SheetMetadata.sheet_title == 'original_sheet'
    ).first()
    
    if not original_sheet:
        print("‚ùå –¢–∞–±–ª–∏—Ü–∞ 'original_sheet' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É: {original_sheet.sheet_title}")
    
    try:
        wb = openpyxl.load_workbook(original_sheet.local_file_path)
        ws = wb.active
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ Excel
        products_in_excel = []
        for row in range(1, min(50, ws.max_row + 1)):
            cell_value = ws.cell(row=row, column=2).value  # —Å—Ç–æ–ª–±–µ—Ü B
            
            if cell_value and str(cell_value).strip() and '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' not in str(cell_value).lower() and '–º–µ–Ω–µ–¥–∂–µ—Ä' not in str(cell_value).lower():
                product_name = str(cell_value).strip()
                products_in_excel.append((row, product_name))
                print(f"   üì¶ –°—Ç—Ä–æ–∫–∞ {row}: {product_name}")
        
        wb.close()
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
        images_dir = Path("storage/images")
        original_images = list(images_dir.glob("original_sheet_*"))
        
        print(f"\nüì• –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(original_images)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        for image_path in original_images:
            filename = image_path.name
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            match = re.search(r'A(\d+)', filename)
            if match:
                image_row = int(match.group(1))
                
                # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —Ç–æ–≤–∞—Ä
                closest_product = None
                min_distance = float('inf')
                
                for excel_row, product_name in products_in_excel:
                    distance = abs(excel_row - image_row)
                    if distance < min_distance:
                        min_distance = distance
                        closest_product = (excel_row, product_name)
                
                if closest_product:
                    excel_row, product_name = closest_product
                    print(f"   üñºÔ∏è  {filename} (—Å—Ç—Ä–æ–∫–∞ {image_row}) ‚Üí –±–ª–∏–∂–∞–π—à–∏–π —Ç–æ–≤–∞—Ä: {product_name} (—Å—Ç—Ä–æ–∫–∞ {excel_row}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {min_distance})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    product = session.query(Product).filter(
                        Product.name == product_name,
                        Product.sheet_id == original_sheet.id
                    ).first()
                    
                    if product:
                        print(f"      ‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –≤ –ë–î: —Å—Ç—Ä–æ–∫–∏ {product.start_row}-{product.end_row}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω–æ –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —ç—Ç–æ–º—É —Ç–æ–≤–∞—Ä—É
                        existing_image = session.query(ProductImage).filter(
                            ProductImage.local_path == str(image_path)
                        ).first()
                        
                        if existing_image:
                            print(f"      ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ —Ç–æ–≤–∞—Ä—É ID {existing_image.product_id}")
                        else:
                            print(f"      ‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ —Ç–æ–≤–∞—Ä—É")
                    else:
                        print(f"      ‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                else:
                    print(f"   ‚ö†Ô∏è  {filename} (—Å—Ç—Ä–æ–∫–∞ {image_row}) ‚Üí —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏–∑: {filename}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        import traceback
        traceback.print_exc()
    
    session.close()

if __name__ == "__main__":
    try:
        analyze_image_offset()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

