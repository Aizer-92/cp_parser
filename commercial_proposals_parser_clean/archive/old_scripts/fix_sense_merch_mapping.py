#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã "–ú–µ—Ä—á –¥–ª—è Sense"
"""

import sys
import os
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent.absolute()))

import openpyxl
from database.manager_v4 import DatabaseManager
from database.models_v4 import SheetMetadata, Product, ProductImage

def fix_sense_merch_mapping():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ú–µ—Ä—á –¥–ª—è Sense"""
    session = DatabaseManager.get_session()
    
    print("=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ò–í–Ø–ó–ö–ò –î–õ–Ø –ú–ï–†–ß –î–õ–Ø SENSE ===\n")
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É "–ú–µ—Ä—á –¥–ª—è Sense"
    sense_sheet = session.query(SheetMetadata).filter(
        SheetMetadata.sheet_title.like('%Sense%')
    ).first()
    
    if not sense_sheet:
        print("‚ùå –¢–∞–±–ª–∏—Ü–∞ '–ú–µ—Ä—á –¥–ª—è Sense' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É: {sense_sheet.sheet_title}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Excel —Ñ–∞–π–ª–∞
    try:
        wb = openpyxl.load_workbook(sense_sheet.local_file_path)
        ws = wb.active
        
        print(f"üìè –†–∞–∑–º–µ—Ä: {ws.max_row} —Å—Ç—Ä–æ–∫, {ws.max_column} —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        # –í —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å—Ç–æ–ª–±—Ü–µ 3 (C), –∞ –Ω–µ –≤ —Å—Ç–æ–ª–±—Ü–µ 2
        name_column = 3
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ
        products_in_sheet = []
        for row in range(1, min(50, ws.max_row + 1)):
            cell_value = ws.cell(row=row, column=name_column).value
            
            if cell_value and str(cell_value).strip() and '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' not in str(cell_value).lower() and '–º–µ–Ω–µ–¥–∂–µ—Ä' not in str(cell_value).lower():
                product_name = str(cell_value).strip()
                products_in_sheet.append((row, product_name))
                print(f"   üì¶ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –≤ —Å—Ç—Ä–æ–∫–µ {row}: {product_name}")
        
        wb.close()
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç–æ–≤–∞—Ä–∞–º
        unassigned_images = session.query(ProductImage).join(Product).filter(
            Product.sheet_id == sense_sheet.id,
            ProductImage.image_type == 'main'
        ).all()
        
        print(f"\nüì• –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∏: {len(unassigned_images)}")
        
        # –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        fixed_count = 0
        
        for image in unassigned_images:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            filename = os.path.basename(image.local_path)
            if 'A' in filename:
                try:
                    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω A{number} –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    import re
                    match = re.search(r'A(\d+)', filename)
                    if match:
                        image_row = int(match.group(1))
                        
                        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
                        correct_product = None
                        for product_row, product_name in products_in_sheet:
                            if product_row == image_row:
                                correct_product = product_name
                                break
                        
                        if correct_product:
                            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                            product = session.query(Product).filter(
                                Product.name == correct_product,
                                Product.sheet_id == sense_sheet.id
                            ).first()
                            
                            if product:
                                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                old_product_id = image.product_id
                                image.product_id = product.id
                                session.add(image)
                                fixed_count += 1
                                
                                print(f"   ‚úÖ {filename} ‚Üí {correct_product} (—Å—Ç—Ä–æ–∫–∞ {image_row})")
                            else:
                                print(f"   ‚ö†Ô∏è  –¢–æ–≤–∞—Ä '{correct_product}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                        else:
                            print(f"   ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {image_row}: {filename}")
                            
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filename}: {e}")
        
        session.commit()
        print(f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {fixed_count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")
    
    session.close()

if __name__ == "__main__":
    try:
        fix_sense_merch_mapping()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

