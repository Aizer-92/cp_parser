#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "–ú–µ—Ä—á –¥–ª—è Sense" –∫ —Ç–æ–≤–∞—Ä–∞–º
"""

import sys
import os
import re
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent.absolute()))

import openpyxl
from database.manager_v4 import DatabaseManager
from database.models_v4 import SheetMetadata, Product, ProductImage

def assign_sense_merch_images():
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ú–µ—Ä—á –¥–ª—è Sense –∫ —Ç–æ–≤–∞—Ä–∞–º"""
    session = DatabaseManager.get_session()
    
    print("=== –ü–†–ò–í–Ø–ó–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ú–ï–†–ß –î–õ–Ø SENSE ===\n")
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É "–ú–µ—Ä—á –¥–ª—è Sense"
    sense_sheet = session.query(SheetMetadata).filter(
        SheetMetadata.sheet_title.like('%Sense%')
    ).first()
    
    if not sense_sheet:
        print("‚ùå –¢–∞–±–ª–∏—Ü–∞ '–ú–µ—Ä—á –¥–ª—è Sense' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É: {sense_sheet.sheet_title}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Excel —Ñ–∞–π–ª–∞
    try:
        wb = openpyxl.load_workbook(sense_sheet.local_file_path)
        ws = wb.active
        
        # –í —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å—Ç–æ–ª–±—Ü–µ 3 (C)
        name_column = 3
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        product_map = {}
        for row in range(1, min(50, ws.max_row + 1)):
            cell_value = ws.cell(row=row, column=name_column).value
            
            if cell_value and str(cell_value).strip() and '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' not in str(cell_value).lower() and '–º–µ–Ω–µ–¥–∂–µ—Ä' not in str(cell_value).lower():
                product_name = str(cell_value).strip()
                product_map[row] = product_name
                print(f"   üì¶ –°—Ç—Ä–æ–∫–∞ {row}: {product_name}")
        
        wb.close()
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
        images_dir = Path("storage/images")
        sense_images = list(images_dir.glob("*Sense*"))
        
        print(f"\nüì• –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ: {len(sense_images)}")
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º
        assigned_count = 0
        
        for image_path in sense_images:
            filename = image_path.name
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            match = re.search(r'A(\d+)', filename)
            if match:
                image_row = int(match.group(1))
                
                # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
                if image_row in product_map:
                    product_name = product_map[image_row]
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    product = session.query(Product).filter(
                        Product.name == product_name,
                        Product.sheet_id == sense_sheet.id
                    ).first()
                    
                    if product:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ë–î
                        existing_image = session.query(ProductImage).filter(
                            ProductImage.local_path == str(image_path)
                        ).first()
                        
                        if not existing_image:
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                            image_type = 'main' if 'main' in filename else 'additional'
                            
                            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            try:
                                from PIL import Image as PILImage
                                with PILImage.open(image_path) as img:
                                    width, height = img.size
                            except:
                                width, height = 0, 0
                            
                            new_image = ProductImage(
                                product_id=product.id,
                                local_path=str(image_path),
                                image_type=image_type,
                                file_size=image_path.stat().st_size,
                                width=width,
                                height=height,
                                format='png'
                            )
                            
                            session.add(new_image)
                            assigned_count += 1
                            
                            print(f"   ‚úÖ {filename} ‚Üí {product_name} (—Å—Ç—Ä–æ–∫–∞ {image_row})")
                        else:
                            print(f"   ‚ÑπÔ∏è  {filename} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ")
                    else:
                        print(f"   ‚ö†Ô∏è  –¢–æ–≤–∞—Ä '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                else:
                    print(f"   ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {image_row}: {filename}")
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏–∑: {filename}")
        
        session.commit()
        print(f"\n‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {assigned_count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        import traceback
        traceback.print_exc()
    
    session.close()

if __name__ == "__main__":
    try:
        assign_sense_merch_images()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

