#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–æ–≤–∞—Ä–∞–º –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–Ω–≥–∞
"""

from database.manager_v4 import DatabaseManager
from database.models_v4 import Product, ProductImage, SheetMetadata
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def fix_image_bindings():
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–æ–≤–∞—Ä–∞–º"""
    
    session = DatabaseManager.get_session()
    
    try:
        print("üîß –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–†–ò–í–Ø–ó–û–ö –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
        print("=" * 60)
        
        # 1. –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´
        total_images = session.query(ProductImage).count()
        orphaned_images = session.query(ProductImage).filter(
            ~ProductImage.product_id.in_(session.query(Product.id))
        ).count()
        
        print(f"üñºÔ∏è  –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
        print(f"üíÄ –û—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {orphaned_images}")
        
        if orphaned_images == 0:
            print("‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã!")
            return
        
        # 2. –ü–û–õ–£–ß–ê–ï–ú –û–°–ò–†–û–¢–ï–í–®–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
        orphaned = session.query(ProductImage).filter(
            ~ProductImage.product_id.in_(session.query(Product.id))
        ).all()
        
        print(f"\nüîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï {len(orphaned)} –û–°–ò–†–û–¢–ï–í–®–ò–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:")
        
        fixed_count = 0
        failed_count = 0
        
        for img in orphaned:
            try:
                # –ò—â–µ–º —Ç–æ–≤–∞—Ä –∏–∑ —Ç–æ–π –∂–µ —Ç–∞–±–ª–∏—Ü—ã —Å –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–º–∏—Å—è —Å—Ç—Ä–æ–∫–∞–º–∏
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º sheet_id –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                sheet_id = img.sheet_id
                row = img.row if hasattr(img, 'row') else None
                col = img.column if hasattr(img, 'column') else None
                
                logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: sheet_id={sheet_id}, row={row}, col={col}")
                
                # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–≤–∞—Ä
                suitable_product = None
                
                if sheet_id and row:
                    # –ò—â–µ–º —Ç–æ–≤–∞—Ä –∏–∑ —Ç–æ–π –∂–µ —Ç–∞–±–ª–∏—Ü—ã, —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –±–ª–∏–∑–∫–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                    products_from_sheet = session.query(Product).filter(
                        Product.sheet_id == sheet_id
                    ).all()
                    
                    for product in products_from_sheet:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
                        if (product.start_row <= row <= product.end_row) or \
                           (abs(product.start_row - row) <= 2):  # –ë–ª–∏–∑–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
                            suitable_product = product
                            break
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                    if not suitable_product and products_from_sheet:
                        suitable_product = products_from_sheet[0]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É
                if suitable_product:
                    old_product_id = img.product_id
                    img.product_id = suitable_product.id
                    session.add(img)
                    
                    logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {img.id}: {old_product_id} ‚Üí {suitable_product.id} ({suitable_product.name})")
                    fixed_count += 1
                else:
                    logger.warning(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img.id} (sheet_id={sheet_id})")
                    failed_count += 1
                    
            except Exception as e:
                logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img.id}: {e}")
                failed_count += 1
        
        # 3. –°–û–•–†–ê–ù–Ø–ï–ú –ò–ó–ú–ï–ù–ï–ù–ò–Ø
        session.commit()
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:")
        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {fixed_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {failed_count}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {fixed_count/len(orphaned)*100:.1f}%")
        
        # 4. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
        orphaned_after = session.query(ProductImage).filter(
            ~ProductImage.product_id.in_(session.query(Product.id))
        ).count()
        
        print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"–û—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –¥–æ: {orphaned_images}")
        print(f"–û—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –ø–æ—Å–ª–µ: {orphaned_after}")
        print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {orphaned_images - orphaned_after}")
        
        return fixed_count
        
    except Exception as e:
        session.rollback()
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return 0
        
    finally:
        session.close()

def validate_image_bindings():
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–≤—è–∑–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    session = DatabaseManager.get_session()
    
    try:
        print("\nüîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–ò–í–Ø–ó–û–ö –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:")
        print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤
        sample_products = session.query(Product).limit(5).all()
        
        for product in sample_products:
            images = session.query(ProductImage).filter(
                ProductImage.product_id == product.id
            ).all()
            
            print(f"üì¶ {product.name[:30]}...")
            print(f"   ID: {product.id}, –¢–∞–±–ª–∏—Ü–∞: {product.sheet_id}")
            print(f"   –°—Ç—Ä–æ–∫–∏: {product.start_row}-{product.end_row}")
            print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for img in images[:2]:
                print(f"   - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {img.id}: —Å—Ç—Ä–æ–∫–∞ {getattr(img, 'row', 'N/A')}")
        
    finally:
        session.close()

if __name__ == "__main__":
    fixed = fix_image_bindings()
    validate_image_bindings()
    
    print(f"\nüéâ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤—è–∑–æ–∫: {fixed}")

