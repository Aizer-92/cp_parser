#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ü–µ–Ω –∏ –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""

from database.manager_v4 import DatabaseManager
from database.models_v4 import SheetMetadata, Product, PriceOffer, ProductImage
from sqlalchemy import func
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def analyze_price_variants_issue():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å —Ü–µ–Ω–æ–≤—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –í–ê–†–ò–ê–ù–¢–û–í –¶–ï–ù –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò –¢–û–í–ê–†–û–í")
    print("=" * 80)
    
    session = DatabaseManager.get_session()
    
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_products = session.query(Product).count()
        total_price_offers = session.query(PriceOffer).count()
        total_images = session.query(ProductImage).count()
        completed_sheets = session.query(SheetMetadata).filter(SheetMetadata.status == 'completed').count()
        
        print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üõçÔ∏è  –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
        print(f"   üí∞ –í—Å–µ–≥–æ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {total_price_offers}")
        print(f"   üñºÔ∏è  –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {completed_sheets}")
        print(f"   üìä –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Ç–æ–≤–∞—Ä: {total_price_offers/max(1, total_products):.1f}")
        
        # –¢–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏
        products_with_prices = session.query(Product).join(PriceOffer).distinct().count()
        products_without_prices = total_products - products_with_prices
        
        print(f"\nüí∞ –ü–û–ö–†–´–¢–ò–ï –¶–ï–ù–ê–ú–ò:")
        print(f"   ‚úÖ –¢–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏: {products_with_prices} ({products_with_prices/max(1,total_products)*100:.1f}%)")
        print(f"   ‚ùå –¢–æ–≤–∞—Ä—ã –±–µ–∑ —Ü–µ–Ω: {products_without_prices}")
        
        # –¢–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        products_with_images = session.query(Product).join(ProductImage).distinct().count()  
        products_without_images = total_products - products_with_images
        
        print(f"\nüñºÔ∏è –ü–û–ö–†–´–¢–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò:")
        print(f"   ‚úÖ –¢–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {products_with_images} ({products_with_images/max(1,total_products)*100:.1f}%)")
        print(f"   ‚ùå –¢–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {products_without_images}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ —Ü–µ–Ω–æ–≤—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
        print(f"\nüí∞ –î–ï–¢–ê–õ–ò –¶–ï–ù–û–í–´–• –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô:")
        
        # –ü–æ –≤–∞–ª—é—Ç–∞–º
        offers_usd = session.query(PriceOffer).filter(PriceOffer.price_usd.isnot(None)).count()
        offers_rub = session.query(PriceOffer).filter(PriceOffer.price_rub.isnot(None)).count()
        offers_both = session.query(PriceOffer).filter(
            PriceOffer.price_usd.isnot(None),
            PriceOffer.price_rub.isnot(None)
        ).count()
        
        print(f"   üíµ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ USD: {offers_usd}")
        print(f"   üí∑ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ RUB: {offers_rub}")
        print(f"   üí∞ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –æ–±–µ–∏—Ö –≤–∞–ª—é—Ç–∞—Ö: {offers_both}")
        
        # –ü–æ –º–∞—Ä—à—Ä—É—Ç–∞–º
        routes = session.query(PriceOffer.route_name, func.count(PriceOffer.id)).group_by(PriceOffer.route_name).all()
        print(f"   üöö –ü–æ –º–∞—Ä—à—Ä—É—Ç–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏:")
        for route, count in routes:
            print(f"      {route}: {count}")
        
        # –¢–æ–≤–∞—Ä—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
        products_multiple_offers = session.query(Product.id, func.count(PriceOffer.id).label('offer_count'))\
            .join(PriceOffer)\
            .group_by(Product.id)\
            .having(func.count(PriceOffer.id) > 1)\
            .all()
        
        print(f"\nüîÑ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø:")
        print(f"   –¢–æ–≤–∞—Ä—ã —Å >1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º: {len(products_multiple_offers)}")
        
        if products_multiple_offers:
            # –¢–æ–ø —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            top_products = sorted(products_multiple_offers, key=lambda x: x.offer_count, reverse=True)[:5]
            print(f"   –¢–æ–ø —Ç–æ–≤–∞—Ä—ã –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º:")
            for product_id, offer_count in top_products:
                product = session.query(Product).get(product_id)
                print(f"      {product.name[:40]}: {offer_count} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Ü–µ–Ω
        print(f"\n‚ùå –¢–û–í–ê–†–´ –ë–ï–ó –¶–ï–ù (–ø–µ—Ä–≤—ã–µ 10):")
        products_no_prices = session.query(Product)\
            .outerjoin(PriceOffer)\
            .filter(PriceOffer.id.is_(None))\
            .limit(10).all()
        
        for product in products_no_prices:
            sheet = session.query(SheetMetadata).get(product.sheet_id)
            print(f"   {product.name[:40]} | –¢–∞–±–ª–∏—Ü–∞: {sheet.sheet_title[:30] if sheet else 'Unknown'}")
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        print(f"\nüñºÔ∏è –¢–û–í–ê–†–´ –ë–ï–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô (–ø–µ—Ä–≤—ã–µ 10):")
        products_no_images = session.query(Product)\
            .outerjoin(ProductImage)\
            .filter(ProductImage.id.is_(None))\
            .limit(10).all()
        
        for product in products_no_images:
            sheet = session.query(SheetMetadata).get(product.sheet_id)
            print(f"   {product.name[:40]} | –¢–∞–±–ª–∏—Ü–∞: {sheet.sheet_title[:30] if sheet else 'Unknown'}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ê–ë–õ–ò–¶–ê–ú:")
        sheet_stats = session.query(
            SheetMetadata.sheet_title,
            func.count(Product.id).label('product_count')
        ).outerjoin(Product)\
         .filter(SheetMetadata.status == 'completed')\
         .group_by(SheetMetadata.id, SheetMetadata.sheet_title)\
         .order_by(func.count(Product.id).desc())\
         .limit(10).all()
        
        print(f"   –¢–æ–ø —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º:")
        for title, products in sheet_stats:
            if products > 0:
                print(f"      {title[:45]}: {products} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –í–´–í–û–î–´ –ò –ü–†–û–ë–õ–ï–ú–´:")
        if products_without_prices > total_products * 0.1:
            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ù–û: {products_without_prices} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ü–µ–Ω ({products_without_prices/total_products*100:.1f}%)")
        
        if total_price_offers < total_products * 1.5:
            print(f"   ‚ö†Ô∏è  –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û: –ú–∞–ª–æ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Ç–æ–≤–∞—Ä ({total_price_offers/total_products:.1f})")
            print(f"       –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä")
        
        if total_products < completed_sheets:
            print(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –¢–æ–≤–∞—Ä–æ–≤ –º–µ–Ω—å—à–µ —á–µ–º —Ç–∞–±–ª–∏—Ü - –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤!")
        
        if products_without_images > total_products * 0.2:
            print(f"   ‚ö†Ô∏è  –ú–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ({products_without_images/total_products*100:.1f}%)")
        
        return {
            'total_products': total_products,
            'total_price_offers': total_price_offers,
            'products_with_prices': products_with_prices,
            'products_with_images': products_with_images,
            'problems': {
                'no_prices': products_without_prices,
                'no_images': products_without_images,
                'low_price_variants': total_price_offers < total_products * 1.5
            }
        }
        
    finally:
        session.close()

if __name__ == "__main__":
    results = analyze_price_variants_issue()
    
    print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
    if results['problems']['no_prices'] > 0:
        print(f"   üîß –ù—É–∂–µ–Ω –ü–û–õ–ù–´–ô –ü–ï–†–ï–ü–ê–†–°–ò–ù–ì —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
    if results['problems']['low_price_variants']:
        print(f"   üîß –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ü–µ–Ω")
    if results['total_products'] < 200:
        print(f"   üì• –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–æ–≤")
