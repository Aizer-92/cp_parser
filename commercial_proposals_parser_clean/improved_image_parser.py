#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ sheet_id
"""

import os
import sys
import re
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.manager_v4 import DatabaseManager
from database.models_v4 import ProductImage, SheetMetadata

class ImprovedImageParser:
    def __init__(self):
        self.db = DatabaseManager
        self.setup_logging()
        self.images_dir = "storage/images"
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)

    def extract_image_info(self, filename):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        –§–æ—Ä–º–∞—Ç: sheet_name_COLUMN_ROW[_additional].extension
        """
        try:
            # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            base_name = os.path.splitext(filename)[0]
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è sheet_id, —Å—Ç–æ–ª–±—Ü–∞ –∏ —Å—Ç—Ä–æ–∫–∏
            pattern = r'^(.+)_([A-Z]+)(\d+)(?:_.*)?$'
            match = re.match(pattern, base_name)
            
            if match:
                sheet_name = match.group(1)
                column = match.group(2)
                row = int(match.group(3))
                
                return {
                    'sheet_name': sheet_name,
                    'column': column,
                    'row': row,
                    'filename': filename
                }
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞: {filename}")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
            return None

    def clear_and_reparse_images(self):
        """–û—á–∏—â–∞–µ—Ç –∏ –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–≤–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ sheet_id"""
        self.logger.info("üöÄ –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–ê–†–°–ï–†–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
        self.logger.info("=" * 60)
        
        if not os.path.exists(self.images_dir):
            self.logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.images_dir}")
            return
        
        session = self.db.get_session()
        
        try:
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            self.logger.info("üßπ –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
            session.query(ProductImage).delete()
            session.commit()
            self.logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_files = []
            for filename in os.listdir(self.images_dir):
                if filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
                    image_files.append(filename)
            
            self.logger.info(f"üì∑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
            
            images_processed = 0
            images_created = 0
            
            for filename in image_files:
                images_processed += 1
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                image_info = self.extract_image_info(filename)
                if not image_info:
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º sheet_id
                image_record = ProductImage(
                    local_path=os.path.join(self.images_dir, filename),
                    original_sheet_id=image_info['sheet_name'],  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π ID
                    sheet_id=None,  # –ü–æ–∫–∞ –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —á–∏—Å–ª–æ–≤—ã–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
                    row=image_info['row'],
                    column=image_info['column'],
                    image_type='main' if image_info['column'] == 'A' else 'additional',
                    product_id=None  # –ü–æ–∫–∞ –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Ç–æ–≤–∞—Ä–∞–º
                )
                
                session.add(image_record)
                images_created += 1
                
                if images_processed % 100 == 0:
                    self.logger.info(f"üì∑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_processed}")
                    session.commit()  # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–∏—Ç
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
            session.commit()
            
            self.logger.info("=" * 60)
            self.logger.info("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:")
            self.logger.info(f"   üìÅ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {images_processed}")
            self.logger.info(f"   üì∑ –ó–∞–ø–∏—Å–µ–π —Å–æ–∑–¥–∞–Ω–æ: {images_created}")
            self.logger.info(f"   ‚≠ê –ì–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å—Ç–æ–ª–±–µ—Ü A): {session.query(ProductImage).filter_by(image_type='main').count()}")
            self.logger.info(f"   üñºÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {session.query(ProductImage).filter_by(image_type='additional').count()}")
            self.logger.info("=" * 60)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            session.rollback()
        finally:
            session.close()

    def show_sheet_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ª–∏—Å—Ç–∞–º"""
        session = self.db.get_session()
        
        try:
            self.logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –õ–ò–°–¢–ê–ú:")
            self.logger.info("-" * 50)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ original_sheet_id
            from sqlalchemy import func
            sheet_stats = session.query(
                ProductImage.original_sheet_id,
                func.count(ProductImage.id).label('count')
            ).group_by(ProductImage.original_sheet_id).order_by(func.count(ProductImage.id).desc()).limit(15).all()
            
            for sheet_id, count in sheet_stats:
                self.logger.info(f"   {sheet_id}: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        finally:
            session.close()

if __name__ == "__main__":
    parser = ImprovedImageParser()
    parser.clear_and_reparse_images()
    parser.show_sheet_statistics()


