#!/usr/bin/env python3
"""
–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
"""

import openpyxl
from openpyxl.utils import get_column_letter
from pathlib import Path
import json
import re
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class ColumnDefinition:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏"""
    index: int
    letter: str
    name: str
    type: str  # 'name', 'quantity', 'price_usd', 'price_rub', 'delivery', 'route', 'other'
    confidence: float  # 0.0-1.0
    sample_values: List[Any]

@dataclass
class TableStructure:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã"""
    file_path: str
    sheet_name: str
    header_rows: List[int]  # –°—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    data_start_row: int     # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data_end_row: int       # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö  
    columns: Dict[str, ColumnDefinition]
    table_type: str         # 'standard', 'multi_price', 'vertical', 'unknown'
    confidence: float       # –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
    issues: List[str]       # –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã

class TableStructureAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü"""
    
    def __init__(self):
        # –®–∞–±–ª–æ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
        self.column_patterns = {
            'name': [
                r'–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ',
                r'–Ω–∞–∑–≤–∞–Ω–∏–µ',
                r'—Ç–æ–≤–∞—Ä',
                r'–ø—Ä–æ–¥—É–∫—Ç',
                r'name',
                r'product',
                r'item'
            ],
            'quantity': [
                r'—Ç–∏—Ä–∞–∂.*—à—Ç',
                r'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.*—à—Ç',
                r'qty',
                r'quantity',
                r'^—Ç–∏—Ä–∞–∂$',
                r'^–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ$',
                r'—à—Ç\s*$'  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
            ],
            'price_usd': [
                r'—Ü–µ–Ω–∞.*\$',
                r'price.*\$',
                r'—Ü–µ–Ω–∞.*usd',
                r'—Å—Ç–æ–∏–º–æ—Å—Ç—å.*\$',
                r'–¥–æ–ª–ª–∞—Ä',
                r'dollar'
            ],
            'price_rub': [
                r'—Ü–µ–Ω–∞.*—Ä—É–±',
                r'price.*—Ä—É–±',
                r'—Ü–µ–Ω–∞.*‚ÇΩ',
                r'—Å—Ç–æ–∏–º–æ—Å—Ç—å.*—Ä—É–±',
                r'—Ä—É–±–ª'
            ],
            'delivery': [
                r'—Å—Ä–æ–∫.*–¥–æ—Å—Ç–∞–≤–∫',
                r'–¥–æ—Å—Ç–∞–≤–∫.*—Å—Ä–æ–∫',
                r'delivery.*time',
                r'—Å—Ä–æ–∫.*–∫\.–¥',
                r'–¥–Ω\.',
                r'days'
            ],
            'route': [
                r'–º–∞—Ä—à—Ä—É—Ç',
                r'route',
                r'–¥–æ—Å—Ç–∞–≤–∫–∞.*–∂–¥',
                r'–¥–æ—Å—Ç–∞–≤–∫–∞.*–∞–≤–∏–∞',
                r'–∂–µ–ª–µ–∑–Ω.*–¥–æ—Ä–æ–≥',
                r'–∞–≤–∏–∞'
            ]
        }
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
        self.known_structures = []
        self.load_known_structures()
    
    def analyze_file_structure(self, file_path: str) -> TableStructure:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É Excel —Ñ–∞–π–ª–∞"""
        
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {Path(file_path).name}")
        
        try:
            wb = openpyxl.load_workbook(file_path, data_only=True)
            ws = wb.active
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            header_info = self._analyze_headers(ws)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
            columns = self._detect_columns(ws, header_info['header_rows'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
            data_bounds = self._find_data_bounds(ws, header_info['data_start_row'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–∞–±–ª–∏—Ü—ã
            table_type, confidence = self._classify_table_type(columns, ws)
            
            # –í—ã—è–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
            issues = self._detect_issues(columns, ws, data_bounds)
            
            structure = TableStructure(
                file_path=file_path,
                sheet_name=ws.title,
                header_rows=header_info['header_rows'],
                data_start_row=data_bounds['start'],
                data_end_row=data_bounds['end'],
                columns=columns,
                table_type=table_type,
                confidence=confidence,
                issues=issues
            )
            
            wb.close()
            
            logger.info(f"   –¢–∏–ø: {table_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
            logger.info(f"   –ö–æ–ª–æ–Ω–∫–∏: {list(columns.keys())}")
            if issues:
                logger.warning(f"   –ü—Ä–æ–±–ª–µ–º—ã: {issues}")
            
            return structure
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {file_path}: {e}")
            return TableStructure(
                file_path=file_path,
                sheet_name="unknown",
                header_rows=[],
                data_start_row=1,
                data_end_row=1,
                columns={},
                table_type="error",
                confidence=0.0,
                issues=[f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"]
            )
    
    def _analyze_headers(self, ws) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        
        header_rows = []
        data_start_row = 1
        
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–æ–∫–∞—Ö
        for row in range(1, min(11, ws.max_row + 1)):
            text_count = 0
            number_count = 0
            
            for col in range(1, min(21, ws.max_column + 1)):
                cell_value = ws.cell(row=row, column=col).value
                if cell_value is not None:
                    if isinstance(cell_value, str) and len(cell_value.strip()) > 2:
                        text_count += 1
                    elif isinstance(cell_value, (int, float)):
                        number_count += 1
            
            # –°—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –º–∞–ª–æ —á–∏—Å–µ–ª
            if text_count >= 3 and text_count > number_count:
                header_rows.append(row)
            # –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: —á–∏—Å–ª–∞ –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç
            elif number_count > text_count and text_count > 0:
                if not data_start_row or row < data_start_row:
                    data_start_row = row
                break
        
        if not header_rows:
            header_rows = [1, 2, 3]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
        
        if data_start_row <= max(header_rows, default=0):
            data_start_row = max(header_rows, default=3) + 1
        
        return {
            'header_rows': header_rows,
            'data_start_row': data_start_row
        }
    
    def _detect_columns(self, ws, header_rows: List[int]) -> Dict[str, ColumnDefinition]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º"""
        
        columns = {}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–æ–Ω–∫—É
        for col in range(1, min(21, ws.max_column + 1)):
            col_letter = get_column_letter(col)
            
            # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            headers = []
            for row in header_rows:
                cell_value = ws.cell(row=row, column=col).value
                if cell_value:
                    headers.append(str(cell_value).strip())
            
            combined_header = ' '.join(headers).lower()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            col_type, confidence = self._classify_column(combined_header)
            
            if col_type != 'other' and confidence > 0.5:
                # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
                sample_values = []
                for row in range(min(header_rows) + 1, min(ws.max_row + 1, min(header_rows) + 21)):
                    cell_value = ws.cell(row=row, column=col).value
                    if cell_value is not None:
                        sample_values.append(cell_value)
                        if len(sample_values) >= 10:
                            break
                
                columns[col_type] = ColumnDefinition(
                    index=col,
                    letter=col_letter,
                    name=combined_header,
                    type=col_type,
                    confidence=confidence,
                    sample_values=sample_values[:5]  # –ü–µ—Ä–≤—ã–µ 5 –ø—Ä–∏–º–µ—Ä–æ–≤
                )
        
        return columns
    
    def _classify_column(self, header_text: str) -> Tuple[str, float]:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É"""
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        if any(word in header_text for word in ['—Ü–µ–Ω–∞', 'price']) and '—à—Ç' in header_text:
            if any(word in header_text for word in ['$', 'usd', '–¥–æ–ª–ª']):
                return 'price_usd', 0.9
            elif any(word in header_text for word in ['—Ä—É–±', '‚ÇΩ', 'rub']):
                return 'price_rub', 0.9
        
        # –û–±—ã—á–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        for col_type, patterns in self.column_patterns.items():
            for pattern in patterns:
                if re.search(pattern, header_text, re.IGNORECASE):
                    confidence = 0.8
                    
                    # –ü–æ–≤—ã—à–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    if pattern.strip('$^') == header_text.strip():
                        confidence = 0.95
                    
                    return col_type, confidence
        
        return 'other', 0.0
    
    def _find_data_bounds(self, ws, start_row: int) -> Dict[str, int]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≥—Ä–∞–Ω–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        
        end_row = start_row
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
        for row in range(start_row, ws.max_row + 1):
            non_empty_cells = 0
            for col in range(1, min(11, ws.max_column + 1)):
                if ws.cell(row=row, column=col).value is not None:
                    non_empty_cells += 1
            
            if non_empty_cells >= 2:  # –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
                end_row = row
            elif row - end_row > 5:  # 5+ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –ø–æ–¥—Ä—è–¥
                break
        
        return {'start': start_row, 'end': end_row}
    
    def _classify_table_type(self, columns: Dict[str, ColumnDefinition], ws) -> Tuple[str, float]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ç–∞–±–ª–∏—Ü—ã"""
        
        has_name = 'name' in columns
        has_quantity = 'quantity' in columns  
        has_price_usd = 'price_usd' in columns
        has_price_rub = 'price_rub' in columns
        
        confidence = 0.0
        
        if has_name and has_quantity and (has_price_usd or has_price_rub):
            if has_price_usd and has_price_rub:
                table_type = "multi_currency"
                confidence = 0.9
            else:
                table_type = "standard"
                confidence = 0.8
        elif has_name and (has_price_usd or has_price_rub):
            table_type = "simple"
            confidence = 0.6
        elif has_name:
            table_type = "basic"
            confidence = 0.4
        else:
            table_type = "unknown"
            confidence = 0.1
        
        return table_type, confidence
    
    def _detect_issues(self, columns: Dict[str, ColumnDefinition], ws, data_bounds: Dict[str, int]) -> List[str]:
        """–í—ã—è–≤–ª—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"""
        
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        if 'name' not in columns:
            issues.append("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤")
        
        if 'quantity' not in columns and 'price_usd' not in columns and 'price_rub' not in columns:
            issues.append("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ —Å —Ü–µ–Ω–∞–º–∏ –∏–ª–∏ —Ç–∏—Ä–∞–∂–∞–º–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        for col_type, col_def in columns.items():
            if col_type == 'quantity':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –∫–æ–ª–æ–Ω–∫–µ quantity –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á–∏—Å–ª–∞-—Ç–∏—Ä–∞–∂–∏
                numeric_count = 0
                for value in col_def.sample_values:
                    if isinstance(value, (int, float)) and 10 <= value <= 100000:
                        numeric_count += 1
                
                if numeric_count / len(col_def.sample_values) < 0.5:
                    issues.append(f"–ö–æ–ª–æ–Ω–∫–∞ quantity —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {col_def.sample_values}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        data_rows = data_bounds['end'] - data_bounds['start'] + 1
        if data_rows < 3:
            issues.append(f"–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {data_rows}")
        
        return issues
    
    def save_structure(self, structure: TableStructure, output_dir: str = "analysis_results"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –≤ JSON"""
        
        Path(output_dir).mkdir(exist_ok=True)
        
        filename = f"{Path(structure.file_path).stem}_structure.json"
        output_path = Path(output_dir) / filename
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON
        data = asdict(structure)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
    
    def load_known_structures(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü"""
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤
        pass

if __name__ == "__main__":
    analyzer = TableStructureAnalyzer()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    test_file = "/Users/bakirovresad/Downloads/Reshad 1/projects/commercial_proposals_parser_clean/storage/excel_files/sheet_1nav9w2d_public.xlsx"
    
    if Path(test_file).exists():
        structure = analyzer.analyze_file_structure(test_file)
        analyzer.save_structure(structure)
        
        print(f"\nüìä –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´:")
        print(f"–¢–∏–ø: {structure.table_type}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {structure.confidence:.2f}")
        print(f"–ö–æ–ª–æ–Ω–∫–∏:")
        for col_type, col_def in structure.columns.items():
            print(f"  {col_type}: {col_def.letter} '{col_def.name}' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {col_def.confidence:.2f})")
        
        if structure.issues:
            print(f"–ü—Ä–æ–±–ª–µ–º—ã: {structure.issues}")
    else:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")


