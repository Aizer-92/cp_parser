#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤—ã–ø–ª–∞—Ç 2025 - –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ –§–ª–æ—Ä–∏–¥–µ –≤–æ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial Unicode MS', 'SimHei']

class FloridaAnalyzerEnhanced:
    def __init__(self, excel_file_path):
        self.excel_file_path = excel_file_path
        self.all_data = {}
        self.florida_data = None
        self.output_dir = Path("output")
        self.output_dir.mkdir(exist_ok=True)
        
    def load_all_sheets(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ Excel —Ñ–∞–π–ª–∞"""
        print("üìä –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ Excel —Ñ–∞–π–ª–∞...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
            excel_file = pd.ExcelFile(self.excel_file_path)
            print(f"üìã –ù–∞–π–¥–µ–Ω—ã –ª–∏—Å—Ç—ã: {excel_file.sheet_names}")
            
            for sheet_name in excel_file.sheet_names:
                try:
                    data = pd.read_excel(self.excel_file_path, sheet_name=sheet_name)
                    self.all_data[sheet_name] = data
                    print(f"‚úÖ –õ–∏—Å—Ç '{sheet_name}': {data.shape[0]} —Å—Ç—Ä–æ–∫, {data.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    if data.shape[0] > 0:
                        print(f"   –ü–µ—Ä–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(data.columns[:5])}")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏—Å—Ç–∞ '{sheet_name}': {e}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def search_florida_all_sheets(self):
        """–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ –§–ª–æ—Ä–∏–¥–µ –≤–æ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö"""
        print("\nüîç –ò—â—É –¥–∞–Ω–Ω—ã–µ –ø–æ –§–ª–æ—Ä–∏–¥–µ –≤–æ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö...")
        
        if not self.all_data:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return False
        
        # –ò—â–µ–º –§–ª–æ—Ä–∏–¥—É –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –Ω–∞–ø–∏—Å–∞–Ω–∏—è
        florida_patterns = ['—Ñ–ª–æ—Ä–∏–¥–∞', 'florida', '–§–ª–æ—Ä–∏–¥–∞', 'Florida', '–§–õ–û–†–ò–î–ê', '—Ñ–ª–æ—Ä–∏–¥', '–§–ª–æ—Ä–∏–¥']
        
        florida_found = []
        
        for sheet_name, data in self.all_data.items():
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –ª–∏—Å—Ç: {sheet_name}")
            
            # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–æ–ª–æ–Ω–∫–∞–º
            for col in data.columns:
                if data[col].dtype == 'object':  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                    for pattern in florida_patterns:
                        try:
                            mask = data[col].astype(str).str.contains(pattern, case=False, na=False)
                            if mask.any():
                                found_rows = data[mask]
                                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –∫–æ–ª–æ–Ω–∫–µ '{col}': {len(found_rows)} —Å—Ç—Ä–æ–∫")
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                                for idx, row in found_rows.iterrows():
                                    print(f"    –°—Ç—Ä–æ–∫–∞ {idx}: {row.to_dict()}")
                                
                                florida_found.append({
                                    'sheet': sheet_name,
                                    'column': col,
                                    'rows': found_rows,
                                    'pattern': pattern
                                })
                        except Exception as e:
                            continue
        
        if florida_found:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(florida_found)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –§–ª–æ—Ä–∏–¥–æ–π")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            all_florida_rows = []
            for found in florida_found:
                all_florida_rows.append(found['rows'])
            
            if all_florida_rows:
                self.florida_data = pd.concat(all_florida_rows, ignore_index=True)
                print(f"üìã –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –§–ª–æ—Ä–∏–¥—ã: {len(self.florida_data)} —Å—Ç—Ä–æ–∫")
                print(self.florida_data)
            
            return True
        else:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ –§–ª–æ—Ä–∏–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–º –ª–∏—Å—Ç–µ")
            return False
    
    def analyze_percentages(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if self.florida_data is None or len(self.florida_data) == 0:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –§–ª–æ—Ä–∏–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        print("\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
        percentage_columns = []
        for col in self.florida_data.columns:
            col_str = str(col).lower()
            if any(keyword in col_str for keyword in ['–ø—Ä–æ—Ü–µ–Ω—Ç', 'percent', '%', '—Å—Ç–∞–≤–∫–∞', 'rate', '–∫–æ–º–∏—Å—Å–∏—è', 'commission']):
                percentage_columns.append(col)
        
        print(f"üìà –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏: {percentage_columns}")
        
        if not percentage_columns:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏, –∏—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ
            numeric_columns = self.florida_data.select_dtypes(include=[np.number]).columns.tolist()
            print(f"üìä –ß–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {numeric_columns}")
            percentage_columns = numeric_columns
        
        results = {}
        
        for col in percentage_columns:
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
                values = pd.to_numeric(self.florida_data[col], errors='coerce')
                values = values.dropna()
                
                if len(values) > 0:
                    stats = {
                        '—Å—Ä–µ–¥–Ω–µ–µ': values.mean(),
                        '–º–µ–¥–∏–∞–Ω–∞': values.median(),
                        '–º–∏–Ω': values.min(),
                        '–º–∞–∫—Å': values.max(),
                        '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ_–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ': values.std(),
                        '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–Ω–∞—á–µ–Ω–∏–π': len(values)
                    }
                    results[col] = stats
                    
                    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–µ '{col}':")
                    for stat, value in stats.items():
                        print(f"  {stat}: {value:.2f}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–ª–æ–Ω–∫–∏ '{col}': {e}")
        
        return results
    
    def create_visualizations(self, stats_results):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π"""
        if not stats_results:
            return
        
        print("\nüìà –°–æ–∑–¥–∞—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –§–ª–æ—Ä–∏–¥—ã', fontsize=16, fontweight='bold')
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if stats_results:
            cols = list(stats_results.keys())
            means = [stats_results[col]['—Å—Ä–µ–¥–Ω–µ–µ'] for col in cols]
            
            axes[0, 0].bar(range(len(cols)), means, color='skyblue', alpha=0.7)
            axes[0, 0].set_title('–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º')
            axes[0, 0].set_xticks(range(len(cols)))
            axes[0, 0].set_xticklabels(cols, rotation=45, ha='right')
            axes[0, 0].set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for i, v in enumerate(means):
                axes[0, 0].text(i, v + max(means)*0.01, f'{v:.2f}', 
                               ha='center', va='bottom', fontweight='bold')
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        if self.florida_data is not None and len(self.florida_data) > 0:
            numeric_cols = self.florida_data.select_dtypes(include=[np.number]).columns
            if len(numeric_cols) > 0:
                col = numeric_cols[0]
                values = pd.to_numeric(self.florida_data[col], errors='coerce').dropna()
                if len(values) > 0:
                    axes[0, 1].hist(values, bins=min(10, len(values)), color='lightgreen', alpha=0.7)
                    axes[0, 1].set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π: {col}')
                    axes[0, 1].set_xlabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
                    axes[0, 1].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∏–Ω/–º–∞–∫—Å
        if stats_results:
            cols = list(stats_results.keys())
            mins = [stats_results[col]['–º–∏–Ω'] for col in cols]
            maxs = [stats_results[col]['–º–∞–∫—Å'] for col in cols]
            
            x = np.arange(len(cols))
            width = 0.35
            
            axes[1, 0].bar(x - width/2, mins, width, label='–ú–∏–Ω–∏–º—É–º', color='lightcoral', alpha=0.7)
            axes[1, 0].bar(x + width/2, maxs, width, label='–ú–∞–∫—Å–∏–º—É–º', color='lightblue', alpha=0.7)
            axes[1, 0].set_title('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
            axes[1, 0].set_xticks(x)
            axes[1, 0].set_xticklabels(cols, rotation=45, ha='right')
            axes[1, 0].legend()
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π
        if stats_results:
            cols = list(stats_results.keys())
            counts = [stats_results[col]['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–Ω–∞—á–µ–Ω–∏–π'] for col in cols]
            
            axes[1, 1].pie(counts, labels=cols, autopct='%1.1f%%', startangle=90)
            axes[1, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π')
        
        plt.tight_layout()
        plt.savefig(self.output_dir / 'florida_analysis_enhanced.png', dpi=300, bbox_inches='tight')
        print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {self.output_dir / 'florida_analysis_enhanced.png'}")
        plt.show()
    
    def save_results(self, stats_results):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        print("\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –§–ª–æ—Ä–∏–¥—ã
        if self.florida_data is not None:
            florida_file = self.output_dir / 'florida_data_enhanced.xlsx'
            self.florida_data.to_excel(florida_file, index=False)
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –§–ª–æ—Ä–∏–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {florida_file}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if stats_results:
            stats_df = pd.DataFrame(stats_results).T
            stats_file = self.output_dir / 'florida_statistics_enhanced.xlsx'
            stats_df.to_excel(stats_file)
            print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {stats_file}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
            report_file = self.output_dir / 'florida_analysis_report_enhanced.txt'
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write("–ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –§–õ–û–†–ò–î–´ (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)\n")
                f.write("=" * 60 + "\n\n")
                
                f.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"–§–∞–π–ª –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {self.excel_file_path}\n")
                f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –§–ª–æ—Ä–∏–¥—ã: {len(self.florida_data) if self.florida_data is not None else 0}\n\n")
                
                f.write("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–û–õ–û–ù–ö–ê–ú:\n")
                f.write("-" * 30 + "\n")
                
                for col, stats in stats_results.items():
                    f.write(f"\n–ö–æ–ª–æ–Ω–∫–∞: {col}\n")
                    for stat, value in stats.items():
                        f.write(f"  {stat}: {value:.2f}\n")
                
                if stats_results:
                    f.write(f"\n\n–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ –≤—Å–µ–º –∫–æ–ª–æ–Ω–∫–∞–º: {np.mean([stats['—Å—Ä–µ–¥–Ω–µ–µ'] for stats in stats_results.values()]):.2f}%\n")
            
            print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    def run_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞—é —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –§–ª–æ—Ä–∏–¥—ã...")
        print("=" * 70)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
        if not self.load_all_sheets():
            return
        
        # –ò—â–µ–º –§–ª–æ—Ä–∏–¥—É –≤–æ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö
        if not self.search_florida_all_sheets():
            print("‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω - –¥–∞–Ω–Ω—ã–µ –§–ª–æ—Ä–∏–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        stats_results = self.analyze_percentages()
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.create_visualizations(stats_results)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_results(stats_results)
        
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {self.output_dir}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel
    excel_file = "../../–¢–∞–±–ª –≤—ã–ø–ª–∞—Ç—ã 2025 (1).xlsx"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(excel_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_file}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    analyzer = FloridaAnalyzerEnhanced(excel_file)
    analyzer.run_analysis()


if __name__ == "__main__":
    main()
