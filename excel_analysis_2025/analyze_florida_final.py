#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤—ã–ø–ª–∞—Ç 2025 - –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ –§–ª–æ—Ä–∏–¥–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç–∞–≤–æ–∫ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial Unicode MS']

class FloridaFinalAnalyzer:
    def __init__(self, excel_file_path):
        self.excel_file_path = excel_file_path
        self.all_data = {}
        self.florida_data = None
        self.output_dir = Path("output")
        self.output_dir.mkdir(exist_ok=True)
        
    def load_monthly_sheets(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∏—Å—Ç–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–µ—Å—è—Ü–µ–≤"""
        print("üìä –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–µ—Å—è—Ü–µ–≤...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
            excel_file = pd.ExcelFile(self.excel_file_path)
            print(f"üìã –ù–∞–π–¥–µ–Ω—ã –ª–∏—Å—Ç—ã: {excel_file.sheet_names}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—Å—Ç—ã —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–µ—Å—è—Ü–µ–≤
            month_keywords = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å', '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']
            monthly_sheets = []
            
            for sheet_name in excel_file.sheet_names:
                sheet_lower = sheet_name.lower()
                if any(month in sheet_lower for month in month_keywords):
                    monthly_sheets.append(sheet_name)
            
            print(f"üìÖ –õ–∏—Å—Ç—ã —Å –º–µ—Å—è—Ü–∞–º–∏: {monthly_sheets}")
            
            for sheet_name in monthly_sheets:
                try:
                    data = pd.read_excel(self.excel_file_path, sheet_name=sheet_name)
                    self.all_data[sheet_name] = data
                    print(f"‚úÖ –õ–∏—Å—Ç '{sheet_name}': {data.shape[0]} —Å—Ç—Ä–æ–∫, {data.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    if data.shape[0] > 0:
                        print(f"   –ö–æ–ª–æ–Ω–∫–∏: {list(data.columns)}")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏—Å—Ç–∞ '{sheet_name}': {e}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def search_florida_and_analyze(self):
        """–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ –§–ª–æ—Ä–∏–¥–µ –∏ –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–≤–æ–∫/–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"""
        print("\nüîç –ò—â—É –¥–∞–Ω–Ω—ã–µ –ø–æ –§–ª–æ—Ä–∏–¥–µ –≤ –º–µ—Å—è—á–Ω—ã—Ö –ª–∏—Å—Ç–∞—Ö...")
        
        if not self.all_data:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return False
        
        # –ò—â–µ–º –§–ª–æ—Ä–∏–¥—É –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –Ω–∞–ø–∏—Å–∞–Ω–∏—è
        florida_patterns = ['—Ñ–ª–æ—Ä–∏–¥–∞', 'florida', '–§–ª–æ—Ä–∏–¥–∞', 'Florida', '–§–õ–û–†–ò–î–ê', '—Ñ–ª–æ—Ä–∏–¥', '–§–ª–æ—Ä–∏–¥']
        
        florida_results = []
        
        for sheet_name, data in self.all_data.items():
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –ª–∏—Å—Ç: {sheet_name}")
            
            # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–æ–ª–æ–Ω–∫–∞–º
            for col in data.columns:
                if data[col].dtype == 'object':  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                    for pattern in florida_patterns:
                        try:
                            mask = data[col].astype(str).str.contains(pattern, case=False, na=False)
                            if mask.any():
                                found_rows = data[mask]
                                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –∫–æ–ª–æ–Ω–∫–µ '{col}': {len(found_rows)} —Å—Ç—Ä–æ–∫")
                                
                                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                                for idx, row in found_rows.iterrows():
                                    result = {
                                        'sheet': sheet_name,
                                        'row_index': idx,
                                        'data': row.to_dict()
                                    }
                                    florida_results.append(result)
                                    
                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                                    print(f"    –°—Ç—Ä–æ–∫–∞ {idx}:")
                                    for key, value in row.items():
                                        if pd.notna(value) and str(value).strip() != '':
                                            print(f"      {key}: {value}")
                                
                        except Exception as e:
                            continue
        
        if florida_results:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(florida_results)} –∑–∞–ø–∏—Å–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –§–ª–æ—Ä–∏–¥—ã")
            
            # –°–æ–∑–¥–∞–µ–º DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –§–ª–æ—Ä–∏–¥—ã
            florida_data_list = []
            for result in florida_results:
                row_data = result['data'].copy()
                row_data['sheet_name'] = result['sheet']
                row_data['row_index'] = result['row_index']
                florida_data_list.append(row_data)
            
            self.florida_data = pd.DataFrame(florida_data_list)
            print(f"üìã –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –§–ª–æ—Ä–∏–¥—ã: {len(self.florida_data)} —Å—Ç—Ä–æ–∫")
            
            return True
        else:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ –§–ª–æ—Ä–∏–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
    
    def analyze_rates_and_percentages(self):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–≤–æ–∫ (–°–°) –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"""
        if self.florida_data is None or len(self.florida_data) == 0:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –§–ª–æ—Ä–∏–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        print("\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–∞–≤–∫–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã...")
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å–æ —Å—Ç–∞–≤–∫–∞–º–∏ (–°–°)
        rate_columns = []
        percentage_columns = []
        
        for col in self.florida_data.columns:
            col_str = str(col).lower()
            
            # –ò—â–µ–º —Å—Ç–∞–≤–∫–∏ (–°–°)
            if '—Å—Å' in col_str or '—Å—Ç–∞–≤–∫–∞' in col_str or 'rate' in col_str:
                rate_columns.append(col)
            
            # –ò—â–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            if '–ø—Ä–æ—Ü–µ–Ω—Ç' in col_str or 'percent' in col_str or '%' in col_str:
                percentage_columns.append(col)
        
        print(f"üìà –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ —Å–æ —Å—Ç–∞–≤–∫–∞–º–∏: {rate_columns}")
        print(f"üìä –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏: {percentage_columns}")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏, –∏—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ
        if not rate_columns and not percentage_columns:
            numeric_columns = self.florida_data.select_dtypes(include=[np.number]).columns.tolist()
            print(f"üìä –ß–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {numeric_columns}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞–≤–∫–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º
            for col in numeric_columns:
                values = pd.to_numeric(self.florida_data[col], errors='coerce').dropna()
                if len(values) > 0:
                    avg_value = values.mean()
                    if avg_value > 1000:  # –ë–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è - –≤–µ—Ä–æ—è—Ç–Ω–æ —Å—Ç–∞–≤–∫–∏
                        rate_columns.append(col)
                    elif avg_value <= 100:  # –ú–∞–ª—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                        percentage_columns.append(col)
        
        results = {}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏
        for col in rate_columns:
            try:
                values = pd.to_numeric(self.florida_data[col], errors='coerce')
                values = values.dropna()
                
                if len(values) > 0:
                    stats = {
                        '—Ç–∏–ø': '—Å—Ç–∞–≤–∫–∞',
                        '—Å—Ä–µ–¥–Ω–µ–µ': values.mean(),
                        '–º–µ–¥–∏–∞–Ω–∞': values.median(),
                        '–º–∏–Ω': values.min(),
                        '–º–∞–∫—Å': values.max(),
                        '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ_–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ': values.std(),
                        '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–Ω–∞—á–µ–Ω–∏–π': len(values)
                    }
                    results[col] = stats
                    
                    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞–≤–∫–µ '{col}':")
                    for stat, value in stats.items():
                        if stat != '—Ç–∏–ø':
                            print(f"  {stat}: {value:.2f}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–ª–æ–Ω–∫–∏ '{col}': {e}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        for col in percentage_columns:
            try:
                values = pd.to_numeric(self.florida_data[col], errors='coerce')
                values = values.dropna()
                
                if len(values) > 0:
                    stats = {
                        '—Ç–∏–ø': '–ø—Ä–æ—Ü–µ–Ω—Ç',
                        '—Å—Ä–µ–¥–Ω–µ–µ': values.mean(),
                        '–º–µ–¥–∏–∞–Ω–∞': values.median(),
                        '–º–∏–Ω': values.min(),
                        '–º–∞–∫—Å': values.max(),
                        '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ_–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ': values.std(),
                        '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–Ω–∞—á–µ–Ω–∏–π': len(values)
                    }
                    results[col] = stats
                    
                    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É '{col}':")
                    for stat, value in stats.items():
                        if stat != '—Ç–∏–ø':
                            print(f"  {stat}: {value:.2f}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–ª–æ–Ω–∫–∏ '{col}': {e}")
        
        return results
    
    def create_comprehensive_visualizations(self, stats_results):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π"""
        if not stats_results:
            return
        
        print("\nüìà –°–æ–∑–¥–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å 4 –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        fig, axes = plt.subplots(2, 2, figsize=(16, 12))
        fig.suptitle('–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –§–ª–æ—Ä–∏–¥—ã', fontsize=16, fontweight='bold')
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º
        rate_cols = [col for col, stats in stats_results.items() if stats.get('—Ç–∏–ø') == '—Å—Ç–∞–≤–∫–∞']
        percentage_cols = [col for col, stats in stats_results.items() if stats.get('—Ç–∏–ø') == '–ø—Ä–æ—Ü–µ–Ω—Ç']
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ä–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
        if rate_cols:
            means = [stats_results[col]['—Å—Ä–µ–¥–Ω–µ–µ'] for col in rate_cols]
            
            axes[0, 0].bar(range(len(rate_cols)), means, color='lightblue', alpha=0.7)
            axes[0, 0].set_title('–°—Ä–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ (–°–°)')
            axes[0, 0].set_xticks(range(len(rate_cols)))
            axes[0, 0].set_xticklabels(rate_cols, rotation=45, ha='right')
            axes[0, 0].set_ylabel('–°—É–º–º–∞ (—Ä—É–±.)')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for i, v in enumerate(means):
                axes[0, 0].text(i, v + max(means)*0.01, f'{v:,.0f}', 
                               ha='center', va='bottom', fontweight='bold')
        else:
            axes[0, 0].text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞–≤–∫–∞—Ö', ha='center', va='center', transform=axes[0, 0].transAxes)
            axes[0, 0].set_title('–°—Ä–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ (–°–°)')
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        if percentage_cols:
            means = [stats_results[col]['—Å—Ä–µ–¥–Ω–µ–µ'] for col in percentage_cols]
            
            axes[0, 1].bar(range(len(percentage_cols)), means, color='lightgreen', alpha=0.7)
            axes[0, 1].set_title('–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã')
            axes[0, 1].set_xticks(range(len(percentage_cols)))
            axes[0, 1].set_xticklabels(percentage_cols, rotation=45, ha='right')
            axes[0, 1].set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç (%)')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for i, v in enumerate(means):
                axes[0, 1].text(i, v + max(means)*0.01, f'{v:.1f}%', 
                               ha='center', va='bottom', fontweight='bold')
        else:
            axes[0, 1].text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö', ha='center', va='center', transform=axes[0, 1].transAxes)
            axes[0, 1].set_title('–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã')
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∏–Ω/–º–∞–∫—Å –¥–ª—è —Å—Ç–∞–≤–æ–∫
        if rate_cols:
            mins = [stats_results[col]['–º–∏–Ω'] for col in rate_cols]
            maxs = [stats_results[col]['–º–∞–∫—Å'] for col in rate_cols]
            
            x = np.arange(len(rate_cols))
            width = 0.35
            
            axes[1, 0].bar(x - width/2, mins, width, label='–ú–∏–Ω–∏–º—É–º', color='lightcoral', alpha=0.7)
            axes[1, 0].bar(x + width/2, maxs, width, label='–ú–∞–∫—Å–∏–º—É–º', color='lightblue', alpha=0.7)
            axes[1, 0].set_title('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏')
            axes[1, 0].set_xticks(x)
            axes[1, 0].set_xticklabels(rate_cols, rotation=45, ha='right')
            axes[1, 0].legend()
            axes[1, 0].set_ylabel('–°—É–º–º–∞ (—Ä—É–±.)')
        else:
            axes[1, 0].text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞–≤–∫–∞—Ö', ha='center', va='center', transform=axes[1, 0].transAxes)
            axes[1, 0].set_title('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏')
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        all_cols = list(stats_results.keys())
        if all_cols:
            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            summary_data = []
            for col in all_cols:
                stats = stats_results[col]
                summary_data.append({
                    '–ö–æ–ª–æ–Ω–∫–∞': col,
                    '–¢–∏–ø': stats.get('—Ç–∏–ø', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    '–°—Ä–µ–¥–Ω–µ–µ': stats['—Å—Ä–µ–¥–Ω–µ–µ'],
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': stats['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–Ω–∞—á–µ–Ω–∏–π']
                })
            
            summary_df = pd.DataFrame(summary_data)
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ —Ç–∏–ø–∞–º
            type_counts = summary_df['–¢–∏–ø'].value_counts()
            axes[1, 1].pie(type_counts.values, labels=type_counts.index, autopct='%1.1f%%', startangle=90)
            axes[1, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö')
        else:
            axes[1, 1].text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞', ha='center', va='center', transform=axes[1, 1].transAxes)
            axes[1, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö')
        
        plt.tight_layout()
        plt.savefig(self.output_dir / 'florida_comprehensive_analysis.png', dpi=300, bbox_inches='tight')
        print(f"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {self.output_dir / 'florida_comprehensive_analysis.png'}")
        plt.show()
    
    def create_summary_report(self, stats_results):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\nüìã –°–æ–∑–¥–∞—é –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –§–ª–æ—Ä–∏–¥—ã
        if self.florida_data is not None:
            florida_file = self.output_dir / 'florida_data_final.xlsx'
            self.florida_data.to_excel(florida_file, index=False)
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –§–ª–æ—Ä–∏–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {florida_file}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if stats_results:
            stats_df = pd.DataFrame(stats_results).T
            stats_file = self.output_dir / 'florida_statistics_final.xlsx'
            stats_df.to_excel(stats_file)
            print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {stats_file}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
            report_file = self.output_dir / 'florida_final_report.txt'
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write("–ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –§–õ–û–†–ò–î–´\n")
                f.write("=" * 60 + "\n\n")
                
                f.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"–§–∞–π–ª –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {self.excel_file_path}\n")
                f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –§–ª–æ—Ä–∏–¥—ã: {len(self.florida_data) if self.florida_data is not None else 0}\n\n")
                
                # –°–≤–æ–¥–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö
                rate_cols = [col for col, stats in stats_results.items() if stats.get('—Ç–∏–ø') == '—Å—Ç–∞–≤–∫–∞']
                percentage_cols = [col for col, stats in stats_results.items() if stats.get('—Ç–∏–ø') == '–ø—Ä–æ—Ü–µ–Ω—Ç']
                
                f.write("–°–í–û–î–ö–ê –ü–û –¢–ò–ü–ê–ú –î–ê–ù–ù–´–•:\n")
                f.write("-" * 30 + "\n")
                f.write(f"–ö–æ–ª–æ–Ω–∫–∏ —Å–æ —Å—Ç–∞–≤–∫–∞–º–∏ (–°–°): {len(rate_cols)}\n")
                f.write(f"–ö–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏: {len(percentage_cols)}\n\n")
                
                f.write("–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
                f.write("-" * 30 + "\n")
                
                for col, stats in stats_results.items():
                    f.write(f"\n–ö–æ–ª–æ–Ω–∫–∞: {col}\n")
                    f.write(f"–¢–∏–ø: {stats.get('—Ç–∏–ø', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n")
                    for stat, value in stats.items():
                        if stat != '—Ç–∏–ø':
                            f.write(f"  {stat}: {value:.2f}\n")
                
                # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã
                if rate_cols:
                    avg_rate = np.mean([stats_results[col]['—Å—Ä–µ–¥–Ω–µ–µ'] for col in rate_cols])
                    f.write(f"\n\n–ò–¢–û–ì–û–í–´–ï –†–ê–°–ß–ï–¢–´:\n")
                    f.write("-" * 30 + "\n")
                    f.write(f"–°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –∫–æ–ª–æ–Ω–∫–∞–º: {avg_rate:,.2f} —Ä—É–±.\n")
                
                if percentage_cols:
                    avg_percentage = np.mean([stats_results[col]['—Å—Ä–µ–¥–Ω–µ–µ'] for col in percentage_cols])
                    f.write(f"–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ –≤—Å–µ–º –∫–æ–ª–æ–Ω–∫–∞–º: {avg_percentage:.2f}%\n")
                
                # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º
                if self.florida_data is not None and 'sheet_name' in self.florida_data.columns:
                    f.write(f"\n–ê–ù–ê–õ–ò–ó –ü–û –ú–ï–°–Ø–¶–ê–ú:\n")
                    f.write("-" * 30 + "\n")
                    month_counts = self.florida_data['sheet_name'].value_counts()
                    for month, count in month_counts.items():
                        f.write(f"{month}: {count} –∑–∞–ø–∏—Å–µ–π\n")
            
            print(f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    def run_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –§–ª–æ—Ä–∏–¥—ã...")
        print("=" * 70)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–µ—Å—è—á–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤
        if not self.load_monthly_sheets():
            return
        
        # –ò—â–µ–º –§–ª–æ—Ä–∏–¥—É –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        if not self.search_florida_and_analyze():
            print("‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω - –¥–∞–Ω–Ω—ã–µ –§–ª–æ—Ä–∏–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        stats_results = self.analyze_rates_and_percentages()
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.create_comprehensive_visualizations(stats_results)
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.create_summary_report(stats_results)
        
        print("\n‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {self.output_dir}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel
    excel_file = "../../–¢–∞–±–ª –≤—ã–ø–ª–∞—Ç—ã 2025 (1).xlsx"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(excel_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_file}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    analyzer = FloridaFinalAnalyzer(excel_file)
    analyzer.run_analysis()


if __name__ == "__main__":
    main()
