#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –§–ª–æ—Ä–∏–¥—ã
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
from pathlib import Path

def analyze_florida_percentages():
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –§–ª–æ—Ä–∏–¥—ã"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –§–ª–æ—Ä–∏–¥—ã
    florida_file = "output/florida_data_final.xlsx"
    if not os.path.exists(florida_file):
        print("‚ùå –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –§–ª–æ—Ä–∏–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    df = pd.read_excel(florida_file)
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –§–ª–æ—Ä–∏–¥—ã")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    print(f"üìà –ß–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {numeric_cols}")
    
    # –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    percentage_candidates = []
    
    for col in numeric_cols:
        values = pd.to_numeric(df[col], errors='coerce').dropna()
        if len(values) > 0:
            avg_value = values.mean()
            min_value = values.min()
            max_value = values.max()
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
            is_percentage = False
            reason = ""
            
            if avg_value <= 100 and max_value <= 100:
                is_percentage = True
                reason = "–ó–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100"
            elif '–ø—Ä–æ—Ü–µ–Ω—Ç' in str(col).lower() or '%' in str(col):
                is_percentage = True
                reason = "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç '–ø—Ä–æ—Ü–µ–Ω—Ç' –∏–ª–∏ '%'"
            elif avg_value <= 1 and max_value <= 1:
                is_percentage = True
                reason = "–ó–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-1 (–¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã)"
            
            if is_percentage:
                percentage_candidates.append({
                    '–∫–æ–ª–æ–Ω–∫–∞': col,
                    '—Å—Ä–µ–¥–Ω–µ–µ': avg_value,
                    '–º–∏–Ω': min_value,
                    '–º–∞–∫—Å': max_value,
                    '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': len(values),
                    '–ø—Ä–∏—á–∏–Ω–∞': reason
                })
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(percentage_candidates)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫:")
    
    for candidate in percentage_candidates:
        print(f"\n–ö–æ–ª–æ–Ω–∫–∞: {candidate['–∫–æ–ª–æ–Ω–∫–∞']}")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ: {candidate['—Å—Ä–µ–¥–Ω–µ–µ']:.2f}")
        print(f"  –ú–∏–Ω: {candidate['–º–∏–Ω']:.2f}")
        print(f"  –ú–∞–∫—Å: {candidate['–º–∞–∫—Å']:.2f}")
        print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {candidate['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']}")
        print(f"  –ü—Ä–∏—á–∏–Ω–∞: {candidate['–ø—Ä–∏—á–∏–Ω–∞']}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏ (–°–°)
    if '–°–°' in df.columns:
        ss_values = pd.to_numeric(df['–°–°'], errors='coerce').dropna()
        if len(ss_values) > 0:
            print(f"\nüìà –ê–ù–ê–õ–ò–ó –°–¢–ê–í–û–ö (–°–°):")
            print(f"  –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: {ss_values.mean():,.2f} —Ä—É–±.")
            print(f"  –ú–µ–¥–∏–∞–Ω–∞: {ss_values.median():,.2f} —Ä—É–±.")
            print(f"  –ú–∏–Ω–∏–º—É–º: {ss_values.min():,.2f} —Ä—É–±.")
            print(f"  –ú–∞–∫—Å–∏–º—É–º: {ss_values.max():,.2f} —Ä—É–±.")
            print(f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {ss_values.std():,.2f} —Ä—É–±.")
            print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π: {len(ss_values)}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–∫–ª–∞–¥–∞
            if 'Unnamed: 7' in df.columns:  # –û–∫–ª–∞–¥
                salary_values = pd.to_numeric(df['Unnamed: 7'], errors='coerce').dropna()
                if len(salary_values) > 0:
                    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    analysis_df = pd.DataFrame({
                        '–û–∫–ª–∞–¥': salary_values,
                        '–°—Ç–∞–≤–∫–∞_–°–°': ss_values[:len(salary_values)] if len(ss_values) >= len(salary_values) else ss_values
                    })
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–∞–≤–∫–∏ –æ—Ç –æ–∫–ª–∞–¥–∞
                    analysis_df['–ü—Ä–æ—Ü–µ–Ω—Ç_–æ—Ç_–æ–∫–ª–∞–¥–∞'] = (analysis_df['–°—Ç–∞–≤–∫–∞_–°–°'] / analysis_df['–û–∫–ª–∞–¥']) * 100
                    
                    print(f"\nüìä –ü–†–û–¶–ï–ù–¢ –°–¢–ê–í–ö–ò –û–¢ –û–ö–õ–ê–î–ê:")
                    print(f"  –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {analysis_df['–ü—Ä–æ—Ü–µ–Ω—Ç_–æ—Ç_–æ–∫–ª–∞–¥–∞'].mean():.2f}%")
                    print(f"  –ú–µ–¥–∏–∞–Ω–∞: {analysis_df['–ü—Ä–æ—Ü–µ–Ω—Ç_–æ—Ç_–æ–∫–ª–∞–¥–∞'].median():.2f}%")
                    print(f"  –ú–∏–Ω–∏–º—É–º: {analysis_df['–ü—Ä–æ—Ü–µ–Ω—Ç_–æ—Ç_–æ–∫–ª–∞–¥–∞'].min():.2f}%")
                    print(f"  –ú–∞–∫—Å–∏–º—É–º: {analysis_df['–ü—Ä–æ—Ü–µ–Ω—Ç_–æ—Ç_–æ–∫–ª–∞–¥–∞'].max():.2f}%")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
                    analysis_df.to_excel("output/florida_percentage_analysis.xlsx", index=False)
                    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: output/florida_percentage_analysis.xlsx")
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    if percentage_candidates:
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –§–ª–æ—Ä–∏–¥—ã', fontsize=16, fontweight='bold')
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        cols = [c['–∫–æ–ª–æ–Ω–∫–∞'] for c in percentage_candidates]
        means = [c['—Å—Ä–µ–¥–Ω–µ–µ'] for c in percentage_candidates]
        
        axes[0, 0].bar(range(len(cols)), means, color='lightgreen', alpha=0.7)
        axes[0, 0].set_title('–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫')
        axes[0, 0].set_xticks(range(len(cols)))
        axes[0, 0].set_xticklabels(cols, rotation=45, ha='right')
        axes[0, 0].set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for i, v in enumerate(means):
            axes[0, 0].text(i, v + max(means)*0.01, f'{v:.2f}', 
                           ha='center', va='bottom', fontweight='bold')
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π
        mins = [c['–º–∏–Ω'] for c in percentage_candidates]
        maxs = [c['–º–∞–∫—Å'] for c in percentage_candidates]
        
        x = np.arange(len(cols))
        width = 0.35
        
        axes[0, 1].bar(x - width/2, mins, width, label='–ú–∏–Ω–∏–º—É–º', color='lightcoral', alpha=0.7)
        axes[0, 1].bar(x + width/2, maxs, width, label='–ú–∞–∫—Å–∏–º—É–º', color='lightblue', alpha=0.7)
        axes[0, 1].set_title('–î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π')
        axes[0, 1].set_xticks(x)
        axes[0, 1].set_xticklabels(cols, rotation=45, ha='right')
        axes[0, 1].legend()
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π
        counts = [c['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'] for c in percentage_candidates]
        
        axes[1, 0].bar(range(len(cols)), counts, color='orange', alpha=0.7)
        axes[1, 0].set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π')
        axes[1, 0].set_xticks(range(len(cols)))
        axes[1, 0].set_xticklabels(cols, rotation=45, ha='right')
        axes[1, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        if 'sheet_name' in df.columns:
            month_counts = df['sheet_name'].value_counts()
            axes[1, 1].pie(month_counts.values, labels=month_counts.index, autopct='%1.1f%%', startangle=90)
            axes[1, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ—Å—è—Ü–∞–º')
        
        plt.tight_layout()
        plt.savefig("output/florida_percentage_analysis.png", dpi=300, bbox_inches='tight')
        print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: output/florida_percentage_analysis.png")
        plt.show()
    
    # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    with open("output/florida_percentage_report.txt", 'w', encoding='utf-8') as f:
        f.write("–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–¶–ï–ù–¢–ù–´–• –î–ê–ù–ù–´–• –§–õ–û–†–ò–î–´\n")
        f.write("=" * 60 + "\n\n")
        
        f.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}\n\n")
        
        f.write("–ü–†–û–¶–ï–ù–¢–ù–´–ï –ö–û–õ–û–ù–ö–ò:\n")
        f.write("-" * 30 + "\n")
        
        if percentage_candidates:
            for candidate in percentage_candidates:
                f.write(f"\n–ö–æ–ª–æ–Ω–∫–∞: {candidate['–∫–æ–ª–æ–Ω–∫–∞']}\n")
                f.write(f"  –°—Ä–µ–¥–Ω–µ–µ: {candidate['—Å—Ä–µ–¥–Ω–µ–µ']:.2f}\n")
                f.write(f"  –ú–∏–Ω: {candidate['–º–∏–Ω']:.2f}\n")
                f.write(f"  –ú–∞–∫—Å: {candidate['–º–∞–∫—Å']:.2f}\n")
                f.write(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {candidate['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']}\n")
                f.write(f"  –ü—Ä–∏—á–∏–Ω–∞: {candidate['–ø—Ä–∏—á–∏–Ω–∞']}\n")
        else:
            f.write("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–≤–æ–∫
        if '–°–°' in df.columns:
            ss_values = pd.to_numeric(df['–°–°'], errors='coerce').dropna()
            if len(ss_values) > 0:
                f.write(f"\n\n–ê–ù–ê–õ–ò–ó –°–¢–ê–í–û–ö (–°–°):\n")
                f.write("-" * 30 + "\n")
                f.write(f"–°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: {ss_values.mean():,.2f} —Ä—É–±.\n")
                f.write(f"–ú–µ–¥–∏–∞–Ω–∞: {ss_values.median():,.2f} —Ä—É–±.\n")
                f.write(f"–ú–∏–Ω–∏–º—É–º: {ss_values.min():,.2f} —Ä—É–±.\n")
                f.write(f"–ú–∞–∫—Å–∏–º—É–º: {ss_values.max():,.2f} —Ä—É–±.\n")
                f.write(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {ss_values.std():,.2f} —Ä—É–±.\n")
                f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π: {len(ss_values)}\n")
        
        f.write(f"\n\n–ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´:\n")
        f.write("-" * 30 + "\n")
        f.write(f"1. –ù–∞–π–¥–µ–Ω–æ {len(percentage_candidates)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫\n")
        f.write(f"2. –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ –°–°: {ss_values.mean():,.2f} —Ä—É–±.\n")
        if 'Unnamed: 7' in df.columns:
            salary_avg = pd.to_numeric(df['Unnamed: 7'], errors='coerce').dropna().mean()
            f.write(f"3. –°—Ä–µ–¥–Ω–∏–π –æ–∫–ª–∞–¥: {salary_avg:,.2f} —Ä—É–±.\n")
            f.write(f"4. –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–∞–≤–∫–∏ –æ—Ç –æ–∫–ª–∞–¥–∞: {(ss_values.mean()/salary_avg)*100:.2f}%\n")
    
    print(f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: output/florida_percentage_report.txt")

if __name__ == "__main__":
    analyze_florida_percentages()
