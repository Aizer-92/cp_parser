#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å GitHub
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python auto_sync.py [--force] [--message "custom message"]
"""

import subprocess
import os
import sys
import argparse
from datetime import datetime
import json

class ProjectSync:
    def __init__(self, project_root=None):
        self.project_root = project_root or os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        self.gitignore_path = os.path.join(self.project_root, '.gitignore')
        
    def check_git_status(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        try:
            result = subprocess.run(['git', 'status', '--porcelain'], 
                                  capture_output=True, text=True, cwd=self.project_root)
            return result.stdout.strip()
        except subprocess.CalledProcessError:
            return None
            
    def create_gitignore(self):
        """–°–æ–∑–¥–∞–µ—Ç .gitignore —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        if os.path.exists(self.gitignore_path):
            return
            
        gitignore_content = """# –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
venv/
.venv/
env/
.env/

# –ö—ç—à Python
__pycache__/
*.pyc
*.pyo
*.pyd

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
temp/
tmp/
*.tmp
*.temp

# –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
*.json
credentials/
config.json
personal_account.session
.env
.env.local

# –õ–æ–≥–∏
*.log
logs/
log/

# –í—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
output/
*.xlsx
*.png
*.jpg
*.jpeg
*.pdf

# –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
.DS_Store
Thumbs.db
desktop.ini

# IDE —Ñ–∞–π–ª—ã
.vscode/
.idea/
*.swp
*.swo

# –ê—Ä—Ö–∏–≤—ã
*.tar.gz
*.zip
*.rar

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
*.db
*.sqlite
*.sqlite3
"""
        
        with open(self.gitignore_path, 'w', encoding='utf-8') as f:
            f.write(gitignore_content)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω .gitignore —Ñ–∞–π–ª")
        
    def init_git_repo(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        git_dir = os.path.join(self.project_root, '.git')
        if os.path.exists(git_dir):
            return True
            
        try:
            subprocess.run(['git', 'init'], cwd=self.project_root, check=True)
            print("‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ git: {e}")
            return False
            
    def add_files(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã –≤ git"""
        try:
            subprocess.run(['git', 'add', '.'], cwd=self.project_root, check=True)
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
            return False
            
    def commit_changes(self, message=None):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–∏—Ç"""
        if not message:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            message = f"Auto sync: {timestamp}"
            
        try:
            subprocess.run(['git', 'commit', '-m', message], 
                         cwd=self.project_root, check=True)
            print(f"‚úÖ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω: {message}")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞: {e}")
            return False
            
    def push_changes(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ GitHub"""
        try:
            subprocess.run(['git', 'push'], cwd=self.project_root, check=True)
            print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ GitHub")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ GitHub: {e}")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ GitHub")
            return False
            
    def setup_remote(self, repo_url):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
        try:
            subprocess.run(['git', 'remote', 'add', 'origin', repo_url], 
                         cwd=self.project_root, check=True)
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω: {repo_url}")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {e}")
            return False
            
    def sync(self, force=False, message=None):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        print("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º .gitignore
        self.create_gitignore()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º git –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not self.init_git_repo():
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = self.check_git_status()
        if not status and not force:
            print("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            return True
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        if not self.add_files():
            return False
            
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
        if not self.commit_changes(message):
            return False
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ GitHub
        if not self.push_changes():
            return False
            
        print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True

def main():
    parser = argparse.ArgumentParser(description='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub')
    parser.add_argument('--force', action='store_true', 
                       help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–∂–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π')
    parser.add_argument('--message', '-m', type=str,
                       help='–ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–º–∏—Ç–∞')
    parser.add_argument('--setup', type=str,
                       help='URL GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
    
    args = parser.parse_args()
    
    sync = ProjectSync()
    
    if args.setup:
        if sync.setup_remote(args.setup):
            print("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --force –¥–ª—è –ø–µ—Ä–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        return
        
    success = sync.sync(force=args.force, message=args.message)
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
