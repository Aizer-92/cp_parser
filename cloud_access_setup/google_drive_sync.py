#!/usr/bin/env python3
"""
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Drive
–¢—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏: pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib
"""

import os
import json
from datetime import datetime
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
import pickle

class GoogleDriveSync:
    def __init__(self, credentials_path='credentials.json', token_path='token.pickle'):
        self.SCOPES = ['https://www.googleapis.com/auth/drive.file']
        self.credentials_path = credentials_path
        self.token_path = token_path
        self.service = None
        
    def authenticate(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Drive API"""
        creds = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        if os.path.exists(self.token_path):
            with open(self.token_path, 'rb') as token:
                creds = pickle.load(token)
                
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                if not os.path.exists(self.credentials_path):
                    print("‚ùå –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    print("üí° –°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ –∏–∑ Google Cloud Console")
                    return False
                    
                flow = InstalledAppFlow.from_client_secrets_file(
                    self.credentials_path, self.SCOPES)
                creds = flow.run_local_server(port=0)
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
            with open(self.token_path, 'wb') as token:
                pickle.dump(creds, token)
                
        self.service = build('drive', 'v3', credentials=creds)
        return True
        
    def create_folder(self, folder_name, parent_id=None):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –≤ Google Drive"""
        file_metadata = {
            'name': folder_name,
            'mimeType': 'application/vnd.google-apps.folder'
        }
        
        if parent_id:
            file_metadata['parents'] = [parent_id]
            
        try:
            folder = self.service.files().create(
                body=file_metadata, fields='id').execute()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_name}")
            return folder.get('id')
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
            return None
            
    def find_folder(self, folder_name, parent_id=None):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–∞–ø–∫—É –ø–æ –∏–º–µ–Ω–∏"""
        query = f"name='{folder_name}' and mimeType='application/vnd.google-apps.folder'"
        if parent_id:
            query += f" and '{parent_id}' in parents"
            
        try:
            results = self.service.files().list(
                q=query, spaces='drive', fields='files(id, name)').execute()
            files = results.get('files', [])
            return files[0]['id'] if files else None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞–ø–∫–∏: {e}")
            return None
            
    def upload_file(self, file_path, folder_id=None):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Google Drive"""
        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return None
            
        file_metadata = {'name': os.path.basename(file_path)}
        if folder_id:
            file_metadata['parents'] = [folder_id]
            
        try:
            media = MediaFileUpload(file_path, resumable=True)
            file = self.service.files().create(
                body=file_metadata, media_body=media, fields='id').execute()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {os.path.basename(file_path)}")
            return file.get('id')
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return None
            
    def sync_folder(self, local_folder, drive_folder_name, exclude_patterns=None):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É —Å Google Drive"""
        if not self.service:
            if not self.authenticate():
                return False
                
        # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –≤ Drive
        folder_id = self.find_folder(drive_folder_name)
        if not folder_id:
            folder_id = self.create_folder(drive_folder_name)
            
        if not folder_id:
            return False
            
        # –û–±—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–µ
        for root, dirs, files in os.walk(local_folder):
            for file in files:
                file_path = os.path.join(root, file)
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                if exclude_patterns:
                    skip = False
                    for pattern in exclude_patterns:
                        if pattern in file_path:
                            skip = True
                            break
                    if skip:
                        continue
                        
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                self.upload_file(file_path, folder_id)
                
        return True

def main():
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    sync = GoogleDriveSync()
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–∞–ø–∫—É Docs
    docs_folder = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 'Docs')
    
    exclude_patterns = [
        '__pycache__',
        '.DS_Store',
        'venv',
        '.git',
        '*.log',
        'temp',
        'tmp'
    ]
    
    if sync.sync_folder(docs_folder, 'Reshad_Docs', exclude_patterns):
        print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")

if __name__ == "__main__":
    main()
