#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è PostgreSQL
–í–∫–ª—é—á–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ FTS –∏–Ω–¥–µ–∫—Å–æ–≤, –≤–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

import psycopg2
import os
import logging
from typing import List, Dict, Any, Optional, Tuple

logger = logging.getLogger(__name__)

class FullTextSearch:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º PostgreSQL"""
    
    def __init__(self, pg_config: Dict[str, str]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FTS –º–æ–¥—É–ª—è
        
        Args:
            pg_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL
        """
        self.pg_config = pg_config
        self.weights = {
            'A': ['title', 'original_title'],  # –í—ã—Å–æ–∫–∏–π –≤–µ—Å - –∑–∞–≥–æ–ª–æ–≤–∫–∏
            'B': ['brand', 'vendor'],          # –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å - –±—Ä–µ–Ω–¥—ã –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏
            'C': ['description']               # –ù–∏–∑–∫–∏–π –≤–µ—Å - –æ–ø–∏—Å–∞–Ω–∏—è
        }
    
    def get_connection(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL"""
        conn = psycopg2.connect(**self.pg_config)
        conn.set_client_encoding('UTF8')
        return conn
    
    def create_fts_structure(self) -> bool:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ
        """
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            logger.info("üîç –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã FTS...")
            
            # 1. –î–æ–±–∞–≤–ª—è–µ–º search_vector –∫–æ–ª–æ–Ω–∫—É
            cursor.execute("""
                ALTER TABLE products 
                ADD COLUMN IF NOT EXISTS search_vector tsvector
            """)
            
            # 2. –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è search_vector —Å –≤–µ—Å–∞–º–∏
            cursor.execute("""
                CREATE OR REPLACE FUNCTION update_search_vector()
                RETURNS TRIGGER AS $$
                BEGIN
                    -- –ò—Å–ø–æ–ª—å–∑—É–µ–º 'russian' –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏
                    NEW.search_vector := 
                        setweight(to_tsvector('russian', COALESCE(NEW.title, '')), 'A') ||
                        setweight(to_tsvector('russian', COALESCE(NEW.original_title, '')), 'A') ||
                        setweight(to_tsvector('russian', COALESCE(NEW.brand, '')), 'B') ||
                        setweight(to_tsvector('russian', COALESCE(NEW.vendor, '')), 'B') ||
                        setweight(to_tsvector('russian', COALESCE(NEW.description, '')), 'C');
                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;
            """)
            
            # 3. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            cursor.execute("""
                DROP TRIGGER IF EXISTS update_products_search_vector ON products;
                CREATE TRIGGER update_products_search_vector
                    BEFORE INSERT OR UPDATE ON products
                    FOR EACH ROW EXECUTE FUNCTION update_search_vector();
            """)
            
            # 4. –°–æ–∑–¥–∞–µ–º GIN –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            cursor.execute("""
                CREATE INDEX IF NOT EXISTS idx_products_search_vector 
                ON products USING gin(search_vector)
            """)
            
            conn.commit()
            cursor.close()
            conn.close()
            
            logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ FTS —Å–æ–∑–¥–∞–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã FTS: {e}")
            return False
    
    def populate_search_vectors(self) -> bool:
        """
        –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ search_vector –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
        """
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            logger.info("üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ search_vector –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π...")
            
            cursor.execute("""
                UPDATE products SET search_vector = 
                    setweight(to_tsvector('russian', COALESCE(title, '')), 'A') ||
                    setweight(to_tsvector('russian', COALESCE(original_title, '')), 'A') ||
                    setweight(to_tsvector('russian', COALESCE(brand, '')), 'B') ||
                    setweight(to_tsvector('russian', COALESCE(vendor, '')), 'B') ||
                    setweight(to_tsvector('russian', COALESCE(description, '')), 'C')
            """)
            
            updated_count = cursor.rowcount
            conn.commit()
            cursor.close()
            conn.close()
            
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–ø–∏—Å–µ–π")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è search_vector: {e}")
            return False
    
    def search_products(self, query: str, limit: int = 25, offset: int = 0) -> Tuple[List[Dict], int]:
        """
        –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            
        Returns:
            Tuple[List[Dict], int]: (—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        """
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            # –ü–æ–∏—Å–∫ —Å —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º russian –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏)
            search_query = """
                SELECT p.id, p.offer_id, p.title, p.original_title, p.vendor, 
                       p.has_specifications, p.has_images, p.moq_min, p.moq_max,
                       p.brand, p.description, p.lead_time, p.source_url, p.source_databases,
                       ts_rank_cd(p.search_vector, plainto_tsquery('russian', %s), 32) as rank
                FROM products p
                WHERE p.search_vector @@ plainto_tsquery('russian', %s)
                ORDER BY rank DESC, p.id DESC
                LIMIT %s OFFSET %s
            """
            
            cursor.execute(search_query, (query, query, limit, offset))
            products = cursor.fetchall()
            
            # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            count_query = """
                SELECT COUNT(*) FROM products p
                WHERE p.search_vector @@ plainto_tsquery('russian', %s)
            """
            cursor.execute(count_query, (query,))
            total_count = cursor.fetchone()[0]
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            result_products = []
            for product in products:
                product_dict = {
                    'id': product[0],
                    'offer_id': product[1],
                    'title': product[2],
                    'original_title': product[3],
                    'vendor': product[4],
                    'has_specifications': product[5],
                    'has_images': product[6],
                    'moq_min': product[7] or 0,
                    'moq_max': product[8] or 0,
                    'brand': product[9],
                    'description': product[10],
                    'lead_time': product[11],
                    'source_url': product[12],
                    'source_databases': product[13],
                    'search_rank': float(product[14]) if product[14] else 0.0
                }
                result_products.append(product_dict)
            
            cursor.close()
            conn.close()
            
            return result_products, total_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return [], 0
    
    def get_search_suggestions(self, query: str, limit: int = 10) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Args:
            query: –ß–∞—Å—Ç–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        """
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            cursor.execute("""
                SELECT DISTINCT title
                FROM products 
                WHERE title ILIKE %s
                ORDER BY title
                LIMIT %s
            """, (f"%{query}%", limit))
            
            suggestions = [row[0] for row in cursor.fetchall()]
            
            cursor.close()
            conn.close()
            
            return suggestions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
            return []
    
    def get_search_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞
        
        Returns:
            Dict[str, Any]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
            cursor.execute("SELECT COUNT(*) FROM products")
            total_products = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å search_vector
            cursor.execute("SELECT COUNT(*) FROM products WHERE search_vector IS NOT NULL")
            products_with_fts = cursor.fetchone()[0]
            
            # –†–∞–∑–º–µ—Ä –∏–Ω–¥–µ–∫—Å–∞
            cursor.execute("""
                SELECT pg_size_pretty(pg_relation_size('idx_products_search_vector'))
            """)
            index_size = cursor.fetchone()[0]
            
            cursor.close()
            conn.close()
            
            return {
                'total_products': total_products,
                'products_with_fts': products_with_fts,
                'fts_coverage': f"{(products_with_fts / total_products * 100):.1f}%" if total_products > 0 else "0%",
                'index_size': index_size,
                'weights': self.weights
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def test_search(self, test_queries: List[str] = None) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        
        Args:
            test_queries: –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if test_queries is None:
            test_queries = ["—Ç–µ–ª–µ—Ñ–æ–Ω", "–ø–ª–∞—Ç—å–µ", "–æ–±—É–≤—å", "—á–∞—Å—ã", "—Å—É–º–∫–∞"]
        
        results = {}
        
        for query in test_queries:
            try:
                products, count = self.search_products(query, limit=5)
                results[query] = {
                    'count': count,
                    'top_results': [
                        {
                            'title': p['title'][:50],
                            'rank': p['search_rank']
                        } for p in products[:3]
                    ]
                }
            except Exception as e:
                results[query] = {'error': str(e)}
        
        return results

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FTS
def initialize_fts(pg_config: Dict[str, str]) -> bool:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
    
    Args:
        pg_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
    """
    fts = FullTextSearch(pg_config)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if not fts.create_fts_structure():
        return False
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º search_vector
    if not fts.populate_search_vectors():
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º
    test_results = fts.test_search()
    logger.info("üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    for query, result in test_results.items():
        if 'error' not in result:
            logger.info(f"  {query}: {result['count']} —Ç–æ–≤–∞—Ä–æ–≤")
        else:
            logger.error(f"  {query}: {result['error']}")
    
    return True

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    pg_config = {
        'host': os.getenv('POSTGRES_HOST', 'localhost'),
        'port': os.getenv('POSTGRES_PORT', '5432'),
        'database': os.getenv('POSTGRES_DB', 'promo_calculator'),
        'user': os.getenv('POSTGRES_USER', 'postgres'),
        'password': os.getenv('POSTGRES_PASSWORD', 'postgres')
    }
    
    logging.basicConfig(level=logging.INFO)
    
    if initialize_fts(pg_config):
        print("‚úÖ FTS –º–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FTS –º–æ–¥—É–ª—è")
