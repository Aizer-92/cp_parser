#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–æ–≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–¥–æ—Ä–æ–≤—å—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏
–∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç—ã —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/health_trend_analyzer.py
    python scripts/health_trend_analyzer.py --parameter glucose
    python scripts/health_trend_analyzer.py --report
"""

import json
import pandas as pd
import matplotlib.pyplot as plt
from pathlib import Path
from datetime import datetime, timedelta
import argparse
import numpy as np

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
import sys
sys.path.append(str(Path(__file__).parent))

def load_medical_records(records_dir="Docs/Health/lab_results"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤"""
    records_path = Path(records_dir)
    
    if not records_path.exists():
        print(f"üìÅ –ü–∞–ø–∫–∞ {records_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return []
    
    json_files = list(records_path.glob("analysis_*.json"))
    
    if not json_files:
        print(f"üìÑ JSON —Ñ–∞–π–ª—ã —Å –∞–Ω–∞–ª–∏–∑–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {records_path}")
        return []
    
    records = []
    for json_file in json_files:
        try:
            with open(json_file, 'r', encoding='utf-8') as f:
                record = json.load(f)
                records.append(record)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {json_file}: {e}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    records.sort(key=lambda x: x['date'])
    return records

def create_trends_dataframe(records):
    """–°–æ–∑–¥–∞–µ—Ç DataFrame —Å —Ç—Ä–µ–Ω–¥–∞–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
    if not records:
        return pd.DataFrame()
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω DataFrame
    data_rows = []
    
    for record in records:
        date = record['date']
        order_number = record['order_number']
        
        for param, data in record['values'].items():
            data_rows.append({
                'date': pd.to_datetime(date),
                'order_number': order_number,
                'parameter': param,
                'value': data['value'],
                'unit': data['unit'],
                'in_range': data['in_range'],
                'normal_min': data['normal_range']['min'] if data['normal_range'] else None,
                'normal_max': data['normal_range']['max'] if data['normal_range'] else None,
            })
    
    df = pd.DataFrame(data_rows)
    return df

def analyze_parameter_trend(df, parameter):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
    param_data = df[df['parameter'] == parameter].copy()
    
    if param_data.empty:
        return None
    
    param_data = param_data.sort_values('date')
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    analysis = {
        'parameter': parameter,
        'count': len(param_data),
        'first_date': param_data['date'].min(),
        'last_date': param_data['date'].max(),
        'first_value': param_data['value'].iloc[0],
        'last_value': param_data['value'].iloc[-1],
        'min_value': param_data['value'].min(),
        'max_value': param_data['value'].max(),
        'mean_value': param_data['value'].mean(),
        'std_value': param_data['value'].std(),
        'unit': param_data['unit'].iloc[0] if not param_data['unit'].empty else '',
        'normal_min': param_data['normal_min'].iloc[0] if not param_data['normal_min'].empty else None,
        'normal_max': param_data['normal_max'].iloc[0] if not param_data['normal_max'].empty else None,
    }
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥
    if len(param_data) >= 2:
        # –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
        x = np.arange(len(param_data))
        y = param_data['value'].values
        
        slope = np.polyfit(x, y, 1)[0]
        
        if abs(slope) < 0.1:  # –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            trend = "—Å—Ç–∞–±–∏–ª—å–Ω—ã–π"
        elif slope > 0:
            trend = "—Ä–∞—Å—Ç—É—â–∏–π"
        else:
            trend = "—É–±—ã–≤–∞—é—â–∏–π"
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
        change = analysis['last_value'] - analysis['first_value']
        change_percent = (change / analysis['first_value']) * 100 if analysis['first_value'] != 0 else 0
        
        analysis.update({
            'trend': trend,
            'slope': slope,
            'change_absolute': change,
            'change_percent': change_percent,
        })
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–æ—Ä–º—ã
    normal_violations = param_data[param_data['in_range'] == False]
    analysis['violations_count'] = len(normal_violations)
    analysis['violations_percent'] = (len(normal_violations) / len(param_data)) * 100
    
    return analysis

def create_trend_visualization(df, parameter, output_dir="Docs/Health/trends"):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ç—Ä–µ–Ω–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
    try:
        import matplotlib.pyplot as plt
        plt.style.use('default')
    except ImportError:
        print("‚ö†Ô∏è  matplotlib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≥—Ä–∞—Ñ–∏–∫ –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω")
        return None
    
    output_dir = Path(output_dir)
    output_dir.mkdir(parents=True, exist_ok=True)
    
    param_data = df[df['parameter'] == parameter].copy()
    
    if param_data.empty:
        return None
    
    param_data = param_data.sort_values('date')
    
    plt.figure(figsize=(12, 8))
    
    # –ì—Ä–∞—Ñ–∏–∫ –∑–Ω–∞—á–µ–Ω–∏–π
    plt.subplot(2, 1, 1)
    plt.plot(param_data['date'], param_data['value'], 'o-', linewidth=2, markersize=8, label='–ó–Ω–∞—á–µ–Ω–∏—è')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –Ω–æ—Ä–º—ã
    if not param_data['normal_min'].isna().all():
        plt.axhline(y=param_data['normal_min'].iloc[0], color='green', linestyle='--', alpha=0.7, label='–ù–∏–∂–Ω—è—è –Ω–æ—Ä–º–∞')
        plt.axhline(y=param_data['normal_max'].iloc[0], color='green', linestyle='--', alpha=0.7, label='–í–µ—Ä—Ö–Ω—è—è –Ω–æ—Ä–º–∞')
        
        # –ó–∞–∫—Ä–∞—à–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –Ω–æ—Ä–º—ã
        plt.fill_between(param_data['date'], 
                        param_data['normal_min'].iloc[0], 
                        param_data['normal_max'].iloc[0], 
                        alpha=0.2, color='green', label='–ù–æ—Ä–º–∞')
    
    plt.title(f'–î–∏–Ω–∞–º–∏–∫–∞ {parameter.replace("_", " ").title()}')
    plt.ylabel(f'–ó–Ω–∞—á–µ–Ω–∏–µ ({param_data["unit"].iloc[0]})')
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.xticks(rotation=45)
    
    # –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç –Ω–æ—Ä–º—ã
    plt.subplot(2, 1, 2)
    if not param_data['normal_min'].isna().all():
        normal_center = (param_data['normal_min'].iloc[0] + param_data['normal_max'].iloc[0]) / 2
        deviations = ((param_data['value'] - normal_center) / normal_center) * 100
        
        colors = ['red' if not in_range else 'green' for in_range in param_data['in_range']]
        plt.bar(param_data['date'], deviations, color=colors, alpha=0.7)
        plt.axhline(y=0, color='black', linestyle='-', linewidth=1)
        plt.title('–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –Ω–æ—Ä–º—ã (%)')
        plt.ylabel('–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (%)')
        plt.xticks(rotation=45)
        plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    filename = f"trend_{parameter}_{datetime.now().strftime('%Y%m%d')}.png"
    filepath = output_dir / filename
    plt.savefig(filepath, dpi=300, bbox_inches='tight')
    plt.close()
    
    return filepath

def generate_health_report(records, output_path="Docs/Health/health_report.md"):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –æ—Ç—á–µ—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é"""
    if not records:
        print("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
        return
    
    df = create_trends_dataframe(records)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parameters = df['parameter'].unique()
    parameter_analyses = {}
    
    for param in parameters:
        analysis = analyze_parameter_trend(df, param)
        if analysis:
            parameter_analyses[param] = analysis
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    report_content = f"""# üìä –û—Ç—á–µ—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}  
**–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:** {df['date'].min().strftime('%d.%m.%Y')} - {df['date'].max().strftime('%d.%m.%Y')}  
**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤:** {len(records)}

## üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è:** {len(parameters)}
- **–í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π:** {len(df)}
- **–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑:** {records[-1]['date']}

## ü©∫ –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º

"""
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–∞—Ä—É—à–µ–Ω–∏–π)
    sorted_params = sorted(parameter_analyses.items(), 
                          key=lambda x: x[1]['violations_percent'], 
                          reverse=True)
    
    for param, analysis in sorted_params:
        param_name = param.replace('_', ' ').title()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if analysis['violations_percent'] == 0:
            status = "‚úÖ –û—Ç–ª–∏—á–Ω–æ"
        elif analysis['violations_percent'] < 25:
            status = "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ"
        else:
            status = "‚ùå –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        if analysis.get('trend'):
            if analysis['trend'] == '—Å—Ç–∞–±–∏–ª—å–Ω—ã–π':
                trend_icon = "üìä"
            elif analysis['trend'] == '—Ä–∞—Å—Ç—É—â–∏–π':
                trend_icon = "üìà"
            else:
                trend_icon = "üìâ"
            trend_text = f"{trend_icon} {analysis['trend']}"
        else:
            trend_text = "üìä –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
        
        report_content += f"""### {param_name} {status}

- **–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:** {analysis['last_value']} {analysis['unit']}
- **–¢—Ä–µ–Ω–¥:** {trend_text}
- **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥:** {analysis.get('change_absolute', 0):.1f} {analysis['unit']} ({analysis.get('change_percent', 0):+.1f}%)
- **–ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–æ—Ä–º—ã:** {analysis['violations_count']}/{analysis['count']} ({analysis['violations_percent']:.1f}%)
- **–ù–æ—Ä–º–∞:** {analysis['normal_min']}-{analysis['normal_max']} {analysis['unit']}

"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    report_content += """## üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

### –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
"""
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
    problem_params = [param for param, analysis in parameter_analyses.items() 
                     if analysis['violations_percent'] > 25]
    
    if problem_params:
        for param in problem_params:
            param_name = param.replace('_', ' ').title()
            report_content += f"- [ ] **{param_name}**: –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏\n"
    else:
        report_content += "- ‚úÖ –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã\n"
    
    report_content += """
### –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- [ ] –†–µ–≥—É–ª—è—Ä–Ω–æ —Å–¥–∞–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑—ã (–∫–∞–∂–¥—ã–µ 6 –º–µ—Å—è—Ü–µ–≤)
- [ ] –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏
- [ ] –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
- [ ] –ü—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≤—Ä–∞—á–æ–º

## üìÖ –ü–ª–∞–Ω —Å–ª–µ–¥—É—é—â–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤

- **–°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞–Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:** {(datetime.now() + timedelta(days=180)).strftime('%d.%m.%Y')}
- **–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –ø—Ä–∏ –ª–µ—á–µ–Ω–∏–∏:** –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é –≤—Ä–∞—á–∞

## üìä –ì—Ä–∞—Ñ–∏–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤

[–ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫–µ Docs/Health/trends/]

---
*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤*
"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(report_content)
    
    print(f"üìã –û—Ç—á–µ—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
    
    return parameter_analyses

def main():
    parser = argparse.ArgumentParser(description='–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–æ–≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π')
    parser.add_argument('--parameter', help='–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä')
    parser.add_argument('--report', action='store_true', help='–°–æ–∑–¥–∞—Ç—å –æ–±—â–∏–π –æ—Ç—á–µ—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é')
    parser.add_argument('--records-dir', default='Docs/Health/lab_results', help='–ü–∞–ø–∫–∞ —Å –∑–∞–ø–∏—Å—è–º–∏ –∞–Ω–∞–ª–∏–∑–æ–≤')
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏
    records = load_medical_records(args.records_dir)
    
    if not records:
        print("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ medical_pdf_parser.py –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF —Ñ–∞–π–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–æ–≤")
        return
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π –∞–Ω–∞–ª–∏–∑–æ–≤")
    
    df = create_trends_dataframe(records)
    
    if args.parameter:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        analysis = analyze_parameter_trend(df, args.parameter)
        
        if analysis:
            print(f"\nüìà –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {args.parameter}")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {analysis['count']}")
            print(f"–ü–µ—Ä–∏–æ–¥: {analysis['first_date'].strftime('%d.%m.%Y')} - {analysis['last_date'].strftime('%d.%m.%Y')}")
            print(f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {analysis['last_value']} {analysis['unit']}")
            
            if analysis.get('trend'):
                print(f"–¢—Ä–µ–Ω–¥: {analysis['trend']}")
                print(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {analysis['change_absolute']:+.1f} {analysis['unit']} ({analysis['change_percent']:+.1f}%)")
            
            print(f"–ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–æ—Ä–º—ã: {analysis['violations_count']}/{analysis['count']} ({analysis['violations_percent']:.1f}%)")
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            chart_path = create_trend_visualization(df, args.parameter)
            if chart_path:
                print(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {chart_path}")
        else:
            print(f"‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä {args.parameter} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    elif args.report:
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
        generate_health_report(records)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        parameters = df['parameter'].unique()
        print(f"\nüìä –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è {len(parameters)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
        
        for param in parameters:
            chart_path = create_trend_visualization(df, param)
            if chart_path:
                print(f"üìà –ì—Ä–∞—Ñ–∏–∫ {param}: {chart_path.name}")
    
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        parameters = df['parameter'].unique()
        print(f"\nüìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ({len(parameters)}):")
        
        for i, param in enumerate(parameters, 1):
            param_data = df[df['parameter'] == param]
            print(f"{i:2d}. {param.replace('_', ' ').title()} ({len(param_data)} –∏–∑–º–µ—Ä–µ–Ω–∏–π)")
        
        print(f"\nüí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print(f"   python scripts/health_trend_analyzer.py --parameter glucose")
        print(f"   python scripts/health_trend_analyzer.py --report")

if __name__ == "__main__":
    main()
