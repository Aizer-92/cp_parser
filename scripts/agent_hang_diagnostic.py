#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≥–µ–Ω—Ç–æ–º Cursor
–ü—Ä–æ–±–ª–µ–º–∞: –ê–≥–µ–Ω—Ç –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ,
–æ—Å—Ç–∞–µ—Ç—Å—è –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å –∏ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å:
- –ë–ª–æ–∫–∏—Ä—É—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
- –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
- –ü—Ä–æ–±–ª–µ–º–∞–º–∏ —Å –≤—ã–≤–æ–¥–æ–º –∫–æ–º–∞–Ω–¥
- –¢–∞–π–º–∞—É—Ç–∞–º–∏ –∞–≥–µ–Ω—Ç–∞
"""

import subprocess
import sys
import os
import time
import signal
import threading
from pathlib import Path

def print_header(title):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{'='*60}")
    print(f"ü§ñ {title}")
    print(f"{'='*60}")

def print_step(step, description):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —à–∞–≥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print(f"\nüìã –®–∞–≥ {step}: {description}")
    print("-" * 40)

def test_command_completion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–º–∞–Ω–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–ò–Ø –ö–û–ú–ê–ù–î")
    
    test_commands = [
        {
            "command": "echo 'Test completed'",
            "description": "–ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –≤—ã–≤–æ–¥–æ–º",
            "should_complete": True
        },
        {
            "command": "py -c \"print('Python test completed')\"",
            "description": "Python –∫–æ–º–∞–Ω–¥–∞ —Å –≤—ã–≤–æ–¥–æ–º",
            "should_complete": True
        },
        {
            "command": "py -c \"import time; time.sleep(2); print('Delayed completion')\"",
            "description": "–ö–æ–º–∞–Ω–¥–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π",
            "should_complete": True
        },
        {
            "command": "py -c \"print('Start'); import sys; sys.stdout.flush(); print('End')\"",
            "description": "–ö–æ–º–∞–Ω–¥–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º flush",
            "should_complete": True
        },
        {
            "command": "py -c \"while True: pass\"",
            "description": "–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª (–¥–æ–ª–∂–µ–Ω –∑–∞–≤–∏—Å–Ω—É—Ç—å)",
            "should_complete": False,
            "timeout": 3
        }
    ]
    
    for i, test in enumerate(test_commands, 1):
        print_step(f"–¢–µ—Å—Ç {i}", test["description"])
        print(f" –ö–æ–º–∞–Ω–¥–∞: {test['command']}")
        
        timeout = test.get("timeout", 10)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            result = subprocess.run(
                test["command"],
                shell=True,
                capture_output=True,
                text=True,
                timeout=timeout,
                encoding='utf-8',
                errors='replace'
            )
            
            if result.returncode == 0:
                print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ")
                if result.stdout.strip():
                    print(f"üì§ –í—ã–≤–æ–¥: {result.stdout.strip()}")
            else:
                print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ {result.returncode})")
                if result.stderr.strip():
                    print(f"üì§ –û—à–∏–±–∫–∞: {result.stderr.strip()}")
                    
        except subprocess.TimeoutExpired:
            if test["should_complete"]:
                print(f"‚è∞ –¢–∞–π–º–∞—É—Ç! –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ {timeout} —Å–µ–∫")
                print("   ‚Üí –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –∑–∞–≤–∏—Å–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞")
            else:
                print(f"‚è∞ –û–∂–∏–¥–∞–µ–º—ã–π —Ç–∞–π–º–∞—É—Ç (–∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≤–∏—Å–Ω—É—Ç—å)")
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

def test_interactive_commands():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∑–∞–≤–∏—Å–Ω—É—Ç—å"""
    print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–• –ö–û–ú–ê–ù–î")
    
    interactive_commands = [
        {
            "command": "py -c \"input('–í–≤–µ–¥–∏—Ç–µ —á—Ç–æ-—Ç–æ: ')\"",
            "description": "–ö–æ–º–∞–Ω–¥–∞ —Å input() - –∂–¥–µ—Ç –≤–≤–æ–¥–∞",
            "problem": "–ñ–¥–µ—Ç –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        },
        {
            "command": "py -c \"import sys; sys.stdin.read()\"",
            "description": "–ö–æ–º–∞–Ω–¥–∞ —á–∏—Ç–∞–µ—Ç stdin –¥–æ EOF",
            "problem": "–ñ–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è stdin"
        },
        {
            "command": "py -c \"while True: print('Running...'); import time; time.sleep(1)\"",
            "description": "–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å –≤—ã–≤–æ–¥–æ–º",
            "problem": "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è"
        }
    ]
    
    for i, test in enumerate(interactive_commands, 1):
        print_step(f"–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç {i}", test["description"])
        print(f" –ö–æ–º–∞–Ω–¥–∞: {test['command']}")
        print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞: {test['problem']}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        try:
            process = subprocess.Popen(
                test["command"],
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
            time.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            if process.poll() is None:
                print("‚è∞ –ü—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–∑–∞–≤–∏—Å)")
                print("   ‚Üí –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –∑–∞–≤–∏—Å–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞")
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                process.terminate()
                process.wait(timeout=5)
            else:
                print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_output_buffering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π –≤—ã–≤–æ–¥–∞"""
    print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–£–§–ï–†–ò–ó–ê–¶–ò–ò –í–´–í–û–î–ê")
    
    buffering_tests = [
        {
            "command": "py -c \"print('Line 1'); print('Line 2'); print('Line 3')\"",
            "description": "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –±–µ–∑ flush",
            "expected": "–í—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è"
        },
        {
            "command": "py -c \"import sys; print('Line 1'); sys.stdout.flush(); print('Line 2'); sys.stdout.flush()\"",
            "description": "–í—ã–≤–æ–¥ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º flush",
            "expected": "–°—Ç—Ä–æ–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ –º–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
        },
        {
            "command": "py -c \"import sys; sys.stdout = sys.stderr; print('To stderr')\"",
            "description": "–í—ã–≤–æ–¥ –≤ stderr",
            "expected": "–í—ã–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ stderr"
        }
    ]
    
    for i, test in enumerate(buffering_tests, 1):
        print_step(f"–ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è {i}", test["description"])
        print(f" –ö–æ–º–∞–Ω–¥–∞: {test['command']}")
        print(f"üéØ –û–∂–∏–¥–∞–µ—Ç—Å—è: {test['expected']}")
        
        try:
            result = subprocess.run(
                test["command"],
                shell=True,
                capture_output=True,
                text=True,
                timeout=10
            )
            
            print(f"üì§ stdout: {result.stdout.strip()}")
            if result.stderr.strip():
                print(f"üì§ stderr: {result.stderr.strip()}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def create_agent_safe_commands():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
    print_header("–ë–ï–ó–û–ü–ê–°–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ê–ì–ï–ù–¢–ê")
    
    safe_commands = {
        "python_simple": {
            "command": "py -c \"print('Hello from Python')\"",
            "description": "–ü—Ä–æ—Å—Ç–∞—è Python –∫–æ–º–∞–Ω–¥–∞ —Å –≤—ã–≤–æ–¥–æ–º"
        },
        "python_with_flush": {
            "command": "py -c \"import sys; print('Start'); sys.stdout.flush(); print('End'); sys.stdout.flush()\"",
            "description": "Python –∫–æ–º–∞–Ω–¥–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º flush"
        },
        "python_with_timeout": {
            "command": "timeout 10 py -c \"import time; time.sleep(5); print('Completed')\"",
            "description": "Python –∫–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"
        },
        "file_operations": {
            "command": "py -c \"import os; print(f'Current dir: {os.getcwd()}'); print(f'Files: {len(os.listdir())}')\"",
            "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏"
        },
        "system_info": {
            "command": "py -c \"import platform; print(f'OS: {platform.system()}'); print(f'Python: {platform.python_version()}')\"",
            "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"
        }
    }
    
    print("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    for name, cmd in safe_commands.items():
        print(f"\nüîß {name}:")
        print(f"   –ö–æ–º–∞–Ω–¥–∞: {cmd['command']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {cmd['description']}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    script_content = '''#!/bin/bash
# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≥–µ–Ω—Ç–∞ Cursor

echo "ü§ñ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≥–µ–Ω—Ç–∞"

# 1. –ü—Ä–æ—Å—Ç–∞—è Python –∫–æ–º–∞–Ω–¥–∞
echo "üìã –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞"
py -c "print('Hello from Python')"

# 2. –ö–æ–º–∞–Ω–¥–∞ —Å flush
echo "üìã –¢–µ—Å—Ç 2: –ö–æ–º–∞–Ω–¥–∞ —Å flush"
py -c "import sys; print('Start'); sys.stdout.flush(); print('End'); sys.stdout.flush()"

# 3. –ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
echo "üìã –¢–µ—Å—Ç 3: –ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"
timeout 5 py -c "import time; time.sleep(2); print('Completed')"

# 4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
echo "üìã –¢–µ—Å—Ç 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"
py -c "import platform; print(f'OS: {platform.system()}'); print(f'Python: {platform.python_version()}')"

echo "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
'''
    
    script_path = Path.cwd() / "agent_safe_commands.sh"
    try:
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(script_content)
        os.chmod(script_path, 0o755)
        print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏: {script_path}")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./agent_safe_commands.sh")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}")

def provide_agent_solutions():
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–±–ª–µ–º —Å –∞–≥–µ–Ω—Ç–æ–º"""
    print_header("–†–ï–®–ï–ù–ò–Ø –î–õ–Ø –ü–†–û–ë–õ–ï–ú –° –ê–ì–ï–ù–¢–û–ú")
    
    solutions = [
        {
            "problem": "–ê–≥–µ–Ω—Ç –∑–∞–≤–∏—Å–∞–µ—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥",
            "causes": [
                "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è (–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª)",
                "–ö–æ–º–∞–Ω–¥–∞ –∂–¥–µ—Ç –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (input())",
                "–ö–æ–º–∞–Ω–¥–∞ —á–∏—Ç–∞–µ—Ç stdin –¥–æ EOF",
                "–ü—Ä–æ–±–ª–µ–º—ã —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π –≤—ã–≤–æ–¥–∞",
                "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ"
            ],
            "solutions": [
                "1. –î–æ–±–∞–≤–ª—è–π—Ç–µ timeout –¥–ª—è –∫–æ–º–∞–Ω–¥: `timeout 10 your_command`",
                "2. –ò–∑–±–µ–≥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (input(), raw_input())",
                "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `sys.stdout.flush()` –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞",
                "4. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                "5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `subprocess.run()` —Å timeout –≤ Python —Å–∫—Ä–∏–ø—Ç–∞—Ö"
            ]
        },
        {
            "problem": "–ê–≥–µ–Ω—Ç –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥",
            "causes": [
                "–ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞ Python",
                "–í—ã–≤–æ–¥ –∏–¥–µ—Ç –≤ stderr –≤–º–µ—Å—Ç–æ stdout",
                "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç –Ω–∏—á–µ–≥–æ",
                "–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π"
            ],
            "solutions": [
                "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `-u` —Ñ–ª–∞–≥ –¥–ª—è Python: `py -u script.py`",
                "2. –î–æ–±–∞–≤–ª—è–π—Ç–µ `sys.stdout.flush()` –ø–æ—Å–ª–µ print()",
                "3. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏ stderr, –∏ stdout",
                "4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É: `PYTHONIOENCODING=utf-8`"
            ]
        },
        {
            "problem": "–ê–≥–µ–Ω—Ç –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥",
            "causes": [
                "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—á–µ–Ω—å –¥–æ–ª–≥–æ",
                "–ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã",
                "–°–µ—Ç–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞",
                "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–∏—Å–∞–µ—Ç –Ω–∞ I/O –æ–ø–µ—Ä–∞—Ü–∏—è—Ö"
            ],
            "solutions": [
                "1. –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ä–∞–∑—É–º–Ω—ã–π timeout",
                "2. –†–∞–∑–±–∏–≤–∞–π—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —á–∞—Å—Ç–∏",
                "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
                "4. –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ–Ω–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
            ]
        }
    ]
    
    for i, solution in enumerate(solutions, 1):
        print(f"\nüîß –ü—Ä–æ–±–ª–µ–º–∞ {i}: {solution['problem']}")
        print("üìã –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        for cause in solution['causes']:
            print(f"   ‚Ä¢ {cause}")
        print("‚úÖ –†–µ—à–µ–Ω–∏—è:")
        for sol in solution['solutions']:
            print(f"   {sol}")

def create_agent_best_practices():
    """–°–æ–∑–¥–∞–µ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
    print_header("–õ–£–ß–®–ò–ï –ü–†–ê–ö–¢–ò–ö–ò –î–õ–Ø –ê–ì–ï–ù–¢–ê")
    
    practices = {
        "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã": [
            "py -c \"print('Hello')\"",
            "py -c \"import sys; print('Start'); sys.stdout.flush(); print('End')\"",
            "timeout 10 py script.py",
            "py -u script.py  # -u –¥–ª—è unbuffered output"
        ],
        "–û–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–∏–∑–±–µ–≥–∞—Ç—å)": [
            "py -c \"input('Enter: ')\"  # –ñ–¥–µ—Ç –≤–≤–æ–¥–∞",
            "py -c \"while True: pass\"  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª",
            "py -c \"sys.stdin.read()\"  # –ß–∏—Ç–∞–µ—Ç –¥–æ EOF",
            "py script.py  # –ë–µ–∑ timeout –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"
        ],
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è": [
            "–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ return code –∫–æ–º–∞–Ω–¥—ã",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ timeout –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥",
            "–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏ stdout, –∏ stderr",
            "–õ–æ–≥–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
        ],
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫": [
            "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ TimeoutExpired –∏—Å–∫–ª—é—á–µ–Ω–∏—è",
            "–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É –≤—ã–≤–æ–¥–∞",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ errors='replace' –¥–ª—è subprocess",
            "–õ–æ–≥–∏—Ä—É–π—Ç–µ –≤—Å–µ –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
        ]
    }
    
    for category, items in practices.items():
        print(f"\nüìã {category}:")
        for item in items:
            print(f"   ‚Ä¢ {item}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ª—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏
    practices_content = '''# –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ Cursor

## ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

### –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º
```bash
py -c "print('Hello from Python')"
py -c "import sys; print('Start'); sys.stdout.flush(); print('End')"
```

### –ö–æ–º–∞–Ω–¥—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º
```bash
timeout 10 py script.py
timeout 30 py -c "import time; time.sleep(5); print('Done')"
```

### –ö–æ–º–∞–Ω–¥—ã —Å unbuffered output
```bash
py -u script.py  # -u —Ñ–ª–∞–≥ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
```

## ‚ùå –û–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–∏–∑–±–µ–≥–∞—Ç—å)

### –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
```bash
py -c "input('Enter something: ')"  # –ñ–¥–µ—Ç –≤–≤–æ–¥–∞
py -c "raw_input('Enter: ')"        # –ñ–¥–µ—Ç –≤–≤–æ–¥–∞ (Python 2)
```

### –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã
```bash
py -c "while True: pass"            # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
py -c "while True: print('loop')"   # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –≤—ã–≤–æ–¥
```

### –ö–æ–º–∞–Ω–¥—ã —á—Ç–µ–Ω–∏—è stdin
```bash
py -c "sys.stdin.read()"            # –ñ–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è stdin
py -c "input()"                     # –ñ–¥–µ—Ç –≤–≤–æ–¥–∞
```

## üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

1. **–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ timeout** –¥–ª—è –∫–æ–º–∞–Ω–¥
2. **–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ return code** –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
3. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sys.stdout.flush()** –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
4. **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è** TimeoutExpired
5. **–õ–æ–≥–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã** –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
6. **–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏ stdout, –∏ stderr**

## üêç –ü—Ä–∏–º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

```python
import subprocess
import sys

def run_command_safe(command, timeout=10):
    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            timeout=timeout,
            encoding='utf-8',
            errors='replace'
        )
        return result.returncode == 0, result.stdout, result.stderr
    except subprocess.TimeoutExpired:
        return False, "", "Timeout"
    except Exception as e:
        return False, "", str(e)
```
'''
    
    practices_path = Path.cwd() / "AGENT_BEST_PRACTICES.md"
    try:
        with open(practices_path, 'w', encoding='utf-8') as f:
            f.write(practices_content)
        print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: {practices_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("ü§ñ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –° –ê–ì–ï–ù–¢–û–ú CURSOR")
    print("–ü—Ä–æ–±–ª–µ–º–∞: –ê–≥–µ–Ω—Ç –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ")
    print("–¶–µ–ª—å: –ù–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏—á–∏–Ω—ã –∑–∞–≤–∏—Å–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞")
    
    try:
        test_command_completion()
        test_interactive_commands()
        test_output_buffering()
        create_agent_safe_commands()
        provide_agent_solutions()
        create_agent_best_practices()
        
        print_header("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
        print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üìã –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∑–∞–≤–∏—Å–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞:")
        print("   ‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è (–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã)")
        print("   ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (input(), stdin.read())")
        print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π –≤—ã–≤–æ–¥–∞")
        print("   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ timeout –¥–ª—è –∫–æ–º–∞–Ω–¥")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π—Ç–µ timeout –¥–ª—è –∫–æ–º–∞–Ω–¥")
        print("   2. –ò–∑–±–µ–≥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
        print("   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sys.stdout.flush() –¥–ª—è –≤—ã–≤–æ–¥–∞")
        print("   4. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥")
        print("   5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è TimeoutExpired")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

if __name__ == "__main__":
    main()
