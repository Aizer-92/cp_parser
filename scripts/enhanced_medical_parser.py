#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –∏–∑ PDF
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã PDF, –≤–∫–ª—é—á–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
"""

import argparse
import re
import json
import sys
from pathlib import Path
from datetime import datetime

try:
    import pdfplumber
    import PyPDF2
    import pandas as pd
except ImportError:
    print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("py -m pip install PyPDF2 pdfplumber pandas openpyxl")
    sys.exit(1)

class EnhancedMedicalParser:
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.medical_indicators = {
            # –ì–µ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            'erythrocytes': ['—ç—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã', 'rbc', 'red blood cells'],
            'hemoglobin': ['–≥–µ–º–æ–≥–ª–æ–±–∏–Ω', 'hemoglobin', 'hgb', 'hb'],
            'hematocrit': ['–≥–µ–º–∞—Ç–æ–∫—Ä–∏—Ç', 'hematocrit', 'hct'],
            'mcv': ['mcv', '—Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º —ç—Ä–∏—Ç—Ä–æ—Ü–∏—Ç–æ–≤'],
            'mch': ['mch', '—Å—Ä–µ–¥–Ω–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≥–µ–º–æ–≥–ª–æ–±–∏–Ω–∞'],
            'mchc': ['mchc', '—Å—Ä–µ–¥–Ω—è—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è'],
            'rdw': ['rdw', '—à–∏—Ä–∏–Ω–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è'],
            
            'platelets': ['—Ç—Ä–æ–º–±–æ—Ü–∏—Ç—ã', 'platelets', 'plt'],
            'mpv': ['mpv', '—Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤'],
            'pct': ['pct', '—Ç—Ä–æ–º–±–æ–∫—Ä–∏—Ç'],
            'pdw': ['pdw', '—à–∏—Ä–∏–Ω–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤'],
            
            'leukocytes': ['–ª–µ–π–∫–æ—Ü–∏—Ç—ã', 'leukocytes', 'wbc', 'white blood cells'],
            'neutrophils': ['–Ω–µ–π—Ç—Ä–æ—Ñ–∏–ª—ã', 'neutrophils', 'neu'],
            'lymphocytes': ['–ª–∏–º—Ñ–æ—Ü–∏—Ç—ã', 'lymphocytes', 'lym'],
            'monocytes': ['–º–æ–Ω–æ—Ü–∏—Ç—ã', 'monocytes', 'mon'],
            'eosinophils': ['—ç–æ–∑–∏–Ω–æ—Ñ–∏–ª—ã', 'eosinophils', 'eos'],
            'basophils': ['–±–∞–∑–æ—Ñ–∏–ª—ã', 'basophils', 'bas'],
            
            # –ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            'glucose': ['–≥–ª—é–∫–æ–∑–∞', 'glucose'],
            'cholesterol': ['—Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω', 'cholesterol'],
            'triglycerides': ['—Ç—Ä–∏–≥–ª–∏—Ü–µ—Ä–∏–¥—ã', 'triglycerides'],
            'alt': ['–∞–ª—Ç', 'alt', 'sgpt'],
            'ast': ['–∞—Å—Ç', 'ast', 'sgot'],
            'bilirubin': ['–±–∏–ª–∏—Ä—É–±–∏–Ω', 'bilirubin'],
            'creatinine': ['–∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω', 'creatinine'],
            'urea': ['–º–æ—á–µ–≤–∏–Ω–∞', 'urea'],
            
            # –ì–æ—Ä–º–æ–Ω—ã
            'tsh': ['—Ç—Ç–≥', 'tsh'],
            't4': ['—Ç4', 't4', '—Ç–∏—Ä–æ–∫—Å–∏–Ω'],
            't3': ['—Ç3', 't3'],
            'testosterone': ['—Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω', 'testosterone'],
            'cortisol': ['–∫–æ—Ä—Ç–∏–∑–æ–ª', 'cortisol'],
            
            # –í–∏—Ç–∞–º–∏–Ω—ã
            'vitamin_d': ['–≤–∏—Ç–∞–º–∏–Ω d', 'vitamin d', '25(oh)d'],
            'b12': ['b12', '–≤–∏—Ç–∞–º–∏–Ω b12'],
            'folate': ['—Ñ–æ–ª–∏–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞', 'folate'],
            
            # –ò–º–º—É–Ω–æ–ª–æ–≥–∏—è
            'ige': ['ige', '–∏–º–º—É–Ω–æ–≥–ª–æ–±—É–ª–∏–Ω e'],
            'iga': ['iga', '–∏–º–º—É–Ω–æ–≥–ª–æ–±—É–ª–∏–Ω a'],
            'igg': ['igg', '–∏–º–º—É–Ω–æ–≥–ª–æ–±—É–ª–∏–Ω g'],
        }
        
        # –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        self.units = [
            '–≥/–ª', 'g/l', '–º–≥/–¥–ª', 'mg/dl', '–º–º–æ–ª—å/–ª', 'mmol/l',
            '10*12/–ª', '10*9/–ª', '10^12/l', '10^9/l',
            '%', '—Ñ–ª', 'fl', '–ø–≥', 'pg', '–ø–≥/–∫–ª', 'pg/cell',
            '–º–∫–º–æ–ª—å/–ª', 'nmol/l', '–ø–º–æ–ª—å/–ª', 'pmol/l',
            '–Ω–≥/–º–ª', 'ng/ml', '–º–∫–≥/–ª', 'ug/l', '–º–µ/–ª', 'iu/l'
        ]
    
    def extract_text_multiple_methods(self, pdf_path):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
        texts = []
        
        # –ú–µ—Ç–æ–¥ 1: pdfplumber
        try:
            with pdfplumber.open(pdf_path) as pdf:
                for page in pdf.pages:
                    text = page.extract_text()
                    if text:
                        texts.append(("pdfplumber", text))
        except Exception as e:
            print(f"‚ö†Ô∏è pdfplumber –æ—à–∏–±–∫–∞: {e}")
        
        # –ú–µ—Ç–æ–¥ 2: PyPDF2
        try:
            with open(pdf_path, 'rb') as file:
                reader = PyPDF2.PdfReader(file)
                for page_num, page in enumerate(reader.pages):
                    text = page.extract_text()
                    if text:
                        texts.append(("PyPDF2", text))
        except Exception as e:
            print(f"‚ö†Ô∏è PyPDF2 –æ—à–∏–±–∫–∞: {e}")
        
        # –ú–µ—Ç–æ–¥ 3: pdfplumber —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
        try:
            with pdfplumber.open(pdf_path) as pdf:
                for page in pdf.pages:
                    tables = page.extract_tables()
                    if tables:
                        for table in tables:
                            table_text = "\n".join([" | ".join([str(cell) if cell else "" for cell in row]) for row in table])
                            texts.append(("pdfplumber_tables", table_text))
        except Exception as e:
            print(f"‚ö†Ô∏è pdfplumber —Ç–∞–±–ª–∏—Ü—ã –æ—à–∏–±–∫–∞: {e}")
        
        return texts
    
    def find_medical_values(self, text):
        """–ü–æ–∏—Å–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤ —Ç–µ–∫—Å—Ç–µ"""
        results = {}
        text_lower = text.lower()
        
        # –ü–æ–∏—Å–∫ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏
        number_patterns = [
            r'(\d+(?:[.,]\d+)?)\s*(?:' + '|'.join(re.escape(unit) for unit in self.units) + ')',
            r'(\d+(?:[.,]\d+)?)\s*(?:√ó10[¬π¬≤‚Åπ]?/?–ª|x10\^[129]/l)',
        ]
        
        found_numbers = []
        for pattern in number_patterns:
            matches = re.finditer(pattern, text, re.IGNORECASE)
            for match in matches:
                found_numbers.append((match.group(), match.start(), match.end()))
        
        print(f"üî¢ –ù–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {len(found_numbers)}")
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for param_key, keywords in self.medical_indicators.items():
            for keyword in keywords:
                pattern = rf'{re.escape(keyword)}\s*:?\s*(\d+(?:[.,]\d+)?)'
                matches = re.finditer(pattern, text_lower)
                
                for match in matches:
                    value_str = match.group(1).replace(',', '.')
                    try:
                        value = float(value_str)
                        if param_key not in results:
                            results[param_key] = []
                        results[param_key].append({
                            'value': value,
                            'context': text[max(0, match.start()-50):match.end()+50],
                            'keyword': keyword
                        })
                    except ValueError:
                        continue
        
        return results, found_numbers
    
    def manual_extraction_help(self, pdf_path):
        """–ü–æ–º–æ—â—å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüìã –ü–û–ú–û–©–¨ –î–õ–Ø –†–£–ß–ù–û–ì–û –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø: {pdf_path}")
        print("=" * 80)
        
        texts = self.extract_text_multiple_methods(pdf_path)
        
        if not texts:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF")
            return
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(texts)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞")
        
        for i, (method, text) in enumerate(texts):
            print(f"\nüìÑ –ú–ï–¢–û–î {i+1}: {method}")
            print("-" * 40)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            preview = text[:500] if len(text) > 500 else text
            print(f"–ü—Ä–µ–≤—å—é: {preview}")
            
            if len(text) > 500:
                print(f"... (–≤—Å–µ–≥–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            results, numbers = self.find_medical_values(text)
            
            if results:
                print(f"\nüéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
                for param, values in results.items():
                    for value_info in values:
                        print(f"  {param}: {value_info['value']} (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {value_info['keyword']})")
            
            if numbers:
                print(f"\nüî¢ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ ({len(numbers)} —à—Ç.):")
                for num_text, start, end in numbers[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    print(f"  {num_text}")
                if len(numbers) > 10:
                    print(f"  ... –∏ –µ—â–µ {len(numbers) - 10}")
            
            print("\n" + "="*40)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ—á–∏—Ç–∞–µ–º—ã–π (–º–Ω–æ–≥–æ (cid:XX)) - PDF –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π")
        print("2. –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ PDF –≤—Ä—É—á–Ω—É—é")
        print("3. –ï—Å–ª–∏ —á–∏—Å–ª–∞ –Ω–∞–π–¥–µ–Ω—ã - –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
        print("4. –î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - –ø–µ—Ä–µ–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ PDF –≤ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç")
    
    def suggest_manual_template(self):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
        print("\nüìù –®–ê–ë–õ–û–ù –î–õ–Ø –†–£–ß–ù–û–ì–û –í–í–û–î–ê –î–ê–ù–ù–´–•:")
        print("=" * 50)
        
        template = {
            "date": "YYYY-MM-DD",
            "order_number": "",
            "laboratory": "",
            "values": {
                # –ì–µ–º–∞—Ç–æ–ª–æ–≥–∏—è
                "erythrocytes": {"value": 0.0, "unit": "10*12/–ª"},
                "hemoglobin": {"value": 0, "unit": "–≥/–ª"},
                "hematocrit": {"value": 0.0, "unit": "%"},
                "platelets": {"value": 0, "unit": "10*9/–ª"},
                "leukocytes": {"value": 0.0, "unit": "10*9/–ª"},
                
                # –ë–∏–æ—Ö–∏–º–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
                "glucose": {"value": 0.0, "unit": "–º–º–æ–ª—å/–ª"},
                "cholesterol": {"value": 0.0, "unit": "–º–º–æ–ª—å/–ª"},
                "creatinine": {"value": 0, "unit": "–º–∫–º–æ–ª—å/–ª"},
                
                # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            }
        }
        
        template_file = Path("Docs/Health/manual_input_template.json")
        with open(template_file, 'w', encoding='utf-8') as f:
            json.dump(template, f, ensure_ascii=False, indent=2)
        
        print(f"–®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {template_file}")
        print("\n–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é")

def main():
    parser = argparse.ArgumentParser(description='–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤')
    parser.add_argument('pdf_file', help='–ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É —Å –∞–Ω–∞–ª–∏–∑–æ–º')
    parser.add_argument('--help-extract', action='store_true', help='–ü–æ–º–æ—â—å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è')
    parser.add_argument('--template', action='store_true', help='–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞')
    
    args = parser.parse_args()
    
    pdf_path = Path(args.pdf_file)
    if not pdf_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
        return
    
    medical_parser = EnhancedMedicalParser()
    
    if args.template:
        medical_parser.suggest_manual_template()
        return
    
    if args.help_extract:
        medical_parser.manual_extraction_help(pdf_path)
        return
    
    # –û–±—ã—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é PDF: {pdf_path}")
    texts = medical_parser.extract_text_multiple_methods(pdf_path)
    
    all_results = {}
    for method, text in texts:
        results, numbers = medical_parser.find_medical_values(text)
        if results:
            print(f"‚úÖ {method}: –Ω–∞–π–¥–µ–Ω–æ {len(results)} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
            all_results.update(results)
    
    if all_results:
        print("\nüéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for param, values in all_results.items():
            for value_info in values:
                print(f"{param}: {value_info['value']}")
    else:
        print("\n‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help-extract –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")

if __name__ == "__main__":
    main()
