#!/usr/bin/env python3
"""
–ü–û–õ–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –í–°–ï–• —Ç–∏—Ä–∞–∂–µ–π Template 4
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ CSV + –¥–æ–∫–∞—á–∏–≤–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ
"""

import sys
from pathlib import Path
sys.path.insert(0, str(Path.cwd()))

from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text
import os
import csv as csv_lib
from datetime import datetime
import time
import gspread
from google.oauth2.service_account import Credentials

# Railway DB
os.environ['USE_RAILWAY_DB'] = 'true'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç gspread
GSPREAD_CLIENT = None

def get_gspread_client():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç gspread –∫–ª–∏–µ–Ω—Ç–∞"""
    global GSPREAD_CLIENT
    if GSPREAD_CLIENT is None:
        scope = ['https://www.googleapis.com/auth/spreadsheets.readonly',
                 'https://www.googleapis.com/auth/drive.readonly']
        creds = Credentials.from_service_account_file('service_account.json', scopes=scope)
        GSPREAD_CLIENT = gspread.authorize(creds)
    return GSPREAD_CLIENT

def download_csv_gspread(sheet_id, output_path):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç CSV —á–µ—Ä–µ–∑ gspread"""
    try:
        client = get_gspread_client()
        sheet = client.open_by_key(sheet_id)
        worksheet = sheet.get_worksheet(0)
        values = worksheet.get_all_values()
        
        with open(output_path, 'w', encoding='utf-8', newline='') as f:
            writer = csv_lib.writer(f)
            writer.writerows(values)
        
        return True
    except Exception as e:
        return False

def extract_quantity_from_csv(csv_path, row_number):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏—Ä–∞–∂ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ E"""
    try:
        with open(csv_path, 'r', encoding='utf-8') as f:
            reader = csv_lib.reader(f)
            rows = list(reader)
            
            if row_number <= len(rows):
                target_row = rows[row_number - 1]
                
                if len(target_row) > 4:
                    qty_str = target_row[4].strip().replace(' ', '').replace(',', '')
                    
                    if qty_str.isdigit():
                        return int(qty_str)
        return None
    except:
        return None

def verify_project(db, project_data, csv_dir):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –í–°–ï —Ç–∏—Ä–∞–∂–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    project_id = project_data['id']
    sheet_id = project_data['sheet_id']
    
    csv_path = csv_dir / f"proj_{project_id}.csv"
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç
    if not csv_path.exists():
        if not download_csv_gspread(sheet_id, csv_path):
            return None
        time.sleep(0.5)  # –ü–∞—É–∑–∞ –¥–ª—è API
    
    with db.get_session() as session:
        # –ë–µ—Ä–µ–º –í–°–ï price_offers (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤!)
        products = session.execute(text("""
            SELECT 
                p.id, p.name, p.row_number,
                po.id as offer_id, po.quantity, po.route
            FROM products p
            INNER JOIN price_offers po ON p.id = po.product_id
            WHERE p.project_id = :pid
            ORDER BY p.row_number, po.route
        """), {'pid': project_id}).fetchall()
        
        if not products:
            return None
        
        results = []
        checked_rows = {}
        
        for prod in products:
            row_num = prod.row_number
            
            if row_num not in checked_rows:
                checked_rows[row_num] = extract_quantity_from_csv(csv_path, row_num)
            
            excel_qty = checked_rows[row_num]
            db_qty = int(prod.quantity)
            
            is_x10 = False
            if excel_qty and isinstance(excel_qty, int) and excel_qty * 10 == db_qty:
                is_x10 = True
            
            results.append({
                'offer_id': prod.offer_id,
                'product_id': prod.id,
                'product_name': prod.name,
                'row': row_num,
                'csv_qty': excel_qty,
                'db_qty': db_qty,
                'route': prod.route,
                'is_x10': is_x10
            })
        
        x10_count = sum(1 for r in results if r['is_x10'])
        
        return {
            'id': project_id,
            'name': project_data['name'],
            'url': project_data['url'],
            'total': len(results),
            'x10': x10_count,
            'results': results
        }

def main():
    print("="*80, flush=True)
    print("üöÄ –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –¢–ò–†–ê–ñ–ï–ô TEMPLATE 4", flush=True)
    print("="*80, flush=True)
    
    print("\nüìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –ë–î...", flush=True)
    db = PostgreSQLManager()
    
    print("üìä –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ Template 4...", flush=True)
    
    with db.get_session() as session:
        projects_data = session.execute(text("""
            SELECT DISTINCT
                pr.id,
                pr.project_name,
                pr.google_sheets_url
            FROM projects pr
            INNER JOIN products p ON pr.id = p.project_id
            WHERE p.sample_price IS NOT NULL
            AND pr.google_sheets_url IS NOT NULL
            ORDER BY pr.id
        """)).fetchall()
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(projects_data)} –ø—Ä–æ–µ–∫—Ç–æ–≤ Template 4", flush=True)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
    projects = []
    for proj in projects_data:
        if '/d/' in proj.google_sheets_url:
            sheet_id = proj.google_sheets_url.split('/d/')[1].split('/')[0]
            projects.append({
                'id': proj.id,
                'name': proj.project_name,
                'sheet_id': sheet_id,
                'url': proj.google_sheets_url
            })
    
    total_projects = len(projects)
    print(f"üìã –° –≤–∞–ª–∏–¥–Ω—ã–º–∏ URL: {total_projects}", flush=True)
    
    csv_dir = Path('verification_csv_all')
    csv_dir.mkdir(exist_ok=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ CSV —É–∂–µ –µ—Å—Ç—å
    existing_csvs = len(list(csv_dir.glob('*.csv')))
    print(f"üìÅ CSV —É–∂–µ —Å–∫–∞—á–∞–Ω–æ: {existing_csvs}", flush=True)
    print(f"üì• –ù—É–∂–Ω–æ –¥–æ–∫–∞—á–∞—Ç—å: {total_projects - existing_csvs}\n", flush=True)
    print("üöÄ –ù–ê–ß–ò–ù–ê–Æ –†–ê–ë–û–¢–£...\n", flush=True)
    
    all_results = []
    timestamp = datetime.now().strftime("%Y%m%d_%H%M")
    
    start_time = time.time()
    processed = 0
    failed = 0
    total_x10_errors = 0
    downloaded = 0
    
    for i, project in enumerate(projects, 1):
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
            csv_path = csv_dir / f"proj_{project['id']}.csv"
            if not csv_path.exists():
                print(f"üì• –°–∫–∞—á–∏–≤–∞—é {i}/{total_projects}: –ø—Ä–æ–µ–∫—Ç {project['id']}...")
                downloaded += 1
            
            result = verify_project(db, project, csv_dir)
            
            if result:
                processed += 1
                total_x10_errors += result['x10']
                all_results.append(result)
            else:
                failed += 1
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –ø—Ä–æ–µ–∫—Ç–æ–≤
            if i % 50 == 0:
                elapsed = time.time() - start_time
                avg_time = elapsed / i
                remaining = (total_projects - i) * avg_time / 60
                
                print(f"\n‚è±Ô∏è  {i}/{total_projects} ({i*100//total_projects}%) | "
                      f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {processed} | "
                      f"‚ùå –û—à–∏–±–æ–∫ x10: {total_x10_errors} | "
                      f"üì• –°–∫–∞—á–∞–Ω–æ: {downloaded} | "
                      f"–û—Å—Ç–∞–ª–æ—Å—å: ~{int(remaining)} –º–∏–Ω\n")
        
        except Exception as e:
            failed += 1
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–µ–∫—Ç {project['id']}: {e}")
            continue
    
    # –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
    print("\n" + "="*80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*80)
    print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {processed:,} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed:,} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"üì• –°–∫–∞—á–∞–Ω–æ –Ω–æ–≤—ã—Ö CSV: {downloaded}")
    
    if processed > 0:
        total_offers = sum(r['total'] for r in all_results)
        total_x10 = sum(r['x10'] for r in all_results)
        percent = (total_x10 / total_offers * 100) if total_offers > 0 else 0
        
        print(f"\n‚ùå –ù–ê–ô–î–ï–ù–û –û–®–ò–ë–û–ö x10: {total_x10:,} –∏–∑ {total_offers:,} –æ—Ñ—Ñ–µ—Ä–æ–≤ ({percent:.1f}%)")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ü–û–õ–ù–´–ô –æ—Ç—á–µ—Ç
        full_report = f"–ü–û–õ–ù–ê–Ø_–ü–†–û–í–ï–†–ö–ê_–í–°–ï–•_{timestamp}.csv"
        with open(full_report, 'w', encoding='utf-8', newline='') as f:
            writer = csv_lib.writer(f)
            writer.writerow(['ID_–ü—Ä–æ–µ–∫—Ç–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ', 'ID_–¢–æ–≤–∞—Ä–∞', 'ID_–û—Ñ—Ñ–µ—Ä–∞', 
                           '–¢–æ–≤–∞—Ä', '–°—Ç—Ä–æ–∫–∞', '–¢–∏—Ä–∞–∂_CSV', '–¢–∏—Ä–∞–∂_–ë–î', 
                           '–ú–∞—Ä—à—Ä—É—Ç', '–û—à–∏–±–∫–∞_x10', 'URL'])
            
            for proj in all_results:
                for res in proj['results']:
                    writer.writerow([
                        proj['id'],
                        proj['name'],
                        res['product_id'],
                        res['offer_id'],
                        res['product_name'],
                        res['row'],
                        res['csv_qty'],
                        res['db_qty'],
                        res['route'],
                        '–î–ê' if res['is_x10'] else '–ù–ï–¢',
                        proj['url']
                    ])
        
        print(f"‚úÖ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: {full_report}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¢–û–õ–¨–ö–û –û–®–ò–ë–ö–ò –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if total_x10 > 0:
            errors_report = f"–°–ü–ò–°–û–ö_–î–õ–Ø_–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø_{timestamp}.csv"
            with open(errors_report, 'w', encoding='utf-8', newline='') as f:
                writer = csv_lib.writer(f)
                writer.writerow(['ID_–û—Ñ—Ñ–µ—Ä–∞', 'ID_–ü—Ä–æ–µ–∫—Ç–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ_–ü—Ä–æ–µ–∫—Ç–∞', 
                               'ID_–¢–æ–≤–∞—Ä–∞', '–¢–æ–≤–∞—Ä', '–°—Ç—Ä–æ–∫–∞', '–¢–∏—Ä–∞–∂_CSV', 
                               '–¢–∏—Ä–∞–∂_–ë–î', '–ú–∞—Ä—à—Ä—É—Ç', 'URL'])
                
                for proj in all_results:
                    for res in proj['results']:
                        if res['is_x10']:
                            writer.writerow([
                                res['offer_id'],
                                proj['id'],
                                proj['name'],
                                res['product_id'],
                                res['product_name'],
                                res['row'],
                                res['csv_qty'],
                                res['db_qty'],
                                res['route'],
                                proj['url']
                            ])
            
            print(f"‚úÖ –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {errors_report} ({total_x10} –æ—Ñ—Ñ–µ—Ä–æ–≤)")
            
            # –ü—Ä–æ–µ–∫—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏
            projects_with_errors = [p for p in all_results if p['x10'] > 0]
            projects_report = f"–ü–†–û–ï–ö–¢–´_–°_–û–®–ò–ë–ö–ê–ú–ò_{timestamp}.csv"
            with open(projects_report, 'w', encoding='utf-8', newline='') as f:
                writer = csv_lib.writer(f)
                writer.writerow(['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–û—à–∏–±–æ–∫', '–í—Å–µ–≥–æ', '%', 'URL'])
                
                for proj in sorted(projects_with_errors, key=lambda x: x['x10'], reverse=True):
                    percent_proj = (proj['x10'] / proj['total'] * 100) if proj['total'] > 0 else 0
                    writer.writerow([
                        proj['id'],
                        proj['name'],
                        proj['x10'],
                        proj['total'],
                        f"{percent_proj:.1f}%",
                        proj['url']
                    ])
            
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏: {projects_report} ({len(projects_with_errors)} –ø—Ä–æ–µ–∫—Ç–æ–≤)")
    
    elapsed_total = time.time() - start_time
    print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {int(elapsed_total/60)} –º–∏–Ω {int(elapsed_total%60)} —Å–µ–∫")
    print("="*80)

if __name__ == '__main__':
    main()

