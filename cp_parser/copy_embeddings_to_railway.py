#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è embeddings –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –≤ Railway –ë–î.

–ë—ã—Å—Ç—Ä–µ–µ —á–µ–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ (~2 –º–∏–Ω—É—Ç—ã vs 50 –º–∏–Ω—É—Ç) –∏ –Ω–µ —Ç—Ä–∞—Ç–∏—Ç API –≤—ã–∑–æ–≤—ã.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 copy_embeddings_to_railway.py
    
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - DATABASE_URL –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ .env)
    - RAILWAY_DATABASE_URL –¥–ª—è production –ë–î
"""

import os
import sys
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN = '\033[92m'
YELLOW = '\033[93m'
RED = '\033[91m'
BLUE = '\033[94m'
RESET = '\033[0m'
BOLD = '\033[1m'


def print_header(text):
    print(f"\n{BOLD}{BLUE}{'=' * 80}{RESET}")
    print(f"{BOLD}{BLUE}{text.center(80)}{RESET}")
    print(f"{BOLD}{BLUE}{'=' * 80}{RESET}\n")


def print_success(text):
    print(f"{GREEN}‚úÖ {text}{RESET}")


def print_warning(text):
    print(f"{YELLOW}‚ö†Ô∏è  {text}{RESET}")


def print_error(text):
    print(f"{RED}‚ùå {text}{RESET}")


def print_info(text):
    print(f"{BLUE}‚ÑπÔ∏è  {text}{RESET}")


def main():
    print_header("–ö–û–ü–ò–†–û–í–ê–ù–ò–ï EMBEDDINGS –í RAILWAY")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ URL –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    local_db_url = os.getenv('DATABASE_URL')
    railway_db_url = os.getenv('RAILWAY_DATABASE_URL')
    
    if not local_db_url:
        print_error("–ù–µ –Ω–∞–π–¥–µ–Ω DATABASE_URL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")
        print_info("–î–æ–±–∞–≤—å –≤ .env —Ñ–∞–π–ª:")
        print("DATABASE_URL=postgresql://user:password@localhost:5432/dbname")
        sys.exit(1)
    
    if not railway_db_url:
        print_error("–ù–µ –Ω–∞–π–¥–µ–Ω RAILWAY_DATABASE_URL")
        print_info("–î–æ–±–∞–≤—å –≤ .env —Ñ–∞–π–ª –∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é:")
        print("export RAILWAY_DATABASE_URL='postgresql://...railway.app/railway'")
        print_info("\n–ü–æ–ª—É—á–∏—Ç—å URL –º–æ–∂–Ω–æ –∑–¥–µ—Å—å:")
        print("Railway Dashboard ‚Üí PostgreSQL ‚Üí Connect ‚Üí Connection URL")
        sys.exit(1)
    
    print_info(f"–õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î: {local_db_url[:50]}...")
    print_info(f"Railway –ë–î: {railway_db_url[:50]}...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        print_info("\n1Ô∏è‚É£  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î...")
        local_engine = create_engine(local_db_url)
        
        with local_engine.connect() as conn:
            result = conn.execute(text("""
                SELECT COUNT(*) as total,
                       COUNT(name_embedding_text) as with_embeddings
                FROM products
            """))
            row = result.fetchone()
            total_local = row[0]
            with_embeddings_local = row[1]
        
        print_success(f"–õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î: {total_local} —Ç–æ–≤–∞—Ä–æ–≤, {with_embeddings_local} —Å embeddings")
        
        if with_embeddings_local == 0:
            print_error("–í –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –Ω–µ—Ç embeddings!")
            print_info("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏: python3 generate_embeddings_simple.py")
            sys.exit(1)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway –ë–î
        print_info("\n2Ô∏è‚É£  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway –ë–î...")
        railway_engine = create_engine(railway_db_url)
        
        with railway_engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
            result = conn.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'products' 
                  AND column_name = 'name_embedding_text'
            """))
            
            if not result.fetchone():
                print_error("–ö–æ–ª–æ–Ω–∫–∞ name_embedding_text –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Railway –ë–î!")
                print_info("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏: python3 setup_embeddings_simple.py")
                print_info("–ò–ª–∏ –≤—ã–ø–æ–ª–Ω–∏ SQL:")
                print("ALTER TABLE products ADD COLUMN name_embedding_text TEXT;")
                sys.exit(1)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Railway –ë–î
            result = conn.execute(text("""
                SELECT COUNT(*) as total,
                       COUNT(name_embedding_text) as with_embeddings
                FROM products
            """))
            row = result.fetchone()
            total_railway = row[0]
            with_embeddings_railway = row[1]
        
        print_success(f"Railway –ë–î: {total_railway} —Ç–æ–≤–∞—Ä–æ–≤, {with_embeddings_railway} —Å embeddings")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print_info("\n3Ô∏è‚É£  –ì–æ—Ç–æ–≤—ã –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é:")
        print(f"   ‚Ä¢ –ò–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: {with_embeddings_local} embeddings")
        print(f"   ‚Ä¢ –í Railway –ë–î: –æ–±–Ω–æ–≤–∏—Ç—å {total_railway} —Ç–æ–≤–∞—Ä–æ–≤")
        
        if with_embeddings_railway > 0:
            print_warning(f"   ‚Ä¢ –í Railway —É–∂–µ –µ—Å—Ç—å {with_embeddings_railway} embeddings (–±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã)")
        
        confirm = input(f"\n{YELLOW}–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): {RESET}").strip().lower()
        
        if confirm != 'y':
            print_info("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            sys.exit(0)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        print_info("\n4Ô∏è‚É£  –≠–∫—Å–ø–æ—Ä—Ç embeddings –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î...")
        
        with local_engine.connect() as conn:
            result = conn.execute(text("""
                SELECT id, name_embedding_text
                FROM products
                WHERE name_embedding_text IS NOT NULL
                ORDER BY id
            """))
            embeddings_data = result.fetchall()
        
        print_success(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(embeddings_data)} embeddings")
        
        # –ò–º–ø–æ—Ä—Ç –≤ Railway –ë–î
        print_info("\n5Ô∏è‚É£  –ò–º–ø–æ—Ä—Ç embeddings –≤ Railway –ë–î...")
        
        updated_count = 0
        batch_size = 100
        
        with railway_engine.begin() as conn:
            for i in range(0, len(embeddings_data), batch_size):
                batch = embeddings_data[i:i + batch_size]
                
                # Batch update
                for product_id, embedding_text in batch:
                    conn.execute(text("""
                        UPDATE products
                        SET name_embedding_text = :embedding
                        WHERE id = :id
                    """), {"id": product_id, "embedding": embedding_text})
                    updated_count += 1
                
                # Progress
                progress = (i + len(batch)) / len(embeddings_data) * 100
                print(f"\r   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i + len(batch)}/{len(embeddings_data)} ({progress:.1f}%)", end="")
        
        print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ progress bar
        print_success(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Ç–æ–≤–∞—Ä–æ–≤ –≤ Railway –ë–î")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print_info("\n6Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        
        with railway_engine.connect() as conn:
            result = conn.execute(text("""
                SELECT COUNT(*) as total,
                       COUNT(name_embedding_text) as with_embeddings
                FROM products
            """))
            row = result.fetchone()
            total_final = row[0]
            with_embeddings_final = row[1]
        
        print_success(f"Railway –ë–î –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_final}")
        print(f"   ‚Ä¢ –° embeddings: {with_embeddings_final}")
        print(f"   ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ: {with_embeddings_final / total_final * 100:.1f}%")
        
        print_header("‚úÖ –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        
        print_info("\nüìù –ß—Ç–æ –¥–∞–ª—å—à–µ:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ Railway")
        print("2. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∏—Å–∫: '–∫—Ä—É–∂–∫–∞', '—Ä—É—á–∫–∞', 'USB'")
        print("3. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ Railway –Ω–∞ –Ω–∞–ª–∏—á–∏–µ: '‚úÖ Vector search enabled'")
        
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()

