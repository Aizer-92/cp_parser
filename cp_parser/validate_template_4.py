#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –®–∞–±–ª–æ–Ω—É 4 (–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
"""
import sys
from pathlib import Path
from openpyxl import load_workbook
from collections import defaultdict
import json

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text


class Template4Validator:
    """
    –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –®–∞–±–ª–æ–Ω–∞ 4
    
    –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
    - –°—Ç—Ä–æ–∫–∞ 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
    - –°—Ç—Ä–æ–∫–∞ 2: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ (–§–æ—Ç–æ, –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –ö–∞—Å—Ç–æ–º, –¢–∏—Ä–∞–∂, –î–æ—Å—Ç–∞–≤–∫–∞ –ñ–î, –î–æ—Å—Ç–∞–≤–∫–∞ –ê–í–ò–ê, –û–±—Ä–∞–∑–µ—Ü)
    - –°—Ç—Ä–æ–∫–∞ 3: –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ (–¶–µ–Ω–∞ –∑–∞ —à—Ç., $, –¶–µ–Ω–∞ –∑–∞ —à—Ç., —Ä—É–±, –ò—Ç–æ–≥–æ —Ä—É–±, –°—Ä–æ–∫ —Ç–∏—Ä–∞–∂–∞)
    - –°—Ç—Ä–æ–∫–∞ 4+: –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
    
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫:
    A: –§–æ—Ç–æ
    B: –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    C: –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    D: –ö–∞—Å—Ç–æ–º
    E: –¢–∏—Ä–∞–∂, —à—Ç (–û–î–ò–ù –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤)
    F-I: –ñ–î (–¶–µ–Ω–∞ $, –¶–µ–Ω–∞ —Ä—É–±, –ò—Ç–æ–≥–æ —Ä—É–±, –°—Ä–æ–∫)
    J-M: –ê–í–ò–ê (–¶–µ–Ω–∞ $, –¶–µ–Ω–∞ —Ä—É–±, –ò—Ç–æ–≥–æ —Ä—É–±, –°—Ä–æ–∫)
    N-P: –û–±—Ä–∞–∑–µ—Ü (–¶–µ–Ω–∞ —Ä—É–±, –°—Ä–æ–∫ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ, –°—Ä–æ–∫ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π)
    Q: –î–æ–ø. —Ñ–æ—Ç–æ
    """
    
    def __init__(self):
        self.db = PostgreSQLManager()
    
    def validate_file(self, file_path):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ –®–∞–±–ª–æ–Ω—É 4"""
        try:
            wb = load_workbook(file_path, data_only=True, read_only=True)
            ws = wb.active
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            validation_result = {
                'is_valid': False,
                'template': None,
                'reasons': [],
                'structure': {},
                'confidence': 0
            }
            
            # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
            row1 = self._read_row(ws, 1, 20)
            row2 = self._read_row(ws, 2, 20)
            row3 = self._read_row(ws, 3, 20)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –®–∞–±–ª–æ–Ω–∞ 4
            checks = {
                'has_photo': self._check_photo_column(row2),
                'has_name': self._check_name_column(row2),
                'has_quantity': self._check_quantity_column(row2),
                'has_jd_route': self._check_jd_route(row2),
                'has_avia_route': self._check_avia_route(row2),
                'has_sample': self._check_sample_column(row2),
                'has_price_structure': self._check_price_structure(row3),
                'quantity_in_E': self._check_quantity_in_column_E(ws, row2),
                'has_custom_column': self._check_custom_column(row2),
            }
            
            validation_result['structure'] = checks
            
            # –ü–æ–¥—Å—á–µ—Ç confidence
            confidence = sum(checks.values())
            validation_result['confidence'] = confidence
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –®–∞–±–ª–æ–Ω–∞ 4
            required_checks = [
                'has_photo',
                'has_name',
                'has_quantity',
                'quantity_in_E',  # –ö–ª—é—á–µ–≤–æ–µ –æ—Ç–ª–∏—á–∏–µ –®–∞–±–ª–æ–Ω–∞ 4
                'has_price_structure'
            ]
            
            # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∞—Ä—à—Ä—É—Ç (–ñ–î –∏–ª–∏ –ê–í–ò–ê)
            has_route = checks['has_jd_route'] or checks['has_avia_route']
            
            if all(checks.get(req, False) for req in required_checks) and has_route:
                validation_result['is_valid'] = True
                validation_result['template'] = 'template_4'
            else:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
                missing = []
                if not checks['has_photo']:
                    missing.append('–ö–æ–ª–æ–Ω–∫–∞ "–§–æ—Ç–æ"')
                if not checks['has_name']:
                    missing.append('–ö–æ–ª–æ–Ω–∫–∞ "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"')
                if not checks['has_quantity']:
                    missing.append('–ö–æ–ª–æ–Ω–∫–∞ "–¢–∏—Ä–∞–∂"')
                if not checks['quantity_in_E']:
                    missing.append('–¢–∏—Ä–∞–∂ –Ω–µ –≤ –∫–æ–ª–æ–Ω–∫–µ E')
                if not has_route:
                    missing.append('–ú–∞—Ä—à—Ä—É—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏')
                if not checks['has_price_structure']:
                    missing.append('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ü–µ–Ω')
                
                validation_result['reasons'] = missing
            
            wb.close()
            return validation_result
            
        except Exception as e:
            return {
                'is_valid': False,
                'template': None,
                'reasons': [f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {str(e)}'],
                'structure': {},
                'confidence': 0
            }
    
    def _read_row(self, ws, row_num, max_col):
        """–ß–∏—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ –ª–∏—Å—Ç–∞"""
        row_data = {}
        for col in range(1, max_col + 1):
            val = ws.cell(row_num, col).value
            if val:
                col_letter = chr(64 + col)
                row_data[col_letter] = str(val).strip().lower()
        return row_data
    
    def _check_photo_column(self, row2):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ –§–æ—Ç–æ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ A)"""
        return 'A' in row2 and '—Ñ–æ—Ç–æ' in row2['A']
    
    def _check_name_column(self, row2):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ B)"""
        return 'B' in row2 and ('–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in row2['B'] or '–Ω–∞–∑–≤–∞–Ω–∏–µ' in row2['B'])
    
    def _check_quantity_column(self, row2):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ –¢–∏—Ä–∞–∂"""
        for col, val in row2.items():
            if '—Ç–∏—Ä–∞–∂' in val or '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' in val:
                return True
        return False
    
    def _check_quantity_in_column_E(self, ws, row2):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç–∏—Ä–∞–∂ –∏–º–µ–Ω–Ω–æ –≤ –∫–æ–ª–æ–Ω–∫–µ E (–∫–ª—é—á–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫ –®–∞–±–ª–æ–Ω–∞ 4)"""
        if 'E' in row2:
            val = row2['E']
            return '—Ç–∏—Ä–∞–∂' in val or '–∫–æ–ª' in val
        return False
    
    def _check_jd_route(self, row2):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –ñ–î"""
        for col, val in row2.items():
            if '–∂–¥' in val or '–¥–æ—Å—Ç–∞–≤–∫–∞ –∂–¥' in val:
                return True
        return False
    
    def _check_avia_route(self, row2):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –ê–í–ò–ê"""
        for col, val in row2.items():
            if '–∞–≤–∏–∞' in val or '–¥–æ—Å—Ç–∞–≤–∫–∞ –∞–≤–∏–∞' in val:
                return True
        return False
    
    def _check_sample_column(self, row2):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ –û–±—Ä–∞–∑–µ—Ü"""
        for col, val in row2.items():
            if '–æ–±—Ä–∞–∑–µ—Ü' in val:
                return True
        return False
    
    def _check_price_structure(self, row3):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ü–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ 3"""
        has_usd = False
        has_rub = False
        
        for col, val in row3.items():
            if '$' in val or 'usd' in val:
                has_usd = True
            if '—Ä—É–±' in val or 'rub' in val:
                has_rub = True
        
        return has_usd and has_rub
    
    def _check_custom_column(self, row2):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ –ö–∞—Å—Ç–æ–º"""
        for col, val in row2.items():
            if '–∫–∞—Å—Ç–æ–º' in val or 'custom' in val:
                return True
        return False
    
    def validate_all_template_4(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ template_4_ids.txt"""
        
        # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ ID
        ids_file = Path('template_4_ids.txt')
        if not ids_file.exists():
            print("‚ùå –§–∞–π–ª template_4_ids.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        with open(ids_file, 'r') as f:
            project_ids = [int(line.strip()) for line in f if line.strip()]
        
        print("=" * 80)
        print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–ï–ö–¢–û–í –ü–û –®–ê–ë–õ–û–ù–£ 4")
        print("=" * 80)
        print(f"\n–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(project_ids)}")
        print("")
        
        results = {
            'valid': [],
            'invalid': [],
            'not_found': [],
            'errors': []
        }
        
        confidence_distribution = defaultdict(int)
        
        for i, project_id in enumerate(project_ids):
            if i % 50 == 0:
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i}/{len(project_ids)}...")
            
            # –ò—â–µ–º —Ñ–∞–π–ª
            excel_dir = Path('storage/excel_files')
            matching_files = list(excel_dir.glob(f'project_{project_id}_*.xlsx'))
            
            if not matching_files:
                results['not_found'].append(project_id)
                continue
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            file_path = matching_files[0]
            validation = self.validate_file(str(file_path))
            
            confidence_distribution[validation['confidence']] += 1
            
            if validation['is_valid']:
                results['valid'].append({
                    'project_id': project_id,
                    'file_name': file_path.name,
                    'confidence': validation['confidence'],
                    'structure': validation['structure']
                })
            else:
                results['invalid'].append({
                    'project_id': project_id,
                    'file_name': file_path.name,
                    'reasons': validation['reasons'],
                    'confidence': validation['confidence'],
                    'structure': validation['structure']
                })
        
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(project_ids)}/{len(project_ids)} ‚úÖ")
        print("")
        
        # –û—Ç—á–µ—Ç
        print("=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò")
        print("=" * 80)
        print("")
        print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ:       {len(results['valid']):4d} ({len(results['valid'])/len(project_ids)*100:5.1f}%)")
        print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ:     {len(results['invalid']):4d} ({len(results['invalid'])/len(project_ids)*100:5.1f}%)")
        print(f"üìÅ –ù–µ –Ω–∞–π–¥–µ–Ω—ã:     {len(results['not_found']):4d} ({len(results['not_found'])/len(project_ids)*100:5.1f}%)")
        print("")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ confidence
        print("üìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û CONFIDENCE:")
        print("")
        for conf in sorted(confidence_distribution.keys(), reverse=True):
            count = confidence_distribution[conf]
            bar = "‚ñà" * int(count / 10)
            print(f"   {conf:2d}/9: {count:4d} –ø—Ä–æ–µ–∫—Ç–æ–≤ {bar}")
        print("")
        
        # –¢–æ–ø –ø—Ä–∏—á–∏–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        if results['invalid']:
            print("üîç –¢–û–ü –ü–†–ò–ß–ò–ù–´ –ù–ï–í–ê–õ–ò–î–ù–û–°–¢–ò:")
            print("")
            reason_counts = defaultdict(int)
            for item in results['invalid']:
                for reason in item['reasons']:
                    reason_counts[reason] += 1
            
            for reason, count in sorted(reason_counts.items(), key=lambda x: -x[1])[:5]:
                print(f"   {count:4d} –ø—Ä–æ–µ–∫—Ç–æ–≤: {reason}")
            print("")
        
        # –ü—Ä–∏–º–µ—Ä—ã –≤–∞–ª–∏–¥–Ω—ã—Ö
        if results['valid']:
            print("‚úÖ –ü–†–ò–ú–ï–†–´ –í–ê–õ–ò–î–ù–´–• –ü–†–û–ï–ö–¢–û–í (–ø–µ—Ä–≤—ã–µ 10):")
            print("")
            for item in results['valid'][:10]:
                print(f"   Project {item['project_id']:5d} (confidence: {item['confidence']}/9)")
            print("")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        output_file = Path('template_4_validation_results.json')
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_file}")
        print("")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö ID
        if results['valid']:
            valid_ids_file = Path('template_4_valid_ids.txt')
            with open(valid_ids_file, 'w') as f:
                for item in results['valid']:
                    f.write(f"{item['project_id']}\n")
            
            print(f"üìã –°–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö ID: {valid_ids_file}")
            print("")
        
        print("=" * 80)
        print("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 80)
        
        return results


if __name__ == '__main__':
    validator = Template4Validator()
    validator.validate_all_template_4()



