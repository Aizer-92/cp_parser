"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
"""

import os
from pathlib import Path
import sys
from datetime import datetime
from collections import defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent))

from reportlab.lib.pagesizes import A4
from reportlab.lib.units import mm
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image as RLImage, PageBreak
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.utils import ImageReader
import requests
from io import BytesIO
from PIL import Image as PILImage

from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text


class KPPDFGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.db_manager = PostgreSQLManager()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        # –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DejaVu –∏–ª–∏ Arial
        # –ï—Å–ª–∏ —à—Ä–∏—Ñ—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Helvetica (–ª–∞—Ç–∏–Ω–∏—Ü–∞)
        
        # –°—Ç–∏–ª–∏
        self.styles = getSampleStyleSheet()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Title'],
            fontSize=18,
            textColor=colors.HexColor('#1a1a1a'),
            alignment=TA_CENTER,
            spaceAfter=10
        )
        
        # –î–∞—Ç–∞
        self.date_style = ParagraphStyle(
            'DateStyle',
            parent=self.styles['Normal'],
            fontSize=10,
            textColor=colors.grey,
            alignment=TA_CENTER,
            spaceAfter=20
        )
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        self.product_style = ParagraphStyle(
            'ProductName',
            parent=self.styles['Heading2'],
            fontSize=14,
            textColor=colors.HexColor('#2c3e50'),
            spaceAfter=6
        )
        
        # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        self.description_style = ParagraphStyle(
            'Description',
            parent=self.styles['Normal'],
            fontSize=9,
            textColor=colors.grey,
            spaceAfter=6
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑—Ü–µ
        self.sample_style = ParagraphStyle(
            'SampleInfo',
            parent=self.styles['Normal'],
            fontSize=9,
            textColor=colors.HexColor('#0066CC'),
            spaceAfter=6
        )
    
    def get_kp_items(self, session_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –ö–ü –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ product_id"""
        
        db_session = self.db_manager.get_session_direct()
        
        try:
            result = db_session.execute(text("""
                SELECT 
                    ki.id as kp_item_id,
                    p.id as product_id,
                    p.name as product_name,
                    p.description,
                    p.sample_price,
                    p.sample_delivery_time,
                    po.id as price_offer_id,
                    po.quantity,
                    po.route,
                    po.price_usd,
                    po.price_rub,
                    po.delivery_time_days
                FROM kp_items ki
                JOIN products p ON p.id = ki.product_id
                JOIN price_offers po ON po.id = ki.price_offer_id
                WHERE ki.session_id = :session_id
                ORDER BY p.name, po.quantity
            """), {'session_id': session_id})
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ product_id
            products_grouped = defaultdict(lambda: {
                'info': None,
                'offers': [],
                'images': []
            })
            
            for row in result:
                product_id = row[1]
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ (–∑–∞–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —Ä–∞–∑)
                if products_grouped[product_id]['info'] is None:
                    products_grouped[product_id]['info'] = {
                        'name': row[2],
                        'description': row[3],
                        'sample_price': float(row[4]) if row[4] else None,
                        'sample_delivery_time': row[5]
                    }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                products_grouped[product_id]['offers'].append({
                    'quantity': row[7],
                    'route': row[8],
                    'price_usd': float(row[9]) if row[9] else None,
                    'price_rub': float(row[10]) if row[10] else None,
                    'delivery_days': row[11]
                })
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            for product_id in products_grouped.keys():
                img_result = db_session.execute(text("""
                    SELECT image_url, image_filename
                    FROM product_images
                    WHERE product_id = :product_id
                    AND (image_url IS NOT NULL OR image_filename IS NOT NULL)
                    ORDER BY CASE WHEN column_number = 1 THEN 0 ELSE 1 END, id
                    LIMIT 3
                """), {'product_id': product_id})
                
                for img_row in img_result:
                    image_url = img_row[0]
                    if not image_url and img_row[1]:
                        image_url = f"https://s3.ru1.storage.beget.cloud/73d16f7545b3-promogoods/images/{img_row[1]}"
                    
                    if image_url:
                        products_grouped[product_id]['images'].append(image_url)
            
            return products_grouped
        finally:
            db_session.close()
    
    def download_image(self, url, max_width=80):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è PDF"""
        
        if not url:
            return None
        
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img = PILImage.open(BytesIO(response.content))
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if img.mode in ('RGBA', 'LA', 'P'):
                    background = PILImage.new('RGB', img.size, (255, 255, 255))
                    if img.mode == 'P':
                        img = img.convert('RGBA')
                    background.paste(img, mask=img.split()[-1] if img.mode in ('RGBA', 'LA') else None)
                    img = background
                elif img.mode != 'RGB':
                    img = img.convert('RGB')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
                img_byte_arr = BytesIO()
                img.save(img_byte_arr, format='JPEG', quality=85)
                img_byte_arr.seek(0)
                
                # –°–æ–∑–¥–∞–µ–º RLImage —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π
                rl_img = RLImage(img_byte_arr, width=max_width*mm, height=max_width*mm)
                return rl_img
            else:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {url} (—Å—Ç–∞—Ç—É—Å {response.status_code})")
                return None
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url}: {e}")
            return None
    
    def generate(self, session_id, output_path=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF —Ñ–∞–π–ª –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        
        print("üìÑ [KP PDF] –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        products = self.get_kp_items(session_id)
        
        if not products:
            raise ValueError("–ö–ü –ø—É—Å—Ç–æ - –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {sum(len(p['offers']) for p in products.values())}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ PDF
        if output_path is None:
            output_dir = Path(__file__).parent / 'output'
            output_dir.mkdir(exist_ok=True)
            output_path = output_dir / f'KP_{datetime.now().strftime("%Y%m%d_%H%M%S")}.pdf'
        
        doc = SimpleDocTemplate(
            str(output_path),
            pagesize=A4,
            rightMargin=20*mm,
            leftMargin=20*mm,
            topMargin=20*mm,
            bottomMargin=20*mm
        )
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
        story = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        story.append(Paragraph('–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï', self.title_style))
        story.append(Paragraph(f'–æ—Ç {datetime.now().strftime("%d.%m.%Y")}', self.date_style))
        story.append(Spacer(1, 10*mm))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
        for idx, (product_id, product_data) in enumerate(products.items()):
            product_info = product_data['info']
            offers = product_data['offers']
            images = product_data['images']
            
            print(f"   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {product_info['name']} ({len(offers)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è + –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
            product_table_data = []
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_elements = []
            for img_url in images[:3]:  # –î–æ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                img = self.download_image(img_url, max_width=50)
                if img:
                    image_elements.append(img)
            
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Å–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            if image_elements:
                if len(image_elements) == 1:
                    images_cell = image_elements[0]
                else:
                    # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    img_table = Table([[img] for img in image_elements])
                    img_table.setStyle(TableStyle([
                        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ]))
                    images_cell = img_table
            else:
                images_cell = Paragraph('–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', self.description_style)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
            info_elements = []
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            info_elements.append(Paragraph(product_info['name'], self.product_style))
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            if product_info['description']:
                desc_text = product_info['description'][:250] + ('...' if len(product_info['description']) > 250 else '')
                info_elements.append(Paragraph(desc_text, self.description_style))
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑—Ü–µ
            if product_info['sample_price'] or product_info['sample_delivery_time']:
                sample_parts = []
                if product_info['sample_price']:
                    sample_parts.append(f"–û–±—Ä–∞–∑–µ—Ü: ${product_info['sample_price']:.2f}")
                if product_info['sample_delivery_time']:
                    sample_parts.append(f"–°—Ä–æ–∫: {product_info['sample_delivery_time']} –¥–Ω.")
                info_elements.append(Paragraph(' | '.join(sample_parts), self.sample_style))
            
            info_elements.append(Spacer(1, 5*mm))
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            price_table_data = [
                ['–¢–∏—Ä–∞–∂', 'USD', 'RUB', '–î–æ—Å—Ç–∞–≤–∫–∞', '–°—Ä–æ–∫']
            ]
            
            for offer in offers:
                price_table_data.append([
                    f"{offer['quantity']:,.0f} —à—Ç",
                    f"${offer['price_usd']:.2f}" if offer['price_usd'] else '-',
                    f"‚ÇΩ{offer['price_rub']:.2f}" if offer['price_rub'] else '-',
                    offer['route'] or '-',
                    f"{offer['delivery_days']} –¥–Ω." if offer['delivery_days'] else '-'
                ])
            
            price_table = Table(price_table_data, colWidths=[30*mm, 25*mm, 30*mm, 25*mm, 20*mm])
            price_table.setStyle(TableStyle([
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#4472C4')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
                
                # –î–∞–Ω–Ω—ã–µ
                ('ALIGN', (0, 1), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 1), (-1, -1), 9),
                ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
                ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f5f5f5')]),
            ]))
            
            info_elements.append(price_table)
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            info_cell = Table([[elem] for elem in info_elements], colWidths=[110*mm])
            info_cell.setStyle(TableStyle([
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ]))
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è + –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            product_table = Table([[images_cell, info_cell]], colWidths=[50*mm, 110*mm])
            product_table.setStyle(TableStyle([
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                ('LEFTPADDING', (0, 0), (-1, -1), 5),
                ('RIGHTPADDING', (0, 0), (-1, -1), 5),
            ]))
            
            story.append(product_table)
            story.append(Spacer(1, 10*mm))
            
            # Page break –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 2 —Ç–æ–≤–∞—Ä–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ–≥—Ä—É–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
            if (idx + 1) % 2 == 0 and idx + 1 < len(products):
                story.append(PageBreak())
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        doc.build(story)
        print(f"‚úÖ [KP PDF] –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        return str(output_path)


def main():
    """–¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
    
    # –î–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º session_id –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ö–ü
    from database.postgresql_manager import PostgreSQLManager
    from sqlalchemy import text
    
    db_manager = PostgreSQLManager()
    db_session = db_manager.get_session_direct()
    
    try:
        result = db_session.execute(text("""
            SELECT DISTINCT session_id 
            FROM kp_items 
            LIMIT 1
        """))
        
        row = result.fetchone()
        if not row:
            print("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ö–ü –¥–ª—è —Ç–µ—Å—Ç–∞")
            return
        
        session_id = row[0]
        print(f"üß™ –¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è session_id: {session_id}")
        
        generator = KPPDFGenerator()
        output_path = generator.generate(session_id)
        
        print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_path}")
    finally:
        db_session.close()


if __name__ == '__main__':
    main()

