#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ pgvector –ë–î:
1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
2. –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É product_embeddings
3. –°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
"""

import os
import sys
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

load_dotenv()

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN = '\033[92m'
YELLOW = '\033[93m'
RED = '\033[91m'
BLUE = '\033[94m'
RESET = '\033[0m'
BOLD = '\033[1m'

def print_header(text):
    print(f"\n{BOLD}{BLUE}{'=' * 80}{RESET}")
    print(f"{BOLD}{BLUE}{text.center(80)}{RESET}")
    print(f"{BOLD}{BLUE}{'=' * 80}{RESET}\n")

def print_success(text):
    print(f"{GREEN}‚úÖ {text}{RESET}")

def print_error(text):
    print(f"{RED}‚ùå {text}{RESET}")

def print_info(text):
    print(f"{BLUE}‚ÑπÔ∏è  {text}{RESET}")

def print_warning(text):
    print(f"{YELLOW}‚ö†Ô∏è  {text}{RESET}")

def main():
    print_header("–ù–ê–°–¢–†–û–ô–ö–ê pgvector –ë–î")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ URL –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
    vector_db_url = os.getenv('VECTOR_DATABASE_URL')
    
    if not vector_db_url:
        print_error("–ù–µ –Ω–∞–π–¥–µ–Ω VECTOR_DATABASE_URL")
        print_info("–î–æ–±–∞–≤—å –≤ .env —Ñ–∞–π–ª:")
        print("VECTOR_DATABASE_URL=postgresql://postgres:Q3Kq3SG.LCSQYpWcc333JlUpsUfJOxfG@switchback.proxy.rlwy.net:53625/railway")
        sys.exit(1)
    
    print_info(f"–í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î: {vector_db_url[:50]}...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ pgvector –ë–î
        print_info("\n1Ô∏è‚É£  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ pgvector –ë–î...")
        engine = create_engine(vector_db_url, pool_pre_ping=True)
        
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            result = conn.execute(text("SELECT version()"))
            version = result.scalar()
            print_success(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ! PostgreSQL: {version[:50]}...")
            
            # 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            print_info("\n2Ô∏è‚É£  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...")
            try:
                conn.execute(text("CREATE EXTENSION IF NOT EXISTS vector"))
                conn.commit()
                print_success("pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as e:
                print_warning(f"pgvector —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            result = conn.execute(text("""
                SELECT extname, extversion 
                FROM pg_extension 
                WHERE extname = 'vector'
            """))
            ext_info = result.fetchone()
            
            if ext_info:
                print_success(f"pgvector –≤–µ—Ä—Å–∏—è: {ext_info[1]}")
            else:
                print_error("pgvector –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                sys.exit(1)
            
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã product_embeddings
            print_info("\n3Ô∏è‚É£  –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã product_embeddings...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
            result = conn.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_name = 'product_embeddings'
            """))
            
            if result.fetchone():
                print_warning("–¢–∞–±–ª–∏—Ü–∞ product_embeddings —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                confirm = input(f"\n{YELLOW}–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É? (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã) (y/n): {RESET}").strip().lower()
                
                if confirm == 'y':
                    conn.execute(text("DROP TABLE IF EXISTS product_embeddings CASCADE"))
                    conn.commit()
                    print_success("–°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞")
                else:
                    print_info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å
                    print_info("\n4Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞...")
                    result = conn.execute(text("""
                        SELECT indexname 
                        FROM pg_indexes 
                        WHERE tablename = 'product_embeddings'
                    """))
                    indexes = result.fetchall()
                    
                    if indexes:
                        print_success(f"–ù–∞–π–¥–µ–Ω—ã –∏–Ω–¥–µ–∫—Å—ã: {[idx[0] for idx in indexes]}")
                    else:
                        print_warning("–ò–Ω–¥–µ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
                    print_header("‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
                    return
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            conn.execute(text("""
                CREATE TABLE product_embeddings (
                    id SERIAL PRIMARY KEY,
                    
                    -- –°–≤—è–∑—å —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
                    product_id INTEGER NOT NULL UNIQUE,
                    
                    -- –í–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (pgvector —Ç–∏–ø!)
                    name_embedding vector(1536),
                    
                    -- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    product_name TEXT,
                    model_version VARCHAR(50) DEFAULT 'text-embedding-3-small',
                    created_at TIMESTAMP DEFAULT NOW(),
                    updated_at TIMESTAMP DEFAULT NOW()
                )
            """))
            conn.commit()
            print_success("–¢–∞–±–ª–∏—Ü–∞ product_embeddings —Å–æ–∑–¥–∞–Ω–∞")
            
            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
            print_info("\n4Ô∏è‚É£  –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
            print_info("   –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –ë–î...")
            
            try:
                # ivfflat –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –ë–î (10K-100K –∑–∞–ø–∏—Å–µ–π)
                conn.execute(text("""
                    CREATE INDEX product_embeddings_ivfflat_idx 
                    ON product_embeddings 
                    USING ivfflat (name_embedding vector_cosine_ops)
                    WITH (lists = 100)
                """))
                conn.commit()
                print_success("–ò–Ω–¥–µ–∫—Å ivfflat —Å–æ–∑–¥–∞–Ω (–æ–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è 10K-100K –≤–µ–∫—Ç–æ—Ä–æ–≤)")
            except Exception as e:
                print_warning(f"–ò–Ω–¥–µ–∫—Å –Ω–µ —Å–æ–∑–¥–∞–Ω: {e}")
                print_info("   –ò–Ω–¥–µ–∫—Å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–∑–∂–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            print_info("\n5Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã...")
            result = conn.execute(text("""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'product_embeddings'
                ORDER BY ordinal_position
            """))
            columns = result.fetchall()
            
            print_success("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:")
            for col_name, col_type in columns:
                print(f"   ‚Ä¢ {col_name}: {col_type}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
            result = conn.execute(text("""
                SELECT indexname, indexdef 
                FROM pg_indexes 
                WHERE tablename = 'product_embeddings'
            """))
            indexes = result.fetchall()
            
            if indexes:
                print_success("\n–ò–Ω–¥–µ–∫—Å—ã:")
                for idx_name, idx_def in indexes:
                    print(f"   ‚Ä¢ {idx_name}")
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            print_info("\n6Ô∏è‚É£  –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
            try:
                # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
                test_embedding = [0.1] * 1536  # –¢–µ—Å—Ç–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä
                conn.execute(text("""
                    INSERT INTO product_embeddings 
                        (product_id, product_name, name_embedding, model_version)
                    VALUES 
                        (-1, 'TEST PRODUCT', :embedding, 'test')
                """), {"embedding": test_embedding})
                conn.commit()
                
                # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
                result = conn.execute(text("""
                    SELECT product_id, product_name,
                           1 - (name_embedding <=> :query) as similarity
                    FROM product_embeddings
                    WHERE product_id = -1
                """), {"query": test_embedding})
                
                test_row = result.fetchone()
                if test_row:
                    print_success(f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç! Similarity: {test_row[2]:.3f}")
                
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
                conn.execute(text("DELETE FROM product_embeddings WHERE product_id = -1"))
                conn.commit()
                
            except Exception as e:
                print_warning(f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: {e}")
        
        print_header("‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        
        print_info("\nüìù –ß—Ç–æ –¥–∞–ª—å—à–µ:")
        print("1. –ó–∞–ø—É—Å—Ç–∏: py migrate_embeddings_to_pgvector.py")
        print("   (—Å–∫–æ–ø–∏—Ä—É–µ—Ç 13,710 embeddings –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î)")
        print("")
        print("2. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π web_interface/app.py –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è pgvector")
        print("")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()



