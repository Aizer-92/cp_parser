#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ pgvector —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–∏—Å–∫
"""

import os
import sys
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from openai import OpenAI
import httpx

load_dotenv()

# –¶–≤–µ—Ç–∞
GREEN = '\033[92m'
YELLOW = '\033[93m'
RED = '\033[91m'
BLUE = '\033[94m'
RESET = '\033[0m'

def test_search(query, threshold=0.25, limit=50):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    """
    print(f"\n{BLUE}{'=' * 80}{RESET}")
    print(f"{BLUE}–ü–æ–∏—Å–∫: '{query}' | –ü–æ—Ä–æ–≥: {threshold} | –õ–∏–º–∏—Ç: {limit}{RESET}")
    print(f"{BLUE}{'=' * 80}{RESET}\n")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    vector_db = os.getenv('VECTOR_DATABASE_URL')
    openai_key = os.getenv('OPENAI_API_KEY')
    
    engine = create_engine(vector_db, pool_pre_ping=True)
    client = OpenAI(api_key=openai_key)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è embedding
    response = client.embeddings.create(
        model="text-embedding-3-small",
        input=query,
        timeout=httpx.Timeout(10.0)
    )
    embedding = response.data[0].embedding
    
    # –ü–æ–∏—Å–∫
    query_vector_str = '[' + ','.join(map(str, embedding)) + ']'
    
    with engine.connect() as conn:
        sql_query = f"""
            SELECT 
                product_id,
                product_name,
                1 - (name_embedding <=> '{query_vector_str}'::vector) as similarity
            FROM product_embeddings
            WHERE 1 - (name_embedding <=> '{query_vector_str}'::vector) >= {threshold}
            ORDER BY name_embedding <=> '{query_vector_str}'::vector
            LIMIT {limit}
        """
        results = conn.execute(text(sql_query)).fetchall()
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"{GREEN}‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ç–æ–≤–∞—Ä–æ–≤{RESET}\n")
    
    if not results:
        print(f"{RED}‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–Ω–∏–∑–∏—Ç—å –ø–æ—Ä–æ–≥.{RESET}")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ similarity
    similarities = [r[2] for r in results]
    avg_sim = sum(similarities) / len(similarities)
    min_sim = min(similarities)
    max_sim = max(similarities)
    
    print(f"{BLUE}üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê SIMILARITY:{RESET}")
    print(f"   –ú–∏–Ω–∏–º—É–º: {min_sim:.3f}")
    print(f"   –°—Ä–µ–¥–Ω–∏–π: {avg_sim:.3f}")
    print(f"   –ú–∞–∫—Å–∏–º—É–º: {max_sim:.3f}")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
    ranges = {
        '0.90-1.00': 0,
        '0.70-0.89': 0,
        '0.50-0.69': 0,
        '0.40-0.49': 0,
        '0.25-0.39': 0,
    }
    
    for sim in similarities:
        if sim >= 0.90:
            ranges['0.90-1.00'] += 1
        elif sim >= 0.70:
            ranges['0.70-0.89'] += 1
        elif sim >= 0.50:
            ranges['0.50-0.69'] += 1
        elif sim >= 0.40:
            ranges['0.40-0.49'] += 1
        else:
            ranges['0.25-0.39'] += 1
    
    print(f"\n{BLUE}üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:{RESET}")
    for range_name, count in ranges.items():
        if count > 0:
            percent = count / len(results) * 100
            bar = '‚ñà' * int(percent / 5)
            print(f"   {range_name}: {count:3d} —Ç–æ–≤–∞—Ä–æ–≤ ({percent:5.1f}%) {bar}")
    
    # –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\n{BLUE}üîù –¢–û–ü-15 –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:{RESET}")
    for i, (pid, pname, sim) in enumerate(results[:15], 1):
        # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç similarity
        if sim >= 0.90:
            color = GREEN
            emoji = "üéØ"
        elif sim >= 0.70:
            color = BLUE
            emoji = "‚úÖ"
        elif sim >= 0.50:
            color = YELLOW
            emoji = "‚ö†Ô∏è "
        else:
            color = RED
            emoji = "‚ùå"
        
        print(f"   {i:2d}. {color}[{sim:.3f}] {emoji} {pname}{RESET}")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–≤–µ—Ä–æ—è—Ç–Ω—ã–π "–º—É—Å–æ—Ä")
    if len(results) > 15:
        print(f"\n{RED}üóëÔ∏è  –ü–û–°–õ–ï–î–ù–ò–ï 5 –†–ï–ó–£–õ–¨–¢–ê–¢–û–í (–≤–µ—Ä–æ—è—Ç–Ω—ã–π –º—É—Å–æ—Ä):{RESET}")
        for i, (pid, pname, sim) in enumerate(results[-5:], len(results)-4):
            print(f"   {i:2d}. {RED}[{sim:.3f}] ‚ùå {pname}{RESET}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\n{YELLOW}üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:{RESET}")
    
    if min_sim < 0.30:
        print(f"   ‚ö†Ô∏è  –ü–æ—Ä–æ–≥ {threshold} —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π - –º–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞")
        print(f"   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–¥–Ω—è—Ç—å –¥–æ 0.40 –∏–ª–∏ 0.50")
    
    if len(results) == limit:
        print(f"   ‚ö†Ô∏è  –î–æ—Å—Ç–∏–≥–Ω—É—Ç LIMIT {limit} - –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –µ—â—ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        print(f"   ‚úÖ –ú–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å LIMIT –¥–æ 50 –∏–ª–∏ –ø–æ–¥–Ω—è—Ç—å –ø–æ—Ä–æ–≥")
    
    if avg_sim < 0.50:
        print(f"   ‚ö†Ô∏è  –°—Ä–µ–¥–Ω–∏–π similarity {avg_sim:.3f} –Ω–∏–∑–∫–∏–π")
        print(f"   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—Ä–æ–≥ 0.40-0.50 –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
    good_results = [r for r in results if r[2] >= 0.40]
    if len(good_results) > 0:
        print(f"\n{GREEN}‚ú® –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô –ü–û–†–û–ì: 0.40{RESET}")
        print(f"   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(good_results)}")
        print(f"   ‚Ä¢ –ú—É—Å–æ—Ä–∞: {len(results) - len(good_results)}")

def main():
    print(f"\n{BLUE}{'=' * 80}{RESET}")
    print(f"{BLUE}{'–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê pgvector –†–ï–ó–£–õ–¨–¢–ê–¢–û–í'.center(80)}{RESET}")
    print(f"{BLUE}{'=' * 80}{RESET}\n")
    
    # –¢–µ—Å—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    queries = [
        ("—Ä—é–∫–∑–∞–∫", 0.25, 50),
        ("–∫—Ä—É–∂–∫–∞", 0.25, 50),
        ("—Ä—É—á–∫–∞", 0.25, 50),
    ]
    
    for query, threshold, limit in queries:
        test_search(query, threshold, limit)
    
    print(f"\n{BLUE}{'=' * 80}{RESET}")
    print(f"{GREEN}‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê{RESET}")
    print(f"{BLUE}{'=' * 80}{RESET}\n")
    
    print(f"{YELLOW}üìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø:{RESET}")
    print("1. –ü–æ–¥–Ω—è—Ç—å –ø–æ—Ä–æ–≥ similarity: 0.25 ‚Üí 0.40 –∏–ª–∏ 0.50")
    print("2. –£–º–µ–Ω—å—à–∏—Ç—å LIMIT: 200 ‚Üí 50 –∏–ª–∏ 75")
    print("3. –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ similarity –≤ app.py")
    print("")

if __name__ == "__main__":
    main()



