#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–∏–≥—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—ã price_offers –≤ PostgreSQL
"""

import sqlite3
import psycopg2
import pandas as pd
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
SQLITE_DB_PATH = "database/commercial_proposals.db"
POSTGRESQL_URL = "postgresql://postgres:wpqIxsBFYwmaNBFmCtBahhIMVSSskeiB@centerbeam.proxy.rlwy.net:26590/railway"

def migrate_price_offers():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—É price_offers"""
    logger.info("üì¶ –ú–∏–≥—Ä–∏—Ä—É—é —Ç–∞–±–ª–∏—Ü—É price_offers...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite
    sqlite_conn = sqlite3.connect(SQLITE_DB_PATH)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
    postgres_conn = psycopg2.connect(POSTGRESQL_URL)
    postgres_cursor = postgres_conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL
        postgres_cursor.execute("SELECT COUNT(*) FROM price_offers;")
        existing_count = postgres_cursor.fetchone()[0]
        
        if existing_count > 0:
            logger.info(f"‚ö†Ô∏è  –í —Ç–∞–±–ª–∏—Ü–µ price_offers —É–∂–µ –µ—Å—Ç—å {existing_count} –∑–∞–ø–∏—Å–µ–π")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite
        df = pd.read_sql_query("SELECT * FROM price_offers", sqlite_conn)
        
        if df.empty:
            logger.info("‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ price_offers –ø—É—Å—Ç–∞ –≤ SQLite")
            return
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –≤ SQLite")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        columns = list(df.columns)
        placeholders = ', '.join(['%s'] * len(columns))
        columns_str = ', '.join(columns)
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        insert_sql = f"INSERT INTO price_offers ({columns_str}) VALUES ({placeholders})"
        
        records_inserted = 0
        errors_count = 0
        
        for _, row in df.iterrows():
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º NaN –≤ None
                values = [None if pd.isna(val) else val for val in row.values]
                postgres_cursor.execute(insert_sql, values)
                records_inserted += 1
                
                if records_inserted % 100 == 0:
                    logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {records_inserted}/{len(df)}")
                    
            except Exception as e:
                errors_count += 1
                if errors_count <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
                    logger.error(f"   –ó–Ω–∞—á–µ–Ω–∏—è: {values}")
                elif errors_count == 6:
                    logger.error(f"‚ùå ... –∏ –µ—â–µ –æ—à–∏–±–∫–∏ (–ø–æ–∫–∞–∑—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5)")
        
        # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        postgres_conn.commit()
        
        logger.info(f"‚úÖ price_offers: {records_inserted} –∑–∞–ø–∏—Å–µ–π, {errors_count} –æ—à–∏–±–æ–∫")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        postgres_conn.rollback()
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        postgres_conn.close()
        sqlite_conn.close()

if __name__ == "__main__":
    migrate_price_offers()
