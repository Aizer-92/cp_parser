#!/usr/bin/env python3
"""
–°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import sys
from pathlib import Path
from sqlalchemy import text
import gspread
from google.oauth2.service_account import Credentials
import time

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager

# Google Sheets credentials
SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 
          'https://www.googleapis.com/auth/drive']
CREDS_FILE = 'service_account.json'

def download_excel(table_id, output_path):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç Excel —Ñ–∞–π–ª –∏–∑ Google Sheets"""
    try:
        creds = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPES)
        client = gspread.authorize(creds)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        spreadsheet = client.open_by_key(table_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∫ Excel
        url = f"https://docs.google.com/spreadsheets/d/{table_id}/export?format=xlsx"
        
        import requests
        response = requests.get(url, headers={'Authorization': f'Bearer {creds.token}'})
        
        if response.status_code == 200:
            with open(output_path, 'wb') as f:
                f.write(response.content)
            return True
        else:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("=" * 80)
    print("üì• –°–ö–ê–ß–ò–í–ê–ù–ò–ï EXCEL –§–ê–ô–õ–û–í –î–õ–Ø –ü–†–û–ï–ö–¢–û–í –ë–ï–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 80)
    
    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–∫–∏
    template4_missing = []
    with open('missing_images_template4.txt', 'r') as f:
        for line in f:
            parts = line.strip().split('\t')
            if len(parts) >= 2:
                template4_missing.append((int(parts[0]), parts[1]))
    
    template5_missing = []
    with open('missing_images_template5.txt', 'r') as f:
        for line in f:
            parts = line.strip().split('\t')
            if len(parts) >= 2:
                template5_missing.append((int(parts[0]), parts[1]))
    
    all_missing = template4_missing + template5_missing
    
    print(f"\nüìä –ö —Å–∫–∞—á–∏–≤–∞–Ω–∏—é:")
    print(f"  –®–∞–±–ª–æ–Ω 4: {len(template4_missing)} —Ñ–∞–π–ª–æ–≤")
    print(f"  –®–∞–±–ª–æ–Ω 5: {len(template5_missing)} —Ñ–∞–π–ª–æ–≤")
    print(f"  –í–°–ï–ì–û: {len(all_missing)} —Ñ–∞–π–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ—Ç
    storage_dir = Path('storage/excel_files')
    storage_dir.mkdir(parents=True, exist_ok=True)
    
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
    
    downloaded = 0
    skipped = 0
    errors = 0
    
    for idx, (proj_id, table_id) in enumerate(all_missing, 1):
        output_path = storage_dir / f"{table_id}.xlsx"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        if output_path.exists():
            print(f"  [{idx}/{len(all_missing)}] ‚è© –ü—Ä–æ–µ–∫—Ç {proj_id}: —É–∂–µ –µ—Å—Ç—å")
            skipped += 1
            continue
        
        print(f"  [{idx}/{len(all_missing)}] üì• –ü—Ä–æ–µ–∫—Ç {proj_id}...", end='')
        
        if download_excel(table_id, output_path):
            size_kb = output_path.stat().st_size / 1024
            print(f" ‚úÖ {size_kb:.1f} KB")
            downloaded += 1
        else:
            errors += 1
            print()
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if idx % 10 == 0:
            time.sleep(1)
    
    print("\n" + "=" * 80)
    print("‚úÖ –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 80)
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  ‚Ä¢ –°–∫–∞—á–∞–Ω–æ:   {downloaded}")
    print(f"  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
    print(f"  ‚Ä¢ –û—à–∏–±–æ–∫:    {errors}")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ:     {len(all_missing)}")
    print("=" * 80)

if __name__ == '__main__':
    main()




"""
–°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import sys
from pathlib import Path
from sqlalchemy import text
import gspread
from google.oauth2.service_account import Credentials
import time

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager

# Google Sheets credentials
SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 
          'https://www.googleapis.com/auth/drive']
CREDS_FILE = 'service_account.json'

def download_excel(table_id, output_path):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç Excel —Ñ–∞–π–ª –∏–∑ Google Sheets"""
    try:
        creds = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPES)
        client = gspread.authorize(creds)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        spreadsheet = client.open_by_key(table_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∫ Excel
        url = f"https://docs.google.com/spreadsheets/d/{table_id}/export?format=xlsx"
        
        import requests
        response = requests.get(url, headers={'Authorization': f'Bearer {creds.token}'})
        
        if response.status_code == 200:
            with open(output_path, 'wb') as f:
                f.write(response.content)
            return True
        else:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("=" * 80)
    print("üì• –°–ö–ê–ß–ò–í–ê–ù–ò–ï EXCEL –§–ê–ô–õ–û–í –î–õ–Ø –ü–†–û–ï–ö–¢–û–í –ë–ï–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 80)
    
    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–∫–∏
    template4_missing = []
    with open('missing_images_template4.txt', 'r') as f:
        for line in f:
            parts = line.strip().split('\t')
            if len(parts) >= 2:
                template4_missing.append((int(parts[0]), parts[1]))
    
    template5_missing = []
    with open('missing_images_template5.txt', 'r') as f:
        for line in f:
            parts = line.strip().split('\t')
            if len(parts) >= 2:
                template5_missing.append((int(parts[0]), parts[1]))
    
    all_missing = template4_missing + template5_missing
    
    print(f"\nüìä –ö —Å–∫–∞—á–∏–≤–∞–Ω–∏—é:")
    print(f"  –®–∞–±–ª–æ–Ω 4: {len(template4_missing)} —Ñ–∞–π–ª–æ–≤")
    print(f"  –®–∞–±–ª–æ–Ω 5: {len(template5_missing)} —Ñ–∞–π–ª–æ–≤")
    print(f"  –í–°–ï–ì–û: {len(all_missing)} —Ñ–∞–π–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ—Ç
    storage_dir = Path('storage/excel_files')
    storage_dir.mkdir(parents=True, exist_ok=True)
    
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
    
    downloaded = 0
    skipped = 0
    errors = 0
    
    for idx, (proj_id, table_id) in enumerate(all_missing, 1):
        output_path = storage_dir / f"{table_id}.xlsx"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        if output_path.exists():
            print(f"  [{idx}/{len(all_missing)}] ‚è© –ü—Ä–æ–µ–∫—Ç {proj_id}: —É–∂–µ –µ—Å—Ç—å")
            skipped += 1
            continue
        
        print(f"  [{idx}/{len(all_missing)}] üì• –ü—Ä–æ–µ–∫—Ç {proj_id}...", end='')
        
        if download_excel(table_id, output_path):
            size_kb = output_path.stat().st_size / 1024
            print(f" ‚úÖ {size_kb:.1f} KB")
            downloaded += 1
        else:
            errors += 1
            print()
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if idx % 10 == 0:
            time.sleep(1)
    
    print("\n" + "=" * 80)
    print("‚úÖ –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 80)
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  ‚Ä¢ –°–∫–∞—á–∞–Ω–æ:   {downloaded}")
    print(f"  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
    print(f"  ‚Ä¢ –û—à–∏–±–æ–∫:    {errors}")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ:     {len(all_missing)}")
    print("=" * 80)

if __name__ == '__main__':
    main()











