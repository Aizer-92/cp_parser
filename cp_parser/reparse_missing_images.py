#!/usr/bin/env python3
"""
–î–æ–ø–∞—Ä—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö Excel —Ñ–∞–π–ª–æ–≤
"""

import sys
from pathlib import Path
from sqlalchemy import text
import openpyxl
from datetime import datetime

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager

def extract_images_from_excel(excel_path, table_id):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    try:
        wb = openpyxl.load_workbook(excel_path)
        ws = wb.active
        
        images = []
        for img in ws._images:
            anchor = img.anchor
            if hasattr(anchor, '_from'):
                row = anchor._from.row + 1  # openpyxl –Ω–∞—á–∏–Ω–∞–µ—Ç —Å 0
                col = anchor._from.col + 1
                col_letter = openpyxl.utils.get_column_letter(col)
                cell_position = f"{col_letter}{row}"
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                img_filename = f"{table_id}_{cell_position}_{abs(hash(img.ref))}.png"
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                img_data = img.ref
                if hasattr(img_data, 'read'):
                    # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
                    img_data.seek(0)
                    img_bytes = img_data.read()
                elif isinstance(img_data, bytes):
                    img_bytes = img_data
                else:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    continue
                
                images.append({
                    'filename': img_filename,
                    'data': img_bytes,
                    'cell_position': cell_position,
                    'row': row,
                    'col': col
                })
        
        wb.close()
        return images
        
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
        return []

def save_images_to_db(project_id, table_id, images, storage_dir):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ë–î"""
    db = PostgreSQLManager()
    
    with db.get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ —Å –∏—Ö row_number
        products = session.execute(text("""
            SELECT id, row_number
            FROM products
            WHERE project_id = :project_id
            ORDER BY row_number
        """), {'project_id': project_id}).fetchall()
        
        if not products:
            return 0
        
        saved_count = 0
        
        for img in images:
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –¥–ª—è —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ row_number
            product_id = None
            for prod_id, row_num in products:
                if row_num == img['row']:
                    product_id = prod_id
                    break
            
            if not product_id:
                # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ç–æ–≤–∞—Ä
                for prod_id, row_num in products:
                    if row_num <= img['row']:
                        product_id = prod_id
                    else:
                        break
            
            if not product_id:
                continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            img_path = storage_dir / img['filename']
            with open(img_path, 'wb') as f:
                f.write(img['data'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
            exists = session.execute(text("""
                SELECT COUNT(*) FROM product_images
                WHERE product_id = :product_id
                AND cell_position = :cell_position
            """), {
                'product_id': product_id,
                'cell_position': img['cell_position']
            }).scalar()
            
            if exists > 0:
                continue
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º is_main_image (–ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ A)
            is_main = img['col'] == 1
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
            session.execute(text("""
                INSERT INTO product_images (
                    product_id, table_id, image_filename, local_path,
                    cell_position, is_main_image, row_number,
                    created_at, updated_at
                )
                VALUES (
                    :product_id, :table_id, :filename, :local_path,
                    :cell_position, :is_main, :row_number,
                    NOW(), NOW()
                )
            """), {
                'product_id': product_id,
                'table_id': table_id,
                'filename': img['filename'],
                'local_path': str(img_path),
                'cell_position': img['cell_position'],
                'is_main': is_main,
                'row_number': img['row']
            })
            
            saved_count += 1
        
        session.commit()
        return saved_count

def main():
    print("=" * 80)
    print("üñºÔ∏è  –î–û–ü–ê–†–°–ò–ù–ì –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –î–õ–Ø –ü–†–û–ï–ö–¢–û–í –ë–ï–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 80)
    
    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–∫–∏
    template4_missing = []
    with open('missing_images_template4.txt', 'r') as f:
        for line in f:
            parts = line.strip().split('\t')
            if len(parts) >= 2:
                template4_missing.append((int(parts[0]), parts[1]))
    
    template5_missing = []
    with open('missing_images_template5.txt', 'r') as f:
        for line in f:
            parts = line.strip().split('\t')
            if len(parts) >= 2:
                template5_missing.append((int(parts[0]), parts[1]))
    
    all_missing = template4_missing + template5_missing
    
    print(f"\nüìä –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ:")
    print(f"  –®–∞–±–ª–æ–Ω 4: {len(template4_missing)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"  –®–∞–±–ª–æ–Ω 5: {len(template5_missing)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"  –í–°–ï–ì–û: {len(all_missing)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    excel_dir = Path('storage/excel_files')
    images_dir = Path('storage/images')
    images_dir.mkdir(parents=True, exist_ok=True)
    
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é –¥–æ–ø–∞—Ä—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    processed = 0
    skipped = 0
    errors = 0
    total_images = 0
    
    for idx, (proj_id, table_id) in enumerate(all_missing, 1):
        excel_path = excel_dir / f"{table_id}.xlsx"
        
        if not excel_path.exists():
            print(f"  [{idx}/{len(all_missing)}] ‚è© –ü—Ä–æ–µ–∫—Ç {proj_id}: –Ω–µ—Ç Excel —Ñ–∞–π–ª–∞")
            skipped += 1
            continue
        
        print(f"  [{idx}/{len(all_missing)}] üñºÔ∏è  –ü—Ä–æ–µ–∫—Ç {proj_id}...", end='')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = extract_images_from_excel(excel_path, table_id)
        
        if not images:
            print(f" ‚ö†Ô∏è  –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ")
            skipped += 1
            continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        saved = save_images_to_db(proj_id, table_id, images, images_dir)
        
        print(f" ‚úÖ {saved} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        processed += 1
        total_images += saved
    
    print("\n" + "=" * 80)
    print("‚úÖ –î–û–ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 80)
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:    {processed}")
    print(f"  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ:     {skipped}")
    print(f"  ‚Ä¢ –û—à–∏–±–æ–∫:        {errors}")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(all_missing)}")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
    print("=" * 80)

if __name__ == '__main__':
    main()


–î–æ–ø–∞—Ä—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö Excel —Ñ–∞–π–ª–æ–≤
"""

import sys
from pathlib import Path
from sqlalchemy import text
import openpyxl
from datetime import datetime

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager

def extract_images_from_excel(excel_path, table_id):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    try:
        wb = openpyxl.load_workbook(excel_path)
        ws = wb.active
        
        images = []
        for img in ws._images:
            anchor = img.anchor
            if hasattr(anchor, '_from'):
                row = anchor._from.row + 1  # openpyxl –Ω–∞—á–∏–Ω–∞–µ—Ç —Å 0
                col = anchor._from.col + 1
                col_letter = openpyxl.utils.get_column_letter(col)
                cell_position = f"{col_letter}{row}"
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                img_filename = f"{table_id}_{cell_position}_{abs(hash(img.ref))}.png"
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                img_data = img.ref
                if hasattr(img_data, 'read'):
                    # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
                    img_data.seek(0)
                    img_bytes = img_data.read()
                elif isinstance(img_data, bytes):
                    img_bytes = img_data
                else:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    continue
                
                images.append({
                    'filename': img_filename,
                    'data': img_bytes,
                    'cell_position': cell_position,
                    'row': row,
                    'col': col
                })
        
        wb.close()
        return images
        
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
        return []

def save_images_to_db(project_id, table_id, images, storage_dir):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ë–î"""
    db = PostgreSQLManager()
    
    with db.get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ —Å –∏—Ö row_number
        products = session.execute(text("""
            SELECT id, row_number
            FROM products
            WHERE project_id = :project_id
            ORDER BY row_number
        """), {'project_id': project_id}).fetchall()
        
        if not products:
            return 0
        
        saved_count = 0
        
        for img in images:
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –¥–ª—è —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ row_number
            product_id = None
            for prod_id, row_num in products:
                if row_num == img['row']:
                    product_id = prod_id
                    break
            
            if not product_id:
                # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ç–æ–≤–∞—Ä
                for prod_id, row_num in products:
                    if row_num <= img['row']:
                        product_id = prod_id
                    else:
                        break
            
            if not product_id:
                continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            img_path = storage_dir / img['filename']
            with open(img_path, 'wb') as f:
                f.write(img['data'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
            exists = session.execute(text("""
                SELECT COUNT(*) FROM product_images
                WHERE product_id = :product_id
                AND cell_position = :cell_position
            """), {
                'product_id': product_id,
                'cell_position': img['cell_position']
            }).scalar()
            
            if exists > 0:
                continue
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º is_main_image (–ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ A)
            is_main = img['col'] == 1
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
            session.execute(text("""
                INSERT INTO product_images (
                    product_id, table_id, image_filename, local_path,
                    cell_position, is_main_image, row_number,
                    created_at, updated_at
                )
                VALUES (
                    :product_id, :table_id, :filename, :local_path,
                    :cell_position, :is_main, :row_number,
                    NOW(), NOW()
                )
            """), {
                'product_id': product_id,
                'table_id': table_id,
                'filename': img['filename'],
                'local_path': str(img_path),
                'cell_position': img['cell_position'],
                'is_main': is_main,
                'row_number': img['row']
            })
            
            saved_count += 1
        
        session.commit()
        return saved_count

def main():
    print("=" * 80)
    print("üñºÔ∏è  –î–û–ü–ê–†–°–ò–ù–ì –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –î–õ–Ø –ü–†–û–ï–ö–¢–û–í –ë–ï–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 80)
    
    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–∫–∏
    template4_missing = []
    with open('missing_images_template4.txt', 'r') as f:
        for line in f:
            parts = line.strip().split('\t')
            if len(parts) >= 2:
                template4_missing.append((int(parts[0]), parts[1]))
    
    template5_missing = []
    with open('missing_images_template5.txt', 'r') as f:
        for line in f:
            parts = line.strip().split('\t')
            if len(parts) >= 2:
                template5_missing.append((int(parts[0]), parts[1]))
    
    all_missing = template4_missing + template5_missing
    
    print(f"\nüìä –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ:")
    print(f"  –®–∞–±–ª–æ–Ω 4: {len(template4_missing)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"  –®–∞–±–ª–æ–Ω 5: {len(template5_missing)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"  –í–°–ï–ì–û: {len(all_missing)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    excel_dir = Path('storage/excel_files')
    images_dir = Path('storage/images')
    images_dir.mkdir(parents=True, exist_ok=True)
    
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é –¥–æ–ø–∞—Ä—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    processed = 0
    skipped = 0
    errors = 0
    total_images = 0
    
    for idx, (proj_id, table_id) in enumerate(all_missing, 1):
        excel_path = excel_dir / f"{table_id}.xlsx"
        
        if not excel_path.exists():
            print(f"  [{idx}/{len(all_missing)}] ‚è© –ü—Ä–æ–µ–∫—Ç {proj_id}: –Ω–µ—Ç Excel —Ñ–∞–π–ª–∞")
            skipped += 1
            continue
        
        print(f"  [{idx}/{len(all_missing)}] üñºÔ∏è  –ü—Ä–æ–µ–∫—Ç {proj_id}...", end='')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = extract_images_from_excel(excel_path, table_id)
        
        if not images:
            print(f" ‚ö†Ô∏è  –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ")
            skipped += 1
            continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        saved = save_images_to_db(proj_id, table_id, images, images_dir)
        
        print(f" ‚úÖ {saved} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        processed += 1
        total_images += saved
    
    print("\n" + "=" * 80)
    print("‚úÖ –î–û–ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 80)
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:    {processed}")
    print(f"  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ:     {skipped}")
    print(f"  ‚Ä¢ –û—à–∏–±–æ–∫:        {errors}")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(all_missing)}")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
    print("=" * 80)

if __name__ == '__main__':
    main()

