#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel —Ñ–∞–π–ª–æ–≤
"""

from pathlib import Path
import time

def monitor():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    
    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    with open('projects_need_images.txt', 'r') as f:
        total = len([line for line in f if line.strip().isdigit()])
    
    excel_dir = Path('excel_files')
    
    while True:
        # –°—á–∏—Ç–∞–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        downloaded = []
        for excel_path in excel_dir.glob('project_*.xlsx'):
            if excel_path.stat().st_size > 0:
                downloaded.append(excel_path)
        
        downloaded_count = len(downloaded)
        total_size = sum(f.stat().st_size for f in downloaded)
        
        print("\n" + "=" * 80)
        print(f"üì• –ü–†–û–ì–†–ï–°–° –°–ö–ê–ß–ò–í–ê–ù–ò–Ø")
        print("=" * 80)
        print(f"–°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:  {downloaded_count}/{total} ({downloaded_count*100//total}%)")
        print(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:    {total_size:,} –±–∞–π—Ç ({total_size/1024/1024:.1f} –ú–ë)")
        print(f"–û—Å—Ç–∞–ª–æ—Å—å:        {total - downloaded_count}")
        print("=" * 80)
        
        if downloaded_count >= total:
            print("\n‚úÖ –í–°–ï –§–ê–ô–õ–´ –°–ö–ê–ß–ê–ù–´!")
            print("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: python3 reparse_images_from_excel.py")
            break
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ñ–∞–π–ª–æ–≤
        recent = sorted(downloaded, key=lambda x: x.stat().st_mtime, reverse=True)[:5]
        if recent:
            print("\nüìÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã:")
            for f in recent:
                size_mb = f.stat().st_size / 1024 / 1024
                print(f"  ‚Ä¢ {f.name} ({size_mb:.1f} –ú–ë)")
        
        print("\n‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
        time.sleep(10)

if __name__ == '__main__':
    try:
        monitor()
    except KeyboardInterrupt:
        print("\n\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")



"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel —Ñ–∞–π–ª–æ–≤
"""

from pathlib import Path
import time

def monitor():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    
    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    with open('projects_need_images.txt', 'r') as f:
        total = len([line for line in f if line.strip().isdigit()])
    
    excel_dir = Path('excel_files')
    
    while True:
        # –°—á–∏—Ç–∞–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        downloaded = []
        for excel_path in excel_dir.glob('project_*.xlsx'):
            if excel_path.stat().st_size > 0:
                downloaded.append(excel_path)
        
        downloaded_count = len(downloaded)
        total_size = sum(f.stat().st_size for f in downloaded)
        
        print("\n" + "=" * 80)
        print(f"üì• –ü–†–û–ì–†–ï–°–° –°–ö–ê–ß–ò–í–ê–ù–ò–Ø")
        print("=" * 80)
        print(f"–°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:  {downloaded_count}/{total} ({downloaded_count*100//total}%)")
        print(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:    {total_size:,} –±–∞–π—Ç ({total_size/1024/1024:.1f} –ú–ë)")
        print(f"–û—Å—Ç–∞–ª–æ—Å—å:        {total - downloaded_count}")
        print("=" * 80)
        
        if downloaded_count >= total:
            print("\n‚úÖ –í–°–ï –§–ê–ô–õ–´ –°–ö–ê–ß–ê–ù–´!")
            print("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: python3 reparse_images_from_excel.py")
            break
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ñ–∞–π–ª–æ–≤
        recent = sorted(downloaded, key=lambda x: x.stat().st_mtime, reverse=True)[:5]
        if recent:
            print("\nüìÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã:")
            for f in recent:
                size_mb = f.stat().st_size / 1024 / 1024
                print(f"  ‚Ä¢ {f.name} ({size_mb:.1f} –ú–ë)")
        
        print("\n‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
        time.sleep(10)

if __name__ == '__main__':
    try:
        monitor()
    except KeyboardInterrupt:
        print("\n\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")






