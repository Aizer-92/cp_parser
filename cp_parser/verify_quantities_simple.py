#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ä–∞–∂–µ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
"""

import sys
from pathlib import Path
sys.path.insert(0, str(Path.cwd()))

import json
import requests
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text
import os
from openpyxl import load_workbook
import csv
from datetime import datetime
import time

# Railway DB
os.environ['USE_RAILWAY_DB'] = 'true'

def download_excel_simple(sheet_id, output_path):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç Google Sheet –∫–∞–∫ Excel —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=xlsx&gid=0"
        
        response = requests.get(export_url, timeout=30)
        
        if response.status_code == 200:
            with open(output_path, 'wb') as f:
                f.write(response.content)
            return True
        else:
            print(f"  ‚ùå –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def extract_quantity_from_excel(excel_path, row_number):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏—Ä–∞–∂ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ E"""
    try:
        wb = load_workbook(excel_path, data_only=True, read_only=True)
        ws = wb.active
        
        # –ö–æ–ª–æ–Ω–∫–∞ E = 5
        cell_value = ws.cell(row=row_number, column=5).value
        
        if cell_value is None:
            return None
            
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
        try:
            return int(float(str(cell_value).replace(',', '').replace(' ', '')))
        except:
            return str(cell_value)
            
    except Exception as e:
        return None

def verify_project(project_data, db, temp_dir):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç"""
    project_id = project_data['id']
    sheet_id = project_data['sheet_id']
    
    print(f"\n{'='*80}")
    print(f"üîç ID {project_id}: {project_data['name'][:60]}")
    print(f"{'='*80}")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º
    excel_path = temp_dir / f"project_{project_id}.xlsx"
    print(f"üì• –°–∫–∞—á–∏–≤–∞—é...", end=' ', flush=True)
    
    if not download_excel_simple(sheet_id, excel_path):
        return None
    
    size_kb = excel_path.stat().st_size / 1024
    print(f"‚úÖ {size_kb:.0f} KB")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î
    with db.get_session() as session:
        products = session.execute(text("""
            SELECT 
                p.id, p.name, p.row_number,
                po.quantity, po.route
            FROM products p
            INNER JOIN price_offers po ON p.id = po.product_id
            WHERE p.project_id = :pid
            AND po.quantity >= 300
            AND po.quantity % 10 = 0
            ORDER BY p.row_number
        """), {'pid': project_id}).fetchall()
        
        if not products:
            print(f"‚ö†Ô∏è  –ù–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            return None
        
        print(f"üìä –ü—Ä–æ–≤–µ—Ä—è—é {len(products)} –∑–∞–ø–∏—Å–µ–π...", end=' ', flush=True)
        
        results = []
        checked_rows = {}
        
        for prod in products:
            row_num = prod.row_number
            
            if row_num not in checked_rows:
                checked_rows[row_num] = extract_quantity_from_excel(excel_path, row_num)
            
            excel_qty = checked_rows[row_num]
            db_qty = int(prod.quantity)
            
            is_x10 = False
            status = "‚úì"
            
            if excel_qty is None:
                status = "‚ö†Ô∏è"
            elif isinstance(excel_qty, str):
                status = "‚ö†Ô∏è"
            elif excel_qty * 10 == db_qty:
                is_x10 = True
                status = "‚ùå"
            elif excel_qty == db_qty:
                status = "‚úÖ"
            else:
                status = "‚ö†Ô∏è"
            
            results.append({
                'product_id': prod.id,
                'product_name': prod.name,
                'row_number': row_num,
                'excel_quantity': excel_qty,
                'db_quantity': db_qty,
                'route': prod.route,
                'is_x10': is_x10,
                'status': status
            })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        x10_count = sum(1 for r in results if r['is_x10'])
        ok_count = sum(1 for r in results if r['status'] == "‚úÖ")
        
        print(f"Done!")
        print(f"  ‚ùå –û—à–∏–±–∫–∞ x10: {x10_count}/{len(results)} ({x10_count/len(results)*100:.0f}%)")
        print(f"  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {ok_count}/{len(results)} ({ok_count/len(results)*100:.0f}%)")
        
        # –ü—Ä–∏–º–µ—Ä—ã
        if x10_count > 0:
            print(f"  üìã –ü—Ä–∏–º–µ—Ä—ã –æ—à–∏–±–æ–∫:")
            for r in results[:3]:
                if r['is_x10']:
                    print(f"    –°—Ç—Ä–æ–∫–∞ {r['row_number']}: {r['excel_quantity']} ‚Üí {r['db_quantity']}")
        
        return {
            'project_id': project_id,
            'project_name': project_data['name'],
            'url': project_data['url'],
            'total_records': len(results),
            'x10_errors': x10_count,
            'ok_count': ok_count,
            'results': results
        }

def main():
    print("="*80)
    print("üîç –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –¢–ò–†–ê–ñ–ï–ô (–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
    with open('projects_to_verify.json', 'r', encoding='utf-8') as f:
        projects = json.load(f)
    
    print(f"\nüìã –ü—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(projects)}")
    print(f"‚è±Ô∏è  –ü—Ä–æ–≤–µ—Ä—è—é –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–æ–µ–∫—Ç–æ–≤...")
    
    temp_dir = Path('temp_verification')
    temp_dir.mkdir(exist_ok=True)
    
    db = PostgreSQLManager()
    
    all_results = []
    
    for i, project in enumerate(projects[:10], 1):
        print(f"\n{'#'*80}")
        print(f"# {i}/10")
        
        result = verify_project(project, db, temp_dir)
        if result:
            all_results.append(result)
        
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    # –ò—Ç–æ–≥
    print("\n\n" + "="*80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*80)
    
    if not all_results:
        print("\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    total_x10 = sum(r['x10_errors'] for r in all_results)
    total_records = sum(r['total_records'] for r in all_results)
    
    print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(all_results)}")
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records:,}")
    print(f"‚ùå –û—à–∏–±–æ–∫ x10: {total_x10:,} ({total_x10/total_records*100:.1f}%)")
    
    print(f"\nüìã –î–ï–¢–ê–õ–ò:")
    for r in all_results:
        percent = r['x10_errors'] / r['total_records'] * 100 if r['total_records'] > 0 else 0
        status_icon = "‚ùå" if r['x10_errors'] > 0 else "‚úÖ"
        print(f"\n{status_icon} ID {r['project_id']}: {r['project_name'][:55]}")
        print(f"    –û—à–∏–±–æ–∫: {r['x10_errors']}/{r['total_records']} ({percent:.0f}%)")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV
    csv_path = Path(f"–ê–í–¢–û–ü–†–û–í–ï–†–ö–ê_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv")
    
    with open(csv_path, 'w', newline='', encoding='utf-8-sig') as f:
        writer = csv.writer(f)
        writer.writerow([
            'ID –ü—Ä–æ–µ–∫—Ç–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ', 'ID –¢–æ–≤–∞—Ä–∞', '–¢–æ–≤–∞—Ä',
            '–°—Ç—Ä–æ–∫–∞', 'Excel', '–ë–î', '–ú–∞—Ä—à—Ä—É—Ç', '–°—Ç–∞—Ç—É—Å', 'x10?'
        ])
        
        for proj in all_results:
            for r in proj['results']:
                writer.writerow([
                    proj['project_id'], proj['project_name'],
                    r['product_id'], r['product_name'],
                    r['row_number'], r['excel_quantity'], r['db_quantity'],
                    r['route'], r['status'], '–î–ê' if r['is_x10'] else '–ù–ï–¢'
                ])
    
    print(f"\n‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {csv_path}")
    print("="*80)

if __name__ == '__main__':
    main()




