#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ä–∞–∂–µ–π —Å –æ—à–∏–±–∫–æ–π x10 –≤ –ë–î
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö CSV
"""

import sys
from pathlib import Path
sys.path.insert(0, str(Path.cwd()))

from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text
import os
import csv

# Railway DB
os.environ['USE_RAILWAY_DB'] = 'true'

def main():
    print("="*70)
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ò–†–ê–ñ–ï–ô x10 –í –ë–î")
    print("="*70)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –∏–∑ –æ—Ç—á–µ—Ç–∞
    report_file = Path("–°–ü–ò–°–û–ö_–û–®–ò–ë–û–ö_20251011_1258.csv")
    
    if not report_file.exists():
        print(f"\n‚ùå –§–∞–π–ª {report_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python3 analyze_downloaded_csv.py")
        return
    
    print(f"\nüìã –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏...")
    
    projects_to_fix = []
    with open(report_file, 'r', encoding='utf-8-sig') as f:
        reader = csv.DictReader(f)
        for row in reader:
            projects_to_fix.append({
                'id': int(row['ID']),
                'name': row['–ù–∞–∑–≤–∞–Ω–∏–µ'],
                'errors': int(row['–û—à–∏–±–æ–∫_x10']),
                'total': int(row['–í—Å–µ–≥–æ'])
            })
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {len(projects_to_fix)}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –æ—Ñ—Ñ–µ—Ä–∞–º–∏
    detail_file = Path("–ü–†–û–í–ï–†–ï–ù–ù–´–ï_CSV_20251011_1258.csv")
    
    if not detail_file.exists():
        print(f"‚ùå –§–∞–π–ª {detail_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–∞—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...")
    
    offers_to_fix = []
    with open(detail_file, 'r', encoding='utf-8-sig') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row['–û—à–∏–±–∫–∞_x10'] == '–î–ê':
                offers_to_fix.append({
                    'project_id': int(row['ID_–ü—Ä–æ–µ–∫—Ç–∞']),
                    'product_id': int(row['ID_–¢–æ–≤–∞—Ä–∞']),
                    'row': int(row['–°—Ç—Ä–æ–∫–∞']),
                    'csv_qty': int(row['–¢–∏—Ä–∞–∂_CSV']) if row['–¢–∏—Ä–∞–∂_CSV'] and row['–¢–∏—Ä–∞–∂_CSV'].isdigit() else None,
                    'db_qty': int(row['–¢–∏—Ä–∞–∂_–ë–î']),
                    'route': row['–ú–∞—Ä—à—Ä—É—Ç'],
                    'product_name': row['–¢–æ–≤–∞—Ä']
                })
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {len(offers_to_fix)}")
    
    if not offers_to_fix:
        print("\n‚úÖ –ù–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_errors = len(offers_to_fix)
    unique_products = len(set(o['product_id'] for o in offers_to_fix))
    unique_projects = len(set(o['project_id'] for o in offers_to_fix))
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  –ü—Ä–æ–µ–∫—Ç–æ–≤: {unique_projects}")
    print(f"  –¢–æ–≤–∞—Ä–æ–≤: {unique_products}")
    print(f"  –û—Ñ—Ñ–µ—Ä–æ–≤ (price_offers): {total_errors}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
    by_project = {}
    for offer in offers_to_fix:
        proj_id = offer['project_id']
        if proj_id not in by_project:
            by_project[proj_id] = []
        by_project[proj_id].append(offer)
    
    print(f"\nüìã –¢–û–ü-10 –ü–†–û–ï–ö–¢–û–í –ü–û –ö–û–õ-–í–£ –û–®–ò–ë–û–ö:")
    sorted_projects = sorted(by_project.items(), key=lambda x: len(x[1]), reverse=True)
    for proj_id, offers in sorted_projects[:10]:
        proj_name = next((p['name'] for p in projects_to_fix if p['id'] == proj_id), 'N/A')
        print(f"  ID {proj_id}: {len(offers)} –æ—Ñ—Ñ–µ—Ä–æ–≤ - {proj_name[:45]}")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\n{'='*70}")
    print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï!")
    print(f"{'='*70}")
    print(f"\n–ë—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {total_errors} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ price_offers")
    print(f"–í—Å–µ —Ç–∏—Ä–∞–∂–∏ –±—É–¥—É—Ç –†–ê–ó–î–ï–õ–ï–ù–´ –ù–ê 10")
    print(f"\n–ü—Ä–∏–º–µ—Ä:")
    for offer in offers_to_fix[:3]:
        new_qty = offer['db_qty'] // 10
        print(f"  –ü—Ä–æ–µ–∫—Ç {offer['project_id']}, –¢–æ–≤–∞—Ä {offer['product_id']}: {offer['db_qty']} ‚Üí {new_qty}")
    
    response = input(f"\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
    
    if response not in ['–¥–∞', 'yes', 'y']:
        print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    print(f"\nüîß –ù–∞—á–∏–Ω–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...")
    
    db = PostgreSQLManager()
    
    with db.get_session() as session:
        fixed_count = 0
        
        for i, offer in enumerate(offers_to_fix, 1):
            if i % 100 == 0:
                print(f"\r  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i}/{total_errors}", end='', flush=True)
            
            new_qty = offer['db_qty'] // 10
            
            # –û–±–Ω–æ–≤–ª—è–µ–º quantity –≤ price_offers
            session.execute(text("""
                UPDATE price_offers
                SET quantity = :new_qty,
                    updated_at = NOW()
                WHERE product_id = :product_id
                AND quantity = :old_qty
                AND route = :route
            """), {
                'new_qty': new_qty,
                'product_id': offer['product_id'],
                'old_qty': offer['db_qty'],
                'route': offer['route']
            })
            
            fixed_count += 1
        
        # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        session.commit()
        
        print(f"\n\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixed_count} –æ—Ñ—Ñ–µ—Ä–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    from datetime import datetime
    timestamp = datetime.now().strftime('%Y%m%d_%H%M')
    log_file = Path(f"–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï_x10_{timestamp}.csv")
    
    with open(log_file, 'w', newline='', encoding='utf-8-sig') as f:
        writer = csv.writer(f)
        writer.writerow([
            'ID_–ü—Ä–æ–µ–∫—Ç–∞', 'ID_–¢–æ–≤–∞—Ä–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ_—Ç–æ–≤–∞—Ä–∞',
            '–°—Ç–∞—Ä—ã–π_—Ç–∏—Ä–∞–∂', '–ù–æ–≤—ã–π_—Ç–∏—Ä–∞–∂', '–ú–∞—Ä—à—Ä—É—Ç'
        ])
        
        for offer in offers_to_fix:
            new_qty = offer['db_qty'] // 10
            writer.writerow([
                offer['project_id'],
                offer['product_id'],
                offer['product_name'],
                offer['db_qty'],
                new_qty,
                offer['route']
            ])
    
    print(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {log_file}")
    
    print(f"\n{'='*70}")
    print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("="*70)
    print(f"\nüìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ñ—Ñ–µ—Ä–æ–≤: {fixed_count}")
    print(f"üìä –ü—Ä–æ–µ–∫—Ç–æ–≤: {unique_projects}")
    print(f"üìä –¢–æ–≤–∞—Ä–æ–≤: {unique_products}")
    
    print(f"\nüí° –í—Å–µ —Ç–∏—Ä–∞–∂–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ 10 –∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î Railway")

if __name__ == '__main__':
    main()




