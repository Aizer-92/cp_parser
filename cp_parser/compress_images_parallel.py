#!/usr/bin/env python3
"""
–°–∂–∞—Ç–∏–µ –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ S3 - –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
import sys
from pathlib import Path
import requests
from io import BytesIO
from PIL import Image
import boto3
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
import threading

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text

# S3 credentials
S3_ENDPOINT = "https://s3.ru1.storage.beget.cloud"
S3_ACCESS_KEY = "RECD00AQJIM4300MLJ0W"
S3_SECRET_KEY = "FIucJ3i9iIWZ5ieJvabvI0OxEn2Yv4gG5XRUeSNf"
S3_BUCKET = "73d16f7545b3-promogoods"
S3_REGION = "ru1"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
MAX_DIMENSION = 1920
WEBP_QUALITY = 85
MIN_SIZE_MB = 1.0
NUM_WORKERS = 8  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—á—ë—Ç—á–∏–∫–∏ (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ)
lock = threading.Lock()
stats = {
    'processed': 0,
    'skipped': 0,
    'errors': 0,
    'total_saved_mb': 0.0
}

print(f"\n{'='*80}")
print(f"üñºÔ∏è  –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–û–ï –°–ñ–ê–¢–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
print(f"{'='*80}")
print(f"–ü–æ—Ç–æ–∫–æ–≤: {NUM_WORKERS} | –ú–∏–Ω. —Ä–∞–∑–º–µ—Ä: {MIN_SIZE_MB} MB | –ö–∞—á–µ—Å—Ç–≤–æ: {WEBP_QUALITY}")
print(f"{'='*80}\n")

def create_s3_client():
    """–°–æ–∑–¥–∞–Ω–∏–µ S3 –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å–≤–æ–π)"""
    return boto3.client(
        's3',
        aws_access_key_id=S3_ACCESS_KEY,
        aws_secret_access_key=S3_SECRET_KEY,
        region_name=S3_REGION,
        endpoint_url=S3_ENDPOINT,
        config=boto3.session.Config(
            signature_version='s3v4',
            s3={'addressing_style': 'path'}
        )
    )

def compress_image(img):
    """–°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ WebP"""
    original_size = img.size
    width, height = img.size
    max_side = max(width, height)
    
    resized = False
    if max_side > MAX_DIMENSION:
        scale = MAX_DIMENSION / max_side
        new_width = int(width * scale)
        new_height = int(height * scale)
        img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
        resized = True
    
    if img.mode in ('RGBA', 'LA', 'P'):
        background = Image.new('RGB', img.size, (255, 255, 255))
        if img.mode == 'P':
            img = img.convert('RGBA')
        background.paste(img, mask=img.split()[-1] if img.mode in ('RGBA', 'LA') else None)
        img = background
    
    output = BytesIO()
    img.save(output, format='WebP', quality=WEBP_QUALITY, method=6)
    webp_bytes = output.getvalue()
    
    return webp_bytes, original_size, img.size, resized

def process_single_image(img_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)"""
    img_id, url, filename = img_data
    
    try:
        # –°–≤–æ–π S3 –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        s3 = create_s3_client()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        head = requests.head(url, timeout=5)
        if head.status_code != 200:
            return {'status': 'error', 'filename': filename, 'error': 'File not accessible'}
        
        size_mb = int(head.headers.get('Content-Length', 0)) / 1024 / 1024
        if size_mb < MIN_SIZE_MB:
            return {'status': 'skipped', 'filename': filename}
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–∂–∏–º–∞–µ–º
        response = requests.get(url, timeout=30)
        img = Image.open(BytesIO(response.content))
        webp_bytes, orig_size, new_size, was_resized = compress_image(img)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ S3
        new_filename = filename.rsplit('.', 1)[0] + '.webp'
        s3_key = f"images/{new_filename}"
        
        s3.put_object(
            Bucket=S3_BUCKET,
            Key=s3_key,
            Body=webp_bytes,
            ContentType='image/webp'
        )
        
        new_url = f"{S3_ENDPOINT}/{S3_BUCKET}/{s3_key}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î (—Å –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º)
        db = PostgreSQLManager()
        with db.get_session() as session:
            session.execute(
                text("UPDATE product_images SET image_filename = :fn, image_url = :url WHERE id = :id"),
                {'fn': new_filename, 'url': new_url, 'id': img_id}
            )
            session.commit()
        
        compressed_mb = len(webp_bytes) / 1024 / 1024
        saved_mb = size_mb - compressed_mb
        
        return {
            'status': 'success',
            'filename': filename,
            'orig_size': orig_size,
            'new_size': new_size,
            'resized': was_resized,
            'size_mb': size_mb,
            'compressed_mb': compressed_mb,
            'saved_mb': saved_mb
        }
        
    except Exception as e:
        return {'status': 'error', 'filename': filename, 'error': str(e)[:80]}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
start_time = datetime.now()
db = PostgreSQLManager()

print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...\n")

with db.get_session() as session:
    offset = 0
    chunk_size = 500  # –ë–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    while True:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞—Ç—á –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images = session.execute(
            text("""
                SELECT id, image_url, image_filename
                FROM product_images
                WHERE image_url IS NOT NULL
                AND image_filename NOT LIKE '%.webp'
                ORDER BY id
                LIMIT :chunk OFFSET :offset
            """),
            {'chunk': chunk_size, 'offset': offset}
        ).fetchall()
        
        if not images:
            break
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        with ThreadPoolExecutor(max_workers=NUM_WORKERS) as executor:
            futures = {executor.submit(process_single_image, img): img for img in images}
            
            for future in as_completed(futures):
                result = future.result()
                
                with lock:
                    if result['status'] == 'success':
                        stats['processed'] += 1
                        stats['total_saved_mb'] += result['saved_mb']
                        
                        elapsed = (datetime.now() - start_time).total_seconds()
                        speed = stats['processed'] / elapsed if elapsed > 0 else 0
                        
                        resize_info = ""
                        if result['resized']:
                            resize_info = f" {result['orig_size'][0]}x{result['orig_size'][1]}‚Üí{result['new_size'][0]}x{result['new_size'][1]}"
                        
                        print(f"‚úÖ [{stats['processed']}] {result['filename'][:45]:<45}{resize_info:<20} | {result['size_mb']:.2f}‚Üí{result['compressed_mb']:.2f}MB | Œ£={stats['total_saved_mb']:.1f}MB | {speed:.1f}/s")
                        
                    elif result['status'] == 'skipped':
                        stats['skipped'] += 1
                        
                    elif result['status'] == 'error':
                        stats['errors'] += 1
                        print(f"‚ùå [{stats['errors']}] {result['filename'][:45]}: {result.get('error', 'Unknown')}")
        
        offset += chunk_size
        
        if offset % 2000 == 0:
            print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {offset:,} | –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['processed']} | –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']} | –û—à–∏–±–æ–∫: {stats['errors']}\n")

# –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
print(f"\n{'='*80}")
print(f"‚úÖ –ó–ê–í–ï–†–®–ï–ù–û")
print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['processed']:,}")
print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']:,}")
print(f"   –û—à–∏–±–æ–∫: {stats['errors']:,}")
print(f"   –≠–∫–æ–Ω–æ–º–∏—è: {stats['total_saved_mb']:.2f} MB ({stats['total_saved_mb']/1024:.2f} GB)")
total_time = (datetime.now() - start_time).total_seconds()
print(f"   –í—Ä–µ–º—è: {int(total_time//60)}–º {int(total_time%60)}—Å")
print(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {stats['processed']/total_time:.2f} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/—Å–µ–∫")
print(f"{'='*80}\n")

