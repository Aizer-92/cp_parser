#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü–∞—Ä—Å–µ—Ä –º–∞—Å—Ç–µ—Ä-—Ç–∞–±–ª–∏—Ü—ã CSV –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Google Sheets —Å—Å—ã–ª–æ–∫
"""

import csv
import re
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from urllib.parse import urlparse, parse_qs
from loguru import logger

class CSVMasterTableParser:
    """–ü–∞—Ä—Å–µ—Ä –º–∞—Å—Ç–µ—Ä-—Ç–∞–±–ª–∏—Ü—ã —Å Google Sheets —Å—Å—ã–ª–∫–∞–º–∏"""
    
    def __init__(self, csv_file_path: str):
        self.csv_file_path = Path(csv_file_path)
        self.logger = logger
        
        # –ò–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ –≤ CSV (–Ω–∞—á–∏–Ω–∞—è —Å 0)
        self.COLUMNS = {
            'min_quantity': 0,        # –¢–∏—Ä–∞–∂ MIN
            'max_quantity': 1,        # –¢–∏—Ä–∞–∂ MAX  
            'products': 2,            # –¢–æ–≤–∞—Ä—ã
            'min_price_usd': 3,       # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ $
            'max_price_usd': 4,       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ $
            'min_price_rub': 5,       # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤ —Ä—É–±–ª—è—Ö
            'max_price_rub': 6,       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤ —Ä—É–±–ª—è—Ö 
            'description': 7,         # –û–ø–∏—Å–∞–Ω–∏–µ
            'project_name': 8,        # –ù–∞–∑–≤–∞–Ω–∏–µ (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ)
            'empty_col': 9,           # –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞
            'managers': 10,           # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
            'google_sheets_url': 11,  # –°—Å—ã–ª–∫–∞ –Ω–∞ GoogleSheets
            'created_date': 12,       # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            'client_name': 13,        # –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç  
            'region': 14              # –†–µ–≥–∏–æ–Ω
        }
    
    def extract_sheet_id_from_url(self, url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ Google Sheets URL"""
        if not url or 'docs.google.com/spreadsheets' not in url:
            return None
            
        try:
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ URL
            pattern = r'/spreadsheets/d/([a-zA-Z0-9-_]+)'
            match = re.search(pattern, url)
            if match:
                return match.group(1)
            return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ URL {url}: {e}")
            return None
    
    def clean_project_name(self, name: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –∏–º—è —Ñ–∞–π–ª–∞"""
        if not name:
            return "untitled"
            
        # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        cleaned = re.sub(r'[<>:"/\\|?*]', '', name.strip())
        cleaned = re.sub(r'\s+', ' ', cleaned)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(cleaned) > 100:
            cleaned = cleaned[:100]
            
        return cleaned or "untitled"
    
    def parse_csv_file(self) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç CSV —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ Google Sheets —Å—Å—ã–ª–∫–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        
        if not self.csv_file_path.exists():
            raise FileNotFoundError(f"CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.csv_file_path}")
        
        sheets_data = []
        
        try:
            with open(self.csv_file_path, 'r', encoding='utf-8') as file:
                csv_reader = csv.reader(file)
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                header = next(csv_reader, None)
                if not header:
                    raise ValueError("CSV —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
                
                self.logger.info(f"üìä –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å {len(header)} –∫–æ–ª–æ–Ω–∫–∞–º–∏")
                
                row_count = 0
                valid_sheets = 0
                
                for row_num, row in enumerate(csv_reader, start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2-–π —Å—Ç—Ä–æ–∫–∏
                    row_count += 1
                    
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫
                        if len(row) < max(self.COLUMNS.values()) + 1:
                            self.logger.warning(f"–°—Ç—Ä–æ–∫–∞ {row_num}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ ({len(row)})")
                            continue
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º Google Sheets URL
                        sheets_url = row[self.COLUMNS['google_sheets_url']].strip()
                        if not sheets_url or 'docs.google.com/spreadsheets' not in sheets_url:
                            continue
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º Sheet ID
                        sheet_id = self.extract_sheet_id_from_url(sheets_url)
                        if not sheet_id:
                            self.logger.warning(f"–°—Ç—Ä–æ–∫–∞ {row_num}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Sheet ID –∏–∑ {sheets_url}")
                            continue
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                        project_name = row[self.COLUMNS['project_name']].strip()
                        client_name = row[self.COLUMNS['client_name']].strip()
                        region = row[self.COLUMNS['region']].strip()
                        created_date = row[self.COLUMNS['created_date']].strip()
                        managers = row[self.COLUMNS['managers']].strip()
                        
                        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ Google Sheets ID –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –º–∞—Å—Ç–µ—Ä-—Ç–∞–±–ª–∏—Ü–µ
                        filename = f"{sheet_id}.xlsx"
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
                        sheet_data = {
                            'row_number': row_num,
                            'sheet_id': sheet_id,
                            'google_sheets_url': sheets_url,
                            'project_name': project_name,
                            'filename': filename,
                            'client_name': client_name,
                            'region': region,
                            'created_date': created_date,
                            'managers': managers,
                            'min_quantity': self._safe_int(row[self.COLUMNS['min_quantity']]),
                            'max_quantity': self._safe_int(row[self.COLUMNS['max_quantity']]),
                            'min_price_usd': self._safe_float(row[self.COLUMNS['min_price_usd']]),
                            'max_price_usd': self._safe_float(row[self.COLUMNS['max_price_usd']]),
                            'products': row[self.COLUMNS['products']].strip()
                        }
                        
                        sheets_data.append(sheet_data)
                        valid_sheets += 1
                        
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row_num}: {e}")
                        continue
                
                self.logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {row_count}")
                self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö Google Sheets: {valid_sheets}")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞: {e}")
            raise
        
        return sheets_data
    
    def _safe_int(self, value: str) -> Optional[int]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
        try:
            if not value or value.strip() == '-':
                return None
            return int(float(value.replace(',', '').replace(' ', '')))
        except:
            return None
    
    def _safe_float(self, value: str) -> Optional[float]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
        try:
            if not value or value.strip() == '-':
                return None
            return float(value.replace(',', '.').replace(' ', ''))
        except:
            return None
    
    def get_statistics(self, sheets_data: List[Dict]) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∞—Ä—Å–∏–Ω–≥—É"""
        
        if not sheets_data:
            return {'total': 0}
        
        stats = {
            'total': len(sheets_data),
            'regions': {},
            'clients_count': len(set(item['client_name'] for item in sheets_data if item['client_name'])),
            'date_range': {
                'earliest': None,
                'latest': None
            }
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        for item in sheets_data:
            region = item['region'] or '–ù–µ —É–∫–∞–∑–∞–Ω'
            stats['regions'][region] = stats['regions'].get(region, 0) + 1
        
        # –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        dates = [item['created_date'] for item in sheets_data if item['created_date']]
        if dates:
            stats['date_range']['earliest'] = min(dates)
            stats['date_range']['latest'] = max(dates)
        
        return stats

def main():
    """–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
    
    # –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
    csv_path = Path(__file__).parent.parent.parent / "–ö–æ–ø–∏–ª–∫–∞ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π - –ü—Ä–æ—Å—á–µ—Ç—ã .csv"
    
    if not csv_path.exists():
        print(f"‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_path}")
        return
    
    try:
        parser = CSVMasterTableParser(str(csv_path))
        sheets_data = parser.parse_csv_file()
        stats = parser.get_statistics(sheets_data)
        
        print(f"\\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê CSV:")
        print(f"‚úÖ –í—Å–µ–≥–æ Google Sheets: {stats['total']}")
        print(f"‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats['clients_count']}")
        print(f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {stats['date_range']['earliest']} - {stats['date_range']['latest']}")
        print(f"\\nüåç –ü–æ —Ä–µ–≥–∏–æ–Ω–∞–º:")
        for region, count in stats['regions'].items():
            print(f"  {region}: {count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π
        print(f"\\nüìã –ü–ï–†–í–´–ï 5 –ó–ê–ü–ò–°–ï–ô:")
        for i, item in enumerate(sheets_data[:5], 1):
            print(f"{i}. {item['filename']}")
            print(f"   –ü—Ä–æ–µ–∫—Ç: {item['project_name']}")
            print(f"   –ö–ª–∏–µ–Ω—Ç: {item['client_name']}")
            print(f"   URL: {item['google_sheets_url'][:60]}...")
            print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()
