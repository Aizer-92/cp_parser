"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Excel –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
"""

import os
from pathlib import Path
import sys
from datetime import datetime
from collections import defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent))

from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, Border, Side, PatternFill
from openpyxl.drawing.image import Image as XLImage
from openpyxl.utils import get_column_letter
import requests
from io import BytesIO
from PIL import Image as PILImage

from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text


class KPExcelGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Excel —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.db_manager = PostgreSQLManager()
        
        # –°—Ç–∏–ª–∏ –¥–ª—è Excel
        self.title_font = Font(name='Arial', size=16, bold=True)
        self.header_font = Font(name='Arial', size=11, bold=True, color='FFFFFF')
        self.product_font = Font(name='Arial', size=12, bold=True)
        self.normal_font = Font(name='Arial', size=10)
        
        self.header_fill = PatternFill(start_color='4472C4', end_color='4472C4', fill_type='solid')
        self.product_fill = PatternFill(start_color='E7E6E6', end_color='E7E6E6', fill_type='solid')
        
        self.thin_border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        
        self.center_alignment = Alignment(horizontal='center', vertical='center')
        self.left_alignment = Alignment(horizontal='left', vertical='center', wrap_text=True)
    
    def get_kp_items(self, session_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –ö–ü –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ product_id"""
        
        db_session = self.db_manager.get_session_direct()
        
        try:
            result = db_session.execute(text("""
                SELECT 
                    ki.id as kp_item_id,
                    p.id as product_id,
                    p.name as product_name,
                    p.description,
                    po.id as price_offer_id,
                    po.quantity,
                    po.route,
                    po.price_usd,
                    po.price_rub,
                    po.delivery_time_days,
                    (SELECT image_url 
                     FROM product_images pi 
                     WHERE pi.product_id = p.id 
                     AND pi.image_url IS NOT NULL
                     ORDER BY CASE WHEN pi.column_number = 1 THEN 0 ELSE 1 END, pi.id
                     LIMIT 1) as image_url,
                    (SELECT image_filename 
                     FROM product_images pi 
                     WHERE pi.product_id = p.id 
                     AND pi.image_filename IS NOT NULL
                     ORDER BY CASE WHEN pi.column_number = 1 THEN 0 ELSE 1 END, pi.id
                     LIMIT 1) as image_filename
                FROM kp_items ki
                JOIN products p ON p.id = ki.product_id
                JOIN price_offers po ON po.id = ki.price_offer_id
                WHERE ki.session_id = :session_id
                ORDER BY p.name, po.quantity
            """), {'session_id': session_id})
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ product_id
            products_grouped = defaultdict(lambda: {
                'info': None,
                'offers': []
            })
            
            for row in result:
                product_id = row[1]
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ (–∑–∞–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —Ä–∞–∑)
                if products_grouped[product_id]['info'] is None:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image_url = row[10]
                    if not image_url and row[11]:
                        image_url = f"https://s3.ru1.storage.beget.cloud/73d16f7545b3-promogoods/images/{row[11]}"
                    
                    products_grouped[product_id]['info'] = {
                        'name': row[2],
                        'description': row[3],
                        'image_url': image_url
                    }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                products_grouped[product_id]['offers'].append({
                    'quantity': row[5],
                    'route': row[6],
                    'price_usd': float(row[7]) if row[7] else None,
                    'price_rub': float(row[8]) if row[8] else None,
                    'delivery_days': row[9]
                })
            
            return products_grouped
        finally:
            db_session.close()
    
    def download_image(self, url, max_size=(150, 150)):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è Excel"""
        
        if not url:
            return None
        
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img = PILImage.open(BytesIO(response.content))
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if img.mode in ('RGBA', 'LA', 'P'):
                    background = PILImage.new('RGB', img.size, (255, 255, 255))
                    if img.mode == 'P':
                        img = img.convert('RGBA')
                    background.paste(img, mask=img.split()[-1] if img.mode in ('RGBA', 'LA') else None)
                    img = background
                elif img.mode != 'RGB':
                    img = img.convert('RGB')
                
                # Resize —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                img.thumbnail(max_size, PILImage.Resampling.LANCZOS)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
                img_byte_arr = BytesIO()
                img.save(img_byte_arr, format='PNG')
                img_byte_arr.seek(0)
                
                return img_byte_arr
            else:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {url} (—Å—Ç–∞—Ç—É—Å {response.status_code})")
                return None
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url}: {e}")
            return None
    
    def generate(self, session_id, output_path=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel —Ñ–∞–π–ª –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        
        print("üìä [KP EXCEL] –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Excel...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        products = self.get_kp_items(session_id)
        
        if not products:
            raise ValueError("–ö–ü –ø—É—Å—Ç–æ - –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {sum(len(p['offers']) for p in products.values())}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É Excel
        wb = Workbook()
        ws = wb.active
        ws.title = "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        ws.column_dimensions['A'].width = 20  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        ws.column_dimensions['B'].width = 35  # –¢–æ–≤–∞—Ä/–û–ø–∏—Å–∞–Ω–∏–µ
        ws.column_dimensions['C'].width = 12  # –¢–∏—Ä–∞–∂
        ws.column_dimensions['D'].width = 10  # USD
        ws.column_dimensions['E'].width = 12  # RUB
        ws.column_dimensions['F'].width = 15  # –î–æ—Å—Ç–∞–≤–∫–∞
        ws.column_dimensions['G'].width = 10  # –°—Ä–æ–∫
        
        current_row = 1
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        ws.merge_cells(f'A{current_row}:G{current_row}')
        title_cell = ws[f'A{current_row}']
        title_cell.value = '–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï'
        title_cell.font = self.title_font
        title_cell.alignment = self.center_alignment
        current_row += 1
        
        # –î–∞—Ç–∞
        ws.merge_cells(f'A{current_row}:G{current_row}')
        date_cell = ws[f'A{current_row}']
        date_cell.value = f'–æ—Ç {datetime.now().strftime("%d.%m.%Y")}'
        date_cell.font = Font(name='Arial', size=10, italic=True)
        date_cell.alignment = self.center_alignment
        current_row += 2
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
        for product_id, product_data in products.items():
            product_info = product_data['info']
            offers = product_data['offers']
            
            print(f"   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {product_info['name']} ({len(offers)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)")
            
            start_row = current_row
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_data = self.download_image(product_info['image_url'])
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ B-G –¥–ª—è —Ç–µ–∫—Å—Ç–∞)
            ws.merge_cells(f'B{current_row}:G{current_row}')
            name_cell = ws[f'B{current_row}']
            name_cell.value = product_info['name']
            name_cell.font = self.product_font
            name_cell.alignment = self.left_alignment
            name_cell.fill = self.product_fill
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º fill –∫–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º –≤ —Å—Ç—Ä–æ–∫–µ
            for col in ['A', 'B', 'C', 'D', 'E', 'F', 'G']:
                ws[f'{col}{current_row}'].fill = self.product_fill
                ws[f'{col}{current_row}'].border = self.thin_border
            
            current_row += 1
            
            # –û–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if product_info['description']:
                ws.merge_cells(f'B{current_row}:G{current_row}')
                desc_cell = ws[f'B{current_row}']
                desc_cell.value = product_info['description'][:200]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                desc_cell.font = Font(name='Arial', size=9, italic=True)
                desc_cell.alignment = self.left_alignment
                
                ws[f'A{current_row}'].border = self.thin_border
                for col in ['B', 'C', 'D', 'E', 'F', 'G']:
                    ws[f'{col}{current_row}'].border = self.thin_border
                
                current_row += 1
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å —Ü–µ–Ω–∞–º–∏
            headers = ['', '', '–¢–∏—Ä–∞–∂', 'USD', 'RUB', '–î–æ—Å—Ç–∞–≤–∫–∞', '–°—Ä–æ–∫']
            for col_idx, header in enumerate(headers, start=1):
                cell = ws.cell(row=current_row, column=col_idx, value=header)
                cell.font = self.header_font
                cell.fill = self.header_fill
                cell.alignment = self.center_alignment
                cell.border = self.thin_border
            
            current_row += 1
            offers_start_row = current_row
            
            # –¶–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            for offer in offers:
                ws.cell(row=current_row, column=3, value=f"{offer['quantity']:,.0f} —à—Ç").alignment = self.center_alignment
                ws.cell(row=current_row, column=4, value=f"${offer['price_usd']:.2f}" if offer['price_usd'] else '-').alignment = self.center_alignment
                ws.cell(row=current_row, column=5, value=f"‚ÇΩ{offer['price_rub']:.2f}" if offer['price_rub'] else '-').alignment = self.center_alignment
                ws.cell(row=current_row, column=6, value=offer['route'] or '-').alignment = self.center_alignment
                ws.cell(row=current_row, column=7, value=f"{offer['delivery_days']} –¥–Ω." if offer['delivery_days'] else '-').alignment = self.center_alignment
                
                # –ì—Ä–∞–Ω–∏—Ü—ã
                for col in range(1, 8):
                    ws.cell(row=current_row, column=col).border = self.thin_border
                    ws.cell(row=current_row, column=col).font = self.normal_font
                
                current_row += 1
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if img_data:
                try:
                    img = XLImage(img_data)
                    
                    # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel (–≤ –ø–∏–∫—Å–µ–ª—è—Ö, Excel –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 96 DPI)
                    img.width = 130
                    img.height = 130
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é (—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –≤ –±–ª–æ–∫–µ —Ç–æ–≤–∞—Ä–∞)
                    # Excel anchor: —è—á–µ–π–∫–∞ A –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Ç–æ–≤–∞—Ä–∞
                    img.anchor = f'A{start_row}'
                    ws.add_image(img)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    total_rows = current_row - start_row
                    if total_rows > 0:
                        row_height = 140 / total_rows  # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Å–æ—Ç—É
                        for r in range(start_row, current_row):
                            if ws.row_dimensions[r].height is None or ws.row_dimensions[r].height < row_height:
                                ws.row_dimensions[r].height = row_height
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
            
            # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
            current_row += 1
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if output_path is None:
            output_dir = Path(__file__).parent / 'output'
            output_dir.mkdir(exist_ok=True)
            output_path = output_dir / f'KP_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
        
        wb.save(output_path)
        print(f"‚úÖ [KP EXCEL] –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        return str(output_path)


def main():
    """–¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
    
    # –î–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º session_id –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ö–ü
    from database.postgresql_manager import PostgreSQLManager
    from sqlalchemy import text
    
    db_manager = PostgreSQLManager()
    db_session = db_manager.get_session_direct()
    
    try:
        result = db_session.execute(text("""
            SELECT DISTINCT session_id 
            FROM kp_items 
            LIMIT 1
        """))
        
        row = result.fetchone()
        if not row:
            print("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ö–ü –¥–ª—è —Ç–µ—Å—Ç–∞")
            return
        
        session_id = row[0]
        print(f"üß™ –¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è session_id: {session_id}")
        
        generator = KPExcelGenerator()
        output_path = generator.generate(session_id)
        
        print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_path}")
    finally:
        db_session.close()


if __name__ == '__main__':
    main()

