#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ SQLite -> PostgreSQL
"""
import sys
sys.path.append('/Users/bakirovresad/Downloads/Reshad 1/projects/cp_parser')

from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
import random

SQLITE_URL = "sqlite:////Users/bakirovresad/Downloads/Reshad 1/projects/cp_parser/database/commercial_proposals.db"
POSTGRES_URL = "postgresql://postgres:wpqIxsBFYwmaNBFmCtBahhIMVSSskeiB@centerbeam.proxy.rlwy.net:26590/railway"

def check_counts():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π"""
    print("=" * 80)
    print("1. –ü–†–û–í–ï–†–ö–ê –ö–û–õ–ò–ß–ï–°–¢–í–ê –ó–ê–ü–ò–°–ï–ô")
    print("=" * 80)
    
    sqlite_engine = create_engine(SQLITE_URL)
    postgres_engine = create_engine(POSTGRES_URL)
    
    SqliteSession = sessionmaker(bind=sqlite_engine)
    PgSession = sessionmaker(bind=postgres_engine)
    
    sqlite_session = SqliteSession()
    pg_session = PgSession()
    
    tables = ['projects', 'products', 'price_offers', 'product_images']
    all_match = True
    
    for table in tables:
        sqlite_count = sqlite_session.execute(text(f"SELECT COUNT(*) FROM {table}")).scalar()
        postgres_count = pg_session.execute(text(f"SELECT COUNT(*) FROM {table}")).scalar()
        
        match = sqlite_count == postgres_count
        status = "‚úÖ" if match else "‚ùå"
        
        print(f"\n{status} {table}:")
        print(f"   SQLite:     {sqlite_count:,}")
        print(f"   PostgreSQL: {postgres_count:,}")
        
        if not match:
            all_match = False
            diff = sqlite_count - postgres_count
            print(f"   ‚ö†Ô∏è –†–∞–∑–Ω–∏—Ü–∞:  {diff:,}")
    
    sqlite_session.close()
    pg_session.close()
    
    print("\n" + "=" * 80)
    if all_match:
        print("‚úÖ –í–°–ï –¢–ê–ë–õ–ò–¶–´ –ò–ú–ï–Æ–¢ –û–î–ò–ù–ê–ö–û–í–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ó–ê–ü–ò–°–ï–ô!")
    else:
        print("‚ùå –ï–°–¢–¨ –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø –í –ö–û–õ–ò–ß–ï–°–¢–í–ï –ó–ê–ü–ò–°–ï–ô!")
    print("=" * 80)
    
    return all_match

def verify_random_records(table_name, sample_size=50):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
    print(f"\n{'=' * 80}")
    print(f"2. –ü–†–û–í–ï–†–ö–ê –°–õ–£–ß–ê–ô–ù–´–• –ó–ê–ü–ò–°–ï–ô: {table_name} (–≤—ã–±–æ—Ä–∫–∞ {sample_size})")
    print("=" * 80)
    
    sqlite_engine = create_engine(SQLITE_URL)
    postgres_engine = create_engine(POSTGRES_URL)
    
    SqliteSession = sessionmaker(bind=sqlite_engine)
    PgSession = sessionmaker(bind=postgres_engine)
    
    sqlite_session = SqliteSession()
    pg_session = PgSession()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –∏–∑ SQLite
        all_ids = [row[0] for row in sqlite_session.execute(text(f"SELECT id FROM {table_name}")).fetchall()]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ ID
        sample_ids = random.sample(all_ids, min(sample_size, len(all_ids)))
        
        print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(sample_ids)} —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π...")
        
        mismatches = 0
        matches = 0
        missing = 0
        
        for record_id in sample_ids:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ SQLite
            sqlite_row = sqlite_session.execute(
                text(f"SELECT * FROM {table_name} WHERE id = :id"),
                {'id': record_id}
            ).fetchone()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ PostgreSQL
            pg_row = pg_session.execute(
                text(f"SELECT * FROM {table_name} WHERE id = :id"),
                {'id': record_id}
            ).fetchone()
            
            if pg_row is None:
                missing += 1
                if missing <= 3:
                    print(f"  ‚ùå ID {record_id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ PostgreSQL!")
                continue
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            sqlite_dict = dict(sqlite_row._mapping)
            pg_dict = dict(pg_row._mapping)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
            field_mismatches = []
            for key in sqlite_dict.keys():
                sqlite_val = sqlite_dict[key]
                pg_val = pg_dict.get(key)
                
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                if sqlite_val is None and pg_val is None:
                    continue
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                if isinstance(sqlite_val, float) and isinstance(pg_val, (float, int)):
                    if abs(float(sqlite_val) - float(pg_val)) < 0.01:
                        continue
                
                if str(sqlite_val) != str(pg_val):
                    field_mismatches.append(f"{key}: SQLite={sqlite_val} vs PG={pg_val}")
            
            if field_mismatches:
                mismatches += 1
                if mismatches <= 3:
                    print(f"  ‚ö†Ô∏è ID {record_id}: –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –ø–æ–ª—è—Ö:")
                    for fm in field_mismatches[:3]:
                        print(f"     - {fm}")
            else:
                matches += 1
        
        print(f"\n{'=' * 80}")
        print(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò {table_name}:")
        print(f"  ‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π:     {matches:,}")
        print(f"  ‚ö†Ô∏è –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:   {mismatches:,}")
        print(f"  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç:    {missing:,}")
        
        success_rate = (matches / len(sample_ids)) * 100 if sample_ids else 0
        print(f"  üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å:     {success_rate:.1f}%")
        print("=" * 80)
        
        return matches == len(sample_ids)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        sqlite_session.close()
        pg_session.close()

def verify_specific_records():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å –±–æ–ª—å—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    print(f"\n{'=' * 80}")
    print("3. –ü–†–û–í–ï–†–ö–ê –ó–ê–ü–ò–°–ï–ô –° –ë–û–õ–¨–®–ò–ú–ò –ó–ù–ê–ß–ï–ù–ò–Ø–ú–ò QUANTITY")
    print("=" * 80)
    
    sqlite_engine = create_engine(SQLITE_URL)
    postgres_engine = create_engine(POSTGRES_URL)
    
    SqliteSession = sessionmaker(bind=sqlite_engine)
    PgSession = sessionmaker(bind=postgres_engine)
    
    sqlite_session = SqliteSession()
    pg_session = PgSession()
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ —Å –±–æ–ª—å—à–∏–º–∏ quantity
        large_qty_rows = sqlite_session.execute(text("""
            SELECT id, quantity FROM price_offers 
            WHERE quantity > 1000000 
            ORDER BY quantity DESC 
            LIMIT 10
        """)).fetchall()
        
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(large_qty_rows)} –∑–∞–ø–∏—Å–µ–π —Å quantity > 1,000,000")
        
        for row in large_qty_rows:
            record_id = row[0]
            sqlite_qty = row[1]
            
            pg_row = pg_session.execute(
                text("SELECT quantity FROM price_offers WHERE id = :id"),
                {'id': record_id}
            ).fetchone()
            
            if pg_row:
                pg_qty = pg_row[0]
                match = "‚úÖ" if sqlite_qty == pg_qty else "‚ùå"
                print(f"  {match} ID {record_id}: SQLite={sqlite_qty:,} | PostgreSQL={pg_qty:,}")
            else:
                print(f"  ‚ùå ID {record_id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ PostgreSQL!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        sqlite_session.close()
        pg_session.close()

def main():
    print("\n" + "=" * 80)
    print("–ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ú–ò–ì–†–ê–¶–ò–ò SQLite ‚Üí PostgreSQL")
    print("=" * 80)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    counts_match = check_counts()
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
    tables_to_check = {
        'projects': 50,
        'products': 100,
        'price_offers': 100,
        'product_images': 50
    }
    
    all_verified = True
    for table, sample_size in tables_to_check.items():
        verified = verify_random_records(table, sample_size)
        if not verified:
            all_verified = False
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å –±–æ–ª—å—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    verify_specific_records()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 80)
    
    if counts_match and all_verified:
        print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞—é—Ç")
    else:
        print("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
        if not counts_match:
            print("  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
        if not all_verified:
            print("  - –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö")
    
    print("=" * 80)

if __name__ == "__main__":
    main()
