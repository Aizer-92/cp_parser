#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–±—Ü–∞—Ö
"""

import sys
import os
import json
from pathlib import Path
from datetime import datetime
import time

sys.path.append('.')
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from database.models import Project
from src.structure_parser import CommercialProposalParser
from openpyxl import load_workbook

def create_fixed_validation_report():
    print('üîç –°–û–ó–î–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –û–¢–ß–ï–¢–ê –ü–û –í–ê–õ–ò–î–ê–¶–ò–ò –í–°–ï–• –¢–ê–ë–õ–ò–¶')
    print('=' * 70)

    db_path = Path('database/commercial_proposals.db')
    engine = create_engine(f'sqlite:///{db_path}', echo=False)
    Session = sessionmaker(bind=engine)
    session = Session()
    parser = CommercialProposalParser()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
    all_projects = session.query(Project).all()
    print(f'üìã –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(all_projects)}')

    validation_results = {
        'metadata': {
            'created_at': datetime.now().isoformat(),
            'total_projects': len(all_projects),
            'analysis_version': '2.0_fixed',
            'description': '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–æ–ª–±—Ü–∞—Ö'
        },
        'projects': [],
        'summary': {
            'excellent': [],      # 90%+
            'good': [],          # 75-89%
            'acceptable': [],    # 60-74%
            'poor': [],          # 40-59%
            'failed': []         # <40%
        }
    }

    start_time = time.time()
    processed = 0

    for project in all_projects:
        processed += 1
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Ñ–∞–π–ª–æ–≤
        if processed % 100 == 0 or processed == len(all_projects):
            elapsed = (time.time() - start_time) / 60
            remaining = ((elapsed / processed) * (len(all_projects) - processed)) if processed > 0 else 0
            print(f'\rüîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{len(all_projects)} ({processed/len(all_projects)*100:.1f}%) | ‚è±Ô∏è {elapsed:.1f}–º–∏–Ω | –û—Å—Ç–∞–ª–æ—Å—å: ~{remaining:.1f}–º–∏–Ω', end='', flush=True)
        
        file_path = Path('production_data') / project.file_name
        
        project_result = {
            'id': project.id,
            'name': project.project_name,
            'client': project.client_name,
            'region': project.region,
            'file_name': project.file_name,
            'file_exists': file_path.exists(),
            'validation': None
        }
        
        if not file_path.exists():
            project_result['validation'] = {
                'rating': 0,
                'status': 'file_not_found',
                'errors': ['–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'],
                'missing_data': ['–í–µ—Å—å —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'],
                'columns_analysis': {
                    'main_columns': {'found': [], 'missing': ['A', 'B', 'C', 'D', 'E']},
                    'price_columns': {'found': [], 'missing': ['F', 'G', 'H', 'I', 'J', 'K', 'L', 'N']},
                    'routes': {'found': [], 'missing': ['F', 'I', 'L']}
                }
            }
            validation_results['summary']['failed'].append(project.id)
        else:
            try:
                wb = load_workbook(str(file_path), data_only=True)
                sheet_name = parser.find_matching_sheet(wb)
                
                if not sheet_name:
                    project_result['validation'] = {
                        'rating': 0,
                        'status': 'no_valid_sheet',
                        'errors': ['–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–∏—Å—Ç (–ü—Ä–æ—Å—á–µ—Ç, Calculation)'],
                        'missing_data': ['–õ–∏—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ü—Ä–æ—Å—á–µ—Ç –∏–ª–∏ Calculation'],
                        'columns_analysis': {
                            'main_columns': {'found': [], 'missing': ['A', 'B', 'C', 'D', 'E']},
                            'price_columns': {'found': [], 'missing': ['F', 'G', 'H', 'I', 'J', 'K', 'L', 'N']},
                            'routes': {'found': [], 'missing': ['F', 'I', 'L']}
                        }
                    }
                    validation_results['summary']['failed'].append(project.id)
                else:
                    ws = wb[sheet_name]
                    result = parser.validate_table_structure(ws, sheet_name)
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ—Ä–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    rating = result.get('confidence_score', result.get('rating', 0))
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                    missing_data = []
                    errors = result.get('validation_errors', result.get('errors', []))
                    
                    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤
                    matched_main = result.get('matched_main_columns', {})
                    matched_price = result.get('matched_price_columns', {})
                    matched_routes = result.get('matched_routes', {})
                    complete_routes = result.get('complete_routes', [])
                    
                    # –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                    main_found = []
                    main_missing = []
                    for col, info in matched_main.items():
                        if info.get('matched', False):
                            main_found.append(f"{col}: {info.get('actual', '')}")
                        else:
                            main_missing.append(f"{col}: –æ–∂–∏–¥–∞–ª–æ—Å—å {info.get('expected', [])}")
                            missing_data.append(f'–û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–æ–ª–±–µ—Ü {col}: {info.get("expected", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}')
                    
                    # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤  
                    price_found = []
                    price_missing = []
                    for col, info in matched_price.items():
                        if info.get('matched', False):
                            price_found.append(f"{col}: {info.get('actual', '')}")
                        else:
                            price_missing.append(f"{col}: –æ–∂–∏–¥–∞–ª–æ—Å—å {info.get('expected', [])}")
                            missing_data.append(f'–¶–µ–Ω–æ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü {col}: {info.get("expected", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}')
                    
                    # –ê–Ω–∞–ª–∏–∑ –º–∞—Ä—à—Ä—É—Ç–æ–≤
                    routes_found = []
                    routes_missing = []
                    for col, info in matched_routes.items():
                        if info.get('matched', False):
                            routes_found.append(f"{col}: {info.get('actual', '')}")
                        else:
                            routes_missing.append(f"{col}: –æ–∂–∏–¥–∞–ª–æ—Å—å {info.get('expected', [])}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
                    if not complete_routes:
                        missing_data.append('–ü–æ–ª–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (—Ç–∏–ø + —Ç–∏—Ä–∞–∂ + —Ü–µ–Ω–∞ + —Å—Ä–æ–∫–∏)')
                    
                    project_result['validation'] = {
                        'rating': rating,
                        'status': 'analyzed',
                        'errors': errors,
                        'missing_data': missing_data,
                        'sheet_name': sheet_name,
                        'complete_routes': complete_routes,
                        'columns_analysis': {
                            'main_columns': {
                                'found': main_found,
                                'missing': main_missing,
                                'total_expected': len(matched_main),
                                'total_found': len(main_found)
                            },
                            'price_columns': {
                                'found': price_found,
                                'missing': price_missing,
                                'total_expected': len(matched_price),
                                'total_found': len(price_found)
                            },
                            'routes': {
                                'found': routes_found,
                                'missing': routes_missing,
                                'complete_routes': complete_routes,
                                'total_complete': len(complete_routes)
                            }
                        },
                        'raw_validation_result': result  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    }
                    
                    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
                    if rating >= 90:
                        validation_results['summary']['excellent'].append(project.id)
                    elif rating >= 75:
                        validation_results['summary']['good'].append(project.id)
                    elif rating >= 60:
                        validation_results['summary']['acceptable'].append(project.id)
                    elif rating >= 40:
                        validation_results['summary']['poor'].append(project.id)
                    else:
                        validation_results['summary']['failed'].append(project.id)
                        
            except Exception as e:
                project_result['validation'] = {
                    'rating': 0,
                    'status': 'error',
                    'errors': [f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}'],
                    'missing_data': ['–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏'],
                    'columns_analysis': {
                        'main_columns': {'found': [], 'missing': ['–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞']},
                        'price_columns': {'found': [], 'missing': ['–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞']},
                        'routes': {'found': [], 'missing': ['–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞']}
                    }
                }
                validation_results['summary']['failed'].append(project.id)
        
        validation_results['projects'].append(project_result)

    print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    end_time = time.time()
    duration = (end_time - start_time) / 60

    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    validation_results['metadata']['processing_time_minutes'] = duration
    validation_results['metadata']['summary_stats'] = {
        'excellent_90_plus': len(validation_results['summary']['excellent']),
        'good_75_89': len(validation_results['summary']['good']),
        'acceptable_60_74': len(validation_results['summary']['acceptable']),
        'poor_40_59': len(validation_results['summary']['poor']),
        'failed_under_40': len(validation_results['summary']['failed'])
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    results_file = f'fixed_validation_results_{timestamp}.json'

    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(validation_results, f, indent=2, ensure_ascii=False)

    print('üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!')
    print('=' * 50)
    print(f'‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {duration:.1f} –º–∏–Ω—É—Ç')
    print(f'üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {processed}')
    print()
    print('üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:')
    print(f'üèÜ –û—Ç–ª–∏—á–Ω—ã–µ (90%+):     {len(validation_results["summary"]["excellent"])}')
    print(f'‚úÖ –•–æ—Ä–æ—à–∏–µ (75-89%):    {len(validation_results["summary"]["good"])}')
    print(f'üìä –ü—Ä–∏–µ–º–ª–µ–º—ã–µ (60-74%): {len(validation_results["summary"]["acceptable"])}')
    print(f'‚ö†Ô∏è –°–ª–∞–±—ã–µ (40-59%):     {len(validation_results["summary"]["poor"])}')
    print(f'‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ (<40%):    {len(validation_results["summary"]["failed"])}')
    print()
    print(f'üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ—Ç–ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if validation_results['summary']['excellent']:
        print()
        print('üèÜ –ü–†–ò–ú–ï–†–´ –û–¢–õ–ò–ß–ù–´–• –§–ê–ô–õ–û–í (90%+):')
        for project_id in validation_results['summary']['excellent'][:10]:  # –ü–µ—Ä–≤—ã–µ 10
            project_data = next(p for p in validation_results['projects'] if p['id'] == project_id)
            rating = project_data['validation']['rating']
            print(f'   ID {project_id}: {rating:.1f}% - {project_data["name"][:40]}...')
    
    if validation_results['summary']['good']:
        print()
        print('‚úÖ –ü–†–ò–ú–ï–†–´ –•–û–†–û–®–ò–• –§–ê–ô–õ–û–í (75-89%):')
        for project_id in validation_results['summary']['good'][:10]:  # –ü–µ—Ä–≤—ã–µ 10
            project_data = next(p for p in validation_results['projects'] if p['id'] == project_id)
            rating = project_data['validation']['rating']
            print(f'   ID {project_id}: {rating:.1f}% - {project_data["name"][:40]}...')
    
    if validation_results['summary']['acceptable']:
        print()
        print('üìä –ü–†–ò–ú–ï–†–´ –ü–†–ò–ï–ú–õ–ï–ú–´–• –§–ê–ô–õ–û–í (60-74%):')
        for project_id in validation_results['summary']['acceptable'][:10]:  # –ü–µ—Ä–≤—ã–µ 10
            project_data = next(p for p in validation_results['projects'] if p['id'] == project_id)
            rating = project_data['validation']['rating']
            print(f'   ID {project_id}: {rating:.1f}% - {project_data["name"][:40]}...')

    session.close()
    return results_file

if __name__ == '__main__':
    create_fixed_validation_report()

