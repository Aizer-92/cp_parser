#!/usr/bin/env python3
"""
–°–∂–∞—Ç–∏–µ –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ S3 (>1MB)
–°–æ–∑–¥–∞—ë—Ç WebP –≤–µ—Ä—Å–∏–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º 1920px
"""
import sys
import os
from pathlib import Path
import requests
from io import BytesIO
from PIL import Image
import boto3
from botocore.client import Config

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text

# S3 credentials (Beget Cloud Storage)
S3_ENDPOINT = "https://s3.ru1.storage.beget.cloud"
S3_ACCESS_KEY = "LH3T0JG5BYBX8HMPNC2B"
S3_SECRET_KEY = "XTuAtdL78ZlvB4ydG1WKCzGPBRXlLvfqSEBXYj8J"
S3_BUCKET = "73d16f7545b3-promogoods"
S3_REGION = "ru-1"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∂–∞—Ç–∏—è
MAX_DIMENSION = 1920  # –º–∞–∫—Å —Ä–∞–∑–º–µ—Ä –ø–æ –±–æ–ª—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
WEBP_QUALITY = 85     # –∫–∞—á–µ—Å—Ç–≤–æ WebP (0-100)
MIN_SIZE_MB = 1.0     # —Å–∂–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã > 1 MB

def init_s3():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞"""
    return boto3.client(
        's3',
        endpoint_url=S3_ENDPOINT,
        aws_access_key_id=S3_ACCESS_KEY,
        aws_secret_access_key=S3_SECRET_KEY,
        region_name=S3_REGION,
        config=Config(signature_version='s3v4')
    )

def download_image(url):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL"""
    response = requests.get(url, timeout=30)
    response.raise_for_status()
    return Image.open(BytesIO(response.content))

def compress_image(img):
    """
    –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
    1. –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–æ MAX_DIMENSION –ø–æ –±–æ–ª—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
    2. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WebP —Å –∫–∞—á–µ—Å—Ç–≤–æ–º WEBP_QUALITY
    """
    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –±–æ–ª—å—à–µ MAX_DIMENSION
    width, height = img.size
    max_side = max(width, height)
    
    if max_side > MAX_DIMENSION:
        scale = MAX_DIMENSION / max_side
        new_width = int(width * scale)
        new_height = int(height * scale)
        img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
        print(f"      –ò–∑–º–µ–Ω—ë–Ω —Ä–∞–∑–º–µ—Ä: {width}x{height} ‚Üí {new_width}x{new_height}")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –µ—Å—Ç—å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª
    if img.mode in ('RGBA', 'LA', 'P'):
        background = Image.new('RGB', img.size, (255, 255, 255))
        if img.mode == 'P':
            img = img.convert('RGBA')
        background.paste(img, mask=img.split()[-1] if img.mode in ('RGBA', 'LA') else None)
        img = background
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ WebP
    output = BytesIO()
    img.save(output, format='WebP', quality=WEBP_QUALITY, method=6)
    output.seek(0)
    
    return output

def upload_to_s3(s3_client, file_data, s3_key):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ S3"""
    s3_client.upload_fileobj(
        file_data,
        S3_BUCKET,
        s3_key,
        ExtraArgs={'ContentType': 'image/webp'}
    )

def process_images(limit=20, test_mode=True):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    
    Args:
        limit: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        test_mode: –µ—Å–ª–∏ True, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ë–î –∏ –Ω–µ —É–¥–∞–ª—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—ã
    """
    print(f"\n{'='*80}")
    print(f"üñºÔ∏è  –°–ñ–ê–¢–ò–ï –ë–û–õ–¨–®–ò–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print(f"{'='*80}")
    print(f"–†–µ–∂–∏–º: {'–¢–ï–°–¢' if test_mode else '–ü–†–û–î–ê–ö–®–ù'}")
    print(f"–õ–∏–º–∏—Ç: {limit} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"–ú–∏–Ω. —Ä–∞–∑–º–µ—Ä: {MIN_SIZE_MB} MB")
    print(f"–ú–∞–∫—Å. —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {MAX_DIMENSION}px")
    print(f"–ö–∞—á–µ—Å—Ç–≤–æ WebP: {WEBP_QUALITY}")
    print(f"{'='*80}\n")
    
    db = PostgreSQLManager()
    s3 = init_s3()
    
    with db.get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        images = session.execute(
            text("""
                SELECT 
                    pi.id,
                    pi.image_url,
                    pi.image_filename,
                    pi.product_id
                FROM product_images pi
                WHERE pi.image_url IS NOT NULL
                ORDER BY RANDOM()
                LIMIT :limit
            """),
            {'limit': limit * 2}  # –±–µ—Ä—ë–º —Å –∑–∞–ø–∞—Å–æ–º, —Ç.–∫. –±—É–¥–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Ä–∞–∑–º–µ—Ä—É
        ).fetchall()
        
        print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(images)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n")
        
        processed = 0
        skipped = 0
        errors = 0
        total_saved_mb = 0
        
        for img_id, url, filename, product_id in images:
            if processed >= limit:
                break
                
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                head_response = requests.head(url, timeout=5)
                if head_response.status_code != 200:
                    print(f"‚ùå #{img_id}: –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    errors += 1
                    continue
                
                original_size = int(head_response.headers.get('Content-Length', 0))
                original_size_mb = original_size / 1024 / 1024
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã
                if original_size_mb < MIN_SIZE_MB:
                    skipped += 1
                    continue
                
                print(f"üîÑ [{processed + 1}/{limit}] {filename}")
                print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª: {original_size_mb:.2f} MB")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–∂–∏–º–∞–µ–º
                img = download_image(url)
                print(f"   –†–∞–∑–º–µ—Ä: {img.size[0]}x{img.size[1]}")
                
                compressed = compress_image(img)
                compressed_size = len(compressed.getvalue())
                compressed_size_mb = compressed_size / 1024 / 1024
                
                # –ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (.webp)
                new_filename = filename.rsplit('.', 1)[0] + '.webp'
                s3_key = f"images/{new_filename}"
                
                print(f"   –°–∂–∞—Ç–æ: {compressed_size_mb:.2f} MB ({compressed_size_mb / original_size_mb * 100:.1f}%)")
                print(f"   –≠–∫–æ–Ω–æ–º–∏—è: {original_size_mb - compressed_size_mb:.2f} MB")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ S3
                if not test_mode:
                    upload_to_s3(s3, compressed, s3_key)
                    new_url = f"{S3_ENDPOINT}/{S3_BUCKET}/{s3_key}"
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
                    session.execute(
                        text("""
                            UPDATE product_images
                            SET 
                                image_filename = :new_filename,
                                image_url = :new_url
                            WHERE id = :img_id
                        """),
                        {
                            'new_filename': new_filename,
                            'new_url': new_url,
                            'img_id': img_id
                        }
                    )
                    session.commit()
                    print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ S3 –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î")
                else:
                    print(f"   ‚ÑπÔ∏è  –¢–ï–°–¢: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω—ã")
                
                total_saved_mb += (original_size_mb - compressed_size_mb)
                processed += 1
                print()
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}\n")
                errors += 1
                continue
        
        print(f"\n{'='*80}")
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
        print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–º–∞–ª–µ–Ω—å–∫–∏–µ): {skipped}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {errors}")
        print(f"üíæ –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {total_saved_mb:.2f} MB")
        print(f"{'='*80}\n")

if __name__ == '__main__':
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –Ω–∞ 20 —Ñ–∞–π–ª–∞—Ö
    process_images(limit=20, test_mode=True)

