#!/usr/bin/env python3
"""
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è URLs –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –Ω–∞ Railway
"""
import sys
from pathlib import Path
from sqlalchemy import text
import psycopg2

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager

RAILWAY_URL = 'postgresql://postgres:wpqIxsBFYwmaNBFmCtBahhIMVSSskeiB@centerbeam.proxy.rlwy.net:26590/railway'

class ImageURLSyncer:
    def __init__(self):
        self.local_db = PostgreSQLManager()
        
    def sync_urls(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç URLs –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –Ω–∞ Railway"""
        print("=" * 80)
        print("üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø URLs –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ù–ê RAILWAY")
        print("=" * 80)
        
        # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –®–∞–±–ª–æ–Ω–∞ 4
        with open('template_4_perfect_ids.txt', 'r') as f:
            project_ids = [int(line.strip()) for line in f if line.strip()]
        
        print(f"\nüìã –ü—Ä–æ–µ–∫—Ç—ã –®–∞–±–ª–æ–Ω–∞ 4: {len(project_ids)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å URLs –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        with self.local_db.get_session() as session:
            images = session.execute(text("""
                SELECT 
                    pi.id,
                    pi.image_filename,
                    pi.image_url,
                    p.project_id
                FROM product_images pi
                JOIN products p ON pi.product_id = p.id
                WHERE p.project_id = ANY(:ids)
                AND pi.image_url IS NOT NULL 
                AND pi.image_url != ''
            """), {'ids': project_ids}).fetchall()
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å URL –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: {len(images):,}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Railway
        railway_conn = psycopg2.connect(RAILWAY_URL)
        railway_cursor = railway_conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Railway
        railway_cursor.execute("""
            SELECT COUNT(*)
            FROM product_images pi
            JOIN products p ON pi.product_id = p.id
            WHERE p.project_id = ANY(%s)
            AND pi.image_url IS NOT NULL 
            AND pi.image_url != ''
        """, (project_ids,))
        railway_with_urls = railway_cursor.fetchone()[0]
        
        print(f"üìä –ù–∞ Railway —Å URL: {railway_with_urls:,}")
        print(f"\nüîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        
        updated_count = 0
        not_found_count = 0
        
        for img_id, filename, url, proj_id in images:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ image_filename (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π)
                # –£–±–∏—Ä–∞–µ–º —É—Å–ª–æ–≤–∏–µ –Ω–∞ –ø—É—Å—Ç–æ–π URL - –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ!
                railway_cursor.execute("""
                    UPDATE product_images pi
                    SET image_url = %s
                    FROM products p
                    WHERE pi.product_id = p.id
                    AND pi.image_filename = %s
                    AND p.project_id = %s
                """, (url, filename, proj_id))
                
                if railway_cursor.rowcount > 0:
                    updated_count += 1
                else:
                    not_found_count += 1
                
                if updated_count % 100 == 0:
                    print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count:,}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {filename}: {e}")
        
        railway_conn.commit()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        railway_cursor.execute("""
            SELECT COUNT(*)
            FROM product_images pi
            JOIN products p ON pi.product_id = p.id
            WHERE p.project_id = ANY(%s)
            AND pi.image_url IS NOT NULL 
            AND pi.image_url != ''
        """, (project_ids,))
        final_count = railway_cursor.fetchone()[0]
        
        railway_cursor.close()
        railway_conn.close()
        
        print("")
        print("=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
        print("=" * 80)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ:       {updated_count:,}")
        print(f"‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ:     {not_found_count:,}")
        print(f"üìä –ë—ã–ª–æ –Ω–∞ Railway: {railway_with_urls:,}")
        print(f"üìä –°—Ç–∞–ª–æ:           {final_count:,}")
        print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ:       {final_count - railway_with_urls:,}")
        print("=" * 80)

if __name__ == '__main__':
    syncer = ImageURLSyncer()
    syncer.sync_urls()


–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è URLs –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –Ω–∞ Railway
"""
import sys
from pathlib import Path
from sqlalchemy import text
import psycopg2

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager

RAILWAY_URL = 'postgresql://postgres:wpqIxsBFYwmaNBFmCtBahhIMVSSskeiB@centerbeam.proxy.rlwy.net:26590/railway'

class ImageURLSyncer:
    def __init__(self):
        self.local_db = PostgreSQLManager()
        
    def sync_urls(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç URLs –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –Ω–∞ Railway"""
        print("=" * 80)
        print("üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø URLs –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ù–ê RAILWAY")
        print("=" * 80)
        
        # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –®–∞–±–ª–æ–Ω–∞ 4
        with open('template_4_perfect_ids.txt', 'r') as f:
            project_ids = [int(line.strip()) for line in f if line.strip()]
        
        print(f"\nüìã –ü—Ä–æ–µ–∫—Ç—ã –®–∞–±–ª–æ–Ω–∞ 4: {len(project_ids)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å URLs –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        with self.local_db.get_session() as session:
            images = session.execute(text("""
                SELECT 
                    pi.id,
                    pi.image_filename,
                    pi.image_url,
                    p.project_id
                FROM product_images pi
                JOIN products p ON pi.product_id = p.id
                WHERE p.project_id = ANY(:ids)
                AND pi.image_url IS NOT NULL 
                AND pi.image_url != ''
            """), {'ids': project_ids}).fetchall()
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å URL –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: {len(images):,}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Railway
        railway_conn = psycopg2.connect(RAILWAY_URL)
        railway_cursor = railway_conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Railway
        railway_cursor.execute("""
            SELECT COUNT(*)
            FROM product_images pi
            JOIN products p ON pi.product_id = p.id
            WHERE p.project_id = ANY(%s)
            AND pi.image_url IS NOT NULL 
            AND pi.image_url != ''
        """, (project_ids,))
        railway_with_urls = railway_cursor.fetchone()[0]
        
        print(f"üìä –ù–∞ Railway —Å URL: {railway_with_urls:,}")
        print(f"\nüîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        
        updated_count = 0
        not_found_count = 0
        
        for img_id, filename, url, proj_id in images:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ image_filename (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π)
                # –£–±–∏—Ä–∞–µ–º —É—Å–ª–æ–≤–∏–µ –Ω–∞ –ø—É—Å—Ç–æ–π URL - –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ!
                railway_cursor.execute("""
                    UPDATE product_images pi
                    SET image_url = %s
                    FROM products p
                    WHERE pi.product_id = p.id
                    AND pi.image_filename = %s
                    AND p.project_id = %s
                """, (url, filename, proj_id))
                
                if railway_cursor.rowcount > 0:
                    updated_count += 1
                else:
                    not_found_count += 1
                
                if updated_count % 100 == 0:
                    print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count:,}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {filename}: {e}")
        
        railway_conn.commit()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        railway_cursor.execute("""
            SELECT COUNT(*)
            FROM product_images pi
            JOIN products p ON pi.product_id = p.id
            WHERE p.project_id = ANY(%s)
            AND pi.image_url IS NOT NULL 
            AND pi.image_url != ''
        """, (project_ids,))
        final_count = railway_cursor.fetchone()[0]
        
        railway_cursor.close()
        railway_conn.close()
        
        print("")
        print("=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
        print("=" * 80)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ:       {updated_count:,}")
        print(f"‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ:     {not_found_count:,}")
        print(f"üìä –ë—ã–ª–æ –Ω–∞ Railway: {railway_with_urls:,}")
        print(f"üìä –°—Ç–∞–ª–æ:           {final_count:,}")
        print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ:       {final_count - railway_with_urls:,}")
        print("=" * 80)

if __name__ == '__main__':
    syncer = ImageURLSyncer()
    syncer.sync_urls()

