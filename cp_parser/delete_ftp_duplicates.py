#!/usr/bin/env python3
"""
–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥—É–±–ª–µ–π —Å FTP (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä)
–û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 1 —Ñ–∞–π–ª –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –¥—É–±–ª–µ–π
"""

import csv
from ftplib import FTP
import os
from dotenv import load_dotenv
from collections import defaultdict

load_dotenv()


def load_duplicates_summary(csv_file):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–¥–∫—É –¥—É–±–ª–µ–π"""
    print(f"üìÑ –ß–∏—Ç–∞—é —Ñ–∞–π–ª: {csv_file}")
    
    groups = []
    with open(csv_file, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ä–∞–∑–º–µ—Ä–æ–º (—Ç–æ—á–Ω—ã–µ –¥—É–±–ª–∏)
            if row['same_size'] == '–î–ê':
                groups.append({
                    'sheet_id': row['sheet_id'],
                    'position': row['position'],
                    'suffix': row['suffix'],
                    'duplicate_count': int(row['duplicate_count']),
                    'total_size_mb': float(row['total_size_mb']),
                    'key': f"{row['sheet_id']}|{row['position']}|{row['suffix']}"
                })
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(groups):,} –≥—Ä—É–ø–ø —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ä–∞–∑–º–µ—Ä–æ–º (—Ç–æ—á–Ω—ã–µ –¥—É–±–ª–∏)")
    return groups


def load_duplicates_detail(csv_file):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥—É–±–ª–µ–π"""
    print(f"üìÑ –ß–∏—Ç–∞—é —Ñ–∞–π–ª: {csv_file}")
    
    files_by_group = defaultdict(list)
    
    with open(csv_file, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            key = f"{row['sheet_id']}|{row['position']}|{row['suffix']}"
            files_by_group[key].append({
                'filename': row['filename'],
                'size_mb': float(row['size_mb']),
                'url': row['image_url']
            })
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {sum(len(files) for files in files_by_group.values()):,}")
    return files_by_group


def prepare_deletion_list(groups, files_by_group):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    print("\nüîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...")
    
    to_keep = []
    to_delete = []
    
    for group in groups:
        key = group['key']
        files = files_by_group.get(key, [])
        
        if len(files) > 1:
            # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–¥–∞–ª—è–µ–º
            to_keep.append(files[0])
            to_delete.extend(files[1:])
    
    print(f"‚úÖ –ë—É–¥–µ—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {len(to_keep):,} —Ñ–∞–π–ª–æ–≤")
    print(f"üóëÔ∏è  –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ: {len(to_delete):,} —Ñ–∞–π–ª–æ–≤")
    
    # –ü–æ–¥—Å—á–µ—Ç –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º–æ–≥–æ –º–µ—Å—Ç–∞
    space_freed = sum(f['size_mb'] for f in to_delete)
    print(f"üíæ –û—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–∞: {space_freed:.2f} MB ({space_freed/1024:.2f} GB)")
    
    return to_keep, to_delete


def delete_files_from_ftp(files_to_delete, dry_run=True):
    """–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã —Å FTP"""
    if dry_run:
        print("\n‚ö†Ô∏è  DRY RUN MODE - —Ñ–∞–π–ª—ã –ù–ï –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!")
        print("   –¢–æ–ª—å–∫–æ —Å–∏–º—É–ª—è—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return 0, 0
    
    print("\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP...")
    
    try:
        ftp = FTP()
        ftp.connect(os.getenv('FTP_HOST'), int(os.getenv('FTP_PORT', 21)))
        ftp.login(os.getenv('FTP_USER'), os.getenv('FTP_PASSWORD'))
        ftp.cwd('/73d16f7545b3-promogoods/images')
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ FTP")
        print(f"\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ {len(files_to_delete):,} —Ñ–∞–π–ª–æ–≤...")
        
        deleted = 0
        failed = 0
        
        for i, file_info in enumerate(files_to_delete, 1):
            filename = file_info['filename']
            
            try:
                ftp.delete(filename)
                deleted += 1
                
                if i % 100 == 0:
                    progress = i / len(files_to_delete) * 100
                    print(f"   –£–¥–∞–ª–µ–Ω–æ: {deleted:,} / {len(files_to_delete):,} ({progress:.1f}%)")
                    
            except Exception as e:
                failed += 1
                if failed <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {filename}: {e}")
        
        ftp.quit()
        
        print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ: {deleted:,}")
        if failed > 0:
            print(f"‚ùå –û—à–∏–±–æ–∫: {failed:,}")
        
        return deleted, failed
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FTP: {e}")
        return 0, len(files_to_delete)


def save_deletion_list(files_to_delete, output_file):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {output_file}")
    
    with open(output_file, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['filename', 'size_mb', 'url'])
        
        for file_info in files_to_delete:
            writer.writerow([
                file_info['filename'],
                file_info['size_mb'],
                file_info['url']
            ])
    
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(files_to_delete):,} –∑–∞–ø–∏—Å–µ–π")


def main():
    print("=" * 80)
    print("üóëÔ∏è  –£–î–ê–õ–ï–ù–ò–ï –î–£–ë–õ–ï–ô –° FTP")
    print("=" * 80)
    print()
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–æ–¥–∫—É –∏ –¥–µ—Ç–∞–ª–∏ –¥—É–±–ª–µ–π
    groups = load_duplicates_summary('REAL_DUPLICATES_SUMMARY.csv')
    files_by_group = load_duplicates_detail('REAL_DUPLICATES_DETAIL.csv')
    
    # 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    to_keep, to_delete = prepare_deletion_list(groups, files_by_group)
    
    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫
    save_deletion_list(to_delete, 'FTP_FILES_TO_DELETE.csv')
    
    # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 80)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 80)
    
    print(f"\nüìÅ –ì—Ä—É–ø–ø –¥—É–±–ª–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ä–∞–∑–º–µ—Ä–æ–º: {len(groups):,}")
    print(f"‚úÖ –§–∞–π–ª–æ–≤ –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {len(to_keep):,}")
    print(f"üóëÔ∏è  –§–∞–π–ª–æ–≤ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ: {len(to_delete):,}")
    
    space_freed = sum(f['size_mb'] for f in to_delete)
    print(f"\nüíæ –û–°–í–û–ë–û–ñ–î–ï–ù–ò–ï –ú–ï–°–¢–ê:")
    print(f"   {space_freed:.2f} MB ({space_freed/1024:.2f} GB)")
    
    # 5. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    print("\n" + "=" * 80)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï!")
    print("=" * 80)
    print(f"\nüóëÔ∏è  –ë—É–¥–µ—Ç –ë–ï–ó–í–û–ó–í–†–ê–¢–ù–û —É–¥–∞–ª–µ–Ω–æ {len(to_delete):,} —Ñ–∞–π–ª–æ–≤ —Å FTP")
    print(f"üíæ –û—Å–≤–æ–±–æ–¥–∏—Ç—Å—è {space_freed/1024:.2f} GB")
    print(f"\nüìÑ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: FTP_FILES_TO_DELETE.csv")
    
    print("\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("   1 - Dry run (—Å–∏–º—É–ª—è—Ü–∏—è –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)")
    print("   2 - –£–î–ê–õ–ò–¢–¨ —Ñ–∞–π–ª—ã")
    print("   3 - –û—Ç–º–µ–Ω–∞")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1/2/3): ").strip()
    
    if choice == '1':
        print("\nüîç DRY RUN MODE...")
        delete_files_from_ftp(to_delete, dry_run=True)
        print("\n‚úÖ Dry run –∑–∞–≤–µ—Ä—à–µ–Ω. –§–∞–π–ª—ã –ù–ï –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
        
    elif choice == '2':
        print("\n‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è  –ü–û–°–õ–ï–î–ù–ï–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï! ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è")
        print(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ë–ï–ó–í–û–ó–í–†–ê–¢–ù–û —É–¥–∞–ª–∏—Ç—å {len(to_delete):,} —Ñ–∞–π–ª–æ–≤!")
        confirm = input("\n–í–≤–µ–¥–∏—Ç–µ 'DELETE' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").strip()
        
        if confirm == 'DELETE':
            deleted, failed = delete_files_from_ftp(to_delete, dry_run=False)
            
            print("\n" + "=" * 80)
            print("üìä –ò–¢–û–ì–ò –£–î–ê–õ–ï–ù–ò–Ø")
            print("=" * 80)
            print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted:,}")
            if failed > 0:
                print(f"‚ùå –û—à–∏–±–æ–∫: {failed:,}")
            
            actual_freed = sum(f['size_mb'] for f in to_delete[:deleted])
            print(f"\nüíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {actual_freed:.2f} MB ({actual_freed/1024:.2f} GB)")
        else:
            print("\n‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –û—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    print("\n‚úÖ –ó–ê–í–ï–†–®–ï–ù–û")


if __name__ == '__main__':
    main()

