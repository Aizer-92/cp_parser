#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ pending –ø—Ä–æ–µ–∫—Ç–æ–≤
"""
import sys
from pathlib import Path
from collections import defaultdict
import json
from openpyxl import load_workbook

sys.path.insert(0, str(Path.cwd()))
from src.structure_parser import CommercialProposalParser
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text

class PendingProjectsAnalyzer:
    def __init__(self):
        self.parser = CommercialProposalParser()
        self.db = PostgreSQLManager()
        self.results = []
        
    def get_pending_projects(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ pending –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –ë–î"""
        with self.db.get_session() as session:
            projects = session.execute(text("""
                SELECT id, file_name, file_path 
                FROM projects 
                WHERE parsing_status = 'pending'
                ORDER BY id
            """)).fetchall()
        
        return projects
    
    def analyze_file_structure(self, file_path):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞"""
        try:
            wb = load_workbook(file_path, data_only=True, read_only=True)
            ws = wb.active
            
            # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
            headers = {}
            for row in range(1, 11):
                row_data = {}
                for col in range(1, 30):  # –ü–µ—Ä–≤—ã–µ 30 –∫–æ–ª–æ–Ω–æ–∫
                    cell_value = ws.cell(row, col).value
                    if cell_value:
                        col_letter = chr(64 + col)  # A, B, C...
                        row_data[col_letter] = str(cell_value).strip()
                
                if row_data:
                    headers[f"row_{row}"] = row_data
            
            wb.close()
            return headers
            
        except Exception as e:
            return {"error": str(e)}
    
    def detect_missing_columns(self, headers):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"""
        missing = []
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É "–§–æ—Ç–æ" –∏–ª–∏ "Photo"
        has_photo = False
        for row_key, row_data in headers.items():
            for col, value in row_data.items():
                if any(word in value.lower() for word in ['—Ñ–æ—Ç–æ', 'photo', '–∏–∑–æ–±—Ä–∞–∂']):
                    has_photo = True
                    break
        
        if not has_photo:
            missing.append("Photo column (A)")
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"
        has_name = False
        for row_key, row_data in headers.items():
            for col, value in row_data.items():
                if any(word in value.lower() for word in ['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '—Ç–æ–≤–∞—Ä', 'name', 'product']):
                    has_name = True
                    break
        
        if not has_name:
            missing.append("Name column (B)")
        
        # –ò—â–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        has_route = False
        for row_key, row_data in headers.items():
            for col, value in row_data.items():
                if any(word in value.lower() for word in ['–∂–¥', '–∞–≤–∏–∞', '–º–∞—Ä—à—Ä—É—Ç', '–¥–æ—Å—Ç–∞–≤–∫–∞']):
                    has_route = True
                    break
        
        if not has_route:
            missing.append("Route columns")
        
        # –ò—â–µ–º —Ç–∏—Ä–∞–∂
        has_quantity = False
        for row_key, row_data in headers.items():
            for col, value in row_data.items():
                if any(word in value.lower() for word in ['—Ç–∏—Ä–∞–∂', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–∫–æ–ª-–≤–æ', 'qty']):
                    has_quantity = True
                    break
        
        if not has_quantity:
            missing.append("Quantity column")
        
        # –ò—â–µ–º —Ü–µ–Ω—ã
        has_price = False
        for row_key, row_data in headers.items():
            for col, value in row_data.items():
                if any(word in value.lower() for word in ['—Ü–µ–Ω–∞', 'price', 'usd', '—Ä—É–±', 'rub', '—Å—Ç–æ–∏–º–æ—Å—Ç—å']):
                    has_price = True
                    break
        
        if not has_price:
            missing.append("Price columns")
        
        return missing
    
    def categorize_failure(self, headers, missing_columns):
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω—É –Ω–µ–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è 1: –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        total_cells = sum(len(row_data) for row_data in headers.values())
        if total_cells < 5:
            return "empty_or_minimal", "–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª –∏–ª–∏ –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö"
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è 2: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ç–æ –∫–æ–ª–æ–Ω–∫–∞
        if "Photo column (A)" in missing_columns:
            return "no_photo_column", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ '–§–æ—Ç–æ'"
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è 3: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ
        if "Name column (B)" in missing_columns:
            return "no_name_column", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'"
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è 4: –ù–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
        if "Route columns" in missing_columns:
            return "no_routes", "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–∞—Ä—à—Ä—É—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏"
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è 5: –ù–µ—Ç —Ç–∏—Ä–∞–∂–µ–π
        if "Quantity column" in missing_columns:
            return "no_quantity", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ '–¢–∏—Ä–∞–∂'"
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è 6: –ù–µ—Ç —Ü–µ–Ω
        if "Price columns" in missing_columns:
            return "no_prices", "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ü–µ–Ω—ã"
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è 7: –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        return "non_standard", "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å—Ç—å, –Ω–æ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é)"
    
    def analyze_all_pending(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ pending –ø—Ä–æ–µ–∫—Ç—ã"""
        projects = self.get_pending_projects()
        
        print(f"üîç –ê–Ω–∞–ª–∏–∑ {len(projects)} pending –ø—Ä–æ–µ–∫—Ç–æ–≤...")
        print("")
        
        categories = defaultdict(list)
        
        for i, (project_id, file_name, file_path) in enumerate(projects):
            if i % 50 == 0:
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i}/{len(projects)}...")
            
            # –ò—â–µ–º —Ñ–∞–π–ª –ø–æ project_id (—Ñ–æ—Ä–º–∞—Ç: project_{id}_*.xlsx)
            excel_dir = Path('storage/excel_files')
            matching_files = list(excel_dir.glob(f'project_{project_id}_*.xlsx'))
            
            if not matching_files:
                categories['file_not_found'].append({
                    'project_id': project_id,
                    'file_name': file_name,
                    'reason': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ'
                })
                continue
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            excel_path = matching_files[0]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            headers = self.analyze_file_structure(str(excel_path))
            
            if 'error' in headers:
                categories['parse_error'].append({
                    'project_id': project_id,
                    'file_name': file_name,
                    'reason': f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {headers['error']}"
                })
                continue
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            missing = self.detect_missing_columns(headers)
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º
            category, reason = self.categorize_failure(headers, missing)
            
            categories[category].append({
                'project_id': project_id,
                'file_name': file_name,
                'reason': reason,
                'missing_columns': missing,
                'sample_headers': {
                    k: v for k, v in list(headers.items())[:3]  # –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
                }
            })
        
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(projects)}/{len(projects)} ‚úÖ")
        print("")
        
        return categories
    
    def generate_report(self, categories):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        
        # Markdown –æ—Ç—á–µ—Ç
        report_md = []
        report_md.append("# üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ pending –ø—Ä–æ–µ–∫—Ç–æ–≤")
        report_md.append("")
        report_md.append(f"**–î–∞—Ç–∞**: {Path.cwd().name}")
        report_md.append(f"**–í—Å–µ–≥–æ pending –ø—Ä–æ–µ–∫—Ç–æ–≤**: {sum(len(items) for items in categories.values())}")
        report_md.append("")
        report_md.append("---")
        report_md.append("")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–µ–∫—Ç–æ–≤
        sorted_categories = sorted(
            categories.items(),
            key=lambda x: len(x[1]),
            reverse=True
        )
        
        # –û–≥–ª–∞–≤–ª–µ–Ω–∏–µ
        report_md.append("## üìä –°–≤–æ–¥–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        report_md.append("")
        report_md.append("| –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | % |")
        report_md.append("|-----------|------------|---|")
        
        total = sum(len(items) for items in categories.values())
        for category, items in sorted_categories:
            percentage = len(items) / total * 100 if total > 0 else 0
            category_name = self._get_category_name(category)
            report_md.append(f"| {category_name} | {len(items)} | {percentage:.1f}% |")
        
        report_md.append("")
        report_md.append("---")
        report_md.append("")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category, items in sorted_categories:
            category_name = self._get_category_name(category)
            report_md.append(f"## {category_name} ({len(items)} –ø—Ä–æ–µ–∫—Ç–æ–≤)")
            report_md.append("")
            
            # –ü–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–º–µ—Ä–æ–≤
            for i, item in enumerate(items[:10]):
                report_md.append(f"### –ü—Ä–∏–º–µ—Ä {i+1}: Project {item['project_id']}")
                report_md.append("")
                report_md.append(f"**–§–∞–π–ª**: `{item['file_name']}`")
                report_md.append(f"**–ü—Ä–∏—á–∏–Ω–∞**: {item['reason']}")
                
                if item.get('missing_columns'):
                    report_md.append(f"**–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç**: {', '.join(item['missing_columns'])}")
                
                if item.get('sample_headers'):
                    report_md.append("")
                    report_md.append("**–ó–∞–≥–æ–ª–æ–≤–∫–∏ (–ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏)**:")
                    report_md.append("```")
                    for row_key, row_data in item['sample_headers'].items():
                        report_md.append(f"{row_key}:")
                        for col, val in row_data.items():
                            report_md.append(f"  {col}: {val[:50]}...")
                    report_md.append("```")
                
                report_md.append("")
            
            if len(items) > 10:
                report_md.append(f"**...–∏ –µ—â–µ {len(items) - 10} –ø—Ä–æ–µ–∫—Ç–æ–≤**")
                report_md.append("")
                report_md.append("**–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ ID**:")
                ids = [str(item['project_id']) for item in items]
                report_md.append(f"```{', '.join(ids)}```")
                report_md.append("")
            
            report_md.append("---")
            report_md.append("")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_path = Path('PENDING_ANALYSIS_REPORT.md')
        report_path.write_text('\n'.join(report_md), encoding='utf-8')
        
        # JSON –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        json_data = {
            category: [
                {
                    'project_id': item['project_id'],
                    'file_name': item['file_name'],
                    'reason': item['reason'],
                    'missing_columns': item.get('missing_columns', [])
                }
                for item in items
            ]
            for category, items in categories.items()
        }
        
        json_path = Path('pending_analysis.json')
        json_path.write_text(json.dumps(json_data, indent=2, ensure_ascii=False), encoding='utf-8')
        
        print("=" * 80)
        print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        print("=" * 80)
        print("")
        print(f"üìÑ Markdown –æ—Ç—á–µ—Ç: {report_path}")
        print(f"üìä JSON –¥–∞–Ω–Ω—ã–µ: {json_path}")
        print("")
        print("üìä –°–í–û–î–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        print("")
        
        for category, items in sorted_categories:
            category_name = self._get_category_name(category)
            percentage = len(items) / total * 100 if total > 0 else 0
            print(f"   {category_name:50s}: {len(items):4d} ({percentage:5.1f}%)")
        
        print("")
        print("=" * 80)
    
    def _get_category_name(self, category):
        """–ü–æ–ª—É—á–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        names = {
            'empty_or_minimal': 'üóëÔ∏è –ü—É—Å—Ç—ã–µ –∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
            'no_photo_column': 'üì∑ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ "–§–æ—Ç–æ"',
            'no_name_column': 'üìù –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"',
            'no_routes': 'üöö –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–∞—Ä—à—Ä—É—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏',
            'no_quantity': 'üì¶ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ "–¢–∏—Ä–∞–∂"',
            'no_prices': 'üí∞ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ü–µ–Ω—ã',
            'non_standard': 'üîß –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞',
            'file_not_found': '‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω',
            'parse_error': '‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'
        }
        return names.get(category, category)

if __name__ == '__main__':
    analyzer = PendingProjectsAnalyzer()
    
    print("=" * 80)
    print("üîç –ê–ù–ê–õ–ò–ó PENDING –ü–†–û–ï–ö–¢–û–í")
    print("=" * 80)
    print("")
    
    categories = analyzer.analyze_all_pending()
    analyzer.generate_report(categories)

