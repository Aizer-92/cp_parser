#!/usr/bin/env python3
"""
–û—Ç—á–µ—Ç —Å 100 —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
"""

import sys
from pathlib import Path
from sqlalchemy import text
import json

sys.path.insert(0, str(Path(__file__).parent))
from database.postgresql_manager import db_manager

def main():
    db = db_manager
    
    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 97 pending –ø—Ä–æ–µ–∫—Ç–æ–≤
    import re
    valid_list = Path('valid_pending_files.txt')
    if not valid_list.exists():
        print("‚ùå –§–∞–π–ª valid_pending_files.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º valid_files_list.txt –∫–∞–∫ fallback...")
        valid_list = Path('valid_files_list.txt')
        if not valid_list.exists():
            print("‚ùå –§–∞–π–ª valid_files_list.txt —Ç–æ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
    
    with open(valid_list, 'r') as f:
        files = [line.strip() for line in f if line.strip()]
    
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª: {valid_list.name}")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
    
    project_ids = []
    for filename in files:
        match = re.search(r'project_(\d+)_', filename)
        if match:
            project_ids.append(int(match.group(1)))
    
    with db.get_session() as session:
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        placeholders = ','.join([f':{i}' for i in range(len(project_ids))])
        params = {str(i): pid for i, pid in enumerate(project_ids)}
        
        # –ü–æ–ª—É—á–∞–µ–º 100 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        result = session.execute(text(f"""
            SELECT 
                p.id,
                p.project_id,
                p.name,
                p.description,
                p.custom_field,
                (
                    SELECT json_agg(
                        json_build_object(
                            'quantity', po.quantity,
                            'price_usd', po.price_usd,
                            'price_rub', po.price_rub,
                            'route', po.route,
                            'delivery_time_days', po.delivery_time_days
                        )
                    )
                    FROM price_offers po
                    WHERE po.product_id = p.id
                ) as offers,
                (
                    SELECT COUNT(*)
                    FROM product_images pi
                    WHERE pi.product_id = p.id
                ) as images_count
            FROM products p
            WHERE p.project_id IN ({placeholders})
            ORDER BY RANDOM()
            LIMIT 100
        """), params).fetchall()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        products = []
        for row in result:
            product = {
                'id': row[0],
                'project_id': row[1],
                'name': row[2],
                'description': row[3],
                'custom_field': row[4],
                'offers': row[5] if row[5] else [],
                'images_count': row[6]
            }
            products.append(product)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
        output_file = Path('random_100_products.json')
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(products, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file.name}")
        
        # –°–æ–∑–¥–∞–µ–º —á–∏—Ç–∞–µ–º—ã–π –æ—Ç—á–µ—Ç
        report_lines = []
        report_lines.append("=" * 100)
        report_lines.append(f"üìä –°–õ–£–ß–ê–ô–ù–ê–Ø –í–´–ë–û–†–ö–ê: 100 –¢–û–í–ê–†–û–í –ò–ó {len(project_ids)} –ü–û–°–õ–ï–î–ù–ò–• –ü–†–û–ï–ö–¢–û–í")
        report_lines.append("=" * 100)
        report_lines.append("")
        
        for i, product in enumerate(products, 1):
            report_lines.append(f"{'‚îÄ' * 100}")
            report_lines.append(f"#{i}. –¢–û–í–ê–† ID: {product['id']} | PROJECT: {product['project_id']}")
            report_lines.append(f"{'‚îÄ' * 100}")
            report_lines.append("")
            
            report_lines.append(f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}")
            if product['description']:
                report_lines.append(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}")
            if product['custom_field']:
                report_lines.append(f"üè∑Ô∏è  –î–æ–ø. –ø–æ–ª–µ: {product['custom_field']}")
            
            report_lines.append(f"üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {product['images_count']}")
            report_lines.append("")
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            offers = product['offers']
            if offers:
                report_lines.append(f"üí∞ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ({len(offers)}):")
                report_lines.append("")
                
                for j, offer in enumerate(offers, 1):
                    qty = offer.get('quantity', 'N/A')
                    price_usd = offer.get('price_usd')
                    price_rub = offer.get('price_rub')
                    route = offer.get('route', 'N/A')
                    delivery = offer.get('delivery_time_days', 'N/A')
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    try:
                        price_usd_str = f"${float(price_usd):.2f}" if price_usd else "N/A"
                    except:
                        price_usd_str = "N/A"
                    
                    try:
                        price_rub_str = f"{float(price_rub):,.0f}‚ÇΩ" if price_rub else "N/A"
                    except:
                        price_rub_str = "N/A"
                    
                    report_lines.append(f"   {j}. –¢–∏—Ä–∞–∂: {qty:>6} | USD: {price_usd_str:>10} | RUB: {price_rub_str:>12} | "
                                      f"–ú–∞—Ä—à—Ä—É—Ç: {route:<5} | –î–æ—Å—Ç–∞–≤–∫–∞: {delivery:>3} –¥–Ω")
            else:
                report_lines.append("‚ö†Ô∏è  –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: –ù–ï–¢")
            
            report_lines.append("")
        
        report_lines.append("=" * 100)
        report_lines.append("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        report_lines.append("=" * 100)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_offers = sum(len(p['offers']) for p in products)
        with_images = sum(1 for p in products if p['images_count'] > 0)
        avg_offers = total_offers / len(products) if products else 0
        avg_images = sum(p['images_count'] for p in products) / len(products) if products else 0
        
        report_lines.append("")
        report_lines.append(f"–¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
        report_lines.append(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {total_offers} (–≤ —Å—Ä–µ–¥–Ω–µ–º {avg_offers:.2f} –Ω–∞ —Ç–æ–≤–∞—Ä)")
        report_lines.append(f"–° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {with_images} ({with_images/len(products)*100:.1f}%)")
        report_lines.append(f"–°—Ä–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Ç–æ–≤–∞—Ä: {avg_images:.2f}")
        report_lines.append("")
        report_lines.append("=" * 100)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = Path('RANDOM_100_PRODUCTS_REPORT.md')
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(report_lines))
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file.name}")
        print()
        print("üìä –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
        print(f"  ‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {total_offers} (—Å—Ä–µ–¥–Ω–µ–µ: {avg_offers:.2f})")
        print(f"  ‚Ä¢ –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {with_images} ({with_images/len(products)*100:.1f}%)")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {avg_images:.2f}")

if __name__ == '__main__':
    main()


–û—Ç—á–µ—Ç —Å 100 —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
"""

import sys
from pathlib import Path
from sqlalchemy import text
import json

sys.path.insert(0, str(Path(__file__).parent))
from database.postgresql_manager import db_manager

def main():
    db = db_manager
    
    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 97 pending –ø—Ä–æ–µ–∫—Ç–æ–≤
    import re
    valid_list = Path('valid_pending_files.txt')
    if not valid_list.exists():
        print("‚ùå –§–∞–π–ª valid_pending_files.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º valid_files_list.txt –∫–∞–∫ fallback...")
        valid_list = Path('valid_files_list.txt')
        if not valid_list.exists():
            print("‚ùå –§–∞–π–ª valid_files_list.txt —Ç–æ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
    
    with open(valid_list, 'r') as f:
        files = [line.strip() for line in f if line.strip()]
    
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª: {valid_list.name}")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
    
    project_ids = []
    for filename in files:
        match = re.search(r'project_(\d+)_', filename)
        if match:
            project_ids.append(int(match.group(1)))
    
    with db.get_session() as session:
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        placeholders = ','.join([f':{i}' for i in range(len(project_ids))])
        params = {str(i): pid for i, pid in enumerate(project_ids)}
        
        # –ü–æ–ª—É—á–∞–µ–º 100 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        result = session.execute(text(f"""
            SELECT 
                p.id,
                p.project_id,
                p.name,
                p.description,
                p.custom_field,
                (
                    SELECT json_agg(
                        json_build_object(
                            'quantity', po.quantity,
                            'price_usd', po.price_usd,
                            'price_rub', po.price_rub,
                            'route', po.route,
                            'delivery_time_days', po.delivery_time_days
                        )
                    )
                    FROM price_offers po
                    WHERE po.product_id = p.id
                ) as offers,
                (
                    SELECT COUNT(*)
                    FROM product_images pi
                    WHERE pi.product_id = p.id
                ) as images_count
            FROM products p
            WHERE p.project_id IN ({placeholders})
            ORDER BY RANDOM()
            LIMIT 100
        """), params).fetchall()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        products = []
        for row in result:
            product = {
                'id': row[0],
                'project_id': row[1],
                'name': row[2],
                'description': row[3],
                'custom_field': row[4],
                'offers': row[5] if row[5] else [],
                'images_count': row[6]
            }
            products.append(product)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
        output_file = Path('random_100_products.json')
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(products, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file.name}")
        
        # –°–æ–∑–¥–∞–µ–º —á–∏—Ç–∞–µ–º—ã–π –æ—Ç—á–µ—Ç
        report_lines = []
        report_lines.append("=" * 100)
        report_lines.append(f"üìä –°–õ–£–ß–ê–ô–ù–ê–Ø –í–´–ë–û–†–ö–ê: 100 –¢–û–í–ê–†–û–í –ò–ó {len(project_ids)} –ü–û–°–õ–ï–î–ù–ò–• –ü–†–û–ï–ö–¢–û–í")
        report_lines.append("=" * 100)
        report_lines.append("")
        
        for i, product in enumerate(products, 1):
            report_lines.append(f"{'‚îÄ' * 100}")
            report_lines.append(f"#{i}. –¢–û–í–ê–† ID: {product['id']} | PROJECT: {product['project_id']}")
            report_lines.append(f"{'‚îÄ' * 100}")
            report_lines.append("")
            
            report_lines.append(f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}")
            if product['description']:
                report_lines.append(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}")
            if product['custom_field']:
                report_lines.append(f"üè∑Ô∏è  –î–æ–ø. –ø–æ–ª–µ: {product['custom_field']}")
            
            report_lines.append(f"üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {product['images_count']}")
            report_lines.append("")
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            offers = product['offers']
            if offers:
                report_lines.append(f"üí∞ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ({len(offers)}):")
                report_lines.append("")
                
                for j, offer in enumerate(offers, 1):
                    qty = offer.get('quantity', 'N/A')
                    price_usd = offer.get('price_usd')
                    price_rub = offer.get('price_rub')
                    route = offer.get('route', 'N/A')
                    delivery = offer.get('delivery_time_days', 'N/A')
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    try:
                        price_usd_str = f"${float(price_usd):.2f}" if price_usd else "N/A"
                    except:
                        price_usd_str = "N/A"
                    
                    try:
                        price_rub_str = f"{float(price_rub):,.0f}‚ÇΩ" if price_rub else "N/A"
                    except:
                        price_rub_str = "N/A"
                    
                    report_lines.append(f"   {j}. –¢–∏—Ä–∞–∂: {qty:>6} | USD: {price_usd_str:>10} | RUB: {price_rub_str:>12} | "
                                      f"–ú–∞—Ä—à—Ä—É—Ç: {route:<5} | –î–æ—Å—Ç–∞–≤–∫–∞: {delivery:>3} –¥–Ω")
            else:
                report_lines.append("‚ö†Ô∏è  –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: –ù–ï–¢")
            
            report_lines.append("")
        
        report_lines.append("=" * 100)
        report_lines.append("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        report_lines.append("=" * 100)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_offers = sum(len(p['offers']) for p in products)
        with_images = sum(1 for p in products if p['images_count'] > 0)
        avg_offers = total_offers / len(products) if products else 0
        avg_images = sum(p['images_count'] for p in products) / len(products) if products else 0
        
        report_lines.append("")
        report_lines.append(f"–¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
        report_lines.append(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {total_offers} (–≤ —Å—Ä–µ–¥–Ω–µ–º {avg_offers:.2f} –Ω–∞ —Ç–æ–≤–∞—Ä)")
        report_lines.append(f"–° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {with_images} ({with_images/len(products)*100:.1f}%)")
        report_lines.append(f"–°—Ä–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Ç–æ–≤–∞—Ä: {avg_images:.2f}")
        report_lines.append("")
        report_lines.append("=" * 100)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = Path('RANDOM_100_PRODUCTS_REPORT.md')
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(report_lines))
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file.name}")
        print()
        print("üìä –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
        print(f"  ‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {total_offers} (—Å—Ä–µ–¥–Ω–µ–µ: {avg_offers:.2f})")
        print(f"  ‚Ä¢ –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {with_images} ({with_images/len(products)*100:.1f}%)")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {avg_images:.2f}")

if __name__ == '__main__':
    main()

