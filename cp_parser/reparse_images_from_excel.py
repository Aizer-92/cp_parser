#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö Excel —Ñ–∞–π–ª–æ–≤
"""

import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))
from parse_template_6 import Template6Parser
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text

def reparse_images():
    """–ü–∞—Ä—Å–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö Excel —Ñ–∞–π–ª–æ–≤"""
    
    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    with open('projects_need_images.txt', 'r') as f:
        project_ids = [int(line.strip()) for line in f if line.strip().isdigit()]
    
    print("=" * 80)
    print("üñºÔ∏è  –ü–ê–†–°–ò–ù–ì –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 80)
    print(f"\nüìä –ü—Ä–æ–µ–∫—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(project_ids)}")
    
    parser = Template6Parser()
    db = PostgreSQLManager()
    
    excel_dir = Path('excel_files')
    
    # –ù–∞–π–¥–µ–º –≤—Å–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    excel_files = {}
    for excel_path in excel_dir.glob('project_*.xlsx'):
        try:
            parts = excel_path.stem.split('_')
            if len(parts) >= 2:
                proj_id = int(parts[1])
                excel_files[proj_id] = excel_path
        except:
            continue
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤: {len(excel_files)}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–æ–µ–∫—Ç—ã —á—Ç–æ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
    to_process = [pid for pid in project_ids if pid in excel_files]
    not_found = [pid for pid in project_ids if pid not in excel_files]
    
    if not_found:
        print(f"\n‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è {len(not_found)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    print(f"\n‚úì –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(to_process)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    success = 0
    errors = 0
    no_images = 0
    
    for i, proj_id in enumerate(to_process, 1):
        excel_path = excel_files[proj_id]
        print(f"\n[{i}/{len(to_process)}] –ü—Ä–æ–µ–∫—Ç {proj_id} ({excel_path.name})...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º table_id
            with db.get_session() as session:
                table_id = session.execute(text("""
                    SELECT table_id FROM projects WHERE id = :id
                """), {'id': proj_id}).scalar()
                
                if not table_id:
                    print(f"  ‚ùå –ù–µ—Ç table_id –≤ –ë–î")
                    errors += 1
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–∂–µ –µ—Å—Ç—å
            with db.get_session() as session:
                before_count = session.execute(text("""
                    SELECT COUNT(*) 
                    FROM product_images pi
                    JOIN products p ON p.id = pi.product_id
                    WHERE p.table_id = :table_id
                """), {'table_id': table_id}).scalar()
            
            # –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
            print(f"  üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π... (—É–∂–µ –±—ã–ª–æ: {before_count})")
            try:
                parser.reparse_images_only(proj_id, str(excel_path))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏–ª–æ—Å—å
                with db.get_session() as session:
                    after_count = session.execute(text("""
                        SELECT COUNT(*) 
                        FROM product_images pi
                        JOIN products p ON p.id = pi.product_id
                        WHERE p.table_id = :table_id
                    """), {'table_id': table_id}).scalar()
                
                new_images = after_count - before_count
                
                if new_images == 0:
                    print(f"  ‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
                    no_images += 1
                else:
                    print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {new_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–≤—Å–µ–≥–æ: {after_count})")
                    success += 1
                    
            except Exception as parse_err:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(parse_err)}")
                errors += 1
                continue
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            errors += 1
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–ò –ü–ê–†–°–ò–ù–ì–ê:")
    print("=" * 80)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ:        {success} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"‚ö†Ô∏è  –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {no_images} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"‚ùå –û—à–∏–±–æ–∫:         {errors} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print("=" * 80)
    
    if success > 0:
        # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with db.get_session() as session:
            new_images = session.execute(text("""
                SELECT COUNT(*) 
                FROM product_images 
                WHERE image_url LIKE 'storage/images/%'
            """)).scalar()
            
            print(f"\nüñºÔ∏è  –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏: {new_images}")
            print("\n‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ FTP!")
            print("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ–±–ª–∞–∫–æ")

if __name__ == '__main__':
    reparse_images()


–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö Excel —Ñ–∞–π–ª–æ–≤
"""

import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))
from parse_template_6 import Template6Parser
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text

def reparse_images():
    """–ü–∞—Ä—Å–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö Excel —Ñ–∞–π–ª–æ–≤"""
    
    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    with open('projects_need_images.txt', 'r') as f:
        project_ids = [int(line.strip()) for line in f if line.strip().isdigit()]
    
    print("=" * 80)
    print("üñºÔ∏è  –ü–ê–†–°–ò–ù–ì –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 80)
    print(f"\nüìä –ü—Ä–æ–µ–∫—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(project_ids)}")
    
    parser = Template6Parser()
    db = PostgreSQLManager()
    
    excel_dir = Path('excel_files')
    
    # –ù–∞–π–¥–µ–º –≤—Å–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    excel_files = {}
    for excel_path in excel_dir.glob('project_*.xlsx'):
        try:
            parts = excel_path.stem.split('_')
            if len(parts) >= 2:
                proj_id = int(parts[1])
                excel_files[proj_id] = excel_path
        except:
            continue
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤: {len(excel_files)}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–æ–µ–∫—Ç—ã —á—Ç–æ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
    to_process = [pid for pid in project_ids if pid in excel_files]
    not_found = [pid for pid in project_ids if pid not in excel_files]
    
    if not_found:
        print(f"\n‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è {len(not_found)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    print(f"\n‚úì –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(to_process)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    success = 0
    errors = 0
    no_images = 0
    
    for i, proj_id in enumerate(to_process, 1):
        excel_path = excel_files[proj_id]
        print(f"\n[{i}/{len(to_process)}] –ü—Ä–æ–µ–∫—Ç {proj_id} ({excel_path.name})...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º table_id
            with db.get_session() as session:
                table_id = session.execute(text("""
                    SELECT table_id FROM projects WHERE id = :id
                """), {'id': proj_id}).scalar()
                
                if not table_id:
                    print(f"  ‚ùå –ù–µ—Ç table_id –≤ –ë–î")
                    errors += 1
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–∂–µ –µ—Å—Ç—å
            with db.get_session() as session:
                before_count = session.execute(text("""
                    SELECT COUNT(*) 
                    FROM product_images pi
                    JOIN products p ON p.id = pi.product_id
                    WHERE p.table_id = :table_id
                """), {'table_id': table_id}).scalar()
            
            # –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
            print(f"  üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π... (—É–∂–µ –±—ã–ª–æ: {before_count})")
            try:
                parser.reparse_images_only(proj_id, str(excel_path))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏–ª–æ—Å—å
                with db.get_session() as session:
                    after_count = session.execute(text("""
                        SELECT COUNT(*) 
                        FROM product_images pi
                        JOIN products p ON p.id = pi.product_id
                        WHERE p.table_id = :table_id
                    """), {'table_id': table_id}).scalar()
                
                new_images = after_count - before_count
                
                if new_images == 0:
                    print(f"  ‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
                    no_images += 1
                else:
                    print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {new_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–≤—Å–µ–≥–æ: {after_count})")
                    success += 1
                    
            except Exception as parse_err:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(parse_err)}")
                errors += 1
                continue
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            errors += 1
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–ò –ü–ê–†–°–ò–ù–ì–ê:")
    print("=" * 80)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ:        {success} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"‚ö†Ô∏è  –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {no_images} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"‚ùå –û—à–∏–±–æ–∫:         {errors} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print("=" * 80)
    
    if success > 0:
        # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with db.get_session() as session:
            new_images = session.execute(text("""
                SELECT COUNT(*) 
                FROM product_images 
                WHERE image_url LIKE 'storage/images/%'
            """)).scalar()
            
            print(f"\nüñºÔ∏è  –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏: {new_images}")
            print("\n‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ FTP!")
            print("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ–±–ª–∞–∫–æ")

if __name__ == '__main__':
    reparse_images()

