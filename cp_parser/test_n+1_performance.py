#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã N+1
–ó–∞–º–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î –∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
"""

import sys
from pathlib import Path
import time
sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text, event
from sqlalchemy.engine import Engine

# –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
query_count = 0
queries_log = []

@event.listens_for(Engine, "before_cursor_execute")
def receive_before_cursor_execute(conn, cursor, statement, parameters, context, executemany):
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π SQL –∑–∞–ø—Ä–æ—Å"""
    global query_count, queries_log
    query_count += 1
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    query_preview = statement.replace('\n', ' ')[:100]
    queries_log.append(f"Query #{query_count}: {query_preview}...")


def test_products_list_current():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¢–ï–ö–£–©–£–Æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é products_list (—Å N+1)"""
    global query_count, queries_log
    query_count = 0
    queries_log = []
    
    db = PostgreSQLManager()
    
    print("\n" + "="*80)
    print("üìä –¢–ï–°–¢: –¢–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è products_list() [–° –ü–†–û–ë–õ–ï–ú–û–ô N+1]")
    print("="*80 + "\n")
    
    start_time = time.time()
    
    with db.get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º 20 —Ç–æ–≤–∞—Ä–æ–≤ (–∫–∞–∫ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
        products_sql = text("""
            SELECT id, name, description, article_number
            FROM products
            WHERE id IN (
                SELECT DISTINCT product_id 
                FROM product_images 
                WHERE product_id IS NOT NULL
            )
            LIMIT 20
        """)
        
        products = session.execute(products_sql).fetchall()
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        for product in products:
            product_id = product[0]
            
            # –ó–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (N+1)
            images_sql = text("""
                SELECT id, image_filename, is_main_image, image_url
                FROM product_images 
                WHERE product_id = :product_id 
                ORDER BY 
                    CASE WHEN is_main_image::text = 'true' THEN 0 ELSE 1 END,
                    cell_position,
                    display_order
                LIMIT 5
            """)
            session.execute(images_sql, {"product_id": product_id}).fetchall()
            
            # –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (N+1)
            offers_sql = text("""
                SELECT id, quantity, price_usd, price_rub, delivery_time_days
                FROM price_offers 
                WHERE product_id = :product_id 
                ORDER BY quantity
                LIMIT 3
            """)
            session.execute(offers_sql, {"product_id": product_id}).fetchall()
    
    end_time = time.time()
    elapsed = (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.2f} –º—Å")
    print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {query_count}")
    print(f"üìä –§–æ—Ä–º—É–ª–∞: 1 (—Ç–æ–≤–∞—Ä—ã) + 20 (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è) + 20 (—Ü–µ–Ω—ã) = {query_count}")
    print(f"\nüí° –ü—Ä–æ–±–ª–µ–º–∞ N+1 –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê: {query_count - 1} –ª–∏—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!")
    
    return query_count, elapsed


def test_products_list_optimized():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–£–Æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é (—Å –ø–æ–¥–∑–∞–ø—Ä–æ—Å–∞–º–∏)"""
    global query_count, queries_log
    query_count = 0
    queries_log = []
    
    db = PostgreSQLManager()
    
    print("\n" + "="*80)
    print("üìä –¢–ï–°–¢: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (—Å –ø–æ–¥–∑–∞–ø—Ä–æ—Å–∞–º–∏)")
    print("="*80 + "\n")
    
    start_time = time.time()
    
    with db.get_session() as session:
        # –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        optimized_sql = text("""
            SELECT 
                p.id,
                p.name,
                p.description,
                p.article_number,
                -- –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ–¥–∑–∞–ø—Ä–æ—Å
                (SELECT pi.image_url
                 FROM product_images pi
                 WHERE pi.product_id = p.id
                 AND pi.is_main_image::text = 'true'
                 ORDER BY pi.cell_position
                 LIMIT 1) as main_image,
                -- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ USD
                (SELECT MIN(po.price_usd)
                 FROM price_offers po
                 WHERE po.product_id = p.id) as min_price_usd,
                -- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ USD
                (SELECT MAX(po.price_usd)
                 FROM price_offers po
                 WHERE po.product_id = p.id) as max_price_usd,
                -- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                (SELECT COUNT(*)
                 FROM product_images pi2
                 WHERE pi2.product_id = p.id) as images_count
            FROM products p
            WHERE p.id IN (
                SELECT DISTINCT product_id 
                FROM product_images 
                WHERE product_id IS NOT NULL
            )
            LIMIT 20
        """)
        
        products = session.execute(optimized_sql).fetchall()
    
    end_time = time.time()
    elapsed = (end_time - start_time) * 1000
    
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.2f} –º—Å")
    print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {query_count}")
    print(f"‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –û–î–ù–û–ú –∑–∞–ø—Ä–æ—Å–µ!")
    
    return query_count, elapsed


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "="*80)
    print("üî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ N+1")
    print("="*80)
    print("\n–ó–∞–º–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å 20 —Ç–æ–≤–∞—Ä–∞–º–∏")
    
    # –¢–µ—Å—Ç 1: –¢–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    current_queries, current_time = test_products_list_current()
    
    # –¢–µ—Å—Ç 2: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    optimized_queries, optimized_time = test_products_list_optimized()
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print("\n" + "="*80)
    print("üìà –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("="*80 + "\n")
    
    print(f"{'–ú–µ—Ç—Ä–∏–∫–∞':<30} | {'–¢–µ–∫—É—â–∞—è':<15} | {'–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è':<15} | –£–ª—É—á—à–µ–Ω–∏–µ")
    print("-"*80)
    
    queries_improvement = ((current_queries - optimized_queries) / current_queries * 100)
    time_improvement = ((current_time - optimized_time) / current_time * 100)
    
    print(f"{'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤':<30} | {current_queries:<15} | {optimized_queries:<15} | -{queries_improvement:.1f}%")
    print(f"{'–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–º—Å)':<30} | {current_time:<15.2f} | {optimized_time:<15.2f} | -{time_improvement:.1f}%")
    print(f"{'–õ–∏—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤':<30} | {current_queries - 1:<15} | {optimized_queries - 1:<15} | ")
    
    print("\n" + "="*80)
    print("üí° –í–´–í–û–î:")
    print("="*80)
    print(f"  –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —É–±–∏—Ä–∞–µ—Ç {current_queries - optimized_queries} –∑–∞–ø—Ä–æ—Å–æ–≤ ({queries_improvement:.0f}%)")
    print(f"  –£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ {current_time / optimized_time:.1f}x —Ä–∞–∑")
    print(f"  –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: {current_time - optimized_time:.2f} –º—Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
    
    # –≠–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è –Ω–∞ –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã
    print("\nüìä –≠–ö–°–¢–†–ê–ü–û–õ–Ø–¶–ò–Ø –ù–ê –ë–û–õ–¨–®–ò–ï –û–ë–™–ï–ú–´:")
    print("-"*80)
    
    for n_products in [50, 100, 200]:
        estimated_current = current_time * (n_products / 20)
        estimated_optimized = optimized_time * (n_products / 20)
        
        print(f"  {n_products} —Ç–æ–≤–∞—Ä–æ–≤:")
        print(f"    –¢–µ–∫—É—â–∞—è:          {estimated_current:6.0f} –º—Å  ({1 + n_products * 2} –∑–∞–ø—Ä–æ—Å–æ–≤)")
        print(f"    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: {estimated_optimized:6.0f} –º—Å  (1 –∑–∞–ø—Ä–æ—Å)")
        print(f"    –†–∞–∑–Ω–∏—Ü–∞:          {estimated_current - estimated_optimized:6.0f} –º—Å")
        print()
    
    print("="*80 + "\n")


if __name__ == "__main__":
    main()

