#!/usr/bin/env python3
"""
–ü–µ—Ä–µ—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–æ–≤ –∏ –¥–æ–ø–∞—Ä—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–î–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏ –Ω–æ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import sys
from pathlib import Path
import gspread
from google.oauth2.service_account import Credentials
import requests
import time

sys.path.insert(0, str(Path(__file__).parent))
from parse_template_6 import Template6Parser
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text

# Google Sheets credentials
SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 
          'https://www.googleapis.com/auth/drive']
CREDS_FILE = 'service_account.json'

def redownload_and_reparse():
    """–ü–µ—Ä–µ—Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏ –¥–æ–ø–∞—Ä—Å–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    with open('projects_need_images.txt', 'r') as f:
        project_ids = [int(line.strip()) for line in f if line.strip().isdigit()]
    
    print("=" * 80)
    print("üîÑ –ü–ï–†–ï–°–ö–ê–ß–ò–í–ê–ù–ò–ï –ò –î–û–ü–ê–†–°–ò–ù–ì –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 80)
    print(f"\nüìä –ü—Ä–æ–µ–∫—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(project_ids)}")
    
    parser = Template6Parser()
    db = PostgreSQLManager()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
    creds = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPES)
    client = gspread.authorize(creds)
    
    success = 0
    errors = 0
    no_images = 0
    
    for i, proj_id in enumerate(project_ids, 1):
        print(f"\n[{i}/{len(project_ids)}] –ü—Ä–æ–µ–∫—Ç {proj_id}...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º table_id –∏–∑ –ë–î
            with db.get_session() as session:
                table_id = session.execute(text("""
                    SELECT table_id FROM projects WHERE id = :id
                """), {'id': proj_id}).scalar()
                
                if not table_id:
                    print(f"  ‚ùå –ù–µ—Ç table_id –≤ –ë–î")
                    errors += 1
                    continue
            
            # –°–∫–∞—á–∏–≤–∞–µ–º Excel —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π URL
            print(f"  üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
            excel_path = Path(f'excel_files/project_{proj_id}_{table_id}.xlsx')
            excel_path.parent.mkdir(exist_ok=True)
            
            url = f"https://docs.google.com/spreadsheets/d/{table_id}/export?format=xlsx"
            response = requests.get(url, headers={'Authorization': f'Bearer {creds.token}'})
            
            if response.status_code != 200:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: HTTP {response.status_code}")
                errors += 1
                continue
            
            with open(excel_path, 'wb') as f:
                f.write(response.content)
            
            if not excel_path or not Path(excel_path).exists():
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å")
                errors += 1
                continue
            
            # –ü–∞—Ä—Å–∏–º –¢–û–õ–¨–ö–û –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ –æ—Ñ—Ñ–µ—Ä—ã, –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å)
            print(f"  üñºÔ∏è  –ü–∞—Ä—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
            result = parser.reparse_images_only(proj_id, excel_path)
            
            if result.get('images', 0) > 0:
                print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {result['images']} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                success += 1
            else:
                print(f"  ‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                no_images += 1
            
            # –£–¥–∞–ª—è–µ–º Excel —Ñ–∞–π–ª
            Path(excel_path).unlink()
            
            # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
            if i % 10 == 0:
                print(f"\n‚è∏Ô∏è  –ü–∞—É–∑–∞ 5 —Å–µ–∫...")
                time.sleep(5)
        
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            errors += 1
    
    print("\n" + "=" * 80)
    print("‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 80)
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}")
    print(f"  ‚ö†Ô∏è  –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {no_images}")
    print(f"  ‚ùå –û—à–∏–±–æ–∫: {errors}")
    print("\n" + "=" * 80)

if __name__ == '__main__':
    redownload_and_reparse()


–ü–µ—Ä–µ—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–æ–≤ –∏ –¥–æ–ø–∞—Ä—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–î–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏ –Ω–æ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import sys
from pathlib import Path
import gspread
from google.oauth2.service_account import Credentials
import requests
import time

sys.path.insert(0, str(Path(__file__).parent))
from parse_template_6 import Template6Parser
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text

# Google Sheets credentials
SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 
          'https://www.googleapis.com/auth/drive']
CREDS_FILE = 'service_account.json'

def redownload_and_reparse():
    """–ü–µ—Ä–µ—Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏ –¥–æ–ø–∞—Ä—Å–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    with open('projects_need_images.txt', 'r') as f:
        project_ids = [int(line.strip()) for line in f if line.strip().isdigit()]
    
    print("=" * 80)
    print("üîÑ –ü–ï–†–ï–°–ö–ê–ß–ò–í–ê–ù–ò–ï –ò –î–û–ü–ê–†–°–ò–ù–ì –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 80)
    print(f"\nüìä –ü—Ä–æ–µ–∫—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(project_ids)}")
    
    parser = Template6Parser()
    db = PostgreSQLManager()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
    creds = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPES)
    client = gspread.authorize(creds)
    
    success = 0
    errors = 0
    no_images = 0
    
    for i, proj_id in enumerate(project_ids, 1):
        print(f"\n[{i}/{len(project_ids)}] –ü—Ä–æ–µ–∫—Ç {proj_id}...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º table_id –∏–∑ –ë–î
            with db.get_session() as session:
                table_id = session.execute(text("""
                    SELECT table_id FROM projects WHERE id = :id
                """), {'id': proj_id}).scalar()
                
                if not table_id:
                    print(f"  ‚ùå –ù–µ—Ç table_id –≤ –ë–î")
                    errors += 1
                    continue
            
            # –°–∫–∞—á–∏–≤–∞–µ–º Excel —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π URL
            print(f"  üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
            excel_path = Path(f'excel_files/project_{proj_id}_{table_id}.xlsx')
            excel_path.parent.mkdir(exist_ok=True)
            
            url = f"https://docs.google.com/spreadsheets/d/{table_id}/export?format=xlsx"
            response = requests.get(url, headers={'Authorization': f'Bearer {creds.token}'})
            
            if response.status_code != 200:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: HTTP {response.status_code}")
                errors += 1
                continue
            
            with open(excel_path, 'wb') as f:
                f.write(response.content)
            
            if not excel_path or not Path(excel_path).exists():
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å")
                errors += 1
                continue
            
            # –ü–∞—Ä—Å–∏–º –¢–û–õ–¨–ö–û –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ –æ—Ñ—Ñ–µ—Ä—ã, –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å)
            print(f"  üñºÔ∏è  –ü–∞—Ä—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
            result = parser.reparse_images_only(proj_id, excel_path)
            
            if result.get('images', 0) > 0:
                print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {result['images']} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                success += 1
            else:
                print(f"  ‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                no_images += 1
            
            # –£–¥–∞–ª—è–µ–º Excel —Ñ–∞–π–ª
            Path(excel_path).unlink()
            
            # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
            if i % 10 == 0:
                print(f"\n‚è∏Ô∏è  –ü–∞—É–∑–∞ 5 —Å–µ–∫...")
                time.sleep(5)
        
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            errors += 1
    
    print("\n" + "=" * 80)
    print("‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 80)
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}")
    print(f"  ‚ö†Ô∏è  –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {no_images}")
    print(f"  ‚ùå –û—à–∏–±–æ–∫: {errors}")
    print("\n" + "=" * 80)

if __name__ == '__main__':
    redownload_and_reparse()

