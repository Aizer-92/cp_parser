#!/usr/bin/env python3
"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ FTP —Ñ–∞–π–ª–æ–≤ —Å –ë–î –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è NULL URL
"""

import csv
import sys
sys.path.append('database')
from postgresql_manager import PostgreSQLManager
from sqlalchemy import text

def get_db_images_without_url():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ë–î –≥–¥–µ image_url IS NULL"""
    print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
    
    db = PostgreSQLManager()
    
    query = text("""
        SELECT 
            i.id,
            i.product_id,
            i.table_id,
            i.cell_position,
            i.is_main_image,
            i.image_url,
            p.row_number,
            p.name as product_name
        FROM product_images i
        LEFT JOIN products p ON i.product_id = p.id
        WHERE i.image_url IS NULL
        ORDER BY i.table_id, i.cell_position
    """)
    
    print("üì• –ü–æ–ª—É—á–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ URL –∏–∑ –ë–î...")
    
    with db.engine.connect() as conn:
        result = conn.execute(query)
        rows = result.fetchall()
    
    images = []
    for row in rows:
        images.append({
            'id': row[0],
            'product_id': row[1],
            'sheet_id': row[2],  # table_id
            'position': row[3],   # cell_position
            'image_type': row[4], # is_main_image
            'image_url': row[5],
            'row_number': row[6],
            'product_name': row[7]
        })
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(images):,} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ URL")
    return images


def load_ftp_files(csv_file):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å FTP –∏–∑ CSV"""
    print(f"\nüìÑ –ß–∏—Ç–∞—é FTP —Ñ–∞–π–ª—ã –∏–∑ {csv_file}...")
    
    ftp_files = {}
    
    with open(csv_file, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            sheet_id = row['sheet_id']
            position = row['position']
            suffix = row['suffix']
            image_url = row['image_url']
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            # 1. –ë–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞: sheet_id + position
            # 2. –° —Å—É—Ñ—Ñ–∏–∫—Å–æ–º: sheet_id + position + suffix
            
            if suffix:
                # –° —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
                key = f"{sheet_id}|{position}|{suffix}"
            else:
                # –ë–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ (–æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
                key = f"{sheet_id}|{position}|"
            
            # –•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ URL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞ (–º–æ–≥—É—Ç –±—ã—Ç—å –¥—É–±–ª–∏)
            if key not in ftp_files:
                ftp_files[key] = []
            ftp_files[key].append(image_url)
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ftp_files):,} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (sheet_id + position + suffix)")
    return ftp_files


def match_images(db_images, ftp_files):
    """–°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ë–î —Å —Ñ–∞–π–ª–∞–º–∏ –Ω–∞ FTP"""
    print("\nüîç –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    matched = []
    not_matched = []
    multiple_matches = []
    
    for i, img in enumerate(db_images, 1):
        if i % 5000 == 0:
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i:,} / {len(db_images):,} ({i/len(db_images)*100:.1f}%)")
        
        sheet_id = img['sheet_id']
        position = img['position']
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ —Ä–∞–∑–Ω—ã–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º
        # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ (–æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        key = f"{sheet_id}|{position}|"
        
        if key in ftp_files:
            urls = ftp_files[key]
            if len(urls) == 1:
                matched.append({
                    **img,
                    'ftp_url': urls[0],
                    'match_type': 'exact',
                    'suffix': ''
                })
            else:
                # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–¥—É–±–ª–∏)
                multiple_matches.append({
                    **img,
                    'ftp_urls': urls,
                    'match_type': 'multiple',
                    'count': len(urls)
                })
        else:
            # –ù–µ –Ω–∞–π–¥–µ–Ω–æ - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º?
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å –ª—é–±—ã–º —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
            found = False
            for suffix in ['1', '2', '3', '4', '5']:
                key_with_suffix = f"{sheet_id}|{position}|{suffix}"
                if key_with_suffix in ftp_files:
                    urls = ftp_files[key_with_suffix]
                    matched.append({
                        **img,
                        'ftp_url': urls[0],  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –µ—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏
                        'match_type': 'with_suffix',
                        'suffix': suffix
                    })
                    found = True
                    break
            
            if not found:
                not_matched.append(img)
    
    print(f"\n‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
    print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matched):,}")
    print(f"   –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(multiple_matches):,}")
    print(f"   –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ FTP: {len(not_matched):,}")
    
    return matched, multiple_matches, not_matched


def main():
    print("=" * 80)
    print("üîó –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï FTP –§–ê–ô–õ–û–í –° –ë–î")
    print("=" * 80)
    print()
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ URL –∏–∑ –ë–î
    db_images = get_db_images_without_url()
    
    if not db_images:
        print("\nüéâ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ë–î —É–∂–µ –∏–º–µ—é—Ç URL!")
        return
    
    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ FTP —Ñ–∞–π–ª–æ–≤
    ftp_files = load_ftp_files('FTP_FILES_ANALYSIS.csv')
    
    # 3. –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º
    matched, multiple_matches, not_matched = match_images(db_images, ftp_files)
    
    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    
    # 4.1. –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è UPDATE - –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    output_file = 'IMAGES_TO_UPDATE_URL.csv'
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è UPDATE: {output_file}")
    
    with open(output_file, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([
            'image_id', 
            'product_id', 
            'sheet_id', 
            'position', 
            'suffix',
            'image_type',
            'row_number',
            'product_name',
            'ftp_url',
            'match_type'
        ])
        
        for img in matched:
            writer.writerow([
                img['id'],
                img['product_id'],
                img['sheet_id'],
                img['position'],
                img.get('suffix', ''),
                img['image_type'],
                img.get('row_number', ''),
                img.get('product_name', ''),
                img['ftp_url'],
                img['match_type']
            ])
    
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(matched):,} –∑–∞–ø–∏—Å–µ–π –¥–ª—è UPDATE")
    
    # 4.2. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–¥—É–±–ª–∏) - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä
    if multiple_matches:
        multiple_file = 'IMAGES_MULTIPLE_MATCHES.csv'
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {multiple_file}")
        
        with open(multiple_file, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow([
                'image_id',
                'product_id',
                'sheet_id',
                'position',
                'image_type',
                'row_number',
                'product_name',
                'urls_count',
                'ftp_urls'
            ])
            
            for img in multiple_matches:
                writer.writerow([
                    img['id'],
                    img['product_id'],
                    img['sheet_id'],
                    img['position'],
                    img['image_type'],
                    img.get('row_number', ''),
                    img.get('product_name', ''),
                    img['count'],
                    ' | '.join(img['ftp_urls'])
                ])
        
        print(f"‚ö†Ô∏è  –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(multiple_matches):,} –∑–∞–ø–∏—Å–µ–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏")
    
    # 4.3. –ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞ FTP
    if not_matched:
        not_found_file = 'IMAGES_NOT_FOUND_ON_FTP.csv'
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞ FTP: {not_found_file}")
        
        with open(not_found_file, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow([
                'image_id',
                'product_id',
                'sheet_id',
                'position',
                'image_type',
                'row_number',
                'product_name'
            ])
            
            for img in not_matched:
                writer.writerow([
                    img['id'],
                    img['product_id'],
                    img['sheet_id'],
                    img['position'],
                    img['image_type'],
                    img.get('row_number', ''),
                    img.get('product_name', '')
                ])
        
        print(f"‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(not_matched):,} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–∞ FTP")
    
    # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 80)
    
    print(f"\nüìä –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –í –ë–î –ë–ï–ó URL:")
    print(f"   –í—Å–µ–≥–æ: {len(db_images):,}")
    
    print(f"\n‚úÖ –ù–ê–ô–î–ï–ù–û –ù–ê FTP (–≥–æ—Ç–æ–≤–æ –∫ UPDATE):")
    print(f"   –û–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {len(matched):,}")
    print(f"   - –¢–æ—á–Ω—ã–µ (–±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞): {len([m for m in matched if m['match_type'] == 'exact']):,}")
    print(f"   - –° —Å—É—Ñ—Ñ–∏–∫—Å–æ–º: {len([m for m in matched if m['match_type'] == 'with_suffix']):,}")
    
    if multiple_matches:
        print(f"\n‚ö†Ô∏è  –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –°–û–í–ü–ê–î–ï–ù–ò–Ø (—Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏):")
        print(f"   –ó–∞–ø–∏—Å–µ–π: {len(multiple_matches):,}")
        print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤-–¥—É–±–ª–µ–π: {sum(m['count'] for m in multiple_matches):,}")
    
    if not_matched:
        print(f"\n‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –ù–ê FTP:")
        print(f"   –ó–∞–ø–∏—Å–µ–π: {len(not_matched):,}")
        print(f"   –ü—Ä–∏—á–∏–Ω—ã:")
        print(f"   - –§–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        print(f"   - –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞")
        print(f"   - –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ sheet_id –∏–ª–∏ position")
    
    # –ü–æ–∫—Ä—ã—Ç–∏–µ
    coverage = (len(matched) / len(db_images) * 100) if db_images else 0
    print(f"\nüìà –ü–û–ö–†–´–¢–ò–ï:")
    print(f"   {coverage:.1f}% –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å")
    
    print("\n" + "=" * 80)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 80)
    
    print(f"\nüìÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è UPDATE: {output_file}")
    if multiple_matches:
        print(f"üìÑ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {multiple_file}")
    if not_matched:
        print(f"üìÑ –ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ: {not_found_file}")
    
    print(f"\nüí° –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì:")
    print(f"   1. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª {output_file}")
    print(f"   2. –ó–∞–ø—É—Å—Ç–∏ UPDATE –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è URL –≤ –ë–î")
    if multiple_matches:
        print(f"   3. –û–±—Ä–∞–±–æ—Ç–∞–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é")


if __name__ == '__main__':
    main()

