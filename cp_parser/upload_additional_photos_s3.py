#!/usr/bin/env python3
"""
–ó–∞–≥—Ä—É–∑–∫–∞ –¢–û–õ–¨–ö–û –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ (—Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ _1_, _2_, _3_, _4_) –Ω–∞ S3
–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ç–æ (–±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤) —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–∞–Ω–µ–µ
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç boto3 –≤–º–µ—Å—Ç–æ FTP –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
"""

import sys
from pathlib import Path
import boto3
from botocore.exceptions import ClientError
from sqlalchemy import text
import time
from concurrent.futures import ThreadPoolExecutor, as_completed
from threading import Lock

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager

class AdditionalPhotosS3Uploader:
    def __init__(self):
        self.db = PostgreSQLManager()
        self.storage_dir = Path('storage/images')
        
        # S3 –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (Beget)
        self.s3_client = boto3.client(
            's3',
            endpoint_url='https://s3.ru1.storage.beget.cloud',
            aws_access_key_id='RECD00AQJIM4300MLJ0W',
            aws_secret_access_key='FIucJ3i9iIWZ5ieJvabvI0OxEn2Yv4gG5XRUeSNf'
        )
        
        self.bucket_name = '73d16f7545b3-promogoods'
        self.s3_prefix = 'images/'
        
        self.stats_lock = Lock()
        self.uploaded = 0
        self.skipped = 0
        self.errors = 0
    
    def get_additional_images(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏)"""
        with open('template_4_perfect_ids.txt', 'r') as f:
            project_ids = [int(line.strip()) for line in f if line.strip()]
        
        with self.db.get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –®–∞–±–ª–æ–Ω–∞ 4
            result = session.execute(text("""
                SELECT 
                    pi.id,
                    pi.image_filename,
                    p.project_id
                FROM product_images pi
                JOIN products p ON pi.product_id = p.id
                WHERE p.project_id = ANY(:ids)
                AND (pi.image_url IS NULL OR pi.image_url = '')
                ORDER BY pi.id
            """), {'ids': project_ids}).fetchall()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º: —Ç–æ–ª—å–∫–æ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ _1_, _2_, _3_ –∏ —Ç.–¥.
            filtered = []
            for row in result:
                img_id, filename = row[0], row[1]
                parts = filename.replace('.png', '').split('_')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ —Ü–∏—Ñ—Ä–∞ –ø–µ—Ä–µ–¥ —Ö–µ—à–µ–º
                if len(parts) >= 4:
                    try:
                        int(parts[-2])  # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ - –∑–Ω–∞—á–∏—Ç —Å—É—Ñ—Ñ–∏–∫—Å –µ—Å—Ç—å
                        filtered.append((img_id, filename))
                    except ValueError:
                        pass  # –ù–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            
            return filtered
    
    def upload_file(self, img_id, filename):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–∞ S3"""
        try:
            filepath = self.storage_dir / filename
            
            if not filepath.exists():
                with self.stats_lock:
                    self.skipped += 1
                return False, f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ S3
            s3_key = f"{self.s3_prefix}{filename}"
            
            self.s3_client.upload_file(
                str(filepath),
                self.bucket_name,
                s3_key,
                ExtraArgs={'ACL': 'public-read'}
            )
            
            # URL —Ñ–∞–π–ª–∞
            url = f"https://s3.ru1.storage.beget.cloud/{self.bucket_name}/{s3_key}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
            with self.db.get_session() as session:
                session.execute(text("""
                    UPDATE product_images 
                    SET image_url = :url 
                    WHERE id = :img_id
                """), {'url': url, 'img_id': img_id})
                session.commit()
            
            with self.stats_lock:
                self.uploaded += 1
            
            return True, url
            
        except ClientError as e:
            with self.stats_lock:
                self.errors += 1
            return False, f"S3 error: {str(e)}"
        except Exception as e:
            with self.stats_lock:
                self.errors += 1
            return False, str(e)
    
    def run(self, max_workers=10):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É"""
        images = self.get_additional_images()
        total = len(images)
        
        print("=" * 80)
        print("üì§ –ó–ê–ì–†–£–ó–ö–ê –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –§–û–¢–û –ù–ê S3")
        print("=" * 80)
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ: {total:,}")
        print(f"üîß –ü–æ—Ç–æ–∫–æ–≤: {max_workers}")
        print(f"üìÅ S3: {self.bucket_name}/{self.s3_prefix}")
        print(f"\n{'='*80}\n")
        
        start_time = time.time()
        
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            futures = {
                executor.submit(self.upload_file, img_id, filename): (img_id, filename)
                for img_id, filename in images
            }
            
            for idx, future in enumerate(as_completed(futures), 1):
                img_id, filename = futures[future]
                success, result = future.result()
                
                if idx % 10 == 0 or idx == total:
                    elapsed = time.time() - start_time
                    speed = idx / elapsed if elapsed > 0 else 0
                    remaining = (total - idx) / speed if speed > 0 else 0
                    
                    print(f"\r‚è≥ {idx}/{total} ({idx/total*100:.1f}%) | "
                          f"‚úÖ {self.uploaded} | ‚ö†Ô∏è {self.skipped} | ‚ùå {self.errors} | "
                          f"‚ö° {speed:.1f} —Ñ–∞–π–ª/—Å–µ–∫ | ‚è±Ô∏è ~{remaining/60:.1f} –º–∏–Ω",
                          end='', flush=True)
        
        print(f"\n\n{'='*80}")
        print(f"‚úÖ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ:  {self.uploaded:,}")
        print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ:  {self.skipped:,}")
        print(f"   –û—à–∏–±–∫–∏:     {self.errors:,}")
        print(f"   –í—Ä–µ–º—è:      {(time.time() - start_time)/60:.1f} –º–∏–Ω")
        print("=" * 80)


if __name__ == '__main__':
    uploader = AdditionalPhotosS3Uploader()
    uploader.run(max_workers=10)

