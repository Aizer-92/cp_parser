#!/usr/bin/env python3
"""
–ú–∞—Å—Å–æ–≤–æ–µ —Å–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π >1MB
–†–µ—Å–∞–π–∑ –¥–æ 1920px + –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WebP —Å quality=85
"""

import os
import csv
import re
from ftplib import FTP_TLS
from PIL import Image
import io
import time
import sys

# FTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
FTP_HOST = "ftp.ru1.storage.beget.cloud"
FTP_USER = "RECD00AQJIM4300MLJ0W"
FTP_PASS = "FIucJ3i9iIWZ5ieJvabvI0OxEn2Yv4gG5XRUeSNf"
FTP_DIR = "/73d16f7545b3-promogoods/images"

def get_files_to_compress():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ >1MB –¥–ª—è —Å–∂–∞—Ç–∏—è"""
    print("üìÑ –ß–∏—Ç–∞—é —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞...")
    
    files = []
    with open('STORAGE_ANALYSIS_20251012_1455.txt', 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Å —Ñ–∞–π–ª–∞–º–∏
            if 'MB -' in line and '.png' in line:
                try:
                    parts = line.split(' - ', 1)
                    if len(parts) == 2:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä
                        size_match = re.search(r'(\d+\.\d+)\s+MB', parts[0])
                        if size_match:
                            size_mb = float(size_match.group(1))
                            
                            # –¢–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã >1MB
                            if size_mb >= 1.0:
                                filename = parts[1].strip()
                                
                                if filename.endswith('.png') and not filename.endswith('...'):
                                    files.append({
                                        'filename': filename,
                                        'size_mb': size_mb
                                    })
                except:
                    continue
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(files):,} —Ñ–∞–π–ª–æ–≤ >1MB –¥–ª—è —Å–∂–∞—Ç–∏—è")
    return files


def compress_and_replace_file(ftp, filename, original_size_mb, stats):
    """–°–∫–∞—á–∞—Ç—å, —Å–∂–∞—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å WebP –≤–µ—Ä—Å–∏—é (–æ—Ä–∏–≥–∏–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)"""
    try:
        # 1. –°–∫–∞—á–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        original_data = io.BytesIO()
        ftp.retrbinary(f'RETR {filename}', original_data.write)
        original_data.seek(0)
        original_size_kb = len(original_data.getvalue()) / 1024
        
        # 2. –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.open(original_data)
        original_dimensions = img.size
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ —Ä–µ—Å–∞–π–∑
        max_size = 1920
        needs_resize = max(original_dimensions) > max_size
        
        if needs_resize:
            # –†–µ—Å–∞–π–∑ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            if original_dimensions[0] > original_dimensions[1]:
                new_width = max_size
                new_height = int(original_dimensions[1] * (max_size / original_dimensions[0]))
            else:
                new_height = max_size
                new_width = int(original_dimensions[0] * (max_size / original_dimensions[1]))
            
            img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
            resized_dimensions = (new_width, new_height)
        else:
            resized_dimensions = original_dimensions
        
        # 4. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
        if img.mode in ('RGBA', 'LA', 'P'):
            background = Image.new('RGB', img.size, (255, 255, 255))
            if img.mode == 'P':
                img = img.convert('RGBA')
            background.paste(img, mask=img.split()[-1] if img.mode in ('RGBA', 'LA') else None)
            img = background
        elif img.mode != 'RGB':
            img = img.convert('RGB')
        
        # 5. –°–∂–∏–º–∞–µ–º –≤ WebP
        compressed_data = io.BytesIO()
        img.save(compressed_data, format='WEBP', quality=85, method=6)
        compressed_data.seek(0)
        compressed_size_kb = len(compressed_data.getvalue()) / 1024
        
        # 6. –°–æ–∑–¥–∞–µ–º WebP –≤–µ—Ä—Å–∏—é (–æ—Ä–∏–≥–∏–Ω–∞–ª –æ—Å—Ç–∞–µ—Ç—Å—è)
        new_filename = filename.replace('.png', '.webp')
        compressed_data.seek(0)
        ftp.storbinary(f'STOR {new_filename}', compressed_data)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        compression_ratio = (1 - compressed_size_kb / original_size_kb) * 100
        
        stats['processed'] += 1
        stats['total_original_mb'] += original_size_kb / 1024
        stats['total_compressed_mb'] += compressed_size_kb / 1024
        stats['resized_count'] += 1 if needs_resize else 0
        
        return {
            'filename': filename,
            'new_filename': new_filename,
            'original_size_mb': original_size_kb / 1024,
            'compressed_size_mb': compressed_size_kb / 1024,
            'compression_ratio': compression_ratio,
            'original_dimensions': f"{original_dimensions[0]}x{original_dimensions[1]}",
            'new_dimensions': f"{resized_dimensions[0]}x{resized_dimensions[1]}",
            'resized': 'Yes' if needs_resize else 'No'
        }
        
    except Exception as e:
        stats['failed'] += 1
        return None


def main():
    print("=" * 80)
    print("üóúÔ∏è  –ú–ê–°–°–û–í–û–ï –°–ñ–ê–¢–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 80)
    print()
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    files = get_files_to_compress()
    
    if not files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∂–∞—Ç–∏—è")
        return
    
    print(f"\nüìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(files):,}")
    print(f"üìä –ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {sum(f['size_mb'] for f in files):.2f} MB")
    
    # 2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï!")
    print("   ‚Ä¢ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ .png —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –£–î–ê–õ–ï–ù–´")
    print("   ‚Ä¢ –í–º–µ—Å—Ç–æ –Ω–∏—Ö –±—É–¥—É—Ç .webp —Ñ–∞–π–ª—ã")
    print("   ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è >1920px –±—É–¥—É—Ç —É–º–µ–Ω—å—à–µ–Ω—ã –¥–æ 1920px")
    print("   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ WebP: 85%")
    
    response = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ").strip().lower()
    
    if response != 'yes':
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    # 3. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ FTP
    print(f"\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP...")
    
    try:
        ftp = FTP_TLS(FTP_HOST)
        ftp.login(FTP_USER, FTP_PASS)
        ftp.prot_p()
        ftp.cwd(FTP_DIR)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return
    
    # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    print(f"\nüóúÔ∏è  –ù–∞—á–∏–Ω–∞—é —Å–∂–∞—Ç–∏–µ {len(files):,} —Ñ–∞–π–ª–æ–≤...")
    print("   (—ç—Ç–æ –∑–∞–π–º–µ—Ç –≤—Ä–µ–º—è, –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Ñ–∞–π–ª–æ–≤)\n")
    
    stats = {
        'processed': 0,
        'failed': 0,
        'total_original_mb': 0,
        'total_compressed_mb': 0,
        'resized_count': 0
    }
    
    results = []
    
    for i, file_info in enumerate(files, 1):
        filename = file_info['filename']
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Ñ–∞–π–ª–æ–≤
        if i % 10 == 0 or i == 1:
            percent = (i / len(files)) * 100
            print(f"   [{i:,}/{len(files):,}] ({percent:.1f}%) - {filename[:50]}...")
        
        result = compress_and_replace_file(ftp, filename, file_info['size_mb'], stats)
        
        if result:
            results.append(result)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å FTP
        if i % 10 == 0:
            time.sleep(0.5)
    
    ftp.quit()
    
    # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–ò –°–ñ–ê–¢–ò–Ø")
    print("=" * 80)
    
    saved_mb = stats['total_original_mb'] - stats['total_compressed_mb']
    compression_percent = (saved_mb / stats['total_original_mb'] * 100) if stats['total_original_mb'] > 0 else 0
    
    print(f"\n‚úÖ –£–°–ü–ï–®–ù–û:")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {stats['processed']:,}")
    print(f"   –ò–∑ –Ω–∏—Ö —Å —Ä–µ—Å–∞–π–∑–æ–º: {stats['resized_count']:,}")
    
    if stats['failed'] > 0:
        print(f"\n‚ùå –û–®–ò–ë–û–ö:")
        print(f"   –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {stats['failed']:,}")
    
    print(f"\nüíæ –≠–ö–û–ù–û–ú–ò–Ø –ú–ï–°–¢–ê:")
    print(f"   –ë—ã–ª–æ: {stats['total_original_mb']:.2f} MB ({stats['total_original_mb']/1024:.2f} GB)")
    print(f"   –°—Ç–∞–ª–æ: {stats['total_compressed_mb']:.2f} MB ({stats['total_compressed_mb']/1024:.2f} GB)")
    print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_mb:.2f} MB ({saved_mb/1024:.2f} GB)")
    print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {compression_percent:.1f}%")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    if results:
        csv_file = 'COMPRESSION_RESULTS.csv'
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {csv_file}")
        
        with open(csv_file, 'w', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=[
                'filename', 'new_filename', 
                'original_size_mb', 'compressed_size_mb',
                'compression_ratio', 'original_dimensions', 'new_dimensions', 'resized'
            ])
            writer.writeheader()
            writer.writerows(results)
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(results):,} –∑–∞–ø–∏—Å–µ–π")
    
    print("\n" + "=" * 80)
    print("‚úÖ –°–ñ–ê–¢–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 80)
    
    print(f"\nüìä –°—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—è –Ω–∞ —Ñ–∞–π–ª: {(saved_mb / stats['processed'] if stats['processed'] > 0 else 0):.2f} MB")
    print(f"üìä –°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {compression_percent:.1f}%")


if __name__ == '__main__':
    main()

