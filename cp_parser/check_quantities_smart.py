#!/usr/bin/env python3
"""
–£–ú–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ä–∞–∂–µ–π Template 4
–£—á–∏—Ç—ã–≤–∞–µ—Ç —á—Ç–æ –≤ CSV –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏—Ä–∞–∂–µ–π –∏–¥—É—Ç –ø–æ–¥—Ä—è–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
"""

import sys
from pathlib import Path
sys.path.insert(0, str(Path.cwd()))

from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text
import os
import csv as csv_lib
from datetime import datetime
import time
from collections import defaultdict

# Railway DB
os.environ['USE_RAILWAY_DB'] = 'true'

def extract_all_quantities_from_product_group(csv_path, start_row):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –í–°–ï —Ç–∏—Ä–∞–∂–∏ –∏–∑ –≥—Ä—É–ø–ø—ã —Å—Ç—Ä–æ–∫ —Ç–æ–≤–∞—Ä–∞
    (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º + —Å–ª–µ–¥—É—é—â–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
    """
    try:
        with open(csv_path, 'r', encoding='utf-8') as f:
            reader = csv_lib.reader(f)
            rows = list(reader)
            
            quantities = []
            current_row = start_row - 1  # 0-based index
            
            # –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è –∏–ª–∏ –Ω–µ –≤—Å—Ç—Ä–µ—Ç–∏–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            while current_row < len(rows):
                row = rows[current_row]
                
                # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ < 5, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if len(row) <= 4:
                    break
                
                # –ö–æ–ª–æ–Ω–∫–∞ B (index 1) - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                # –ö–æ–ª–æ–Ω–∫–∞ E (index 4) - —Ç–∏—Ä–∞–∂
                product_name = row[1].strip() if len(row) > 1 else ''
                qty_str = row[4].strip().replace(' ', '').replace(',', '') if len(row) > 4 else ''
                
                # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å—Ç—å –∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–Ω–∞—á–∏—Ç –Ω–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                if current_row > start_row - 1 and product_name:
                    break
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏—Ä–∞–∂
                if qty_str and qty_str.isdigit():
                    quantities.append(int(qty_str))
                
                current_row += 1
                
                # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (—Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º) - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–µ—Ç —Ç–∏—Ä–∞–∂–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if current_row > start_row and not qty_str:
                    break
            
            return quantities
            
    except Exception as e:
        return []

def verify_project(db, project_id, csv_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ç–∏—Ä–∞–∂–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∏—Ä–∞–∂–µ–π"""
    with db.get_session() as session:
        # –ë–µ—Ä–µ–º –í–°–ï price_offers
        products = session.execute(text("""
            SELECT 
                pr.project_name,
                pr.google_sheets_url,
                p.id, p.name, p.row_number,
                po.id as offer_id, po.quantity, po.route
            FROM products p
            INNER JOIN price_offers po ON p.id = po.product_id
            INNER JOIN projects pr ON p.project_id = pr.id
            WHERE p.project_id = :pid
            ORDER BY p.row_number, po.quantity, po.route
        """), {'pid': project_id}).fetchall()
        
        if not products:
            return None
        
        results = []
        checked_rows = {}  # row_number -> list of quantities
        project_name = products[0].project_name
        project_url = products[0].google_sheets_url
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ñ—Ñ–µ—Ä—ã –ø–æ —Ç–æ–≤–∞—Ä—É (–ø–æ row_number)
        products_by_row = defaultdict(list)
        for prod in products:
            products_by_row[prod.row_number].append(prod)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É —Ç–æ–≤–∞—Ä–æ–≤
        for row_num, prods in products_by_row.items():
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ç–∏—Ä–∞–∂–∏ –∏–∑ CSV –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
            if row_num not in checked_rows:
                checked_rows[row_num] = extract_all_quantities_from_product_group(csv_path, row_num)
            
            csv_quantities = checked_rows[row_num]
            
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ quantity –∏–∑ –ë–î –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            db_quantities = sorted(set(int(p.quantity) for p in prods))
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∂–¥—ã–π –æ—Ñ—Ñ–µ—Ä —Å CSV —Ç–∏—Ä–∞–∂–æ–º
            for prod in prods:
                db_qty = int(prod.quantity)
                
                # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π CSV —Ç–∏—Ä–∞–∂
                csv_qty = None
                is_x10 = False
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if db_qty in csv_quantities:
                    csv_qty = db_qty
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º x10 –æ—à–∏–±–∫—É
                elif db_qty // 10 in csv_quantities and db_qty % 10 == 0:
                    csv_qty = db_qty // 10
                    is_x10 = True
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –±–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–π –∏–ª–∏ None
                else:
                    # –ò—â–µ–º —Å—Ä–µ–¥–∏ CSV —Ç–∏—Ä–∞–∂–µ–π —É–º–Ω–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞ 10
                    for cq in csv_quantities:
                        if cq * 10 == db_qty:
                            csv_qty = cq
                            is_x10 = True
                            break
                
                results.append({
                    'offer_id': prod.offer_id,
                    'product_id': prod.id,
                    'product_name': prod.name,
                    'row': row_num,
                    'csv_qty': csv_qty,
                    'db_qty': db_qty,
                    'route': prod.route,
                    'is_x10': is_x10,
                    'csv_all_qtys': csv_quantities  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                })
        
        x10_count = sum(1 for r in results if r['is_x10'])
        
        return {
            'id': project_id,
            'name': project_name,
            'url': project_url,
            'total': len(results),
            'x10': x10_count,
            'results': results
        }

def main():
    print("="*80, flush=True)
    print("üîç –£–ú–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –¢–ò–†–ê–ñ–ï–ô (—É—á–∏—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∏—Ä–∞–∂–∏)", flush=True)
    print("="*80, flush=True)
    
    csv_dir = Path('verification_csv_all')
    csv_files = list(csv_dir.glob('proj_*.csv'))
    
    if not csv_files:
        print("‚ùå –ù–µ—Ç CSV —Ñ–∞–π–ª–æ–≤", flush=True)
        return
    
    print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ CSV: {len(csv_files)}", flush=True)
    print("üìä –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –ë–î...", flush=True)
    
    db = PostgreSQLManager()
    
    print("üöÄ –ù–ê–ß–ò–ù–ê–Æ –ü–†–û–í–ï–†–ö–£...\n", flush=True)
    
    all_results = []
    timestamp = datetime.now().strftime("%Y%m%d_%H%M")
    start_time = time.time()
    processed = 0
    failed = 0
    total_x10_errors = 0
    
    for i, csv_file in enumerate(csv_files, 1):
        project_id = int(csv_file.stem.replace('proj_', ''))
        
        try:
            result = verify_project(db, project_id, csv_file)
            
            if result:
                processed += 1
                total_x10_errors += result['x10']
                all_results.append(result)
            else:
                failed += 1
            
            if i % 100 == 0:
                elapsed = time.time() - start_time
                avg_time = elapsed / i
                remaining = (len(csv_files) - i) * avg_time / 60
                
                print(f"‚è±Ô∏è  {i}/{len(csv_files)} ({i*100//len(csv_files)}%) | "
                      f"–û—à–∏–±–æ–∫ x10: {total_x10_errors} | "
                      f"–û—Å—Ç–∞–ª–æ—Å—å: ~{int(remaining)} –º–∏–Ω", flush=True)
        
        except Exception as e:
            failed += 1
            if i <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –æ—à–∏–±–∫–∏
                print(f"‚ùå –ü—Ä–æ–µ–∫—Ç {project_id}: {e}", flush=True)
            continue
    
    # –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
    print("\n" + "="*80, flush=True)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢", flush=True)
    print("="*80, flush=True)
    print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {processed:,}", flush=True)
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed:,}", flush=True)
    
    if processed > 0:
        total_offers = sum(r['total'] for r in all_results)
        total_x10 = sum(r['x10'] for r in all_results)
        percent = (total_x10 / total_offers * 100) if total_offers > 0 else 0
        
        print(f"\n‚ùå –û–®–ò–ë–û–ö x10: {total_x10:,} –∏–∑ {total_offers:,} ({percent:.1f}%)", flush=True)
        
        # –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        full_report = f"–ü–†–û–í–ï–†–ö–ê_SMART_{timestamp}.csv"
        with open(full_report, 'w', encoding='utf-8', newline='') as f:
            writer = csv_lib.writer(f)
            writer.writerow(['ID_–ü—Ä–æ–µ–∫—Ç–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ', 'ID_–¢–æ–≤–∞—Ä–∞', 'ID_–û—Ñ—Ñ–µ—Ä–∞', 
                           '–¢–æ–≤–∞—Ä', '–°—Ç—Ä–æ–∫–∞', '–¢–∏—Ä–∞–∂_CSV', '–¢–∏—Ä–∞–∂_–ë–î', 
                           '–ú–∞—Ä—à—Ä—É—Ç', '–û—à–∏–±–∫–∞_x10', '–í—Å–µ_CSV_–¢–∏—Ä–∞–∂–∏', 'URL'])
            
            for proj in all_results:
                for res in proj['results']:
                    writer.writerow([
                        proj['id'],
                        proj['name'],
                        res['product_id'],
                        res['offer_id'],
                        res['product_name'],
                        res['row'],
                        res['csv_qty'],
                        res['db_qty'],
                        res['route'],
                        '–î–ê' if res['is_x10'] else '–ù–ï–¢',
                        ', '.join(map(str, res['csv_all_qtys'])),
                        proj['url']
                    ])
        
        print(f"‚úÖ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: {full_report}", flush=True)
        
        # –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
        if total_x10 > 0:
            errors_report = f"–ò–°–ü–†–ê–í–ò–¢–¨_SMART_{timestamp}.csv"
            with open(errors_report, 'w', encoding='utf-8', newline='') as f:
                writer = csv_lib.writer(f)
                writer.writerow(['ID_–û—Ñ—Ñ–µ—Ä–∞', 'ID_–ü—Ä–æ–µ–∫—Ç–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ', 
                               'ID_–¢–æ–≤–∞—Ä–∞', '–¢–æ–≤–∞—Ä', '–°—Ç—Ä–æ–∫–∞', '–¢–∏—Ä–∞–∂_CSV', 
                               '–¢–∏—Ä–∞–∂_–ë–î', '–ù–æ–≤—ã–π_–¢–∏—Ä–∞–∂', '–ú–∞—Ä—à—Ä—É—Ç', 'URL'])
                
                for proj in all_results:
                    for res in proj['results']:
                        if res['is_x10']:
                            new_qty = res['db_qty'] // 10
                            writer.writerow([
                                res['offer_id'],
                                proj['id'],
                                proj['name'],
                                res['product_id'],
                                res['product_name'],
                                res['row'],
                                res['csv_qty'],
                                res['db_qty'],
                                new_qty,
                                res['route'],
                                proj['url']
                            ])
            
            print(f"‚úÖ –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {errors_report} ({total_x10} –æ—Ñ—Ñ–µ—Ä–æ–≤)", flush=True)
            
            # –ü—Ä–æ–µ–∫—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏
            projects_with_errors = [p for p in all_results if p['x10'] > 0]
            projects_report = f"–ü–†–û–ï–ö–¢–´_SMART_{timestamp}.csv"
            with open(projects_report, 'w', encoding='utf-8', newline='') as f:
                writer = csv_lib.writer(f)
                writer.writerow(['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–û—à–∏–±–æ–∫_x10', '–í—Å–µ–≥–æ', '%', 'URL'])
                
                for proj in sorted(projects_with_errors, key=lambda x: x['x10'], reverse=True):
                    percent_proj = (proj['x10'] / proj['total'] * 100) if proj['total'] > 0 else 0
                    writer.writerow([
                        proj['id'],
                        proj['name'],
                        proj['x10'],
                        proj['total'],
                        f"{percent_proj:.1f}%",
                        proj['url']
                    ])
            
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç—ã: {projects_report} ({len(projects_with_errors)})", flush=True)
    
    elapsed_total = time.time() - start_time
    print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è: {int(elapsed_total/60)} –º–∏–Ω {int(elapsed_total%60)} —Å–µ–∫", flush=True)
    print("="*80, flush=True)

if __name__ == '__main__':
    main()

