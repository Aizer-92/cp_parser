#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏—Ä–∞–∂–µ–π
"""

import sys
from pathlib import Path
sys.path.insert(0, str(Path.cwd()))

import json
import gspread
from google.oauth2.service_account import Credentials
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text
import os
from openpyxl import load_workbook
import csv
from datetime import datetime
import time
import io

# Railway DB
os.environ['USE_RAILWAY_DB'] = 'true'

def download_excel_gspread(sheet_id, output_path):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —á–µ—Ä–µ–∑ gspread API"""
    try:
        scope = [
            'https://www.googleapis.com/auth/spreadsheets.readonly',
            'https://www.googleapis.com/auth/drive.readonly'
        ]
        creds = Credentials.from_service_account_file('service_account.json', scopes=scope)
        client = gspread.authorize(creds)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        spreadsheet = client.open_by_key(sheet_id)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ Excel
        export_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=xlsx"
        
        import requests
        response = requests.get(export_url, headers={'Authorization': f'Bearer {creds.token}'})
        
        if response.status_code == 200:
            with open(output_path, 'wb') as f:
                f.write(response.content)
            return True
        else:
            return False
            
    except Exception as e:
        print(f"  ‚ùå {str(e)[:50]}")
        return False

def extract_quantity_from_excel(excel_path, row_number):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏—Ä–∞–∂ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ E"""
    try:
        wb = load_workbook(excel_path, data_only=True, read_only=True)
        ws = wb.active
        
        cell_value = ws.cell(row=row_number, column=5).value
        
        if cell_value is None:
            return None
            
        try:
            return int(float(str(cell_value).replace(',', '').replace(' ', '')))
        except:
            return str(cell_value)
            
    except Exception as e:
        return None

def verify_project(project_data, db, temp_dir):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–µ–∫—Ç"""
    project_id = project_data['id']
    sheet_id = project_data['sheet_id']
    
    print(f"\n{'='*70}")
    print(f"üîç ID {project_id}: {project_data['name'][:55]}")
    
    excel_path = temp_dir / f"proj_{project_id}.xlsx"
    print(f"üì• –°–∫–∞—á–∏–≤–∞—é...", end=' ', flush=True)
    
    if not download_excel_gspread(sheet_id, excel_path):
        return None
    
    print(f"‚úÖ {excel_path.stat().st_size/1024:.0f} KB")
    
    with db.get_session() as session:
        products = session.execute(text("""
            SELECT 
                p.id, p.name, p.row_number,
                po.quantity, po.route
            FROM products p
            INNER JOIN price_offers po ON p.id = po.product_id
            WHERE p.project_id = :pid
            AND po.quantity >= 300
            AND po.quantity % 10 = 0
            ORDER BY p.row_number
        """), {'pid': project_id}).fetchall()
        
        if not products:
            print(f"‚ö†Ô∏è  –ù–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            return None
        
        print(f"üìä –ü—Ä–æ–≤–µ—Ä—è—é {len(products)} –∑–∞–ø–∏—Å–µ–π...")
        
        results = []
        checked_rows = {}
        
        for prod in products:
            row_num = prod.row_number
            
            if row_num not in checked_rows:
                checked_rows[row_num] = extract_quantity_from_excel(excel_path, row_num)
            
            excel_qty = checked_rows[row_num]
            db_qty = int(prod.quantity)
            
            is_x10 = False
            if excel_qty and isinstance(excel_qty, int) and excel_qty * 10 == db_qty:
                is_x10 = True
            
            results.append({
                'product_id': prod.id,
                'product_name': prod.name,
                'row': row_num,
                'excel': excel_qty,
                'db': db_qty,
                'route': prod.route,
                'is_x10': is_x10
            })
        
        x10_count = sum(1 for r in results if r['is_x10'])
        ok_count = sum(1 for r in results if r['excel'] == r['db'])
        
        print(f"  ‚ùå x10: {x10_count}/{len(results)} ({x10_count/len(results)*100:.0f}%)")
        print(f"  ‚úÖ OK: {ok_count}/{len(results)} ({ok_count/len(results)*100:.0f}%)")
        
        if x10_count > 0:
            print(f"  –ü—Ä–∏–º–µ—Ä—ã:")
            shown = 0
            for r in results:
                if r['is_x10'] and shown < 2:
                    print(f"    –†{r['row']}: {r['excel']} ‚Üí {r['db']}")
                    shown += 1
        
        return {
            'id': project_id,
            'name': project_data['name'],
            'url': project_data['url'],
            'total': len(results),
            'x10': x10_count,
            'ok': ok_count,
            'results': results
        }

def main():
    print("="*70)
    print("üîç –ê–í–¢–û–ü–†–û–í–ï–†–ö–ê –¢–ò–†–ê–ñ–ï–ô Template 4")
    print("="*70)
    
    with open('projects_to_verify.json', 'r', encoding='utf-8') as f:
        projects = json.load(f)
    
    print(f"\nüìã –ü—Ä–æ–≤–µ—Ä—è—é –≤—Å–µ {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤\n")
    
    temp_dir = Path('temp_verification')
    temp_dir.mkdir(exist_ok=True)
    
    db = PostgreSQLManager()
    all_results = []
    
    for i, proj in enumerate(projects, 1):
        print(f"\n{'#'*70}")
        print(f"# {i}/{len(projects)}")
        
        result = verify_project(proj, db, temp_dir)
        if result:
            all_results.append(result)
        
        time.sleep(0.5)
    
    # –ò—Ç–æ–≥
    print("\n\n" + "="*70)
    print("üìä –ò–¢–û–ì")
    print("="*70)
    
    if not all_results:
        print("\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å")
        return
    
    total_x10 = sum(r['x10'] for r in all_results)
    total_rec = sum(r['total'] for r in all_results)
    
    print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(all_results)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"üìä –ó–∞–ø–∏—Å–µ–π: {total_rec:,}")
    print(f"‚ùå –û—à–∏–±–æ–∫ x10: {total_x10:,} ({total_x10/total_rec*100:.1f}%)")
    
    print(f"\nüìã –ü–û –ü–†–û–ï–ö–¢–ê–ú:")
    for r in all_results:
        pct = r['x10']/r['total']*100 if r['total'] > 0 else 0
        ico = "‚ùå" if r['x10'] > 0 else "‚úÖ"
        print(f"{ico} ID {r['id']}: {r['x10']}/{r['total']} ({pct:.0f}%) - {r['name'][:45]}")
    
    # CSV
    csv_path = Path(f"–ê–í–¢–û–ü–†–û–í–ï–†–ö–ê_{datetime.now().strftime('%Y%m%d_%H%M')}.csv")
    
    with open(csv_path, 'w', newline='', encoding='utf-8-sig') as f:
        writer = csv.writer(f)
        writer.writerow([
            'ID_–ü—Ä–æ–µ–∫—Ç–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ', 'ID_–¢–æ–≤–∞—Ä–∞', '–¢–æ–≤–∞—Ä',
            '–°—Ç—Ä–æ–∫–∞', '–¢–∏—Ä–∞–∂_Excel', '–¢–∏—Ä–∞–∂_–ë–î', '–ú–∞—Ä—à—Ä—É—Ç', '–û—à–∏–±–∫–∞_x10'
        ])
        
        for proj in all_results:
            for r in proj['results']:
                writer.writerow([
                    proj['id'], proj['name'],
                    r['product_id'], r['product_name'],
                    r['row'], r['excel'], r['db'],
                    r['route'], '–î–ê' if r['is_x10'] else '–ù–ï–¢'
                ])
    
    print(f"\nüíæ –û—Ç—á–µ—Ç: {csv_path}")
    
    # –í—ã–≤–æ–¥: –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å
    if total_x10 > total_rec * 0.5:  # –ï—Å–ª–∏ >50% –æ—à–∏–±–æ–∫
        print(f"\nüö® –ö–†–ò–¢–ò–ß–ù–û: {total_x10/total_rec*100:.0f}% –æ—à–∏–±–æ–∫ x10!")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∞—Å—Å–æ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (√∑10)")
    
    print("="*70)

if __name__ == '__main__':
    main()

