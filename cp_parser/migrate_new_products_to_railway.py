#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ 97 pending –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ Railway PostgreSQL
–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:
- 910 —Ç–æ–≤–∞—Ä–æ–≤
- 2,583 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- 6,618 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—É–∂–µ –Ω–∞ –æ–±–ª–∞–∫–µ)
"""

import sys
from pathlib import Path
import psycopg2
from psycopg2.extras import RealDictCursor
from sqlalchemy import text
from datetime import datetime
import re
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

sys.path.insert(0, str(Path(__file__).parent))
from database.postgresql_manager import PostgreSQLManager

# Railway PostgreSQL URL
RAILWAY_POSTGRESQL_URL = "postgresql://postgres:wpqIxsBFYwmaNBFmCtBahhIMVSSskeiB@centerbeam.proxy.rlwy.net:26590/railway"

class NewProductsMigrator:
    """–ú–∏–≥—Ä–∞—Ç–æ—Ä –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ pending –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ Railway"""
    
    def __init__(self):
        self.local_db = PostgreSQLManager()
        self.railway_url = RAILWAY_POSTGRESQL_URL
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ pending –ø—Ä–æ–µ–∫—Ç–æ–≤
        self.project_ids = self._get_pending_project_ids()
        
        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {len(self.project_ids)}")
        logger.info(f"üåê Railway URL: {self.railway_url}")
    
    def _get_pending_project_ids(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ project_id –∏–∑ valid_files_list.txt (272 –ø—Ä–æ–µ–∫—Ç–∞)"""
        valid_list = Path('valid_files_list.txt')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –í–°–ï–• 272 –ø—Ä–æ–µ–∫—Ç–æ–≤
        if not valid_list.exists():
            raise FileNotFoundError("‚ùå –§–∞–π–ª valid_files_list.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        with open(valid_list, 'r') as f:
            files = [line.strip() for line in f if line.strip()]
        
        project_ids = []
        for filename in files:
            match = re.search(r'project_(\d+)_', filename)
            if match:
                project_ids.append(int(match.group(1)))
        
        return project_ids
    
    def test_railway_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway PostgreSQL"""
        logger.info("üîå –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway...")
        
        try:
            conn = psycopg2.connect(self.railway_url)
            cursor = conn.cursor()
            cursor.execute("SELECT version();")
            version = cursor.fetchone()
            logger.info(f"‚úÖ Railway PostgreSQL: {version[0][:50]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            cursor.execute("""
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = 'public' 
                ORDER BY table_name;
            """)
            tables = cursor.fetchall()
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            
            conn.close()
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway: {e}")
            return False
    
    def get_local_stats(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"""
        logger.info("üìä –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î...")
        
        with self.local_db.get_session() as session:
            placeholders = ','.join([f':{i}' for i in range(len(self.project_ids))])
            params = {str(i): pid for i, pid in enumerate(self.project_ids)}
            
            # –¢–æ–≤–∞—Ä—ã
            products_count = session.execute(text(f"""
                SELECT COUNT(*) FROM products WHERE project_id IN ({placeholders})
            """), params).scalar()
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            offers_count = session.execute(text(f"""
                SELECT COUNT(*) FROM price_offers po
                JOIN products p ON po.product_id = p.id
                WHERE p.project_id IN ({placeholders})
            """), params).scalar()
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images_count = session.execute(text(f"""
                SELECT COUNT(*) FROM product_images pi
                JOIN products p ON pi.product_id = p.id
                WHERE p.project_id IN ({placeholders})
            """), params).scalar()
            
            # –ü—Ä–æ–µ–∫—Ç—ã
            projects_count = session.execute(text(f"""
                SELECT COUNT(*) FROM projects WHERE id IN ({placeholders})
            """), params).scalar()
            
            return {
                'projects': projects_count,
                'products': products_count,
                'offers': offers_count,
                'images': images_count
            }
    
    def migrate_projects(self, railway_conn):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã"""
        logger.info("üì¶ –ú–∏–≥—Ä–∏—Ä—É—é –ø—Ä–æ–µ–∫—Ç—ã...")
        
        railway_cursor = railway_conn.cursor()
        migrated = 0
        skipped = 0
        
        with self.local_db.get_session() as local_session:
            placeholders = ','.join([f':{i}' for i in range(len(self.project_ids))])
            params = {str(i): pid for i, pid in enumerate(self.project_ids)}
            
            projects = local_session.execute(text(f"""
                SELECT id, table_id, project_name, google_sheets_url, parsing_status, 
                       parsed_at, created_at, updated_at
                FROM projects WHERE id IN ({placeholders})
            """), params).fetchall()
            
            for project in projects:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç
                    railway_cursor.execute("""
                        SELECT id FROM projects WHERE id = %s
                    """, (project[0],))
                    
                    if railway_cursor.fetchone():
                        skipped += 1
                        continue
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è)
                    railway_cursor.execute("""
                        INSERT INTO projects (
                            id, table_id, project_name, google_sheets_url, parsing_status, 
                            parsed_at, created_at, updated_at
                        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                    """, (
                        project[0], project[1], project[2], project[3], project[4],
                        project[5], project[6], project[7]
                    ))
                    migrated += 1
                    
                    if migrated % 10 == 0:
                        railway_conn.commit()
                        logger.info(f"   –ü—Ä–æ–µ–∫—Ç–æ–≤: {migrated}/{len(projects)}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ {project[0]}: {e}")
            
            railway_conn.commit()
        
        logger.info(f"‚úÖ –ü—Ä–æ–µ–∫—Ç—ã: {migrated} –Ω–æ–≤—ã—Ö, {skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return migrated, skipped
    
    def migrate_products(self, railway_conn):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã"""
        logger.info("üì¶ –ú–∏–≥—Ä–∏—Ä—É—é —Ç–æ–≤–∞—Ä—ã...")
        
        railway_cursor = railway_conn.cursor()
        migrated = 0
        skipped = 0
        
        with self.local_db.get_session() as local_session:
            placeholders = ','.join([f':{i}' for i in range(len(self.project_ids))])
            params = {str(i): pid for i, pid in enumerate(self.project_ids)}
            
            products = local_session.execute(text(f"""
                SELECT id, project_id, name, description, custom_field,
                       created_at, updated_at
                FROM products WHERE project_id IN ({placeholders})
                ORDER BY id
            """), params).fetchall()
            
            logger.info(f"   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {len(products)}")
            
            for product in products:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
                    railway_cursor.execute("""
                        SELECT id FROM products WHERE id = %s
                    """, (product[0],))
                    
                    if railway_cursor.fetchone():
                        skipped += 1
                        continue
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
                    railway_cursor.execute("""
                        INSERT INTO products (
                            id, project_id, name, description, custom_field,
                            created_at, updated_at
                        ) VALUES (%s, %s, %s, %s, %s, %s, %s)
                    """, (
                        product[0], product[1], product[2], product[3],
                        product[4], product[5], product[6]
                    ))
                    migrated += 1
                    
                    if migrated % 100 == 0:
                        railway_conn.commit()
                        logger.info(f"   –¢–æ–≤–∞—Ä–æ–≤: {migrated}/{len(products)}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ {product[0]}: {e}")
            
            railway_conn.commit()
        
        logger.info(f"‚úÖ –¢–æ–≤–∞—Ä—ã: {migrated} –Ω–æ–≤—ã—Ö, {skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return migrated, skipped
    
    def migrate_price_offers(self, railway_conn):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        logger.info("üí∞ –ú–∏–≥—Ä–∏—Ä—É—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è...")
        
        railway_cursor = railway_conn.cursor()
        migrated = 0
        skipped = 0
        
        with self.local_db.get_session() as local_session:
            placeholders = ','.join([f':{i}' for i in range(len(self.project_ids))])
            params = {str(i): pid for i, pid in enumerate(self.project_ids)}
            
            offers = local_session.execute(text(f"""
                SELECT po.id, po.product_id, po.quantity, po.price_usd, po.price_rub,
                       po.route, po.delivery_time_days, po.created_at, po.updated_at
                FROM price_offers po
                JOIN products p ON po.product_id = p.id
                WHERE p.project_id IN ({placeholders})
                ORDER BY po.id
            """), params).fetchall()
            
            logger.info(f"   –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {len(offers)}")
            
            for offer in offers:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                    railway_cursor.execute("""
                        SELECT id FROM price_offers WHERE id = %s
                    """, (offer[0],))
                    
                    if railway_cursor.fetchone():
                        skipped += 1
                        continue
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                    railway_cursor.execute("""
                        INSERT INTO price_offers (
                            id, product_id, quantity, price_usd, price_rub,
                            route, delivery_time_days, created_at, updated_at
                        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                    """, (
                        offer[0], offer[1], offer[2], offer[3], offer[4],
                        offer[5], offer[6], offer[7], offer[8]
                    ))
                    migrated += 1
                    
                    if migrated % 500 == 0:
                        railway_conn.commit()
                        logger.info(f"   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {migrated}/{len(offers)}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {offer[0]}: {e}")
            
            railway_conn.commit()
        
        logger.info(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {migrated} –Ω–æ–≤—ã—Ö, {skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return migrated, skipped
    
    def migrate_product_images(self, railway_conn):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, —Ñ–∞–π–ª—ã —É–∂–µ –Ω–∞ –æ–±–ª–∞–∫–µ)"""
        logger.info("üñºÔ∏è  –ú–∏–≥—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        railway_cursor = railway_conn.cursor()
        migrated = 0
        skipped = 0
        
        with self.local_db.get_session() as local_session:
            placeholders = ','.join([f':{i}' for i in range(len(self.project_ids))])
            params = {str(i): pid for i, pid in enumerate(self.project_ids)}
            
            images = local_session.execute(text(f"""
                SELECT pi.id, pi.product_id, pi.table_id, pi.image_filename,
                       pi.image_url, pi.cell_position, pi.row_number, pi.column_number,
                       pi.created_at, pi.updated_at
                FROM product_images pi
                JOIN products p ON pi.product_id = p.id
                WHERE p.project_id IN ({placeholders})
                ORDER BY pi.id
            """), params).fetchall()
            
            logger.info(f"   –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {len(images)}")
            
            for image in images:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    railway_cursor.execute("""
                        SELECT id FROM product_images WHERE id = %s
                    """, (image[0],))
                    
                    if railway_cursor.fetchone():
                        skipped += 1
                        continue
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    railway_cursor.execute("""
                        INSERT INTO product_images (
                            id, product_id, table_id, image_filename, image_url,
                            cell_position, row_number, column_number,
                            created_at, updated_at
                        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                    """, (
                        image[0], image[1], image[2], image[3], image[4],
                        image[5], image[6], image[7], image[8], image[9]
                    ))
                    migrated += 1
                    
                    if migrated % 1000 == 0:
                        railway_conn.commit()
                        logger.info(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {migrated}/{len(images)}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image[0]}: {e}")
            
            railway_conn.commit()
        
        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {migrated} –Ω–æ–≤—ã—Ö, {skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return migrated, skipped
    
    def run_migration(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
        logger.info("üöÄ –ù–ê–ß–ò–ù–ê–Æ –ú–ò–ì–†–ê–¶–ò–Æ –ù–û–í–´–• –¢–û–í–ê–†–û–í –ù–ê RAILWAY")
        logger.info("=" * 80)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway
        if not self.test_railway_connection():
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway. –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        local_stats = self.get_local_stats()
        logger.info("\nüìä –õ–û–ö–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"   ‚Ä¢ –ü—Ä–æ–µ–∫—Ç—ã: {local_stats['projects']}")
        logger.info(f"   ‚Ä¢ –¢–æ–≤–∞—Ä—ã: {local_stats['products']}")
        logger.info(f"   ‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {local_stats['offers']}")
        logger.info(f"   ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {local_stats['images']}")
        logger.info("")
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Railway
            railway_conn = psycopg2.connect(self.railway_url)
            railway_conn.autocommit = False  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            
            results = {}
            
            # 1. –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã
            results['projects'] = self.migrate_projects(railway_conn)
            
            # 2. –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
            results['products'] = self.migrate_products(railway_conn)
            
            # 3. –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            results['offers'] = self.migrate_price_offers(railway_conn)
            
            # 4. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            results['images'] = self.migrate_product_images(railway_conn)
            
            railway_conn.close()
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logger.info("\n" + "=" * 80)
            logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ò:")
            logger.info("=" * 80)
            logger.info(f"‚úÖ –ü—Ä–æ–µ–∫—Ç—ã: {results['projects'][0]} –Ω–æ–≤—ã—Ö, {results['projects'][1]} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            logger.info(f"‚úÖ –¢–æ–≤–∞—Ä—ã: {results['products'][0]} –Ω–æ–≤—ã—Ö, {results['products'][1]} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            logger.info(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {results['offers'][0]} –Ω–æ–≤—ã—Ö, {results['offers'][1]} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {results['images'][0]} –Ω–æ–≤—ã—Ö, {results['images'][1]} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            logger.info("=" * 80)
            logger.info("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            logger.info(f"üåê Railway URL: {self.railway_url}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "=" * 80)
    print("üöÄ –ú–ò–ì–†–ê–¶–ò–Ø –ù–û–í–´–• –¢–û–í–ê–†–û–í –ù–ê RAILWAY POSTGRESQL")
    print("=" * 80)
    print("\nüì¶ –ß—Ç–æ –±—É–¥–µ—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ:")
    print("   ‚Ä¢ 272 –ø—Ä–æ–µ–∫—Ç–∞")
    print("   ‚Ä¢ 910 —Ç–æ–≤–∞—Ä–æ–≤")
    print("   ‚Ä¢ 2,583 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    print("   ‚Ä¢ 6,618 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, —Ñ–∞–π–ª—ã —É–∂–µ –Ω–∞ FTP)")
    print("\n‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –î—É–±–ª–∏–∫–∞—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    print("\n" + "=" * 80)
    
    try:
        migrator = NewProductsMigrator()
        success = migrator.run_migration()
        
        if success:
            print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("üåê –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ Railway PostgreSQL")
        else:
            print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
            
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        print(traceback.format_exc())

if __name__ == "__main__":
    main()


"""
–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ 97 pending –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ Railway PostgreSQL
–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:
- 910 —Ç–æ–≤–∞—Ä–æ–≤
- 2,583 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- 6,618 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—É–∂–µ –Ω–∞ –æ–±–ª–∞–∫–µ)
"""

import sys
from pathlib import Path
import psycopg2
from psycopg2.extras import RealDictCursor
from sqlalchemy import text
from datetime import datetime
import re
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

sys.path.insert(0, str(Path(__file__).parent))
from database.postgresql_manager import PostgreSQLManager

# Railway PostgreSQL URL
RAILWAY_POSTGRESQL_URL = "postgresql://postgres:wpqIxsBFYwmaNBFmCtBahhIMVSSskeiB@centerbeam.proxy.rlwy.net:26590/railway"

class NewProductsMigrator:
    """–ú–∏–≥—Ä–∞—Ç–æ—Ä –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ pending –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ Railway"""
    
    def __init__(self):
        self.local_db = PostgreSQLManager()
        self.railway_url = RAILWAY_POSTGRESQL_URL
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ pending –ø—Ä–æ–µ–∫—Ç–æ–≤
        self.project_ids = self._get_pending_project_ids()
        
        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {len(self.project_ids)}")
        logger.info(f"üåê Railway URL: {self.railway_url}")
    
    def _get_pending_project_ids(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ project_id –∏–∑ valid_files_list.txt (272 –ø—Ä–æ–µ–∫—Ç–∞)"""
        valid_list = Path('valid_files_list.txt')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –í–°–ï–• 272 –ø—Ä–æ–µ–∫—Ç–æ–≤
        if not valid_list.exists():
            raise FileNotFoundError("‚ùå –§–∞–π–ª valid_files_list.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        with open(valid_list, 'r') as f:
            files = [line.strip() for line in f if line.strip()]
        
        project_ids = []
        for filename in files:
            match = re.search(r'project_(\d+)_', filename)
            if match:
                project_ids.append(int(match.group(1)))
        
        return project_ids
    
    def test_railway_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway PostgreSQL"""
        logger.info("üîå –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway...")
        
        try:
            conn = psycopg2.connect(self.railway_url)
            cursor = conn.cursor()
            cursor.execute("SELECT version();")
            version = cursor.fetchone()
            logger.info(f"‚úÖ Railway PostgreSQL: {version[0][:50]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            cursor.execute("""
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = 'public' 
                ORDER BY table_name;
            """)
            tables = cursor.fetchall()
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            
            conn.close()
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway: {e}")
            return False
    
    def get_local_stats(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"""
        logger.info("üìä –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î...")
        
        with self.local_db.get_session() as session:
            placeholders = ','.join([f':{i}' for i in range(len(self.project_ids))])
            params = {str(i): pid for i, pid in enumerate(self.project_ids)}
            
            # –¢–æ–≤–∞—Ä—ã
            products_count = session.execute(text(f"""
                SELECT COUNT(*) FROM products WHERE project_id IN ({placeholders})
            """), params).scalar()
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            offers_count = session.execute(text(f"""
                SELECT COUNT(*) FROM price_offers po
                JOIN products p ON po.product_id = p.id
                WHERE p.project_id IN ({placeholders})
            """), params).scalar()
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images_count = session.execute(text(f"""
                SELECT COUNT(*) FROM product_images pi
                JOIN products p ON pi.product_id = p.id
                WHERE p.project_id IN ({placeholders})
            """), params).scalar()
            
            # –ü—Ä–æ–µ–∫—Ç—ã
            projects_count = session.execute(text(f"""
                SELECT COUNT(*) FROM projects WHERE id IN ({placeholders})
            """), params).scalar()
            
            return {
                'projects': projects_count,
                'products': products_count,
                'offers': offers_count,
                'images': images_count
            }
    
    def migrate_projects(self, railway_conn):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã"""
        logger.info("üì¶ –ú–∏–≥—Ä–∏—Ä—É—é –ø—Ä–æ–µ–∫—Ç—ã...")
        
        railway_cursor = railway_conn.cursor()
        migrated = 0
        skipped = 0
        
        with self.local_db.get_session() as local_session:
            placeholders = ','.join([f':{i}' for i in range(len(self.project_ids))])
            params = {str(i): pid for i, pid in enumerate(self.project_ids)}
            
            projects = local_session.execute(text(f"""
                SELECT id, table_id, project_name, google_sheets_url, parsing_status, 
                       parsed_at, created_at, updated_at
                FROM projects WHERE id IN ({placeholders})
            """), params).fetchall()
            
            for project in projects:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç
                    railway_cursor.execute("""
                        SELECT id FROM projects WHERE id = %s
                    """, (project[0],))
                    
                    if railway_cursor.fetchone():
                        skipped += 1
                        continue
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è)
                    railway_cursor.execute("""
                        INSERT INTO projects (
                            id, table_id, project_name, google_sheets_url, parsing_status, 
                            parsed_at, created_at, updated_at
                        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                    """, (
                        project[0], project[1], project[2], project[3], project[4],
                        project[5], project[6], project[7]
                    ))
                    migrated += 1
                    
                    if migrated % 10 == 0:
                        railway_conn.commit()
                        logger.info(f"   –ü—Ä–æ–µ–∫—Ç–æ–≤: {migrated}/{len(projects)}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ {project[0]}: {e}")
            
            railway_conn.commit()
        
        logger.info(f"‚úÖ –ü—Ä–æ–µ–∫—Ç—ã: {migrated} –Ω–æ–≤—ã—Ö, {skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return migrated, skipped
    
    def migrate_products(self, railway_conn):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã"""
        logger.info("üì¶ –ú–∏–≥—Ä–∏—Ä—É—é —Ç–æ–≤–∞—Ä—ã...")
        
        railway_cursor = railway_conn.cursor()
        migrated = 0
        skipped = 0
        
        with self.local_db.get_session() as local_session:
            placeholders = ','.join([f':{i}' for i in range(len(self.project_ids))])
            params = {str(i): pid for i, pid in enumerate(self.project_ids)}
            
            products = local_session.execute(text(f"""
                SELECT id, project_id, name, description, custom_field,
                       created_at, updated_at
                FROM products WHERE project_id IN ({placeholders})
                ORDER BY id
            """), params).fetchall()
            
            logger.info(f"   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {len(products)}")
            
            for product in products:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
                    railway_cursor.execute("""
                        SELECT id FROM products WHERE id = %s
                    """, (product[0],))
                    
                    if railway_cursor.fetchone():
                        skipped += 1
                        continue
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
                    railway_cursor.execute("""
                        INSERT INTO products (
                            id, project_id, name, description, custom_field,
                            created_at, updated_at
                        ) VALUES (%s, %s, %s, %s, %s, %s, %s)
                    """, (
                        product[0], product[1], product[2], product[3],
                        product[4], product[5], product[6]
                    ))
                    migrated += 1
                    
                    if migrated % 100 == 0:
                        railway_conn.commit()
                        logger.info(f"   –¢–æ–≤–∞—Ä–æ–≤: {migrated}/{len(products)}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ {product[0]}: {e}")
            
            railway_conn.commit()
        
        logger.info(f"‚úÖ –¢–æ–≤–∞—Ä—ã: {migrated} –Ω–æ–≤—ã—Ö, {skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return migrated, skipped
    
    def migrate_price_offers(self, railway_conn):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        logger.info("üí∞ –ú–∏–≥—Ä–∏—Ä—É—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è...")
        
        railway_cursor = railway_conn.cursor()
        migrated = 0
        skipped = 0
        
        with self.local_db.get_session() as local_session:
            placeholders = ','.join([f':{i}' for i in range(len(self.project_ids))])
            params = {str(i): pid for i, pid in enumerate(self.project_ids)}
            
            offers = local_session.execute(text(f"""
                SELECT po.id, po.product_id, po.quantity, po.price_usd, po.price_rub,
                       po.route, po.delivery_time_days, po.created_at, po.updated_at
                FROM price_offers po
                JOIN products p ON po.product_id = p.id
                WHERE p.project_id IN ({placeholders})
                ORDER BY po.id
            """), params).fetchall()
            
            logger.info(f"   –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {len(offers)}")
            
            for offer in offers:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                    railway_cursor.execute("""
                        SELECT id FROM price_offers WHERE id = %s
                    """, (offer[0],))
                    
                    if railway_cursor.fetchone():
                        skipped += 1
                        continue
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                    railway_cursor.execute("""
                        INSERT INTO price_offers (
                            id, product_id, quantity, price_usd, price_rub,
                            route, delivery_time_days, created_at, updated_at
                        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                    """, (
                        offer[0], offer[1], offer[2], offer[3], offer[4],
                        offer[5], offer[6], offer[7], offer[8]
                    ))
                    migrated += 1
                    
                    if migrated % 500 == 0:
                        railway_conn.commit()
                        logger.info(f"   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {migrated}/{len(offers)}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {offer[0]}: {e}")
            
            railway_conn.commit()
        
        logger.info(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {migrated} –Ω–æ–≤—ã—Ö, {skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return migrated, skipped
    
    def migrate_product_images(self, railway_conn):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, —Ñ–∞–π–ª—ã —É–∂–µ –Ω–∞ –æ–±–ª–∞–∫–µ)"""
        logger.info("üñºÔ∏è  –ú–∏–≥—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        railway_cursor = railway_conn.cursor()
        migrated = 0
        skipped = 0
        
        with self.local_db.get_session() as local_session:
            placeholders = ','.join([f':{i}' for i in range(len(self.project_ids))])
            params = {str(i): pid for i, pid in enumerate(self.project_ids)}
            
            images = local_session.execute(text(f"""
                SELECT pi.id, pi.product_id, pi.table_id, pi.image_filename,
                       pi.image_url, pi.cell_position, pi.row_number, pi.column_number,
                       pi.created_at, pi.updated_at
                FROM product_images pi
                JOIN products p ON pi.product_id = p.id
                WHERE p.project_id IN ({placeholders})
                ORDER BY pi.id
            """), params).fetchall()
            
            logger.info(f"   –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {len(images)}")
            
            for image in images:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    railway_cursor.execute("""
                        SELECT id FROM product_images WHERE id = %s
                    """, (image[0],))
                    
                    if railway_cursor.fetchone():
                        skipped += 1
                        continue
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    railway_cursor.execute("""
                        INSERT INTO product_images (
                            id, product_id, table_id, image_filename, image_url,
                            cell_position, row_number, column_number,
                            created_at, updated_at
                        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                    """, (
                        image[0], image[1], image[2], image[3], image[4],
                        image[5], image[6], image[7], image[8], image[9]
                    ))
                    migrated += 1
                    
                    if migrated % 1000 == 0:
                        railway_conn.commit()
                        logger.info(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {migrated}/{len(images)}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image[0]}: {e}")
            
            railway_conn.commit()
        
        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {migrated} –Ω–æ–≤—ã—Ö, {skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return migrated, skipped
    
    def run_migration(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
        logger.info("üöÄ –ù–ê–ß–ò–ù–ê–Æ –ú–ò–ì–†–ê–¶–ò–Æ –ù–û–í–´–• –¢–û–í–ê–†–û–í –ù–ê RAILWAY")
        logger.info("=" * 80)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway
        if not self.test_railway_connection():
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway. –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        local_stats = self.get_local_stats()
        logger.info("\nüìä –õ–û–ö–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"   ‚Ä¢ –ü—Ä–æ–µ–∫—Ç—ã: {local_stats['projects']}")
        logger.info(f"   ‚Ä¢ –¢–æ–≤–∞—Ä—ã: {local_stats['products']}")
        logger.info(f"   ‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {local_stats['offers']}")
        logger.info(f"   ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {local_stats['images']}")
        logger.info("")
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Railway
            railway_conn = psycopg2.connect(self.railway_url)
            railway_conn.autocommit = False  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            
            results = {}
            
            # 1. –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã
            results['projects'] = self.migrate_projects(railway_conn)
            
            # 2. –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
            results['products'] = self.migrate_products(railway_conn)
            
            # 3. –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            results['offers'] = self.migrate_price_offers(railway_conn)
            
            # 4. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            results['images'] = self.migrate_product_images(railway_conn)
            
            railway_conn.close()
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logger.info("\n" + "=" * 80)
            logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ò:")
            logger.info("=" * 80)
            logger.info(f"‚úÖ –ü—Ä–æ–µ–∫—Ç—ã: {results['projects'][0]} –Ω–æ–≤—ã—Ö, {results['projects'][1]} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            logger.info(f"‚úÖ –¢–æ–≤–∞—Ä—ã: {results['products'][0]} –Ω–æ–≤—ã—Ö, {results['products'][1]} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            logger.info(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {results['offers'][0]} –Ω–æ–≤—ã—Ö, {results['offers'][1]} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {results['images'][0]} –Ω–æ–≤—ã—Ö, {results['images'][1]} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            logger.info("=" * 80)
            logger.info("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            logger.info(f"üåê Railway URL: {self.railway_url}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "=" * 80)
    print("üöÄ –ú–ò–ì–†–ê–¶–ò–Ø –ù–û–í–´–• –¢–û–í–ê–†–û–í –ù–ê RAILWAY POSTGRESQL")
    print("=" * 80)
    print("\nüì¶ –ß—Ç–æ –±—É–¥–µ—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ:")
    print("   ‚Ä¢ 272 –ø—Ä–æ–µ–∫—Ç–∞")
    print("   ‚Ä¢ 910 —Ç–æ–≤–∞—Ä–æ–≤")
    print("   ‚Ä¢ 2,583 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    print("   ‚Ä¢ 6,618 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, —Ñ–∞–π–ª—ã —É–∂–µ –Ω–∞ FTP)")
    print("\n‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –î—É–±–ª–∏–∫–∞—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    print("\n" + "=" * 80)
    
    try:
        migrator = NewProductsMigrator()
        success = migrator.run_migration()
        
        if success:
            print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("üåê –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ Railway PostgreSQL")
        else:
            print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
            
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        print(traceback.format_exc())

if __name__ == "__main__":
    main()

