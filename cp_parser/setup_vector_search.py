#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
–° graceful fallback - –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
"""

from database.postgresql_manager import db_manager
from sqlalchemy import text
import sys

def setup_pgvector():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è pgvector"""
    print("="*80)
    print("–®–ê–ì 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pgvector")
    print("="*80)
    
    with db_manager.get_session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å pgvector
            result = session.execute(text("""
                SELECT * FROM pg_available_extensions WHERE name = 'vector'
            """)).fetchone()
            
            if not result:
                print("‚ö†Ô∏è  pgvector –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
                print("   –ù—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ Railway —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É:")
                print("   CREATE EXTENSION vector;")
                return False
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            session.execute(text("CREATE EXTENSION IF NOT EXISTS vector"))
            session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª–æ—Å—å
            check = session.execute(text("""
                SELECT extname FROM pg_extension WHERE extname = 'vector'
            """)).fetchone()
            
            if check:
                print("‚úÖ pgvector —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                return True
            else:
                print("‚ö†Ô∏è  pgvector –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
                return False
                
        except Exception as e:
            session.rollback()
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ pgvector: {e}")
            print("   –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ø—Ä–æ–µ–∫—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
            return False

def add_embedding_column():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è embeddings"""
    print()
    print("="*80)
    print("–®–ê–ì 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è embeddings")
    print("="*80)
    
    with db_manager.get_session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞
            check = session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'products' 
                AND column_name = 'name_embedding'
            """)).fetchone()
            
            if check:
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ name_embedding —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
            session.execute(text("""
                ALTER TABLE products 
                ADD COLUMN name_embedding vector(1536)
            """))
            session.commit()
            
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ name_embedding –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            return True
            
        except Exception as e:
            session.rollback()
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏: {e}")
            print("   –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ø—Ä–æ–µ–∫—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
            return False

def create_index():
    """–°–æ–∑–¥–∞–Ω–∏–µ HNSW –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    print()
    print("="*80)
    print("–®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
    print("="*80)
    
    with db_manager.get_session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω–¥–µ–∫—Å
            check = session.execute(text("""
                SELECT indexname 
                FROM pg_indexes 
                WHERE indexname = 'products_name_embedding_idx'
            """)).fetchone()
            
            if check:
                print("‚úÖ –ò–Ω–¥–µ–∫—Å products_name_embedding_idx —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True
            
            # –°–æ–∑–¥–∞–µ–º HNSW –∏–Ω–¥–µ–∫—Å
            print("   –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã)...")
            session.execute(text("""
                CREATE INDEX products_name_embedding_idx 
                ON products 
                USING hnsw (name_embedding vector_cosine_ops)
                WITH (m = 16, ef_construction = 64)
            """))
            session.commit()
            
            print("‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω!")
            return True
            
        except Exception as e:
            session.rollback()
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞: {e}")
            print("   –ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
            return False

def check_openai_key():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è OpenAI API –∫–ª—é—á–∞"""
    print()
    print("="*80)
    print("–®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API –∫–ª—é—á–∞")
    print("="*80)
    
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    api_key = os.getenv('OPENAI_API_KEY')
    
    if not api_key:
        print("‚ö†Ô∏è  OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        print("   –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:")
        print("   OPENAI_API_KEY=your_key_here")
        print()
        print("   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è embeddings –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return False
    
    print(f"‚úÖ OPENAI_API_KEY –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
    return True

def main():
    print("\n")
    print("="*80)
    print("–£–°–¢–ê–ù–û–í–ö–ê –í–ï–ö–¢–û–†–ù–û–ì–û –ü–û–ò–°–ö–ê")
    print("="*80)
    print()
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–µ–∫—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ä–∞–Ω—å—à–µ")
    print()
    
    # –®–∞–≥ 1: pgvector
    pgvector_ok = setup_pgvector()
    
    if not pgvector_ok:
        print()
        print("="*80)
        print("–ò–¢–û–ì: –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("="*80)
        print("–ü—Ä–∏—á–∏–Ω–∞: pgvector –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        print("–†–µ—à–µ–Ω–∏–µ: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pgvector –Ω–∞ Railway –≤—Ä—É—á–Ω—É—é")
        print()
        print("–¢–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ä–∞–Ω—å—à–µ ‚úÖ")
        return
    
    # –®–∞–≥ 2: –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è embeddings
    column_ok = add_embedding_column()
    
    if not column_ok:
        print()
        print("="*80)
        print("–ò–¢–û–ì: –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —á–∞—Å—Ç–∏—á–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("="*80)
        print("pgvector —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
        print("–¢–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ä–∞–Ω—å—à–µ ‚úÖ")
        return
    
    # –®–∞–≥ 3: –ò–Ω–¥–µ–∫—Å
    index_ok = create_index()
    
    # –®–∞–≥ 4: OpenAI –∫–ª—é—á
    openai_ok = check_openai_key()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print()
    print("="*80)
    print("–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*80)
    print(f"pgvector: {'‚úÖ' if pgvector_ok else '‚ùå'}")
    print(f"–ö–æ–ª–æ–Ω–∫–∞ name_embedding: {'‚úÖ' if column_ok else '‚ùå'}")
    print(f"HNSW –∏–Ω–¥–µ–∫—Å: {'‚úÖ' if index_ok else '‚ö†Ô∏è  (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'}")
    print(f"OpenAI API –∫–ª—é—á: {'‚úÖ' if openai_ok else '‚ö†Ô∏è  (–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ embeddings)'}")
    print()
    
    if pgvector_ok and column_ok:
        print("üéâ –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print()
        print("–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        if openai_ok:
            print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 generate_embeddings.py")
            print("2. –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        else:
            print("1. –î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ .env")
            print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 generate_embeddings.py")
    else:
        print("‚ö†Ô∏è  –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("–¢–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ä–∞–Ω—å—à–µ ‚úÖ")
    
    print()
    print("="*80)

if __name__ == '__main__':
    main()


