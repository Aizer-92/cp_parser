#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ "–±–ª–æ–∫–Ω–æ—Ç"
"""

import os
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from openai import OpenAI
import httpx

load_dotenv()

GREEN = '\033[92m'
RED = '\033[91m'
BLUE = '\033[94m'
RESET = '\033[0m'

query = "–±–ª–æ–∫–Ω–æ—Ç"
threshold = 0.25

print(f"\n{BLUE}{'=' * 80}{RESET}")
print(f"{BLUE}–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞: '{query}' (–ø–æ—Ä–æ–≥: {threshold}){RESET}")
print(f"{BLUE}{'=' * 80}{RESET}\n")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
vector_db = os.getenv('VECTOR_DATABASE_URL')
openai_key = os.getenv('OPENAI_API_KEY')

engine = create_engine(vector_db, pool_pre_ping=True)
client = OpenAI(api_key=openai_key)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è embedding
response = client.embeddings.create(
    model="text-embedding-3-small",
    input=query,
    timeout=httpx.Timeout(10.0)
)
embedding = response.data[0].embedding

# –ü–æ–∏—Å–∫
query_vector_str = '[' + ','.join(map(str, embedding)) + ']'

with engine.connect() as conn:
    sql_query = f"""
        SELECT 
            product_id,
            product_name,
            1 - (name_embedding <=> '{query_vector_str}'::vector) as similarity
        FROM product_embeddings
        WHERE 1 - (name_embedding <=> '{query_vector_str}'::vector) >= {threshold}
        ORDER BY name_embedding <=> '{query_vector_str}'::vector
        LIMIT 100
    """
    results = conn.execute(text(sql_query)).fetchall()

print(f"{GREEN}‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ç–æ–≤–∞—Ä–æ–≤{RESET}\n")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
similarities = [r[2] for r in results]
avg_sim = sum(similarities) / len(similarities)
min_sim = min(similarities)
max_sim = max(similarities)

print(f"{BLUE}üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:{RESET}")
print(f"   –ú–∏–Ω–∏–º—É–º: {min_sim:.3f}")
print(f"   –°—Ä–µ–¥–Ω–∏–π: {avg_sim:.3f}")
print(f"   –ú–∞–∫—Å–∏–º—É–º: {max_sim:.3f}\n")

# –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
print(f"{BLUE}üìù –í–°–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:{RESET}\n")

for i, (pid, pname, sim) in enumerate(results, 1):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–æ –±–ª–æ–∫–Ω–æ—Ç/–µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫ –∏–ª–∏ –±—Ä–µ–ª–æ–∫/–º—É—Å–æ—Ä
    is_notebook = any(word in pname.lower() for word in [
        '–±–ª–æ–∫–Ω–æ—Ç', '–µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫', '–∑–∞–ø–∏—Å–Ω', 'notepad', 'notebook', 'diary', 'planner'
    ])
    
    is_keychain = any(word in pname.lower() for word in [
        '–±—Ä–µ–ª–æ–∫', '–±—Ä–µ–ª–∫', 'keychain', 'key ring'
    ])
    
    if is_notebook:
        color = GREEN
        emoji = "‚úÖ"
        label = "–ü–†–ê–í–ò–õ–¨–ù–û"
    elif is_keychain:
        color = RED
        emoji = "‚ùå"
        label = "–ë–†–ï–õ–û–ö (–ú–£–°–û–†!)"
    else:
        color = BLUE
        emoji = "‚ùì"
        label = "–î–†–£–ì–û–ï"
    
    print(f"   {i:3d}. {color}[{sim:.3f}] {emoji} {label:20s} {pname}{RESET}")

# –ü–æ–¥—Å—á–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
notebooks = sum(1 for r in results if any(word in r[1].lower() for word in [
    '–±–ª–æ–∫–Ω–æ—Ç', '–µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫', '–∑–∞–ø–∏—Å–Ω', 'notepad', 'notebook', 'diary', 'planner'
]))

keychains = sum(1 for r in results if any(word in r[1].lower() for word in [
    '–±—Ä–µ–ª–æ–∫', '–±—Ä–µ–ª–∫', 'keychain', 'key ring'
]))

other = len(results) - notebooks - keychains

print(f"\n{BLUE}üìä –ò–¢–û–ì–û:{RESET}")
print(f"   {GREEN}‚úÖ –ë–ª–æ–∫–Ω–æ—Ç—ã/–ï–∂–µ–¥–Ω–µ–≤–Ω–∏–∫–∏: {notebooks} ({notebooks/len(results)*100:.1f}%){RESET}")
print(f"   {RED}‚ùå –ë—Ä–µ–ª–æ–∫–∏ (–º—É—Å–æ—Ä): {keychains} ({keychains/len(results)*100:.1f}%){RESET}")
print(f"   ‚ùì –î—Ä—É–≥–æ–µ: {other} ({other/len(results)*100:.1f}%)")

# –ê–Ω–∞–ª–∏–∑ –±—Ä–µ–ª–æ–∫–æ–≤
if keychains > 0:
    print(f"\n{RED}üîç –ê–ù–ê–õ–ò–ó –ë–†–ï–õ–û–ö–û–í:{RESET}")
    keychains_list = [r for r in results if any(word in r[1].lower() for word in [
        '–±—Ä–µ–ª–æ–∫', '–±—Ä–µ–ª–∫', 'keychain', 'key ring'
    ])]
    
    for pid, pname, sim in keychains_list[:10]:
        print(f"   [{sim:.3f}] {pname}")
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π similarity –±—Ä–µ–ª–æ–∫–∞
    min_keychain_sim = min(r[2] for r in keychains_list)
    print(f"\n   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π similarity –±—Ä–µ–ª–æ–∫–∞: {min_keychain_sim:.3f}")
    print(f"   {GREEN}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø–æ–¥–Ω—è—Ç—å –ø–æ—Ä–æ–≥ –¥–æ {min_keychain_sim + 0.01:.2f}{RESET}")

print(f"\n{BLUE}{'=' * 80}{RESET}\n")

