#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ custom_field –≤ –®–∞–±–ª–æ–Ω–µ 4:
1. –£–±—Ä–∞—Ç—å "–û–±—Ä–∞–∑–µ—Ü" –∏–∑ custom_field
2. –ü–∞—Ä—Å–∏—Ç—å —Ü–µ–Ω—É –∏ —Å—Ä–æ–∫ –æ–±—Ä–∞–∑—Ü–∞ –∏–∑ Excel
3. –ó–∞–ø–∏—Å–∞—Ç—å –≤ sample_price –∏ sample_delivery_time
"""

import sys
from pathlib import Path
from sqlalchemy import text
import re
from openpyxl import load_workbook

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager

db = PostgreSQLManager()

print("=" * 100)
print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï CUSTOM_FIELD –ò –û–ë–†–ê–ó–¶–û–í –í –®–ê–ë–õ–û–ù–ï 4")
print("=" * 100)

with open('template_4_perfect_ids.txt', 'r') as f:
    project_ids = [int(line.strip()) for line in f if line.strip()]

with db.get_session() as session:
    # 1. –£–±–∏—Ä–∞–µ–º "–û–±—Ä–∞–∑–µ—Ü" –∏–∑ custom_field
    print("\nüìù –®–ê–ì 1: –£–±–∏—Ä–∞–µ–º '–û–±—Ä–∞–∑–µ—Ü' –∏–∑ custom_field...")
    print("-" * 100)
    
    products_with_obrazec = session.execute(text("""
        SELECT id, custom_field
        FROM products
        WHERE project_id = ANY(:ids)
        AND custom_field LIKE '%–û–±—Ä–∞–∑–µ—Ü%'
    """), {'ids': project_ids}).fetchall()
    
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å '–û–±—Ä–∞–∑–µ—Ü' –≤ custom_field: {len(products_with_obrazec)}")
    
    updated = 0
    for prod_id, custom in products_with_obrazec:
        # –£–±–∏—Ä–∞–µ–º ", –û–±—Ä–∞–∑–µ—Ü" –∏–ª–∏ ",–û–±—Ä–∞–∑–µ—Ü" –∏–∑ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏
        custom_clean = re.sub(r',\s*–û–±—Ä–∞–∑–µ—Ü$', '', custom, flags=re.IGNORECASE)
        custom_clean = re.sub(r'\s*–û–±—Ä–∞–∑–µ—Ü$', '', custom_clean, flags=re.IGNORECASE)
        custom_clean = custom_clean.strip()
        
        if custom_clean != custom:
            session.execute(text("""
                UPDATE products
                SET custom_field = :custom_clean
                WHERE id = :prod_id
            """), {'custom_clean': custom_clean, 'prod_id': prod_id})
            updated += 1
    
    session.commit()
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ custom_field: {updated}")
    
    # 2. –ü–∞—Ä—Å–∏–º –æ–±—Ä–∞–∑—Ü—ã –∏–∑ Excel –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ sample_price/sample_delivery_time
    print("\nüìù –®–ê–ì 2: –ü–∞—Ä—Å–∏–º –æ–±—Ä–∞–∑—Ü—ã –∏–∑ Excel...")
    print("-" * 100)
    
    excel_dir = Path('storage/excel_files')
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
    projects = session.execute(text("""
        SELECT id, table_id
        FROM projects
        WHERE id = ANY(:ids)
        ORDER BY id
    """), {'ids': project_ids}).fetchall()
    
    total_files = len(projects)
    processed = 0
    sample_updates = 0
    
    for proj_id, table_id in projects:
        # –ò—â–µ–º Excel —Ñ–∞–π–ª
        excel_files = list(excel_dir.glob(f'project_{proj_id}_*.xlsx'))
        if not excel_files:
            continue
        
        excel_file = excel_files[0]
        
        try:
            wb = load_workbook(excel_file, data_only=True)
            ws = wb.active
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            products = session.execute(text("""
                SELECT id, row_number
                FROM products
                WHERE project_id = :proj_id
            """), {'proj_id': proj_id}).fetchall()
            
            for prod_id, row_num in products:
                # –ö–æ–ª–æ–Ω–∫–∞ N - —Ü–µ–Ω–∞ –æ–±—Ä–∞–∑—Ü–∞ (—Ä—É–±)
                sample_price_cell = ws.cell(row_num, 14)  # N = 14
                # –ö–æ–ª–æ–Ω–∫–∞ P - —Å—Ä–æ–∫ –æ–±—Ä–∞–∑—Ü–∞ (–∫.–¥.)
                sample_delivery_cell = ws.cell(row_num, 16)  # P = 16
                
                sample_price = None
                sample_delivery = None
                
                if sample_price_cell.value:
                    try:
                        # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
                        val = str(sample_price_cell.value).replace(' ', '').replace(',', '.')
                        sample_price = float(val)
                    except:
                        pass
                
                if sample_delivery_cell.value:
                    try:
                        # –ü–∞—Ä—Å–∏–º —Å—Ä–æ–∫
                        val = str(sample_delivery_cell.value).replace(' ', '')
                        sample_delivery = int(float(val))
                    except:
                        pass
                
                if sample_price or sample_delivery:
                    session.execute(text("""
                        UPDATE products
                        SET sample_price = :price,
                            sample_delivery_time = :delivery
                        WHERE id = :prod_id
                    """), {
                        'price': str(sample_price) if sample_price else None,
                        'delivery': sample_delivery,
                        'prod_id': prod_id
                    })
                    sample_updates += 1
            
            wb.close()
            processed += 1
            
            if processed % 50 == 0:
                print(f"   ‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {processed}/{total_files}")
        
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ {proj_id}: {str(e)[:50]}")
            continue
    
    session.commit()
    
    print(f"\n‚úÖ –ò–¢–û–ì–û:")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ Excel —Ñ–∞–π–ª–æ–≤: {processed}/{total_files}")
    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {sample_updates}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüìä –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
    print("-" * 100)
    
    stats = session.execute(text("""
        SELECT 
            COUNT(*) as total,
            COUNT(CASE WHEN custom_field LIKE '%–û–±—Ä–∞–∑–µ—Ü%' THEN 1 END) as with_obrazec_in_custom,
            COUNT(CASE WHEN sample_price IS NOT NULL THEN 1 END) as with_sample_price,
            COUNT(CASE WHEN sample_delivery_time IS NOT NULL THEN 1 END) as with_sample_delivery
        FROM products
        WHERE project_id = ANY(:ids)
    """), {'ids': project_ids}).fetchone()
    
    total, with_obrazec, with_price, with_delivery = stats
    
    print(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –®–∞–±–ª–æ–Ω–∞ 4:     {total:,}")
    print(f"–° '–û–±—Ä–∞–∑–µ—Ü' –≤ custom_field:  {with_obrazec:,} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0!)")
    print(f"–° sample_price:              {with_price:,}")
    print(f"–° sample_delivery_time:      {with_delivery:,}")
    
    print("\n" + "=" * 100)
    
    if with_obrazec == 0:
        print("‚úÖ –£–°–ü–ï–®–ù–û! –í—Å–µ '–û–±—Ä–∞–∑—Ü—ã' —É–±—Ä–∞–Ω—ã –∏–∑ custom_field")
    else:
        print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å {with_obrazec} —Ç–æ–≤–∞—Ä–æ–≤ —Å '–û–±—Ä–∞–∑–µ—Ü' –≤ custom_field")
    
    print("=" * 100)


