#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
"""
import pandas as pd
from pathlib import Path
import json

print("=" * 80)
print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¶–ï–ù –ò –ú–ê–†–®–†–£–¢–û–í")
print("=" * 80)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
with open('TEMPLATE7_VALIDATION_RESULTS.json', 'r', encoding='utf-8') as f:
    validation = json.load(f)

# –ë–µ—Ä–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –∏ –±–µ–∑
valid_projects = validation['valid_projects'][:15]

excel_dir = Path("storage/excel_files")

route_keywords = {
    'sea': ['sea', '–º–æ—Ä–µ', '–º–æ—Ä—Å–∫–æ–π', '–¥–æ–ª–≥–æ–µ –∂–¥', '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä', 'container'],
    'air': ['air', '–∞–≤–∏–∞', '–∞–≤–∏–æ', '–¥–æ–ª–≥–æ–µ –∞–≤–∏–∞', '—Å–∞–º–æ–ª–µ—Ç'],
    'railway': ['–∂–¥', 'railway', '–∂.–¥', '–∂–µ–ª–µ–∑–Ω–∞—è –¥–æ—Ä–æ–≥–∞', '–ø–æ–µ–∑–¥'],
    'contract': ['–∫–æ–Ω—Ç—Ä–∞–∫—Ç', 'contract']
}

def analyze_project_routes(project_id):
    """–î–µ—Ç–∞–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –∏ —Ü–µ–Ω—ã"""
    
    matching_files = list(excel_dir.glob(f'project_{project_id}_*.xlsx'))
    if not matching_files:
        return None
    
    file_path = matching_files[0]
    
    try:
        df = pd.read_excel(file_path, nrows=30, header=None)
        
        result = {
            'project_id': project_id,
            'header_row': None,
            'routes_structure': {},
            'has_routes': False
        }
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        for i in range(min(10, len(df))):
            row_text = " ".join([str(df.iloc[i, j]).lower() for j in range(min(25, len(df.columns))) if str(df.iloc[i, j]) != 'nan'])
            
            name_found = any(kw in row_text for kw in ['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', 'name', '—Ç–æ–≤–∞—Ä'])
            qty_found = any(kw in row_text for kw in ['—Ç–∏—Ä–∞–∂', 'quantity', 'qty'])
            
            if name_found and qty_found:
                result['header_row'] = i
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–æ–Ω–∫—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                for j in range(min(25, len(df.columns))):
                    header = str(df.iloc[i, j]).lower().strip()
                    
                    if header == 'nan' or not header:
                        continue
                    
                    # –ò—â–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
                    for route_type, keywords in route_keywords.items():
                        if any(kw in header for kw in keywords):
                            result['has_routes'] = True
                            
                            # –°–º–æ—Ç—Ä–∏–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É (–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏)
                            subheader_row = i + 1
                            if subheader_row < len(df):
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 3 –∫–æ–ª–æ–Ω–∫–∏ (–æ–±—ã—á–Ω–æ: USD, RUB, –°—Ä–æ–∫)
                                price_cols = []
                                for k in range(j, min(j+5, len(df.columns))):
                                    subheader = str(df.iloc[subheader_row, k]).lower()
                                    if subheader != 'nan':
                                        price_cols.append({
                                            'col_idx': k,
                                            'label': df.iloc[subheader_row, k],
                                            'is_usd': '$' in subheader or 'usd' in subheader,
                                            'is_rub': '‚ÇΩ' in subheader or '—Ä—É–±' in subheader or 'rub' in subheader,
                                            'is_time': '—Å—Ä–æ–∫' in subheader or '–ø–µ—Ä–∏–æ–¥' in subheader or 'period' in subheader or '–∫.–¥' in subheader
                                        })
                                
                                if route_type not in result['routes_structure']:
                                    result['routes_structure'][route_type] = []
                                
                                result['routes_structure'][route_type].append({
                                    'header_col': j,
                                    'header_label': df.iloc[i, j],
                                    'price_columns': price_cols
                                })
                
                break
        
        return result
        
    except Exception as e:
        return {'project_id': project_id, 'error': str(e)[:100]}

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã
projects_with_routes = []
projects_without_routes = []

for project_id in valid_projects:
    result = analyze_project_routes(project_id)
    
    if result and 'error' not in result:
        if result['has_routes']:
            projects_with_routes.append(result)
        else:
            projects_without_routes.append(result)

print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
print(f"   –° –º–∞—Ä—à—Ä—É—Ç–∞–º–∏: {len(projects_with_routes)}")
print(f"   –ë–ï–ó –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(projects_without_routes)}")

# –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤ –° –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
print(f"\n" + "=" * 80)
print(f"‚úÖ –ü–†–û–ï–ö–¢–´ –° –ú–ê–†–®–†–£–¢–ê–ú–ò (–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑):")
print(f"=" * 80)

for result in projects_with_routes:
    print(f"\n{'‚îÄ' * 80}")
    print(f"üìÑ –ü–†–û–ï–ö–¢ #{result['project_id']}")
    print(f"{'‚îÄ' * 80}")
    
    print(f"\nüìç –°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {result['header_row'] + 1}")
    
    if result['routes_structure']:
        print(f"\nüöö –ù–ê–ô–î–ï–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´ –ò –ò–• –°–¢–†–£–ö–¢–£–†–ê:\n")
        
        for route_type, route_data_list in result['routes_structure'].items():
            for route_data in route_data_list:
                print(f"   üîπ {route_type.upper()}:")
                print(f"      –ó–∞–≥–æ–ª–æ–≤–æ–∫: [{route_data['header_col']}] \"{route_data['header_label']}\"")
                
                if route_data['price_columns']:
                    print(f"      –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ü–µ–Ω:")
                    for pc in route_data['price_columns']:
                        types = []
                        if pc['is_usd']:
                            types.append('USD')
                        if pc['is_rub']:
                            types.append('RUB')
                        if pc['is_time']:
                            types.append('–°–†–û–ö')
                        
                        type_str = ', '.join(types) if types else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                        print(f"         [{pc['col_idx']}] \"{pc['label']}\" ‚Üí {type_str}")
                else:
                    print(f"      ‚ö†Ô∏è  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ü–µ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!")
                
                print()

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ë–ï–ó –º–∞—Ä—à—Ä—É—Ç–æ–≤
if projects_without_routes:
    print(f"\n" + "=" * 80)
    print(f"‚ö†Ô∏è  –ü–†–û–ï–ö–¢–´ –ë–ï–ó –ú–ê–†–®–†–£–¢–û–í (–Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞):")
    print(f"=" * 80)
    
    for result in projects_without_routes:
        print(f"\nüìÑ –ü–†–û–ï–ö–¢ #{result['project_id']}")
        print(f"   –°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {result['header_row'] + 1 if result['header_row'] is not None else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        matching_files = list(excel_dir.glob(f"project_{result['project_id']}_*.xlsx"))
        if matching_files:
            try:
                df = pd.read_excel(matching_files[0], nrows=15, header=None)
                if result['header_row'] is not None:
                    print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏:")
                    for j in range(min(15, len(df.columns))):
                        val = df.iloc[result['header_row'], j]
                        if pd.notna(val):
                            print(f"      [{j}] {val}")
            except:
                pass

print(f"\n" + "=" * 80)
print(f"üí° –í–´–í–û–î–´:")
print(f"=" * 80)

print(f"""
1. –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¶–ï–ù –ò –°–†–û–ö–û–í:
   {'‚úÖ' if projects_with_routes else '‚ùå'} –î–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è
   ‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—Å—è –∫–æ–ª–æ–Ω–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–î–æ—Å—Ç–∞–≤–∫–∞ –ñ–î")
   ‚Ä¢ –ò—â—É—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å —Ü–µ–Ω–∞–º–∏ (USD, RUB)
   ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–æ–ª–æ–Ω–∫–∞ —Å–æ —Å—Ä–æ–∫–æ–º
   
2. –ü–†–û–ï–ö–¢–´ –ë–ï–ó –ú–ê–†–®–†–£–¢–û–í:
   –ò—Ö {len(projects_without_routes)} –∏–∑ {len(valid_projects)} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö
   
   –í–∞—Ä–∏–∞–Ω—Ç—ã:
   a) –≠—Ç–æ –ø—Ä–æ–µ–∫—Ç—ã —Å –û–î–ù–ò–ú –º–∞—Ä—à—Ä—É—Ç–æ–º (–Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ)
   b) –¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç—ã
   c) –≠—Ç–æ –¥—Ä—É–≥–æ–π –ø–æ–¥—Ç–∏–ø —à–∞–±–ª–æ–Ω–∞
   
   –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ù—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å - –ø–∞—Ä—Å–∏—Ç—å –∏—Ö –∫–∞–∫ Template 7 
   –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ –º–∞—Ä—à—Ä—É—Ç–æ–≤

3. –ö–ê–ß–ï–°–¢–í–û –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø:
   –ò–∑ {len(projects_with_routes)} –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏:
""")

routes_with_prices = 0
routes_without_prices = 0

for result in projects_with_routes:
    for route_type, route_data_list in result['routes_structure'].items():
        for route_data in route_data_list:
            if route_data['price_columns']:
                routes_with_prices += 1
            else:
                routes_without_prices += 1

print(f"   ‚úÖ –ú–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏: {routes_with_prices}")
print(f"   ‚ö†Ô∏è  –ú–∞—Ä—à—Ä—É—Ç–æ–≤ –ë–ï–ó –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ü–µ–Ω: {routes_without_prices}")

print(f"\n" + "=" * 80)

