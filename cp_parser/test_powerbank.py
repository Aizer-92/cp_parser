#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ "–ø–æ–≤–µ—Ä–±–∞–Ω–∫"
"""

import os
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from openai import OpenAI
import httpx

load_dotenv()

GREEN = '\033[92m'
RED = '\033[91m'
BLUE = '\033[94m'
YELLOW = '\033[93m'
RESET = '\033[0m'

query = "–ø–æ–≤–µ—Ä–±–∞–Ω–∫"
threshold = 0.55

print(f"\n{BLUE}{'=' * 80}{RESET}")
print(f"{BLUE}–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞: '{query}' (–ø–æ—Ä–æ–≥: {threshold}){RESET}")
print(f"{BLUE}{'=' * 80}{RESET}\n")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
vector_db = os.getenv('VECTOR_DATABASE_URL')
openai_key = os.getenv('OPENAI_API_KEY')

engine = create_engine(vector_db, pool_pre_ping=True)
client = OpenAI(api_key=openai_key)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è embedding
response = client.embeddings.create(
    model="text-embedding-3-small",
    input=query,
    timeout=httpx.Timeout(10.0)
)
embedding = response.data[0].embedding

# –ü–æ–∏—Å–∫
query_vector_str = '[' + ','.join(map(str, embedding)) + ']'

with engine.connect() as conn:
    sql_query = f"""
        SELECT 
            product_id,
            product_name,
            1 - (name_embedding <=> '{query_vector_str}'::vector) as similarity
        FROM product_embeddings
        WHERE 1 - (name_embedding <=> '{query_vector_str}'::vector) >= {threshold}
        ORDER BY name_embedding <=> '{query_vector_str}'::vector
        LIMIT 100
    """
    results = conn.execute(text(sql_query)).fetchall()

print(f"{GREEN}‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ç–æ–≤–∞—Ä–æ–≤{RESET}\n")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
if results:
    similarities = [r[2] for r in results]
    avg_sim = sum(similarities) / len(similarities)
    min_sim = min(similarities)
    max_sim = max(similarities)

    print(f"{BLUE}üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:{RESET}")
    print(f"   –ú–∏–Ω–∏–º—É–º: {min_sim:.3f}")
    print(f"   –°—Ä–µ–¥–Ω–∏–π: {avg_sim:.3f}")
    print(f"   –ú–∞–∫—Å–∏–º—É–º: {max_sim:.3f}\n")

# –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
print(f"{BLUE}üìù –í–°–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:{RESET}\n")

for i, (pid, pname, sim) in enumerate(results, 1):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–æ –ø–æ–≤–µ—Ä–±–∞–Ω–∫ –∏–ª–∏ –±–∞–Ω–∫–∞/–¥—Ä—É–≥–æ–µ
    is_powerbank = any(word in pname.lower() for word in [
        '–ø–æ–≤–µ—Ä–±–∞–Ω–∫', 'power bank', 'powerbank', 'power-bank', '–ø–∞–≤–µ—Ä–±–∞–Ω–∫'
    ])
    
    is_jar = any(word in pname.lower() for word in [
        '–±–∞–Ω–∫–∞', '–±–∞–Ω–∫ ', ' –±–∞–Ω–∫', 'jar', 'can', '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä'
    ])
    
    if is_powerbank:
        color = GREEN
        emoji = "‚úÖ"
        label = "–ü–û–í–ï–†–ë–ê–ù–ö"
    elif is_jar:
        color = RED
        emoji = "‚ùå"
        label = "–ë–ê–ù–ö–ê (–ú–£–°–û–†!)"
    else:
        color = YELLOW
        emoji = "‚ùì"
        label = "–î–†–£–ì–û–ï"
    
    print(f"   {i:3d}. {color}[{sim:.3f}] {emoji} {label:20s} {pname}{RESET}")

# –ü–æ–¥—Å—á–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
powerbanks = sum(1 for r in results if any(word in r[1].lower() for word in [
    '–ø–æ–≤–µ—Ä–±–∞–Ω–∫', 'power bank', 'powerbank', 'power-bank', '–ø–∞–≤–µ—Ä–±–∞–Ω–∫'
]))

jars = sum(1 for r in results if any(word in r[1].lower() for word in [
    '–±–∞–Ω–∫–∞', '–±–∞–Ω–∫ ', ' –±–∞–Ω–∫', 'jar', 'can', '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä'
]))

other = len(results) - powerbanks - jars

print(f"\n{BLUE}üìä –ò–¢–û–ì–û:{RESET}")
print(f"   {GREEN}‚úÖ –ü–æ–≤–µ—Ä–±–∞–Ω–∫–∏: {powerbanks} ({powerbanks/len(results)*100 if results else 0:.1f}%){RESET}")
print(f"   {RED}‚ùå –ë–∞–Ω–∫–∏/–ë–∞–Ω–∫–∏ (–º—É—Å–æ—Ä): {jars} ({jars/len(results)*100 if results else 0:.1f}%){RESET}")
print(f"   {YELLOW}‚ùì –î—Ä—É–≥–æ–µ: {other} ({other/len(results)*100 if results else 0:.1f}%){RESET}")

# –ê–Ω–∞–ª–∏–∑ –±–∞–Ω–æ–∫
if jars > 0:
    print(f"\n{RED}üîç –ê–ù–ê–õ–ò–ó –ë–ê–ù–û–ö:{RESET}")
    jars_list = [r for r in results if any(word in r[1].lower() for word in [
        '–±–∞–Ω–∫–∞', '–±–∞–Ω–∫ ', ' –±–∞–Ω–∫', 'jar', 'can', '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä'
    ])]
    
    for pid, pname, sim in jars_list[:10]:
        print(f"   [{sim:.3f}] {pname}")
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π similarity –±–∞–Ω–∫–∏
    min_jar_sim = min(r[2] for r in jars_list)
    max_jar_sim = max(r[2] for r in jars_list)
    print(f"\n   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π similarity –±–∞–Ω–∫–∏: {min_jar_sim:.3f}")
    print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π similarity –±–∞–Ω–∫–∏: {max_jar_sim:.3f}")
    print(f"   {GREEN}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø–æ–¥–Ω—è—Ç—å –ø–æ—Ä–æ–≥ –¥–æ {max_jar_sim + 0.01:.2f}{RESET}")

print(f"\n{BLUE}{'=' * 80}{RESET}\n")

