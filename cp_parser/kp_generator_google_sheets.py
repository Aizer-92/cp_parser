"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Google Sheets –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
"""

import os
import sys
import json
from pathlib import Path
from datetime import datetime
from collections import defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text

# Google Sheets API
try:
    from google.oauth2 import service_account
    from google.oauth2.credentials import Credentials
    from googleapiclient.discovery import build
    from googleapiclient.errors import HttpError
    GOOGLE_AVAILABLE = True
except ImportError:
    GOOGLE_AVAILABLE = False
    print("‚ö†Ô∏è  [Google Sheets] google-auth –∏ google-api-python-client –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


class KPGoogleSheetsGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Google Sheets —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.db_manager = PostgreSQLManager()
        self.sheets_service = None
        self.drive_service = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google API
        if GOOGLE_AVAILABLE:
            self._init_google_api()
    
    def _init_google_api(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Google Sheets –∏ Drive API"""
        try:
            # –ü–†–ò–û–†–ò–¢–ï–¢ 1: OAuth Token (—Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            oauth_token = os.getenv('GOOGLE_OAUTH_TOKEN')
            
            if oauth_token:
                print("üîç [Google Sheets] –ù–∞–π–¥–µ–Ω GOOGLE_OAUTH_TOKEN - –∏—Å–ø–æ–ª—å–∑—É—é OAuth!")
                try:
                    token_dict = json.loads(oauth_token)
                    
                    # –°–æ–∑–¥–∞–µ–º OAuth credentials
                    credentials = Credentials(
                        token=token_dict.get('token'),
                        refresh_token=token_dict.get('refresh_token'),
                        token_uri=token_dict.get('token_uri'),
                        client_id=token_dict.get('client_id'),
                        client_secret=token_dict.get('client_secret'),
                        scopes=token_dict.get('scopes')
                    )
                    
                    print("‚úÖ [Google Sheets] OAuth credentials –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                    print(f"   Client ID: {token_dict.get('client_id')[:50]}...")
                    print(f"   Scopes: {len(token_dict.get('scopes', []))} scopes")
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
                    self.sheets_service = build('sheets', 'v4', credentials=credentials)
                    self.drive_service = build('drive', 'v3', credentials=credentials)
                    
                    print("‚úÖ [Google Sheets] API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ OAuth!")
                    print("   –§–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                    return
                    
                except Exception as e:
                    print(f"‚ùå [Google Sheets] –û—à–∏–±–∫–∞ OAuth: {e}")
                    print("   –ü—Ä–æ–±—É—é Service Account...")
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 2: Service Account (fallback)
            creds_json = os.getenv('GOOGLE_CREDENTIALS_JSON')
            
            if not creds_json:
                print("‚ö†Ô∏è  [Google Sheets] –ù–∏ GOOGLE_OAUTH_TOKEN, –Ω–∏ GOOGLE_CREDENTIALS_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                print("   –°–æ–∑–¥–∞–Ω–∏–µ Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                return
            
            print("üîç [Google Sheets] –ò—Å–ø–æ–ª—å–∑—É—é Service Account")
            print(f"   –î–ª–∏–Ω–∞: {len(creds_json)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–∞—Ä—Å–∏–º JSON credentials
            try:
                creds_dict = json.loads(creds_json)
            except json.JSONDecodeError as e:
                # –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º - –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å
                print(f"‚ö†Ô∏è  [Google Sheets] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON, –ø—Ä–æ–±—É—é –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
                # –ó–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω–æ–µ
                creds_json = creds_json.replace('\\\\n', '\\n')
                creds_dict = json.loads(creds_json)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
            required_keys = ['type', 'project_id', 'private_key', 'client_email']
            missing_keys = [k for k in required_keys if k not in creds_dict]
            
            if missing_keys:
                print(f"‚ùå [Google Sheets] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ –≤ credentials: {missing_keys}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º private_key
            private_key = creds_dict.get('private_key', '')
            if '\\n' in private_key:
                print("üîß [Google Sheets] –ò—Å–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ä–º–∞—Ç private_key (\\n -> –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã)")
                creds_dict['private_key'] = private_key.replace('\\n', '\n')
            
            print(f"‚úÖ [Google Sheets] Service Account credentials –≤–∞–ª–∏–¥–Ω—ã")
            print(f"   Project ID: {creds_dict.get('project_id')}")
            print(f"   Client Email: {creds_dict.get('client_email')}")
            
            # –°–æ–∑–¥–∞–µ–º credentials —Å –†–ê–°–®–ò–†–ï–ù–ù–´–ú–ò –ø—Ä–∞–≤–∞–º–∏
            credentials = service_account.Credentials.from_service_account_info(
                creds_dict,
                scopes=[
                    'https://www.googleapis.com/auth/spreadsheets',
                    'https://www.googleapis.com/auth/drive',  # –ü–æ–ª–Ω—ã–π Drive –¥–æ—Å—Ç—É–ø
                    'https://www.googleapis.com/auth/drive.file'
                ]
            )
            
            print("üîß [Google Sheets] –°–æ–∑–¥–∞—é API —Å–µ—Ä–≤–∏—Å—ã...")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            self.sheets_service = build('sheets', 'v4', credentials=credentials)
            self.drive_service = build('drive', 'v3', credentials=credentials)
            
            print("‚ö†Ô∏è  [Google Sheets] Service Account –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 0GB –∫–≤–æ—Ç—ã!")
            print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OAuth (GOOGLE_OAUTH_TOKEN)")
            
            # –¢–ï–°–¢: –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
            try:
                print("üß™ [Google Sheets] –¢–µ—Å—Ç–∏—Ä—É—é –¥–æ—Å—Ç—É–ø –∫ APIs...")
                # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
                # –ï—Å–ª–∏ API –Ω–µ –≤–∫–ª—é—á–µ–Ω - –ø–æ–ª—É—á–∏–º 403
                # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω - –ø–æ–ª—É—á–∏–º 404 (—á—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞)
                test_id = "test_invalid_id_12345"
                try:
                    self.sheets_service.spreadsheets().get(spreadsheetId=test_id).execute()
                except HttpError as e:
                    if e.resp.status == 404:
                        print("‚úÖ [Google Sheets] –î–æ—Å—Ç—É–ø –∫ Google Sheets API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    elif e.resp.status == 403:
                        print("‚ùå [Google Sheets] –ù–ï–¢ –î–û–°–¢–£–ü–ê –ö APIs!")
                        print("\n‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:")
                        print("   Google Sheets API –∏–ª–∏ Google Drive API –ù–ï –í–ö–õ–Æ–ß–ï–ù–´!")
                        print("\nüìù –î–ï–ô–°–¢–í–ò–Ø:")
                        print("   1. –û—Ç–∫—Ä–æ–π: https://console.cloud.google.com")
                        print(f"   2. –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç: {creds_dict.get('project_id')}")
                        print("   3. –ü–µ—Ä–µ–π–¥–∏: APIs & Services ‚Üí Library")
                        print("   4. –í–∫–ª—é—á–∏ (ENABLE):")
                        print("      - Google Sheets API")
                        print("      - Google Drive API")
                        print("   5. –ü–æ–¥–æ–∂–¥–∏ 2-3 –º–∏–Ω—É—Ç—ã")
                        print("   6. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
                        print("\nüì∏ –ü—Ä–æ–≤–µ—Ä—å Dashboard: https://console.cloud.google.com/apis/dashboard")
                    else:
                        print(f"‚ö†Ô∏è  [Google Sheets] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {e.resp.status}")
            except Exception as test_error:
                print(f"‚ö†Ô∏è  [Google Sheets] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø: {test_error}")
            
        except json.JSONDecodeError as e:
            print(f"‚ùå [Google Sheets] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON credentials: {e}")
            print("   –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ GOOGLE_CREDENTIALS_JSON - –≤–∞–ª–∏–¥–Ω—ã–π JSON")
        except Exception as e:
            print(f"‚ùå [Google Sheets] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API: {e}")
            import traceback
            traceback.print_exc()
    
    def get_kp_items(self, session_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –ö–ü –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ product_id"""
        
        db_session = self.db_manager.get_session_direct()
        
        try:
            result = db_session.execute(text("""
                SELECT 
                    ki.id as kp_item_id,
                    p.id as product_id,
                    p.name as product_name,
                    p.description,
                    p.sample_price,
                    p.sample_delivery_time,
                    p.custom_field,
                    po.id as price_offer_id,
                    po.quantity,
                    po.route,
                    po.price_usd,
                    po.price_rub,
                    po.delivery_time_days
                FROM kp_items ki
                JOIN products p ON p.id = ki.product_id
                JOIN price_offers po ON po.id = ki.price_offer_id
                WHERE ki.session_id = :session_id
                ORDER BY p.name, po.quantity
            """), {'session_id': session_id})
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ product_id
            products_grouped = defaultdict(lambda: {
                'info': None,
                'offers': [],
                'images': []
            })
            
            for row in result:
                product_id = row[1]
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ (–∑–∞–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —Ä–∞–∑)
                if products_grouped[product_id]['info'] is None:
                    products_grouped[product_id]['info'] = {
                        'name': row[2],
                        'description': row[3],
                        'sample_price': float(row[4]) if row[4] else None,
                        'sample_delivery_time': row[5],
                        'custom_field': row[6]  # –î–∏–∑–∞–π–Ω/–∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è
                    }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                # row[7] = price_offer_id, row[8] = quantity, row[9] = route, 
                # row[10] = price_usd, row[11] = price_rub, row[12] = delivery_time_days
                products_grouped[product_id]['offers'].append({
                    'quantity': row[8],
                    'route': row[9],
                    'price_usd': float(row[10]) if row[10] else None,
                    'price_rub': float(row[11]) if row[11] else None,
                    'delivery_days': row[12]
                })
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            for product_id in products_grouped.keys():
                img_result = db_session.execute(text("""
                    SELECT image_url, image_filename
                    FROM product_images
                    WHERE product_id = :product_id
                    AND (image_url IS NOT NULL OR image_filename IS NOT NULL)
                    ORDER BY CASE WHEN column_number = 1 THEN 0 ELSE 1 END, id
                    LIMIT 5
                """), {'product_id': product_id})
                
                for img_row in img_result:
                    image_url = img_row[0]
                    if not image_url and img_row[1]:
                        image_url = f"https://s3.ru1.storage.beget.cloud/73d16f7545b3-promogoods/images/{img_row[1]}"
                    
                    if image_url:
                        products_grouped[product_id]['images'].append(image_url)
            
            return products_grouped
        finally:
            db_session.close()
    
    def prepare_sheet_data(self, products_grouped):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google Sheets - –¢–ê–ë–õ–ò–ß–ù–´–ô —Ñ–æ—Ä–º–∞—Ç"""
        
        rows = []
        merge_requests = []  # –î–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —è—á–µ–µ–∫
        current_row = 0
        
        # –®–ê–ü–ö–ê –° –õ–û–ì–û–¢–ò–ü–û–ú –ò –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô (–∫–∞–∫ –≤ —à–∞–±–ª–æ–Ω–µ)
        # –°—Ç—Ä–æ–∫–∞ 1: –õ–æ–≥–æ—Ç–∏–ø + –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logo_url = "https://lh7-rt.googleusercontent.com/sheets/APBGjhYiO7BPJJoOXfRbx_1B_farTp2rxhUHH-r0mEuJNPAcx0UoahWBykdtq9w6fcu4FOdMAac4vgonRp8n68nm4f_UH0brfag1U8pdXlfcqp8_DRWLBidyqTAkLhBO03gEnhdCIvsfHCm8U73xLV8=w222-h70"
        rows.append([
            f'=IMAGE("{logo_url}"; 1)',  # –õ–æ–≥–æ—Ç–∏–ø
            '–ú–µ–Ω–µ–¥–∂–µ—Ä:\nEmail:\n–¢–µ–ª–µ—Ñ–æ–Ω:',  # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            '', 
            '–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ —Å –ù–î–° –∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –ú–æ—Å–∫–≤—ã –∏–ª–∏ –¢–ö\n–°—Ä–æ–∫ —Ç–∏—Ä–∞–∂–∞ "–ø–æ–¥ –∫–ª—é—á" –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è: –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –ö–∏—Ç–∞—é, –æ–±—Ä–∞–±–æ—Ç–∫—É –≥—Ä—É–∑–∞, –¥–æ—Å—Ç–∞–≤–∫—É –∏–∑ –ö–∏—Ç–∞—è –¥–æ –ú–æ—Å–∫–≤—ã, —Ç–∞–º–æ–∂–Ω—é',
            '',
            '–û–±—Ä–∞–∑–µ—Ü –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∏—Ä–∞–∂–∞',
            '', '', '', '', '', '', ''
        ])
        current_row += 1
        
        # Merge –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        merge_requests.append({
            'startRowIndex': 0,
            'endRowIndex': 1,
            'startColumnIndex': 1,  # B
            'endColumnIndex': 3     # –¥–æ C
        })
        merge_requests.append({
            'startRowIndex': 0,
            'endRowIndex': 1,
            'startColumnIndex': 3,  # D
            'endColumnIndex': 5     # –¥–æ E
        })
        merge_requests.append({
            'startRowIndex': 0,
            'endRowIndex': 1,
            'startColumnIndex': 5,  # F
            'endColumnIndex': 10    # –¥–æ J
        })
        
        # –ó–ê–ì–û–õ–û–í–û–ö –¢–ê–ë–õ–ò–¶–´ (—Å—Ç—Ä–æ–∫–∞ 2-3)
        # –°—Ç—Ä–æ–∫–∞ 2: –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–î–ò–ó–ê–ô–ù –∏ –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ø–æ–º–µ–Ω—è–Ω—ã –º–µ—Å—Ç–∞–º–∏)
        rows.append(['–§–æ—Ç–æ', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–î–∏–∑–∞–π–Ω', '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', '–¢–∏—Ä–∞–∂, —à—Ç', '–î–æ—Å—Ç–∞–≤–∫–∞ –ñ–î', '–î–æ—Å—Ç–∞–≤–∫–∞ –ê–í–ò–ê', '–û–±—Ä–∞–∑–µ—Ü', '–î–æ–ø. —Ñ–æ—Ç–æ', '', ''])
        current_row += 1
        
        # –°—Ç—Ä–æ–∫–∞ 3: –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ü–µ–Ω
        rows.append([
            '', '', '', '',  # –ü—É—Å—Ç—ã–µ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            '',  # –¢–∏—Ä–∞–∂
            '–¶–µ–Ω–∞ –∑–∞ —à—Ç., $\n–¶–µ–Ω–∞ –∑–∞ —à—Ç., —Ä—É–±\n–ò—Ç–æ–≥–æ, —Ä—É–±\n–°—Ä–æ–∫ —Ç–∏—Ä–∞–∂–∞, –∫.–¥.',  # –ñ–î
            '–¶–µ–Ω–∞ –∑–∞ —à—Ç., $\n–¶–µ–Ω–∞ –∑–∞ —à—Ç., —Ä—É–±\n–ò—Ç–æ–≥–æ, —Ä—É–±\n–°—Ä–æ–∫ —Ç–∏—Ä–∞–∂–∞, –∫.–¥.',  # –ê–í–ò–ê
            '–¶–µ–Ω–∞ –∑–∞ —à—Ç., —Ä—É–±\n–°—Ä–æ–∫ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ, –∫.–¥.\n–°—Ä–æ–∫ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π, –∫.–¥.',  # –û–±—Ä–∞–∑–µ—Ü
            '', '', ''  # –î–æ–ø. —Ñ–æ—Ç–æ
        ])
        current_row += 1
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
        for product_id, product_data in products_grouped.items():
            product_info = product_data['info']
            offers = product_data['offers']
            images = product_data['images']
            
            print(f"   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {product_info['name']} ({len(offers)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            # –§–û–¢–û: –ø–∞—Ä–∞–º–µ—Ç—Ä 1 = —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ (–Ω–µ –∏—Å–∫–∞–∂–∞—Ç—å)
            main_image = f'=IMAGE("{images[0]}"; 1)' if images else ''
            
            # –î–ò–ó–ê–ô–ù - —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∏–∑ –ë–î (custom_field)
            design_text = product_info.get('custom_field') or '-'
            
            # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –æ–¥–Ω–æ–π —è—á–µ–π–∫–µ
            characteristics = []
            if product_info['description']:
                characteristics.append(product_info['description'][:150])
            characteristics_text = '\n'.join(characteristics) if characteristics else '-'
            
            # –û–ë–†–ê–ó–ï–¶ - –≤ –†–£–ë–õ–Ø–• (–Ω–µ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö)
            sample_info = []
            if product_info['sample_price']:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É–±–ª–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å 95)
                sample_price_rub = product_info['sample_price'] * 95
                sample_info.append(f"{sample_price_rub:,.2f}".replace(',', ' ').replace('.', ','))
            if product_info['sample_delivery_time']:
                sample_info.append(f"–°—Ä–æ–∫: {product_info['sample_delivery_time']} –¥–Ω.")
            sample_text = ' | '.join(sample_info) if sample_info else '-'
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ (2-3-4-5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è) - –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–û –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
            additional_photo_1 = f'=IMAGE("{images[1]}"; 1)' if len(images) > 1 else ''
            additional_photo_2 = f'=IMAGE("{images[2]}"; 1)' if len(images) > 2 else ''
            additional_photo_3 = f'=IMAGE("{images[3]}"; 1)' if len(images) > 3 else ''
            
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è merge
            start_row = current_row
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
            for idx, offer in enumerate(offers):
                if idx == 0:
                    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    # –¶–µ–Ω—ã —Å –∑–∞–ø—è—Ç—ã–º–∏: 6.64 -> "6,64"
                    price_usd_str = str(offer['price_usd']).replace('.', ',') if offer['price_usd'] else ''
                    price_rub_str = str(offer['price_rub']).replace('.', ',') if offer['price_rub'] else ''
                    
                    row_data = [
                        main_image,  # –§–æ—Ç–æ (–±—É–¥–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ)
                        product_info['name'],  # –ù–∞–∑–≤–∞–Ω–∏–µ
                        design_text,  # –î–∏–∑–∞–π–Ω (–ü–û–ú–ï–ù–Ø–õ–ò –ú–ï–°–¢–ê–ú–ò –° –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ê–ú–ò)
                        characteristics_text,  # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–ü–û–ú–ï–ù–Ø–õ–ò –ú–ï–°–¢–ê–ú–ò –° –î–ò–ó–ê–ô–ù–û–ú)
                        f"{offer['quantity']:,.0f}".replace(',', ' '),  # –¢–∏—Ä–∞–∂
                        price_usd_str,  # USD —Å –∑–∞–ø—è—Ç—ã–º–∏ (–ë–ï–ó $)
                        price_rub_str,  # RUB —Å –∑–∞–ø—è—Ç—ã–º–∏ (–ë–ï–ó ‚ÇΩ)
                        offer['route'] or '-',  # –ú–∞—Ä—à—Ä—É—Ç
                        f"{offer['delivery_days']} –¥–Ω." if offer['delivery_days'] else '-',  # –°—Ä–æ–∫
                        sample_text,  # –û–±—Ä–∞–∑–µ—Ü (–±—É–¥–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ)
                        additional_photo_1,  # –î–æ–ø. —Ñ–æ—Ç–æ 1 (–±—É–¥–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ)
                        additional_photo_2,  # –î–æ–ø. —Ñ–æ—Ç–æ 2 (–±—É–¥–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ)
                        additional_photo_3   # –î–æ–ø. —Ñ–æ—Ç–æ 3 (–±—É–¥–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ)
                    ]
                else:
                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ - —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—ã –∏ –º–∞—Ä—à—Ä—É—Ç—ã
                    # –¶–µ–Ω—ã —Å –∑–∞–ø—è—Ç—ã–º–∏: 6.64 -> "6,64"
                    price_usd_str = str(offer['price_usd']).replace('.', ',') if offer['price_usd'] else ''
                    price_rub_str = str(offer['price_rub']).replace('.', ',') if offer['price_rub'] else ''
                    
                    row_data = [
                        '',  # –§–æ—Ç–æ (–ø—É—Å—Ç–∞—è, –±—É–¥–µ—Ç merge)
                        '',  # –ù–∞–∑–≤–∞–Ω–∏–µ (–ø—É—Å—Ç–∞—è)
                        '',  # –î–∏–∑–∞–π–Ω (–ø—É—Å—Ç–∞—è)
                        '',  # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–ø—É—Å—Ç–∞—è)
                        f"{offer['quantity']:,.0f}".replace(',', ' '),  # –¢–∏—Ä–∞–∂
                        price_usd_str,  # USD —Å –∑–∞–ø—è—Ç—ã–º–∏ (–ë–ï–ó $)
                        price_rub_str,  # RUB —Å –∑–∞–ø—è—Ç—ã–º–∏ (–ë–ï–ó ‚ÇΩ)
                        offer['route'] or '-',  # –ú–∞—Ä—à—Ä—É—Ç
                        f"{offer['delivery_days']} –¥–Ω." if offer['delivery_days'] else '-',  # –°—Ä–æ–∫
                        '',  # –û–±—Ä–∞–∑–µ—Ü (–ø—É—Å—Ç–∞—è, –±—É–¥–µ—Ç merge)
                        '',  # –î–æ–ø. —Ñ–æ—Ç–æ 1 (–ø—É—Å—Ç–∞—è, –±—É–¥–µ—Ç merge)
                        '',  # –î–æ–ø. —Ñ–æ—Ç–æ 2 (–ø—É—Å—Ç–∞—è, –±—É–¥–µ—Ç merge)
                        ''   # –î–æ–ø. —Ñ–æ—Ç–æ 3 (–ø—É—Å—Ç–∞—è, –±—É–¥–µ—Ç merge)
                    ]
                
                rows.append(row_data)
                current_row += 1
            
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º merge –¥–ª—è —Ñ–æ—Ç–æ, –Ω–∞–∑–≤–∞–Ω–∏—è, –¥–∏–∑–∞–π–Ω–∞, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –æ–±—Ä–∞–∑—Ü–∞ –∏ –¥–æ–ø. —Ñ–æ—Ç–æ
            if len(offers) > 1:
                end_row = current_row - 1
                # Merge –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ (–∫–æ–ª–æ–Ω–∫–∞ A = 0)
                merge_requests.append({
                    'startRowIndex': start_row,
                    'endRowIndex': end_row + 1,
                    'startColumnIndex': 0,
                    'endColumnIndex': 1
                })
                # Merge –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è (–∫–æ–ª–æ–Ω–∫–∞ B = 1)
                merge_requests.append({
                    'startRowIndex': start_row,
                    'endRowIndex': end_row + 1,
                    'startColumnIndex': 1,
                    'endColumnIndex': 2
                })
                # Merge –¥–ª—è –¥–∏–∑–∞–π–Ω–∞ (–∫–æ–ª–æ–Ω–∫–∞ C = 2)
                merge_requests.append({
                    'startRowIndex': start_row,
                    'endRowIndex': end_row + 1,
                    'startColumnIndex': 2,
                    'endColumnIndex': 3
                })
                # Merge –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–∫–æ–ª–æ–Ω–∫–∞ D = 3)
                merge_requests.append({
                    'startRowIndex': start_row,
                    'endRowIndex': end_row + 1,
                    'startColumnIndex': 3,
                    'endColumnIndex': 4
                })
                # Merge –¥–ª—è –æ–±—Ä–∞–∑—Ü–∞ (–∫–æ–ª–æ–Ω–∫–∞ J = 9)
                merge_requests.append({
                    'startRowIndex': start_row,
                    'endRowIndex': end_row + 1,
                    'startColumnIndex': 9,
                    'endColumnIndex': 10
                })
                # Merge –¥–ª—è –¥–æ–ø. —Ñ–æ—Ç–æ 1 (–∫–æ–ª–æ–Ω–∫–∞ K = 10)
                merge_requests.append({
                    'startRowIndex': start_row,
                    'endRowIndex': end_row + 1,
                    'startColumnIndex': 10,
                    'endColumnIndex': 11
                })
                # Merge –¥–ª—è –¥–æ–ø. —Ñ–æ—Ç–æ 2 (–∫–æ–ª–æ–Ω–∫–∞ L = 11)
                merge_requests.append({
                    'startRowIndex': start_row,
                    'endRowIndex': end_row + 1,
                    'startColumnIndex': 11,
                    'endColumnIndex': 12
                })
                # Merge –¥–ª—è –¥–æ–ø. —Ñ–æ—Ç–æ 3 (–∫–æ–ª–æ–Ω–∫–∞ M = 12)
                merge_requests.append({
                    'startRowIndex': start_row,
                    'endRowIndex': end_row + 1,
                    'startColumnIndex': 12,
                    'endColumnIndex': 13
                })
        
        return rows, merge_requests
    
    def generate_mcp_instructions(self, session_id):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è MCP —Å–æ–∑–¥–∞–Ω–∏—è Google Sheets"""
        
        products = self.get_kp_items(session_id)
        
        if not products:
            raise ValueError("–ö–ü –ø—É—Å—Ç–æ–µ. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π.")
        
        sheet_data = self.prepare_sheet_data(products)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ MCP
        return {
            'title': f'–ö–ü_{datetime.now().strftime("%Y%m%d_%H%M%S")}',
            'data': sheet_data,
            'products': products  # –î–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        }
    
    def get_first_sheet_name(self, spreadsheet_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞ –≤ spreadsheet"""
        try:
            spreadsheet = self.sheets_service.spreadsheets().get(
                spreadsheetId=spreadsheet_id
            ).execute()
            
            sheets = spreadsheet.get('sheets', [])
            if sheets:
                first_sheet_title = sheets[0]['properties']['title']
                print(f"üìÑ [Google Sheets] –ü–µ—Ä–≤—ã–π –ª–∏—Å—Ç: '{first_sheet_title}'")
                return first_sheet_title
            
            # Fallback
            return 'Sheet1'
            
        except Exception as e:
            print(f"‚ö†Ô∏è  [Google Sheets] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ª–∏—Å—Ç–∞: {e}")
            return 'Sheet1'
    
    def create_spreadsheet(self, title):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Google Spreadsheet –≤ –ø–∞–ø–∫–µ –ö–ü"""
        if not self.sheets_service:
            raise Exception("Google Sheets API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # ID –ø–∞–ø–∫–∏ –ö–ü (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        kp_folder_id = os.environ.get('GOOGLE_DRIVE_KP_FOLDER_ID', '1JceijhZMn8myEpIA80dQ34tYTqF5NFsE')
        
        # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        if not kp_folder_id:
            kp_folder_id = os.environ.get('GOOGLE_DRIVE_SHARED_FOLDER_ID')
        
        shared_folder_id = kp_folder_id
        
        if shared_folder_id:
            print(f"üìÅ [Google Sheets] –°–æ–∑–¥–∞—é –≤ —Ä–∞—Å—à–∞—Ä–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ: {shared_folder_id}")
            try:
                file_metadata = {
                    'name': title,
                    'mimeType': 'application/vnd.google-apps.spreadsheet',
                    'parents': [shared_folder_id]  # –°–æ–∑–¥–∞–µ–º –°–†–ê–ó–£ –≤ –ø–∞–ø–∫–µ!
                }
                
                result = self.drive_service.files().create(
                    body=file_metadata,
                    fields='id, webViewLink'
                ).execute()
                
                spreadsheet_id = result['id']
                spreadsheet_url = result['webViewLink']
                
                print(f"‚úÖ [Google Sheets] –°–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ!")
                print(f"   ID: {spreadsheet_id}")
                print(f"   URL: {spreadsheet_url}")
                
                # –î–µ–ª–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–º —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                self._make_public_editable(spreadsheet_id)
                
                return spreadsheet_id, spreadsheet_url
                
            except HttpError as folder_error:
                print(f"‚ö†Ô∏è  [Google Sheets] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤ –ø–∞–ø–∫–µ: HTTP {folder_error.resp.status}")
                if 'storageQuotaExceeded' in str(folder_error.error_details):
                    print(f"‚ùå –£ Service Account –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –º–µ—Å—Ç–æ –Ω–∞ Drive!")
                    print(f"   –ò—Å–ø–æ–ª—å–∑—É–π GOOGLE_DRIVE_SHARED_FOLDER_ID —Å —Ç–≤–æ–µ–π —Ä–∞—Å—à–∞—Ä–µ–Ω–Ω–æ–π –ø–∞–ø–∫–æ–π!")
                print(f"   –ü—Ä–æ–±—É—é –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...")
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π template
        template_id = os.environ.get('GOOGLE_SHEETS_TEMPLATE_ID')
        
        if template_id:
            print(f"üîÑ [Google Sheets] –ü—Ä–æ–±—É—é —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å template: {template_id}")
            try:
                file_metadata = {
                    'name': title,
                    'mimeType': 'application/vnd.google-apps.spreadsheet'
                }
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞–ø–∫–∞ - –∫–æ–ø–∏—Ä—É–µ–º —Å—Ä–∞–∑—É –≤ –Ω–µ–µ
                if shared_folder_id:
                    file_metadata['parents'] = [shared_folder_id]
                
                result = self.drive_service.files().copy(
                    fileId=template_id,
                    body=file_metadata,
                    fields='id, webViewLink'
                ).execute()
                
                spreadsheet_id = result['id']
                spreadsheet_url = result['webViewLink']
                
                print(f"‚úÖ [Google Sheets] –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω template!")
                print(f"   ID: {spreadsheet_id}")
                print(f"   URL: {spreadsheet_url}")
                
                # –î–µ–ª–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–º —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                self._make_public_editable(spreadsheet_id)
                
                return spreadsheet_id, spreadsheet_url
                
            except HttpError as copy_error:
                print(f"‚ö†Ô∏è  [Google Sheets] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å template: HTTP {copy_error.resp.status}")
                print(f"   –ü—Ä–æ–±—É—é —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª...")
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 3 (fallback): –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤ –∫–æ—Ä–Ω–µ
        try:
            spreadsheet = {
                'properties': {
                    'title': title
                }
            }
            
            print(f"üìù [Google Sheets] –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É: {title}")
            
            spreadsheet = self.sheets_service.spreadsheets().create(
                body=spreadsheet,
                fields='spreadsheetId,spreadsheetUrl'
            ).execute()
            
            spreadsheet_id = spreadsheet.get('spreadsheetId')
            spreadsheet_url = spreadsheet.get('spreadsheetUrl')
            
            print(f"‚úÖ [Google Sheets] –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {spreadsheet_id}")
            print(f"   URL: {spreadsheet_url}")
            
            # –î–µ–ª–∞–µ–º –ø—É–±–ª–∏—á–Ω–æ–π —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._make_public_editable(spreadsheet_id)
            
            return spreadsheet_id, spreadsheet_url
            
        except HttpError as e:
            error_details = e.error_details if hasattr(e, 'error_details') else []
            print(f"‚ùå [Google Sheets] HTTP Error {e.resp.status}: {e._get_reason()}")
            print(f"   URI: {e.uri}")
            print(f"   Details: {error_details}")
            
            if e.resp.status == 403:
                print("\nüîç –î–ò–ê–ì–ù–û–ó: Organization Policy –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤!")
                print("\nüí° WORKAROUND: –ò—Å–ø–æ–ª—å–∑—É–π TEMPLATE!")
                print("\nüìù –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
                print("1. –°–æ–∑–¥–∞–π Google Sheet –≤—Ä—É—á–Ω—É—é:")
                print("   https://docs.google.com/spreadsheets/")
                print("   –ù–∞–∑–≤–∞–Ω–∏–µ: '–ö–ü Template'")
                print("\n2. –†–∞—Å—à–∞—Ä—å —Å Service Account (–¥–∞–π –ø—Ä–∞–≤–∞ Editor):")
                print(f"   {os.environ.get('GOOGLE_CREDENTIALS_JSON', '')[:100]}...")
                print("   (–Ω–∞–π–¥–∏ client_email –≤ credentials)")
                print("\n3. –°–∫–æ–ø–∏—Ä—É–π Spreadsheet ID –∏–∑ URL:")
                print("   https://docs.google.com/spreadsheets/d/[THIS_IS_ID]/edit")
                print("\n4. –î–æ–±–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞ Railway:")
                print("   GOOGLE_SHEETS_TEMPLATE_ID = '—Ç–≤–æ–π-template-id'")
                print("\n5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ Railway - —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å template –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è!")
            else:
                print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
                print("1. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ Google Sheets API –≤–∫–ª—é—á–µ–Ω:")
                print("   https://console.cloud.google.com/apis/library/sheets.googleapis.com")
                print("2. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ Service Account –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞:")
                print("   https://console.cloud.google.com/iam-admin/serviceaccounts")
            
            raise
    
    def _make_public_editable(self, spreadsheet_id):
        """–î–µ–ª–∞–µ—Ç Google Spreadsheet –ø—É–±–ª–∏—á–Ω—ã–º —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        if not self.drive_service:
            return
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞: anyone with link can edit
            permission = {
                'type': 'anyone',
                'role': 'writer'  # writer = —Ä–µ–¥–∞–∫—Ç–æ—Ä
            }
            
            self.drive_service.permissions().create(
                fileId=spreadsheet_id,
                body=permission,
                fields='id'
            ).execute()
            
            print(f"‚úÖ [Google Sheets] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  [Google Sheets] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤: {e}")
    
    def update_cells(self, spreadsheet_id, range_name, values):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —è—á–µ–π–∫–∏ –≤ Google Spreadsheet"""
        if not self.sheets_service:
            raise Exception("Google Sheets API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        body = {
            'values': values
        }
        
        result = self.sheets_service.spreadsheets().values().update(
            spreadsheetId=spreadsheet_id,
            range=range_name,
            valueInputOption='USER_ENTERED',
            body=body
        ).execute()
        
        print(f"‚úÖ [Google Sheets] –û–±–Ω–æ–≤–ª–µ–Ω–æ —è—á–µ–µ–∫: {result.get('updatedCells')}")
        
        return result
    
    def apply_merge_cells(self, spreadsheet_id, merge_requests):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫"""
        if not self.sheets_service or not merge_requests:
            return
        
        try:
            requests = []
            for merge_range in merge_requests:
                requests.append({
                    'mergeCells': {
                        'range': {
                            'sheetId': 0,
                            'startRowIndex': merge_range['startRowIndex'],
                            'endRowIndex': merge_range['endRowIndex'],
                            'startColumnIndex': merge_range['startColumnIndex'],
                            'endColumnIndex': merge_range['endColumnIndex']
                        },
                        'mergeType': 'MERGE_ALL'  # –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ —è—á–µ–π–∫–∏
                    }
                })
            
            body = {'requests': requests}
            
            self.sheets_service.spreadsheets().batchUpdate(
                spreadsheetId=spreadsheet_id,
                body=body
            ).execute()
            
            print(f"‚úÖ [Google Sheets] –ü—Ä–∏–º–µ–Ω–µ–Ω–æ {len(merge_requests)} –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–π —è—á–µ–µ–∫")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  [Google Sheets] –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —è—á–µ–µ–∫: {e}")
    
    def format_sheet(self, spreadsheet_id):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Google Spreadsheet"""
        if not self.sheets_service:
            return
        
        try:
            requests = []
            
            # 1. –®–∞–ø–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º (—Å—Ç—Ä–æ–∫–∞ 1, –ø–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞)
            requests.append({
                'repeatCell': {
                    'range': {
                        'sheetId': 0,
                        'startRowIndex': 0,
                        'endRowIndex': 1,
                        'startColumnIndex': 0,
                        'endColumnIndex': 13
                    },
                    'cell': {
                        'userEnteredFormat': {
                            'wrapStrategy': 'WRAP',
                            'verticalAlignment': 'MIDDLE'
                        }
                    },
                    'fields': 'userEnteredFormat(wrapStrategy,verticalAlignment)'
                }
            })
            
            # 2. –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (—Å—Ç—Ä–æ–∫–∞ 2, –∂–∏—Ä–Ω—ã–π, —Å–µ—Ä—ã–π —Ñ–æ–Ω)
            requests.append({
                'repeatCell': {
                    'range': {
                        'sheetId': 0,
                        'startRowIndex': 1,
                        'endRowIndex': 2,
                        'startColumnIndex': 0,
                        'endColumnIndex': 13
                    },
                    'cell': {
                        'userEnteredFormat': {
                            'textFormat': {
                                'bold': True,
                                'fontSize': 11
                            },
                            'horizontalAlignment': 'CENTER',
                            'verticalAlignment': 'MIDDLE',
                            'backgroundColor': {
                                'red': 0.9,
                                'green': 0.9,
                                'blue': 0.9
                            }
                        }
                    },
                    'fields': 'userEnteredFormat(textFormat,horizontalAlignment,verticalAlignment,backgroundColor)'
                }
            })
            
            # 3. –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Å—Ç—Ä–æ–∫–∞ 3, –ø–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞)
            requests.append({
                'repeatCell': {
                    'range': {
                        'sheetId': 0,
                        'startRowIndex': 2,
                        'endRowIndex': 3,
                        'startColumnIndex': 0,
                        'endColumnIndex': 13
                    },
                    'cell': {
                        'userEnteredFormat': {
                            'wrapStrategy': 'WRAP',
                            'horizontalAlignment': 'CENTER',
                            'verticalAlignment': 'MIDDLE',
                            'textFormat': {
                                'fontSize': 9
                            }
                        }
                    },
                    'fields': 'userEnteredFormat(wrapStrategy,horizontalAlignment,verticalAlignment,textFormat)'
                }
            })
            
            # 4. –®–ò–†–ò–ù–ê –∫–æ–ª–æ–Ω–∫–∏ A (–§–æ—Ç–æ) - 250 –ø–∏–∫—Å–µ–ª–µ–π (–£–í–ï–õ–ò–ß–ï–ù–û)
            requests.append({
                'updateDimensionProperties': {
                    'range': {
                        'sheetId': 0,
                        'dimension': 'COLUMNS',
                        'startIndex': 0,
                        'endIndex': 1
                    },
                    'properties': {
                        'pixelSize': 250
                    },
                    'fields': 'pixelSize'
                }
            })
            
            # 4.1. –®–ò–†–ò–ù–ê –∫–æ–ª–æ–Ω–æ–∫ C-D (–î–∏–∑–∞–π–Ω, –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏) - 120 –ø–∏–∫—Å–µ–ª–µ–π (–£–ú–ï–ù–¨–®–ï–ù–û)
            for col_idx in [2, 3]:  # C, D
                requests.append({
                    'updateDimensionProperties': {
                        'range': {
                            'sheetId': 0,
                            'dimension': 'COLUMNS',
                            'startIndex': col_idx,
                            'endIndex': col_idx + 1
                        },
                        'properties': {
                            'pixelSize': 120
                        },
                        'fields': 'pixelSize'
                    }
                })
            
            # 4.2. –®–ò–†–ò–ù–ê –∫–æ–ª–æ–Ω–æ–∫ K-M (–î–æ–ø. —Ñ–æ—Ç–æ) - 250 –ø–∏–∫—Å–µ–ª–µ–π (–£–í–ï–õ–ò–ß–ï–ù–û)
            for col_idx in [10, 11, 12]:  # K, L, M
                requests.append({
                    'updateDimensionProperties': {
                        'range': {
                            'sheetId': 0,
                            'dimension': 'COLUMNS',
                            'startIndex': col_idx,
                            'endIndex': col_idx + 1
                        },
                        'properties': {
                            'pixelSize': 250
                        },
                        'fields': 'pixelSize'
                    }
                })
            
            # 5. –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ (B, E-J, –∏–Ω–¥–µ–∫—Å—ã: 1, 4-9)
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º C-D (2-3) –∏ K-M (10-12) —Ç.–∫. –æ–Ω–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
            requests.append({
                'autoResizeDimensions': {
                    'dimensions': {
                        'sheetId': 0,
                        'dimension': 'COLUMNS',
                        'startIndex': 1,
                        'endIndex': 2  # –¢–æ–ª—å–∫–æ B
                    }
                }
            })
            requests.append({
                'autoResizeDimensions': {
                    'dimensions': {
                        'sheetId': 0,
                        'dimension': 'COLUMNS',
                        'startIndex': 4,
                        'endIndex': 10  # E-J
                    }
                }
            })
            
            # 6. –í–´–°–û–¢–ê —Å—Ç—Ä–æ–∫–∏ —Å —à–∞–ø–∫–æ–π - 70 –ø–∏–∫—Å–µ–ª–µ–π
            requests.append({
                'updateDimensionProperties': {
                    'range': {
                        'sheetId': 0,
                        'dimension': 'ROWS',
                        'startIndex': 0,  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (—à–∞–ø–∫–∞)
                        'endIndex': 1
                    },
                    'properties': {
                        'pixelSize': 70
                    },
                    'fields': 'pixelSize'
                }
            })
            
            # 7. –í–´–°–û–¢–ê —Å—Ç—Ä–æ–∫ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ - 250 –ø–∏–∫—Å–µ–ª–µ–π (–£–í–ï–õ–ò–ß–ï–ù–û –¥–ª—è —Ñ–æ—Ç–æ 250x250)
            requests.append({
                'updateDimensionProperties': {
                    'range': {
                        'sheetId': 0,
                        'dimension': 'ROWS',
                        'startIndex': 3,  # –ù–∞—á–∏–Ω–∞—è —Å 4-–π —Å—Ç—Ä–æ–∫–∏ (–ø–µ—Ä–≤—ã–µ —Ç–æ–≤–∞—Ä—ã)
                        'endIndex': 1000
                    },
                    'properties': {
                        'pixelSize': 250
                    },
                    'fields': 'pixelSize'
                }
            })
            
            # 8. –¶–ï–ù–¢–†–ò–†–û–í–ê–ù–ò–ï –§–û–¢–û (–∫–æ–ª–æ–Ω–∫–∞ A): –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            requests.append({
                'repeatCell': {
                    'range': {
                        'sheetId': 0,
                        'startRowIndex': 3,  # –ù–∞—á–∏–Ω–∞—è —Å 4-–π —Å—Ç—Ä–æ–∫–∏ (—Ç–æ–≤–∞—Ä—ã)
                        'endRowIndex': 1000,
                        'startColumnIndex': 0,  # –ö–æ–ª–æ–Ω–∫–∞ A
                        'endColumnIndex': 1
                    },
                    'cell': {
                        'userEnteredFormat': {
                            'verticalAlignment': 'MIDDLE',     # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                            'horizontalAlignment': 'CENTER'   # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                        }
                    },
                    'fields': 'userEnteredFormat(verticalAlignment,horizontalAlignment)'
                }
            })
            
            # 9. –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–ö–°–¢–û–í–´–• –ö–û–õ–û–ù–û–ö: –≤–µ—Ä—Ç–∏–∫–∞–ª—å –ø–æ —Ü–µ–Ω—Ç—Ä—É, –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é + –ø–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞
            # –ö–æ–ª–æ–Ω–∫–∏ B (–ù–∞–∑–≤–∞–Ω–∏–µ), C (–î–∏–∑–∞–π–Ω), D (–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)
            text_columns = [1, 2, 3]  # B, C, D
            for col_index in text_columns:
                requests.append({
                    'repeatCell': {
                        'range': {
                            'sheetId': 0,
                            'startRowIndex': 3,  # –ù–∞—á–∏–Ω–∞—è —Å 4-–π —Å—Ç—Ä–æ–∫–∏ (—Ç–æ–≤–∞—Ä—ã)
                            'endRowIndex': 1000,
                            'startColumnIndex': col_index,
                            'endColumnIndex': col_index + 1
                        },
                        'cell': {
                            'userEnteredFormat': {
                                'verticalAlignment': 'MIDDLE',  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                                'horizontalAlignment': 'LEFT',   # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
                                'wrapStrategy': 'WRAP'            # –ü–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞
                            }
                        },
                        'fields': 'userEnteredFormat(verticalAlignment,horizontalAlignment,wrapStrategy)'
                    }
                })
            
            # 10. –¶–ï–ù–¢–†–ò–†–û–í–ê–ù–ò–ï –¶–ï–ù –ò –¢–ò–†–ê–ñ–ï–ô (–∫–æ–ª–æ–Ω–∫–∏ E-I): –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            for col_index in range(4, 9):  # E, F, G, H, I
                requests.append({
                    'repeatCell': {
                        'range': {
                            'sheetId': 0,
                            'startRowIndex': 3,  # –ù–∞—á–∏–Ω–∞—è —Å 4-–π —Å—Ç—Ä–æ–∫–∏ (—Ç–æ–≤–∞—Ä—ã)
                            'endRowIndex': 1000,
                            'startColumnIndex': col_index,
                            'endColumnIndex': col_index + 1
                        },
                        'cell': {
                            'userEnteredFormat': {
                                'verticalAlignment': 'MIDDLE',    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                                'horizontalAlignment': 'CENTER'  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                            }
                        },
                        'fields': 'userEnteredFormat(verticalAlignment,horizontalAlignment)'
                    }
                })
            
            # 11. –¶–ï–ù–¢–†–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ó–¶–ê (–∫–æ–ª–æ–Ω–∫–∞ J): –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            requests.append({
                'repeatCell': {
                    'range': {
                        'sheetId': 0,
                        'startRowIndex': 3,  # –ù–∞—á–∏–Ω–∞—è —Å 4-–π —Å—Ç—Ä–æ–∫–∏ (—Ç–æ–≤–∞—Ä—ã)
                        'endRowIndex': 1000,
                        'startColumnIndex': 9,  # –ö–æ–ª–æ–Ω–∫–∞ J
                        'endColumnIndex': 10
                    },
                    'cell': {
                        'userEnteredFormat': {
                            'verticalAlignment': 'MIDDLE',    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                            'horizontalAlignment': 'CENTER'  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                        }
                    },
                    'fields': 'userEnteredFormat(verticalAlignment,horizontalAlignment)'
                }
            })
            
            # 12. –¶–ï–ù–¢–†–ò–†–û–í–ê–ù–ò–ï –î–û–ü. –§–û–¢–û (–∫–æ–ª–æ–Ω–∫–∏ K-M): –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            for col_index in range(10, 13):  # K, L, M
                requests.append({
                    'repeatCell': {
                        'range': {
                            'sheetId': 0,
                            'startRowIndex': 3,  # –ù–∞—á–∏–Ω–∞—è —Å 4-–π —Å—Ç—Ä–æ–∫–∏ (—Ç–æ–≤–∞—Ä—ã)
                            'endRowIndex': 1000,
                            'startColumnIndex': col_index,
                            'endColumnIndex': col_index + 1
                        },
                        'cell': {
                            'userEnteredFormat': {
                                'verticalAlignment': 'MIDDLE',    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                                'horizontalAlignment': 'CENTER'  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                            }
                        },
                        'fields': 'userEnteredFormat(verticalAlignment,horizontalAlignment)'
                    }
                })
            
            body = {
                'requests': requests
            }
            
            self.sheets_service.spreadsheets().batchUpdate(
                spreadsheetId=spreadsheet_id,
                body=body
            ).execute()
            
            print(f"‚úÖ [Google Sheets] –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  [Google Sheets] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def generate(self, session_id):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Google Sheets –ö–ü
        
        –°–æ–∑–¥–∞–µ—Ç Google Spreadsheet —Å –ø—É–±–ª–∏—á–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        """
        
        if not self.sheets_service:
            raise Exception("Google Sheets API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GOOGLE_CREDENTIALS_JSON –≤ .env")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        products = self.get_kp_items(session_id)
        
        if not products:
            raise ValueError("–ö–ü –ø—É—Å—Ç–æ–µ. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π.")
        
        sheet_data, merge_requests = self.prepare_sheet_data(products)
        
        # –°–æ–∑–¥–∞–µ–º Google Spreadsheet
        title = f'–ö–ü_{datetime.now().strftime("%Y%m%d_%H%M%S")}'
        spreadsheet_id, spreadsheet_url = self.create_spreadsheet(title)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞
        first_sheet_name = self.get_first_sheet_name(spreadsheet_id)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        self.update_cells(spreadsheet_id, f'{first_sheet_name}!A1', sheet_data)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫
        if merge_requests:
            self.apply_merge_cells(spreadsheet_id, merge_requests)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.format_sheet(spreadsheet_id)
        
        print(f"‚úÖ [Google Sheets] –ö–ü —Å–æ–∑–¥–∞–Ω–æ: {spreadsheet_url}")
        
        return {
            'spreadsheet_id': spreadsheet_id,
            'spreadsheet_url': spreadsheet_url,
            'title': title
        }


if __name__ == "__main__":
    """–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    # –î–ª—è —Ç–µ—Å—Ç–∞ –Ω—É–∂–µ–Ω session_id
    test_session_id = input("–í–≤–µ–¥–∏—Ç–µ session_id –¥–ª—è —Ç–µ—Å—Ç–∞: ")
    
    generator = KPGoogleSheetsGenerator()
    
    try:
        result = generator.generate(test_session_id)
        print(f"\n‚úÖ [Google Sheets] –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {result['title']}")
        print(f"   –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(result['data'])}")
        print(f"   –¢–æ–≤–∞—Ä–æ–≤: {len(result['products'])}")
        
        print("\nüìã –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫:")
        for i, row in enumerate(result['data'][:10], 1):
            print(f"   {i}. {row}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

