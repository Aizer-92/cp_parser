"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Google Sheets –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
"""

import os
import sys
import json
from pathlib import Path
from datetime import datetime
from collections import defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text

# Google Sheets API
try:
    from google.oauth2 import service_account
    from googleapiclient.discovery import build
    from googleapiclient.errors import HttpError
    GOOGLE_AVAILABLE = True
except ImportError:
    GOOGLE_AVAILABLE = False
    print("‚ö†Ô∏è  [Google Sheets] google-auth –∏ google-api-python-client –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


class KPGoogleSheetsGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Google Sheets —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.db_manager = PostgreSQLManager()
        self.sheets_service = None
        self.drive_service = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google API
        if GOOGLE_AVAILABLE:
            self._init_google_api()
    
    def _init_google_api(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Google Sheets –∏ Drive API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            creds_json = os.getenv('GOOGLE_CREDENTIALS_JSON')
            
            if not creds_json:
                print("‚ö†Ô∏è  [Google Sheets] GOOGLE_CREDENTIALS_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
                return
            
            print("üîç [Google Sheets] GOOGLE_CREDENTIALS_JSON –Ω–∞–π–¥–µ–Ω")
            print(f"   –î–ª–∏–Ω–∞: {len(creds_json)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–∞—Ä—Å–∏–º JSON credentials
            try:
                creds_dict = json.loads(creds_json)
            except json.JSONDecodeError as e:
                # –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º - –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å
                print(f"‚ö†Ô∏è  [Google Sheets] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON, –ø—Ä–æ–±—É—é –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
                # –ó–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω–æ–µ
                creds_json = creds_json.replace('\\\\n', '\\n')
                creds_dict = json.loads(creds_json)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
            required_keys = ['type', 'project_id', 'private_key', 'client_email']
            missing_keys = [k for k in required_keys if k not in creds_dict]
            
            if missing_keys:
                print(f"‚ùå [Google Sheets] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ –≤ credentials: {missing_keys}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º private_key
            private_key = creds_dict.get('private_key', '')
            if '\\n' in private_key:
                print("üîß [Google Sheets] –ò—Å–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ä–º–∞—Ç private_key (\\n -> –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã)")
                creds_dict['private_key'] = private_key.replace('\\n', '\n')
            
            print(f"‚úÖ [Google Sheets] Credentials –≤–∞–ª–∏–¥–Ω—ã")
            print(f"   Project ID: {creds_dict.get('project_id')}")
            print(f"   Client Email: {creds_dict.get('client_email')}")
            print(f"   Private Key: {'BEGIN PRIVATE KEY' in creds_dict.get('private_key', '')}")
            
            # –°–æ–∑–¥–∞–µ–º credentials —Å –†–ê–°–®–ò–†–ï–ù–ù–´–ú–ò –ø—Ä–∞–≤–∞–º–∏
            credentials = service_account.Credentials.from_service_account_info(
                creds_dict,
                scopes=[
                    'https://www.googleapis.com/auth/spreadsheets',
                    'https://www.googleapis.com/auth/drive',  # –ü–æ–ª–Ω—ã–π Drive –¥–æ—Å—Ç—É–ø
                    'https://www.googleapis.com/auth/drive.file'
                ]
            )
            
            print("üîß [Google Sheets] –°–æ–∑–¥–∞—é API —Å–µ—Ä–≤–∏—Å—ã...")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            self.sheets_service = build('sheets', 'v4', credentials=credentials)
            self.drive_service = build('drive', 'v3', credentials=credentials)
            
            print("‚úÖ [Google Sheets] API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–ï–°–¢: –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
            try:
                print("üß™ [Google Sheets] –¢–µ—Å—Ç–∏—Ä—É—é –¥–æ—Å—Ç—É–ø –∫ APIs...")
                # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
                # –ï—Å–ª–∏ API –Ω–µ –≤–∫–ª—é—á–µ–Ω - –ø–æ–ª—É—á–∏–º 403
                # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω - –ø–æ–ª—É—á–∏–º 404 (—á—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞)
                test_id = "test_invalid_id_12345"
                try:
                    self.sheets_service.spreadsheets().get(spreadsheetId=test_id).execute()
                except HttpError as e:
                    if e.resp.status == 404:
                        print("‚úÖ [Google Sheets] –î–æ—Å—Ç—É–ø –∫ Google Sheets API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    elif e.resp.status == 403:
                        print("‚ùå [Google Sheets] –ù–ï–¢ –î–û–°–¢–£–ü–ê –ö APIs!")
                        print("\n‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:")
                        print("   Google Sheets API –∏–ª–∏ Google Drive API –ù–ï –í–ö–õ–Æ–ß–ï–ù–´!")
                        print("\nüìù –î–ï–ô–°–¢–í–ò–Ø:")
                        print("   1. –û—Ç–∫—Ä–æ–π: https://console.cloud.google.com")
                        print(f"   2. –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç: {creds_dict.get('project_id')}")
                        print("   3. –ü–µ—Ä–µ–π–¥–∏: APIs & Services ‚Üí Library")
                        print("   4. –í–∫–ª—é—á–∏ (ENABLE):")
                        print("      - Google Sheets API")
                        print("      - Google Drive API")
                        print("   5. –ü–æ–¥–æ–∂–¥–∏ 2-3 –º–∏–Ω—É—Ç—ã")
                        print("   6. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
                        print("\nüì∏ –ü—Ä–æ–≤–µ—Ä—å Dashboard: https://console.cloud.google.com/apis/dashboard")
                    else:
                        print(f"‚ö†Ô∏è  [Google Sheets] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {e.resp.status}")
            except Exception as test_error:
                print(f"‚ö†Ô∏è  [Google Sheets] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø: {test_error}")
            
        except json.JSONDecodeError as e:
            print(f"‚ùå [Google Sheets] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON credentials: {e}")
            print("   –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ GOOGLE_CREDENTIALS_JSON - –≤–∞–ª–∏–¥–Ω—ã–π JSON")
        except Exception as e:
            print(f"‚ùå [Google Sheets] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API: {e}")
            import traceback
            traceback.print_exc()
    
    def get_kp_items(self, session_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –ö–ü –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ product_id"""
        
        db_session = self.db_manager.get_session_direct()
        
        try:
            result = db_session.execute(text("""
                SELECT 
                    ki.id as kp_item_id,
                    p.id as product_id,
                    p.name as product_name,
                    p.description,
                    p.sample_price,
                    p.sample_delivery_time,
                    po.id as price_offer_id,
                    po.quantity,
                    po.route,
                    po.price_usd,
                    po.price_rub,
                    po.delivery_time_days
                FROM kp_items ki
                JOIN products p ON p.id = ki.product_id
                JOIN price_offers po ON po.id = ki.price_offer_id
                WHERE ki.session_id = :session_id
                ORDER BY p.name, po.quantity
            """), {'session_id': session_id})
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ product_id
            products_grouped = defaultdict(lambda: {
                'info': None,
                'offers': [],
                'images': []
            })
            
            for row in result:
                product_id = row[1]
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ (–∑–∞–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —Ä–∞–∑)
                if products_grouped[product_id]['info'] is None:
                    products_grouped[product_id]['info'] = {
                        'name': row[2],
                        'description': row[3],
                        'sample_price': float(row[4]) if row[4] else None,
                        'sample_delivery_time': row[5]
                    }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                products_grouped[product_id]['offers'].append({
                    'quantity': row[7],
                    'route': row[8],
                    'price_usd': float(row[9]) if row[9] else None,
                    'price_rub': float(row[10]) if row[10] else None,
                    'delivery_days': row[11]
                })
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            for product_id in products_grouped.keys():
                img_result = db_session.execute(text("""
                    SELECT image_url, image_filename
                    FROM product_images
                    WHERE product_id = :product_id
                    AND (image_url IS NOT NULL OR image_filename IS NOT NULL)
                    ORDER BY CASE WHEN column_number = 1 THEN 0 ELSE 1 END, id
                    LIMIT 5
                """), {'product_id': product_id})
                
                for img_row in img_result:
                    image_url = img_row[0]
                    if not image_url and img_row[1]:
                        image_url = f"https://s3.ru1.storage.beget.cloud/73d16f7545b3-promogoods/images/{img_row[1]}"
                    
                    if image_url:
                        products_grouped[product_id]['images'].append(image_url)
            
            return products_grouped
        finally:
            db_session.close()
    
    def prepare_sheet_data(self, products_grouped):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google Sheets"""
        
        rows = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        rows.append(['–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï'])
        rows.append([f'–æ—Ç {datetime.now().strftime("%d.%m.%Y")}'])
        rows.append([''])  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
        for product_id, product_data in products_grouped.items():
            product_info = product_data['info']
            offers = product_data['offers']
            images = product_data['images']
            
            print(f"   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {product_info['name']} ({len(offers)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            rows.append([product_info['name'], '', '', '', '', ''])
            
            # –û–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if product_info['description']:
                desc_text = product_info['description'][:200]
                rows.append([desc_text, '', '', '', '', ''])
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑—Ü–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if product_info['sample_price'] or product_info['sample_delivery_time']:
                sample_parts = []
                if product_info['sample_price']:
                    sample_parts.append(f"–û–±—Ä–∞–∑–µ—Ü: ${product_info['sample_price']:.2f}")
                if product_info['sample_delivery_time']:
                    sample_parts.append(f"–°—Ä–æ–∫: {product_info['sample_delivery_time']} –¥–Ω.")
                rows.append([' | '.join(sample_parts), '', '', '', '', ''])
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å —Ü–µ–Ω–∞–º–∏
            rows.append(['–¢–∏—Ä–∞–∂', 'USD', 'RUB', '–î–æ—Å—Ç–∞–≤–∫–∞', '–°—Ä–æ–∫', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'])
            
            # –¶–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            for idx, offer in enumerate(offers):
                row_data = [
                    f"{offer['quantity']:,.0f} —à—Ç",
                    f"${offer['price_usd']:.2f}" if offer['price_usd'] else '-',
                    f"‚ÇΩ{offer['price_rub']:.2f}" if offer['price_rub'] else '-',
                    offer['route'] or '-',
                    f"{offer['delivery_days']} –¥–Ω." if offer['delivery_days'] else '-'
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                if idx == 0 and images:
                    # –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü
                    row_data.append(', '.join(images[:5]))  # –î–æ 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                else:
                    row_data.append('')
                
                rows.append(row_data)
            
            # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
            rows.append(['', '', '', '', '', ''])
        
        return rows
    
    def generate_mcp_instructions(self, session_id):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è MCP —Å–æ–∑–¥–∞–Ω–∏—è Google Sheets"""
        
        products = self.get_kp_items(session_id)
        
        if not products:
            raise ValueError("–ö–ü –ø—É—Å—Ç–æ–µ. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π.")
        
        sheet_data = self.prepare_sheet_data(products)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ MCP
        return {
            'title': f'–ö–ü_{datetime.now().strftime("%Y%m%d_%H%M%S")}',
            'data': sheet_data,
            'products': products  # –î–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        }
    
    def create_spreadsheet(self, title):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Google Spreadsheet (—Å workaround —á–µ—Ä–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ template)"""
        if not self.sheets_service:
            raise Exception("Google Sheets API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # WORKAROUND: –ü—Ä–æ–±—É–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π template –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        template_id = os.environ.get('GOOGLE_SHEETS_TEMPLATE_ID')
        
        if template_id:
            print(f"üîÑ [Google Sheets] –ü—Ä–æ–±—É—é —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å template: {template_id}")
            try:
                file_metadata = {
                    'name': title,
                    'mimeType': 'application/vnd.google-apps.spreadsheet'
                }
                
                result = self.drive_service.files().copy(
                    fileId=template_id,
                    body=file_metadata,
                    fields='id, webViewLink'
                ).execute()
                
                spreadsheet_id = result['id']
                spreadsheet_url = result['webViewLink']
                
                print(f"‚úÖ [Google Sheets] –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω template!")
                print(f"   ID: {spreadsheet_id}")
                print(f"   URL: {spreadsheet_url}")
                
                # –î–µ–ª–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–º —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                self._make_public_editable(spreadsheet_id)
                
                return spreadsheet_id, spreadsheet_url
                
            except HttpError as copy_error:
                print(f"‚ö†Ô∏è  [Google Sheets] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å template: HTTP {copy_error.resp.status}")
                print(f"   –ü—Ä–æ–±—É—é —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª...")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç template –∏–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å - –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
        try:
            spreadsheet = {
                'properties': {
                    'title': title
                }
            }
            
            print(f"üìù [Google Sheets] –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É: {title}")
            
            spreadsheet = self.sheets_service.spreadsheets().create(
                body=spreadsheet,
                fields='spreadsheetId,spreadsheetUrl'
            ).execute()
            
            spreadsheet_id = spreadsheet.get('spreadsheetId')
            spreadsheet_url = spreadsheet.get('spreadsheetUrl')
            
            print(f"‚úÖ [Google Sheets] –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {spreadsheet_id}")
            print(f"   URL: {spreadsheet_url}")
            
            # –î–µ–ª–∞–µ–º –ø—É–±–ª–∏—á–Ω–æ–π —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._make_public_editable(spreadsheet_id)
            
            return spreadsheet_id, spreadsheet_url
            
        except HttpError as e:
            error_details = e.error_details if hasattr(e, 'error_details') else []
            print(f"‚ùå [Google Sheets] HTTP Error {e.resp.status}: {e._get_reason()}")
            print(f"   URI: {e.uri}")
            print(f"   Details: {error_details}")
            
            if e.resp.status == 403:
                print("\nüîç –î–ò–ê–ì–ù–û–ó: Organization Policy –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤!")
                print("\nüí° WORKAROUND: –ò—Å–ø–æ–ª—å–∑—É–π TEMPLATE!")
                print("\nüìù –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
                print("1. –°–æ–∑–¥–∞–π Google Sheet –≤—Ä—É—á–Ω—É—é:")
                print("   https://docs.google.com/spreadsheets/")
                print("   –ù–∞–∑–≤–∞–Ω–∏–µ: '–ö–ü Template'")
                print("\n2. –†–∞—Å—à–∞—Ä—å —Å Service Account (–¥–∞–π –ø—Ä–∞–≤–∞ Editor):")
                print(f"   {os.environ.get('GOOGLE_CREDENTIALS_JSON', '')[:100]}...")
                print("   (–Ω–∞–π–¥–∏ client_email –≤ credentials)")
                print("\n3. –°–∫–æ–ø–∏—Ä—É–π Spreadsheet ID –∏–∑ URL:")
                print("   https://docs.google.com/spreadsheets/d/[THIS_IS_ID]/edit")
                print("\n4. –î–æ–±–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞ Railway:")
                print("   GOOGLE_SHEETS_TEMPLATE_ID = '—Ç–≤–æ–π-template-id'")
                print("\n5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ Railway - —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å template –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è!")
            else:
                print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
                print("1. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ Google Sheets API –≤–∫–ª—é—á–µ–Ω:")
                print("   https://console.cloud.google.com/apis/library/sheets.googleapis.com")
                print("2. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ Service Account –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞:")
                print("   https://console.cloud.google.com/iam-admin/serviceaccounts")
            
            raise
    
    def _make_public_editable(self, spreadsheet_id):
        """–î–µ–ª–∞–µ—Ç Google Spreadsheet –ø—É–±–ª–∏—á–Ω—ã–º —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        if not self.drive_service:
            return
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞: anyone with link can edit
            permission = {
                'type': 'anyone',
                'role': 'writer'  # writer = —Ä–µ–¥–∞–∫—Ç–æ—Ä
            }
            
            self.drive_service.permissions().create(
                fileId=spreadsheet_id,
                body=permission,
                fields='id'
            ).execute()
            
            print(f"‚úÖ [Google Sheets] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  [Google Sheets] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤: {e}")
    
    def update_cells(self, spreadsheet_id, range_name, values):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —è—á–µ–π–∫–∏ –≤ Google Spreadsheet"""
        if not self.sheets_service:
            raise Exception("Google Sheets API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        body = {
            'values': values
        }
        
        result = self.sheets_service.spreadsheets().values().update(
            spreadsheetId=spreadsheet_id,
            range=range_name,
            valueInputOption='USER_ENTERED',
            body=body
        ).execute()
        
        print(f"‚úÖ [Google Sheets] –û–±–Ω–æ–≤–ª–µ–Ω–æ —è—á–µ–µ–∫: {result.get('updatedCells')}")
        
        return result
    
    def format_sheet(self, spreadsheet_id):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Google Spreadsheet"""
        if not self.sheets_service:
            return
        
        try:
            requests = []
            
            # 1. –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∂–∏—Ä–Ω—ã–π, –±–æ–ª—å—à–æ–π —à—Ä–∏—Ñ—Ç)
            requests.append({
                'repeatCell': {
                    'range': {
                        'sheetId': 0,
                        'startRowIndex': 0,
                        'endRowIndex': 1,
                        'startColumnIndex': 0,
                        'endColumnIndex': 6
                    },
                    'cell': {
                        'userEnteredFormat': {
                            'textFormat': {
                                'fontSize': 16,
                                'bold': True
                            },
                            'horizontalAlignment': 'CENTER'
                        }
                    },
                    'fields': 'userEnteredFormat(textFormat,horizontalAlignment)'
                }
            })
            
            # 2. –î–∞—Ç–∞ (–∫—É—Ä—Å–∏–≤, —Ü–µ–Ω—Ç—Ä)
            requests.append({
                'repeatCell': {
                    'range': {
                        'sheetId': 0,
                        'startRowIndex': 1,
                        'endRowIndex': 2,
                        'startColumnIndex': 0,
                        'endColumnIndex': 6
                    },
                    'cell': {
                        'userEnteredFormat': {
                            'textFormat': {
                                'italic': True
                            },
                            'horizontalAlignment': 'CENTER'
                        }
                    },
                    'fields': 'userEnteredFormat(textFormat,horizontalAlignment)'
                }
            })
            
            # 3. –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            requests.append({
                'autoResizeDimensions': {
                    'dimensions': {
                        'sheetId': 0,
                        'dimension': 'COLUMNS',
                        'startIndex': 0,
                        'endIndex': 6
                    }
                }
            })
            
            body = {
                'requests': requests
            }
            
            self.sheets_service.spreadsheets().batchUpdate(
                spreadsheetId=spreadsheet_id,
                body=body
            ).execute()
            
            print(f"‚úÖ [Google Sheets] –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  [Google Sheets] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def generate(self, session_id):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Google Sheets –ö–ü
        
        –°–æ–∑–¥–∞–µ—Ç Google Spreadsheet —Å –ø—É–±–ª–∏—á–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        """
        
        if not self.sheets_service:
            raise Exception("Google Sheets API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GOOGLE_CREDENTIALS_JSON –≤ .env")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        products = self.get_kp_items(session_id)
        
        if not products:
            raise ValueError("–ö–ü –ø—É—Å—Ç–æ–µ. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π.")
        
        sheet_data = self.prepare_sheet_data(products)
        
        # –°–æ–∑–¥–∞–µ–º Google Spreadsheet
        title = f'–ö–ü_{datetime.now().strftime("%Y%m%d_%H%M%S")}'
        spreadsheet_id, spreadsheet_url = self.create_spreadsheet(title)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        self.update_cells(spreadsheet_id, 'Sheet1!A1', sheet_data)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.format_sheet(spreadsheet_id)
        
        print(f"‚úÖ [Google Sheets] –ö–ü —Å–æ–∑–¥–∞–Ω–æ: {spreadsheet_url}")
        
        return {
            'spreadsheet_id': spreadsheet_id,
            'spreadsheet_url': spreadsheet_url,
            'title': title
        }


if __name__ == "__main__":
    """–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    # –î–ª—è —Ç–µ—Å—Ç–∞ –Ω—É–∂–µ–Ω session_id
    test_session_id = input("–í–≤–µ–¥–∏—Ç–µ session_id –¥–ª—è —Ç–µ—Å—Ç–∞: ")
    
    generator = KPGoogleSheetsGenerator()
    
    try:
        result = generator.generate(test_session_id)
        print(f"\n‚úÖ [Google Sheets] –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {result['title']}")
        print(f"   –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(result['data'])}")
        print(f"   –¢–æ–≤–∞—Ä–æ–≤: {len(result['products'])}")
        
        print("\nüìã –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫:")
        for i, row in enumerate(result['data'][:10], 1):
            print(f"   {i}. {row}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

