"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Google Sheets –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
"""

import os
import sys
from pathlib import Path
from datetime import datetime
from collections import defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text


class KPGoogleSheetsGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Google Sheets —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.db_manager = PostgreSQLManager()
        # Google Sheets API –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ MCP
    
    def get_kp_items(self, session_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –ö–ü –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ product_id"""
        
        db_session = self.db_manager.get_session_direct()
        
        try:
            result = db_session.execute(text("""
                SELECT 
                    ki.id as kp_item_id,
                    p.id as product_id,
                    p.name as product_name,
                    p.description,
                    p.sample_price,
                    p.sample_delivery_time,
                    po.id as price_offer_id,
                    po.quantity,
                    po.route,
                    po.price_usd,
                    po.price_rub,
                    po.delivery_time_days
                FROM kp_items ki
                JOIN products p ON p.id = ki.product_id
                JOIN price_offers po ON po.id = ki.price_offer_id
                WHERE ki.session_id = :session_id
                ORDER BY p.name, po.quantity
            """), {'session_id': session_id})
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ product_id
            products_grouped = defaultdict(lambda: {
                'info': None,
                'offers': [],
                'images': []
            })
            
            for row in result:
                product_id = row[1]
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ (–∑–∞–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —Ä–∞–∑)
                if products_grouped[product_id]['info'] is None:
                    products_grouped[product_id]['info'] = {
                        'name': row[2],
                        'description': row[3],
                        'sample_price': float(row[4]) if row[4] else None,
                        'sample_delivery_time': row[5]
                    }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                products_grouped[product_id]['offers'].append({
                    'quantity': row[7],
                    'route': row[8],
                    'price_usd': float(row[9]) if row[9] else None,
                    'price_rub': float(row[10]) if row[10] else None,
                    'delivery_days': row[11]
                })
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            for product_id in products_grouped.keys():
                img_result = db_session.execute(text("""
                    SELECT image_url, image_filename
                    FROM product_images
                    WHERE product_id = :product_id
                    AND (image_url IS NOT NULL OR image_filename IS NOT NULL)
                    ORDER BY CASE WHEN column_number = 1 THEN 0 ELSE 1 END, id
                    LIMIT 5
                """), {'product_id': product_id})
                
                for img_row in img_result:
                    image_url = img_row[0]
                    if not image_url and img_row[1]:
                        image_url = f"https://s3.ru1.storage.beget.cloud/73d16f7545b3-promogoods/images/{img_row[1]}"
                    
                    if image_url:
                        products_grouped[product_id]['images'].append(image_url)
            
            return products_grouped
        finally:
            db_session.close()
    
    def prepare_sheet_data(self, products_grouped):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google Sheets"""
        
        rows = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        rows.append(['–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï'])
        rows.append([f'–æ—Ç {datetime.now().strftime("%d.%m.%Y")}'])
        rows.append([''])  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
        for product_id, product_data in products_grouped.items():
            product_info = product_data['info']
            offers = product_data['offers']
            images = product_data['images']
            
            print(f"   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {product_info['name']} ({len(offers)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            rows.append([product_info['name'], '', '', '', '', ''])
            
            # –û–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if product_info['description']:
                desc_text = product_info['description'][:200]
                rows.append([desc_text, '', '', '', '', ''])
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑—Ü–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if product_info['sample_price'] or product_info['sample_delivery_time']:
                sample_parts = []
                if product_info['sample_price']:
                    sample_parts.append(f"–û–±—Ä–∞–∑–µ—Ü: ${product_info['sample_price']:.2f}")
                if product_info['sample_delivery_time']:
                    sample_parts.append(f"–°—Ä–æ–∫: {product_info['sample_delivery_time']} –¥–Ω.")
                rows.append([' | '.join(sample_parts), '', '', '', '', ''])
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å —Ü–µ–Ω–∞–º–∏
            rows.append(['–¢–∏—Ä–∞–∂', 'USD', 'RUB', '–î–æ—Å—Ç–∞–≤–∫–∞', '–°—Ä–æ–∫', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'])
            
            # –¶–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            for idx, offer in enumerate(offers):
                row_data = [
                    f"{offer['quantity']:,.0f} —à—Ç",
                    f"${offer['price_usd']:.2f}" if offer['price_usd'] else '-',
                    f"‚ÇΩ{offer['price_rub']:.2f}" if offer['price_rub'] else '-',
                    offer['route'] or '-',
                    f"{offer['delivery_days']} –¥–Ω." if offer['delivery_days'] else '-'
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                if idx == 0 and images:
                    # –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü
                    row_data.append(', '.join(images[:5]))  # –î–æ 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                else:
                    row_data.append('')
                
                rows.append(row_data)
            
            # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
            rows.append(['', '', '', '', '', ''])
        
        return rows
    
    def generate_mcp_instructions(self, session_id):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è MCP —Å–æ–∑–¥–∞–Ω–∏—è Google Sheets"""
        
        products = self.get_kp_items(session_id)
        
        if not products:
            raise ValueError("–ö–ü –ø—É—Å—Ç–æ–µ. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π.")
        
        sheet_data = self.prepare_sheet_data(products)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ MCP
        return {
            'title': f'–ö–ü_{datetime.now().strftime("%Y%m%d_%H%M%S")}',
            'data': sheet_data,
            'products': products  # –î–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        }
    
    def generate(self, session_id):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Google Sheets –ö–ü
        
        –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ MCP.
        –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Google Sheets –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑:
        1. mcp_google-sheets_create_spreadsheet(title)
        2. mcp_google-sheets_update_cells(spreadsheet_id, sheet, range, data)
        3. –í—Å—Ç–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É)
        """
        
        return self.generate_mcp_instructions(session_id)


if __name__ == "__main__":
    """–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    # –î–ª—è —Ç–µ—Å—Ç–∞ –Ω—É–∂–µ–Ω session_id
    test_session_id = input("–í–≤–µ–¥–∏—Ç–µ session_id –¥–ª—è —Ç–µ—Å—Ç–∞: ")
    
    generator = KPGoogleSheetsGenerator()
    
    try:
        result = generator.generate(test_session_id)
        print(f"\n‚úÖ [Google Sheets] –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {result['title']}")
        print(f"   –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(result['data'])}")
        print(f"   –¢–æ–≤–∞—Ä–æ–≤: {len(result['products'])}")
        
        print("\nüìã –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫:")
        for i, row in enumerate(result['data'][:10], 1):
            print(f"   {i}. {row}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

