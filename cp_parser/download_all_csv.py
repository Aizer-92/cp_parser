#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV –¥–ª—è –≤—Å–µ—Ö Template 4 –ø—Ä–æ–µ–∫—Ç–æ–≤
–ë–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î - —Ç–æ–ª—å–∫–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
"""

import sys
from pathlib import Path
sys.path.insert(0, str(Path.cwd()))

from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text
import os
import csv as csv_lib
from datetime import datetime
import time
import gspread
from google.oauth2.service_account import Credentials

# Railway DB
os.environ['USE_RAILWAY_DB'] = 'true'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
GSPREAD_CLIENT = None

def get_gspread_client():
    """–°–æ–∑–¥–∞–µ—Ç gspread –∫–ª–∏–µ–Ω—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑"""
    global GSPREAD_CLIENT
    if GSPREAD_CLIENT is None:
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑—É—é—Å—å –≤ Google API...", flush=True)
        scope = ['https://www.googleapis.com/auth/spreadsheets.readonly',
                 'https://www.googleapis.com/auth/drive.readonly']
        creds = Credentials.from_service_account_file('service_account.json', scopes=scope)
        GSPREAD_CLIENT = gspread.authorize(creds)
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n", flush=True)
    return GSPREAD_CLIENT

def download_csv(sheet_id, output_path):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç CSV"""
    try:
        client = get_gspread_client()
        sheet = client.open_by_key(sheet_id)
        worksheet = sheet.get_worksheet(0)
        values = worksheet.get_all_values()
        
        with open(output_path, 'w', encoding='utf-8', newline='') as f:
            writer = csv_lib.writer(f)
            writer.writerows(values)
        
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}", flush=True)
        return False

def main():
    print("="*80, flush=True)
    print("üì• –°–ö–ê–ß–ò–í–ê–ù–ò–ï CSV –î–õ–Ø –í–°–ï–• TEMPLATE 4 –ü–†–û–ï–ö–¢–û–í", flush=True)
    print("="*80, flush=True)
    
    print("\nüìä –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –ë–î...", flush=True)
    db = PostgreSQLManager()
    
    print("üìä –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤...", flush=True)
    
    with db.get_session() as session:
        projects_data = session.execute(text("""
            SELECT DISTINCT
                pr.id,
                pr.project_name,
                pr.google_sheets_url
            FROM projects pr
            INNER JOIN products p ON pr.id = p.project_id
            WHERE p.sample_price IS NOT NULL
            AND pr.google_sheets_url IS NOT NULL
            ORDER BY pr.id
        """)).fetchall()
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(projects_data)} –ø—Ä–æ–µ–∫—Ç–æ–≤ Template 4", flush=True)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
    projects = []
    for proj in projects_data:
        if '/d/' in proj.google_sheets_url:
            sheet_id = proj.google_sheets_url.split('/d/')[1].split('/')[0]
            projects.append({
                'id': proj.id,
                'name': proj.project_name,
                'sheet_id': sheet_id,
                'url': proj.google_sheets_url
            })
    
    total_projects = len(projects)
    print(f"üìã –° –≤–∞–ª–∏–¥–Ω—ã–º–∏ URL: {total_projects}", flush=True)
    
    csv_dir = Path('verification_csv_all')
    csv_dir.mkdir(exist_ok=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ CSV —É–∂–µ –µ—Å—Ç—å
    existing_csvs = len(list(csv_dir.glob('*.csv')))
    print(f"üìÅ CSV —É–∂–µ —Å–∫–∞—á–∞–Ω–æ: {existing_csvs}", flush=True)
    print(f"üì• –ù—É–∂–Ω–æ –¥–æ–∫–∞—á–∞—Ç—å: {total_projects - existing_csvs}", flush=True)
    print(f"üìÅ –ü–∞–ø–∫–∞: {csv_dir.absolute()}\n", flush=True)
    
    start_time = time.time()
    downloaded = 0
    skipped = 0
    failed = 0
    
    print("üöÄ –ù–ê–ß–ò–ù–ê–Æ –°–ö–ê–ß–ò–í–ê–ù–ò–ï...\n", flush=True)
    
    for i, project in enumerate(projects, 1):
        csv_path = csv_dir / f"proj_{project['id']}.csv"
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
        if csv_path.exists():
            skipped += 1
            continue
        
        # –°–∫–∞—á–∏–≤–∞–µ–º
        print(f"üì• [{i}/{total_projects}] –ü—Ä–æ–µ–∫—Ç {project['id']}: {project['name'][:60]}...", flush=True)
        
        if download_csv(project['sheet_id'], csv_path):
            downloaded += 1
            print(f"  ‚úÖ –°–∫–∞—á–∞–Ω–æ", flush=True)
        else:
            failed += 1
            print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å", flush=True)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –ø—Ä–æ–µ–∫—Ç–æ–≤
        if i % 50 == 0:
            elapsed = time.time() - start_time
            avg_time = elapsed / i
            remaining = (total_projects - i) * avg_time / 60
            
            print(f"\n‚è±Ô∏è  –ü–†–û–ì–†–ï–°–°: {i}/{total_projects} ({i*100//total_projects}%)", flush=True)
            print(f"  ‚úÖ –°–∫–∞—á–∞–Ω–æ: {downloaded}", flush=True)
            print(f"  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}", flush=True)
            print(f"  ‚ùå –û—à–∏–±–æ–∫: {failed}", flush=True)
            print(f"  ‚è±Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å: ~{int(remaining)} –º–∏–Ω\n", flush=True)
        
        # –ü–∞—É–∑–∞ –¥–ª—è API (–∏–∑–±–µ–≥–∞–µ–º 429 –æ—à–∏–±–∫–∏)
        time.sleep(1.2)
    
    # –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
    print("\n" + "="*80, flush=True)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢", flush=True)
    print("="*80, flush=True)
    print(f"‚úÖ –°–∫–∞—á–∞–Ω–æ –Ω–æ–≤—ã—Ö: {downloaded:,}", flush=True)
    print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –±—ã–ª–∏): {skipped:,}", flush=True)
    print(f"‚ùå –û—à–∏–±–æ–∫: {failed:,}", flush=True)
    print(f"üìÅ –í—Å–µ–≥–æ CSV —Ñ–∞–π–ª–æ–≤: {len(list(csv_dir.glob('*.csv'))):,}", flush=True)
    
    elapsed_total = time.time() - start_time
    print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {int(elapsed_total/60)} –º–∏–Ω {int(elapsed_total%60)} —Å–µ–∫", flush=True)
    print("="*80, flush=True)
    
    if failed > 0:
        print(f"\n‚ö†Ô∏è  –ï—Å—Ç—å {failed} –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", flush=True)
        print("üí° –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç - –æ–Ω –ø—Ä–æ–ø—É—Å—Ç–∏—Ç —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", flush=True)

if __name__ == '__main__':
    main()

