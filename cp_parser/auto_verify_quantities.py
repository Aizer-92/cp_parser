#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ä–∞–∂–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö Template 4
–°–∫–∞—á–∏–≤–∞–µ—Ç Excel —Ñ–∞–π–ª—ã –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–∏—Ä–∞–∂–∏ —Å –ë–î
"""

import sys
from pathlib import Path
sys.path.insert(0, str(Path.cwd()))

import json
import requests
import gspread
from google.oauth2.service_account import Credentials
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text
import os
from openpyxl import load_workbook
import csv
from datetime import datetime

# Railway DB
os.environ['USE_RAILWAY_DB'] = 'true'

def download_excel(sheet_id, output_path):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç Google Sheet –∫–∞–∫ Excel –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        scope = ['https://www.googleapis.com/auth/spreadsheets.readonly',
                 'https://www.googleapis.com/auth/drive.readonly']
        creds = Credentials.from_service_account_file('service_account.json', scopes=scope)
        
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –±—ã—Å—Ç—Ä–æ)
        export_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=xlsx"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Å —Ç–æ–∫–µ–Ω–æ–º
        response = requests.get(export_url, headers={'Authorization': f'Bearer {creds.token}'})
        
        if response.status_code == 200:
            with open(output_path, 'wb') as f:
                f.write(response.content)
            return True
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def extract_quantity_from_excel(excel_path, row_number):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏—Ä–∞–∂ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ E —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    try:
        wb = load_workbook(excel_path, data_only=True, read_only=True)
        ws = wb.active
        
        # –ö–æ–ª–æ–Ω–∫–∞ E = 5
        cell_value = ws.cell(row=row_number, column=5).value
        
        if cell_value is None:
            return None
            
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
        try:
            return int(float(str(cell_value).replace(',', '').replace(' ', '')))
        except:
            return str(cell_value)
            
    except Exception as e:
        print(f"    ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel: {e}")
        return None

def verify_project(project_data, db, temp_dir):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç"""
    project_id = project_data['id']
    sheet_id = project_data['sheet_id']
    
    print(f"\n{'='*80}")
    print(f"üîç –ü–†–û–ï–ö–¢ ID {project_id}: {project_data['name'][:60]}")
    print(f"{'='*80}")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º Excel
    excel_path = temp_dir / f"project_{project_id}.xlsx"
    print(f"üì• –°–∫–∞—á–∏–≤–∞—é Excel...")
    
    if not download_excel(sheet_id, excel_path):
        return None
    
    print(f"‚úÖ –°–∫–∞—á–∞–Ω: {excel_path.stat().st_size / 1024:.1f} KB")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏ —Ç–∏—Ä–∞–∂–∏ –∏–∑ –ë–î
    with db.get_session() as session:
        products = session.execute(text("""
            SELECT 
                p.id as product_id,
                p.name as product_name,
                p.row_number,
                po.quantity as db_quantity,
                po.route
            FROM products p
            INNER JOIN price_offers po ON p.id = po.product_id
            WHERE p.project_id = :project_id
            AND po.quantity >= 300
            AND po.quantity % 10 = 0
            ORDER BY p.row_number, po.route
        """), {'project_id': project_id}).fetchall()
        
        if not products:
            print(f"‚ö†Ô∏è  –ù–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            return None
        
        print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è—é {len(products)} –∑–∞–ø–∏—Å–µ–π...")
        
        results = []
        checked_rows = {}  # –ö—ç—à: row_number -> excel_quantity
        
        for prod in products:
            row_num = prod.row_number
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if row_num in checked_rows:
                excel_qty = checked_rows[row_num]
            else:
                excel_qty = extract_quantity_from_excel(excel_path, row_num)
                checked_rows[row_num] = excel_qty
            
            db_qty = int(prod.db_quantity)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            is_x10 = False
            status = "‚úì"
            
            if excel_qty is None:
                status = "‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            elif isinstance(excel_qty, str):
                status = "‚ö†Ô∏è  –ù–µ —á–∏—Å–ª–æ"
            elif excel_qty * 10 == db_qty:
                is_x10 = True
                status = "‚ùå x10"
            elif excel_qty == db_qty:
                status = "‚úÖ OK"
            else:
                status = f"‚ö†Ô∏è  –ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ({excel_qty})"
            
            results.append({
                'product_id': prod.product_id,
                'product_name': prod.product_name,
                'row_number': row_num,
                'excel_quantity': excel_qty,
                'db_quantity': db_qty,
                'route': prod.route,
                'is_x10': is_x10,
                'status': status
            })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        x10_count = sum(1 for r in results if r['is_x10'])
        ok_count = sum(1 for r in results if r['status'] == "‚úÖ OK")
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"  ‚ùå –û—à–∏–±–∫–∞ x10: {x10_count} ({x10_count/len(results)*100:.1f}%)")
        print(f"  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {ok_count} ({ok_count/len(results)*100:.1f}%)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ—à–∏–±–æ–∫
        if x10_count > 0:
            print(f"\n‚ùå –ü–†–ò–ú–ï–†–´ –û–®–ò–ë–û–ö x10:")
            for r in results[:5]:
                if r['is_x10']:
                    print(f"  –°—Ç—Ä–æ–∫–∞ {r['row_number']}: Excel={r['excel_quantity']} ‚Üí –ë–î={r['db_quantity']}")
        
        return {
            'project_id': project_id,
            'project_name': project_data['name'],
            'url': project_data['url'],
            'total_records': len(results),
            'x10_errors': x10_count,
            'ok_count': ok_count,
            'results': results
        }

def main():
    print("="*80)
    print("üîç –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –¢–ò–†–ê–ñ–ï–ô")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    with open('projects_to_verify.json', 'r', encoding='utf-8') as f:
        projects = json.load(f)
    
    print(f"\nüìã –ü—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(projects)}")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    temp_dir = Path('temp_verification')
    temp_dir.mkdir(exist_ok=True)
    
    # –ë–î
    db = PostgreSQLManager()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç
    all_results = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ 50 –ø—Ä–æ–µ–∫—Ç–æ–≤
    for i, project in enumerate(projects, 1):
        print(f"\n\n{'#'*80}")
        print(f"# –ü–†–û–ï–ö–¢ {i}/{len(projects)}")
        print(f"{'#'*80}")
        
        result = verify_project(project, db, temp_dir)
        if result:
            all_results.append(result)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n\n" + "="*80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*80)
    
    total_x10_errors = sum(r['x10_errors'] for r in all_results)
    total_records = sum(r['total_records'] for r in all_results)
    
    print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(all_results)}")
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records:,}")
    
    if total_records > 0:
        print(f"‚ùå –û—à–∏–±–æ–∫ x10: {total_x10_errors:,} ({total_x10_errors/total_records*100:.1f}%)")
    else:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
    
    print(f"\nüìã –ü–†–û–ï–ö–¢–´ –° –û–®–ò–ë–ö–ê–ú–ò:")
    for r in all_results:
        if r['x10_errors'] > 0:
            print(f"\n  ID {r['project_id']}: {r['project_name'][:60]}")
            print(f"    –û—à–∏–±–æ–∫: {r['x10_errors']}/{r['total_records']} ({r['x10_errors']/r['total_records']*100:.1f}%)")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    csv_path = Path(f"–ê–í–¢–û–ü–†–û–í–ï–†–ö–ê_–†–ï–ó–£–õ–¨–¢–ê–¢–´_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv")
    
    with open(csv_path, 'w', newline='', encoding='utf-8-sig') as f:
        writer = csv.writer(f)
        writer.writerow([
            'ID –ü—Ä–æ–µ–∫—Ç–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', 'ID –¢–æ–≤–∞—Ä–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
            '–°—Ç—Ä–æ–∫–∞', '–¢–∏—Ä–∞–∂ Excel', '–¢–∏—Ä–∞–∂ –ë–î', '–ú–∞—Ä—à—Ä—É—Ç', '–°—Ç–∞—Ç—É—Å', '–û—à–∏–±–∫–∞ x10'
        ])
        
        for proj_result in all_results:
            for r in proj_result['results']:
                writer.writerow([
                    proj_result['project_id'],
                    proj_result['project_name'],
                    r['product_id'],
                    r['product_name'],
                    r['row_number'],
                    r['excel_quantity'],
                    r['db_quantity'],
                    r['route'],
                    r['status'],
                    '–î–ê' if r['is_x10'] else '–ù–ï–¢'
                ])
    
    print(f"\n‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {csv_path}")
    print(f"\nüíæ Excel —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {temp_dir}")
    
    print("\n" + "="*80)

if __name__ == '__main__':
    main()

