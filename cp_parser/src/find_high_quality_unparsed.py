#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–∞—Ä—Å—è—Ç—Å—è.
–≠—Ç–∏ —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞.
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from src.structure_parser import CommercialProposalParser
from loguru import logger

class HighQualityUnparsedFinder:
    """–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–∞—Ä—Å—è—Ç—Å—è"""
    
    def __init__(self):
        self.structure_parser = CommercialProposalParser()
        self.logger = logger
        
    def find_high_quality_unparsed_files(self, min_quality=70):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª—ã —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–∞—Ä—Å—è—Ç—Å—è"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        analysis_results = self.structure_parser.analyze_test_files()
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—à–µ–¥—à–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ñ–∞–π–ª—ã
        failed_files = analysis_results.get('non_parseable_files', [])
        error_files = analysis_results.get('error_files', [])
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
        all_failed = failed_files + error_files
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        high_quality_files = []
        
        for file_result in all_failed:
            matches = file_result.get('structure_matches', 0)
            total = file_result.get('total_expected', 15)
            quality_percentage = round((matches / total) * 100, 1) if total > 0 else 0
            
            if quality_percentage >= min_quality:
                high_quality_files.append({
                    'file_name': file_result.get('file_name', 'Unknown'),
                    'quality': quality_percentage,
                    'matches': matches,
                    'total': total,
                    'error': file_result.get('error', 'No error info'),
                    'sheet_name': file_result.get('sheet_name', 'Unknown'),
                    'file_path': file_result.get('file_path', '')
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (–æ—Ç –≤—ã—Å–æ–∫–æ–≥–æ –∫ –Ω–∏–∑–∫–æ–º—É)
        high_quality_files.sort(key=lambda x: x['quality'], reverse=True)
        
        return high_quality_files
    
    def print_analysis_report(self, min_quality=70):
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –ø–æ —Ñ–∞–π–ª–∞–º —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–∞—Ä—Å—è—Ç—Å—è"""
        
        high_quality_files = self.find_high_quality_unparsed_files(min_quality)
        
        print(f"\nüéØ –§–ê–ô–õ–´ –° –í–´–°–û–ö–ò–ú –ö–ê–ß–ï–°–¢–í–û–ú –°–¢–†–£–ö–¢–£–†–´ (‚â•{min_quality}%), –ö–û–¢–û–†–´–ï –ù–ï –ü–ê–†–°–Ø–¢–°–Ø")
        print(f"=" * 90)
        
        if not high_quality_files:
            print(f"‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º ‚â•{min_quality}% —É—Å–ø–µ—à–Ω–æ –ø–∞—Ä—Å—è—Ç—Å—è!")
            return []
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(high_quality_files)} —Ñ–∞–π–ª–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è:")
        print()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏
        by_error_type = {}
        for file_info in high_quality_files:
            error = file_info['error']
            if '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ª–∏—Å—Ç—ã' in error.lower():
                error_type = "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ª–∏—Å—Ç—ã"
            elif '–Ω–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥' in error.lower():
                error_type = "–ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"
            elif 'file is not a zip file' in error.lower():
                error_type = "–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"
            else:
                error_type = "–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞"
            
            if error_type not in by_error_type:
                by_error_type[error_type] = []
            by_error_type[error_type].append(file_info)
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ –≥—Ä—É–ø–ø–∞–º
        for error_type, files in by_error_type.items():
            print(f"üîç {error_type.upper()} ({len(files)} —Ñ–∞–π–ª–æ–≤):")
            print(f"   {'‚Ññ':>2} | {'–ö–∞—á–µ—Å—Ç–≤–æ':>8} | {'–°–æ–≤–ø–∞–¥–µ–Ω–∏—è':>10} | {'–§–∞–π–ª':50} | {'–õ–∏—Å—Ç'}")
            print(f"   {'-' * 2}-+-{'-' * 8}-+-{'-' * 10}-+-{'-' * 50}-+-{'-' * 20}")
            
            for i, file_info in enumerate(files, 1):
                file_name = file_info['file_name']
                if len(file_name) > 50:
                    file_name = file_name[:47] + "..."
                
                sheet_name = file_info['sheet_name']
                if len(sheet_name) > 20:
                    sheet_name = sheet_name[:17] + "..."
                
                quality = f"{file_info['quality']:5.1f}%"
                matches = f"{file_info['matches']:2d}/{file_info['total']:2d}"
                
                print(f"   {i:2d} | {quality:>8} | {matches:>10} | {file_name:50} | {sheet_name}")
            
            print()
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"üí° –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        # –§–∞–π–ª—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º >= 90%
        top_quality = [f for f in high_quality_files if f['quality'] >= 90]
        if top_quality:
            print(f"   üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: {len(top_quality)} —Ñ–∞–π–ª–æ–≤ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º ‚â•90%")
            for file_info in top_quality[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
                print(f"      ‚Ä¢ {file_info['file_name']} ({file_info['quality']}%)")
        
        # –§–∞–π–ª—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 80-89%
        high_quality = [f for f in high_quality_files if 80 <= f['quality'] < 90]
        if high_quality:
            print(f"   ‚ö° –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢: {len(high_quality)} —Ñ–∞–π–ª–æ–≤ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 80-89%")
        
        # –§–∞–π–ª—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 70-79%
        medium_quality = [f for f in high_quality_files if 70 <= f['quality'] < 80]
        if medium_quality:
            print(f"   üìã –°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢: {len(medium_quality)} —Ñ–∞–π–ª–æ–≤ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 70-79%")
        
        print(f"\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print(f"   1. –ù–∞—á–Ω–∏—Ç–µ —Å —Ñ–∞–π–ª–æ–≤ –∫–∞—á–µ—Å—Ç–≤–æ–º ‚â•90% - –æ–Ω–∏ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤—ã –∫ –ø–∞—Ä—Å–∏–Ω–≥—É")
        print(f"   2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã: python analyze_specific_file.py <–∏–º—è_—Ñ–∞–π–ª–∞>")
        print(f"   3. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        
        return high_quality_files

if __name__ == "__main__":
    finder = HighQualityUnparsedFinder()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    print("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ñ–∞–π–ª—ã —Å –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º (‚â•80%)
    high_files = finder.print_analysis_report(min_quality=80)
    
    if not high_files:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º ‚â•80%, –ø—Ä–æ–≤–µ—Ä—è–µ–º ‚â•70%
        print(f"\n" + "="*50)
        high_files = finder.print_analysis_report(min_quality=70)


