#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
–¢–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ.
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from database import db_manager
from sqlalchemy import text
from loguru import logger

class ProductsWithoutPricesAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        self.logger = logger
        
    def find_products_without_prices(self):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        
        with db_manager.get_session() as session:
            # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            query = text("""
                SELECT 
                    p.id,
                    p.name,
                    p.table_id,
                    p.row_number,
                    p.row_number_end,
                    proj.file_name,
                    COUNT(po.id) as price_offers_count
                FROM products p
                LEFT JOIN price_offers po ON p.id = po.product_id
                LEFT JOIN projects proj ON p.project_id = proj.id
                GROUP BY p.id, p.name, p.table_id, p.row_number, p.row_number_end, proj.file_name
                HAVING COUNT(po.id) = 0
                ORDER BY proj.file_name, p.row_number
            """)
            
            results = session.execute(query).fetchall()
            
            return results
    
    def find_products_with_few_prices(self, min_prices=2):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä—ã —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        
        with db_manager.get_session() as session:
            # SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç GROUP_CONCAT, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            query = text("""
                SELECT 
                    p.id,
                    p.name,
                    p.table_id,
                    p.row_number,
                    proj.file_name,
                    COUNT(po.id) as price_offers_count
                FROM products p
                LEFT JOIN price_offers po ON p.id = po.product_id
                LEFT JOIN projects proj ON p.project_id = proj.id
                GROUP BY p.id, p.name, p.table_id, p.row_number, proj.file_name
                HAVING COUNT(po.id) > 0 AND COUNT(po.id) < :min_prices
                ORDER BY COUNT(po.id), proj.file_name, p.row_number
            """)
            
            results = session.execute(query, {"min_prices": min_prices}).fetchall()
            
            return results
    
    def get_general_statistics(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏ —Ü–µ–Ω–∞–º"""
        
        with db_manager.get_session() as session:
            stats_query = text("""
                SELECT 
                    COUNT(DISTINCT p.id) as total_products,
                    COUNT(DISTINCT po.id) as total_price_offers,
                    COUNT(DISTINCT CASE WHEN po.id IS NOT NULL THEN p.id END) as products_with_prices,
                    COUNT(DISTINCT CASE WHEN po.id IS NULL THEN p.id END) as products_without_prices,
                    ROUND(AVG(price_count.offers_per_product), 2) as avg_offers_per_product
                FROM products p
                LEFT JOIN price_offers po ON p.id = po.product_id
                LEFT JOIN (
                    SELECT product_id, COUNT(*) as offers_per_product
                    FROM price_offers
                    GROUP BY product_id
                ) price_count ON p.id = price_count.product_id
            """)
            
            stats = session.execute(stats_query).fetchone()
            
            return stats
    
    def print_analysis_report(self):
        """–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º –±–µ–∑ —Ü–µ–Ω"""
        
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –¢–û–í–ê–†–û–í –ë–ï–ó –¶–ï–ù–û–í–´–• –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô")
        print(f"=" * 80)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = self.get_general_statistics()
        print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats.total_products}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats.total_price_offers}")
        print(f"   ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏: {stats.products_with_prices}")
        print(f"   ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ –ë–ï–ó —Ü–µ–Ω: {stats.products_without_prices}")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Ç–æ–≤–∞—Ä: {stats.avg_offers_per_product}")
        
        # –¢–æ–≤–∞—Ä—ã –±–µ–∑ —Ü–µ–Ω
        products_without_prices = self.find_products_without_prices()
        
        if products_without_prices:
            print(f"\n‚ùå –¢–û–í–ê–†–´ –ë–ï–ó –¶–ï–ù–û–í–´–• –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô ({len(products_without_prices)} —à—Ç):")
            print(f"   ID  | –¢–æ–≤–∞—Ä                          | –§–∞–π–ª                     | –°—Ç—Ä–æ–∫–∞")
            print(f"   " + "-" * 75)
            
            for product in products_without_prices:
                product_name = product.name[:30] + "..." if len(product.name) > 30 else product.name
                file_name = product.file_name[:25] + "..." if len(product.file_name) > 25 else product.file_name
                row_info = f"{product.row_number}-{product.row_number_end}" if product.row_number_end != product.row_number else str(product.row_number)
                
                print(f"   {product.id:3d} | {product_name:30s} | {file_name:25s} | {row_info}")
        else:
            print(f"\n‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!")
        
        # –¢–æ–≤–∞—Ä—ã —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ü–µ–Ω
        products_with_few_prices = self.find_products_with_few_prices(min_prices=2)
        
        if products_with_few_prices:
            print(f"\n‚ö†Ô∏è  –¢–û–í–ê–†–´ –° –ú–ê–õ–´–ú –ö–û–õ–ò–ß–ï–°–¢–í–û–ú –¶–ï–ù–û–í–´–• –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô ({len(products_with_few_prices)} —à—Ç):")
            print(f"   ID  | –¢–æ–≤–∞—Ä                          | –§–∞–π–ª                     | –¶–µ–Ω—ã")
            print(f"   " + "-" * 75)
            
            for product in products_with_few_prices:
                product_name = product.name[:30] + "..." if len(product.name) > 30 else product.name
                file_name = product.file_name[:25] + "..." if len(product.file_name) > 25 else product.file_name
                
                print(f"   {product.id:3d} | {product_name:30s} | {file_name:25s} | {product.price_offers_count:4d} |")
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if products_without_prices:
            print(f"   1. ‚ùå –£–¥–∞–ª–∏—Ç—å {len(products_without_prices)} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
            print(f"   2. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤, –æ—Ç–∫—É–¥–∞ —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã")
            print(f"   3. üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞–µ–≤")
        
        if products_with_few_prices:
            print(f"   4. ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å {len(products_with_few_prices)} —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
            print(f"   5. üìã –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–∞—Ä—Å—è—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        if not products_without_prices and not products_with_few_prices:
            print(f"   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ - –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        
        return len(products_without_prices), len(products_with_few_prices)

if __name__ == "__main__":
    analyzer = ProductsWithoutPricesAnalyzer()
    without_prices_count, few_prices_count = analyzer.print_analysis_report()
    
    if without_prices_count > 0:
        print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–∞–π–¥–µ–Ω–æ {without_prices_count} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ü–µ–Ω!")
        print(f"   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
    else:
        print(f"\n‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
