#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã, —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
–û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç—ã (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–æ–≤).
"""

import os
import shutil
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from database import db_manager
from sqlalchemy import text
from loguru import logger

def clear_all_data():
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    logger.info("üßπ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...")
    
    # 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    with db_manager.get_session() as session:
        # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images_deleted = session.execute(text("DELETE FROM product_images")).rowcount
        session.commit()
        logger.info(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_deleted}")
        
        # –£–¥–∞–ª—è–µ–º —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        offers_deleted = session.execute(text("DELETE FROM price_offers")).rowcount
        session.commit()
        logger.info(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {offers_deleted}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
        products_deleted = session.execute(text("DELETE FROM products")).rowcount
        session.commit()
        logger.info(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {products_deleted}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ (–¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è)
        projects_count = session.execute(text("SELECT COUNT(*) FROM projects")).scalar()
        logger.info(f"üìÅ –ü—Ä–æ–µ–∫—Ç–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {projects_count}")
    
    # 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    images_dir = Path(__file__).parent.parent / "storage" / "images"
    if images_dir.exists():
        files_before = len(list(images_dir.glob("*.png")))
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ PNG —Ñ–∞–π–ª—ã
        for image_file in images_dir.glob("*.png"):
            image_file.unlink()
        
        files_after = len(list(images_dir.glob("*.png")))
        logger.info(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {files_before - files_after}")
    else:
        logger.warning("üìÅ –ü–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # 3. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    with db_manager.get_session() as session:
        try:
            session.execute(text("UPDATE sqlite_sequence SET seq = 0 WHERE name IN ('products', 'price_offers', 'product_images')"))
            session.commit()
            logger.info("üîÑ –°–±—Ä–æ—à–µ–Ω—ã —Å—á–µ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞")
        except Exception as e:
            logger.info("üîÑ –°—á–µ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
    
    logger.info("‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ë–∞–∑–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–∞—Ä—Å–∏–Ω–≥—É —Å –Ω—É–ª—è.")
    
    # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    with db_manager.get_session() as session:
        stats = {
            'projects': session.execute(text("SELECT COUNT(*) FROM projects")).scalar(),
            'products': session.execute(text("SELECT COUNT(*) FROM products")).scalar(),
            'price_offers': session.execute(text("SELECT COUNT(*) FROM price_offers")).scalar(),
            'product_images': session.execute(text("SELECT COUNT(*) FROM product_images")).scalar()
        }
    
    logger.info("üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    for table, count in stats.items():
        logger.info(f"  ‚Ä¢ {table}: {count}")

if __name__ == "__main__":
    clear_all_data()
