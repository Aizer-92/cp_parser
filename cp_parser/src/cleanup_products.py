#!/usr/bin/env python3
"""
–û—á–∏—Å—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏–º–µ—é—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ü–µ–Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from database import db_manager
from sqlalchemy import text
from loguru import logger

class ProductCleanup:
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    
    def __init__(self):
        self.logger = logger
        
    def find_products_without_prices(self):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        
        with db_manager.get_session() as session:
            query = text("""
                SELECT 
                    p.id,
                    p.name,
                    p.table_id,
                    p.row_number,
                    proj.file_name
                FROM products p
                LEFT JOIN price_offers po ON p.id = po.product_id
                LEFT JOIN projects proj ON p.project_id = proj.id
                GROUP BY p.id, p.name, p.table_id, p.row_number, proj.file_name
                HAVING COUNT(po.id) = 0
                ORDER BY proj.file_name, p.row_number
            """)
            
            results = session.execute(query).fetchall()
            return results
    
    def delete_products_without_prices(self, dry_run=True):
        """–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        
        products_to_delete = self.find_products_without_prices()
        
        if not products_to_delete:
            print("‚úÖ –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return 0
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(products_to_delete)} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∞–π–ª–∞–º –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        by_file = {}
        for product in products_to_delete:
            file_name = product.file_name
            if file_name not in by_file:
                by_file[file_name] = []
            by_file[file_name].append(product)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
        for file_name, products in by_file.items():
            print(f"\nüìÅ {file_name}: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
            for product in products:
                print(f"   ‚Ä¢ ID {product.id}: {product.name} (—Å—Ç—Ä–æ–∫–∞ {product.row_number})")
        
        if dry_run:
            print(f"\nüîç –†–ï–ñ–ò–ú –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ì–û –ü–†–û–°–ú–û–¢–†–ê")
            print(f"   –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python cleanup_products.py --execute")
            return 0
        
        # –†–µ–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        print(f"\nüóëÔ∏è  –£–î–ê–õ–Ø–Æ –¢–û–í–ê–†–´ –ë–ï–ó –¶–ï–ù...")
        
        deleted_count = 0
        with db_manager.get_session() as session:
            for product in products_to_delete:
                try:
                    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    images_deleted = session.execute(
                        text("DELETE FROM product_images WHERE product_id = :product_id"),
                        {"product_id": product.id}
                    ).rowcount
                    
                    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
                    session.execute(
                        text("DELETE FROM products WHERE id = :product_id"),
                        {"product_id": product.id}
                    )
                    
                    session.commit()
                    deleted_count += 1
                    
                    print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω —Ç–æ–≤–∞—Ä ID {product.id}: {product.name} (+ {images_deleted} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
                    
                except Exception as e:
                    session.rollback()
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ID {product.id}: {e}")
        
        print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        return deleted_count
    
    def get_statistics_after_cleanup(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏"""
        
        with db_manager.get_session() as session:
            stats = session.execute(text("""
                SELECT 
                    COUNT(DISTINCT p.id) as total_products,
                    COUNT(DISTINCT po.id) as total_price_offers,
                    COUNT(DISTINCT CASE WHEN po.id IS NOT NULL THEN p.id END) as products_with_prices,
                    COUNT(DISTINCT CASE WHEN po.id IS NULL THEN p.id END) as products_without_prices,
                    COUNT(DISTINCT pi.id) as total_images
                FROM products p
                LEFT JOIN price_offers po ON p.id = po.product_id
                LEFT JOIN product_images pi ON p.id = pi.product_id
            """)).fetchone()
            
            return stats

if __name__ == "__main__":
    import sys
    
    cleanup = ProductCleanup()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    execute_mode = "--execute" in sys.argv
    
    if execute_mode:
        print("‚ö†Ô∏è  –†–ï–ñ–ò–ú –†–ï–ê–õ–¨–ù–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø")
        print("=" * 50)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ—á–∏—Å—Ç–∫–∏
        stats_before = cleanup.get_statistics_after_cleanup()
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û –û–ß–ò–°–¢–ö–ò:")
        print(f"   ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {stats_before.total_products}")
        print(f"   ‚Ä¢ –¶–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats_before.total_price_offers}")
        print(f"   ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats_before.total_images}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        deleted_count = cleanup.delete_products_without_prices(dry_run=False)
        
        if deleted_count > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            stats_after = cleanup.get_statistics_after_cleanup()
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–°–õ–ï –û–ß–ò–°–¢–ö–ò:")
            print(f"   ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {stats_after.total_products} (–±—ã–ª–æ {stats_before.total_products})")
            print(f"   ‚Ä¢ –¶–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats_after.total_price_offers} (–±—ã–ª–æ {stats_before.total_price_offers})")
            print(f"   ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats_after.total_images} (–±—ã–ª–æ {stats_before.total_images})")
            
            print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –æ—Ç {deleted_count} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤!")
    else:
        # –†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        cleanup.delete_products_without_prices(dry_run=True)


