#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ä–∞–∂–µ–π —á–µ—Ä–µ–∑ CSV —ç–∫—Å–ø–æ—Ä—Ç (–±—ã—Å—Ç—Ä–µ–µ —á–µ–º Excel)
–†–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–∞–ø–∫–µ verification_csv/
"""

import sys
from pathlib import Path
sys.path.insert(0, str(Path.cwd()))

import json
import gspread
from google.oauth2.service_account import Credentials
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text
import os
import csv
from datetime import datetime
import time

# Railway DB
os.environ['USE_RAILWAY_DB'] = 'true'

def download_csv(sheet_id, output_path):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç Google Sheet –∫–∞–∫ CSV (–ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç)"""
    try:
        scope = [
            'https://www.googleapis.com/auth/spreadsheets.readonly',
            'https://www.googleapis.com/auth/drive.readonly'
        ]
        creds = Credentials.from_service_account_file('service_account.json', scopes=scope)
        
        # CSV —ç–∫—Å–ø–æ—Ä—Ç (gid=0 = –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç)
        export_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid=0"
        
        import requests
        response = requests.get(export_url, headers={'Authorization': f'Bearer {creds.token}'})
        
        if response.status_code == 200:
            with open(output_path, 'wb') as f:
                f.write(response.content)
            return True
        else:
            return False
            
    except Exception as e:
        print(f"  ‚ùå {str(e)[:40]}")
        return False

def extract_quantity_from_csv(csv_path, row_number):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏—Ä–∞–∂ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ E (–∏–Ω–¥–µ–∫—Å 4) —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    try:
        with open(csv_path, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            rows = list(reader)
            
            # row_number —ç—Ç–æ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ Excel (1-based)
            # –í Python —Å–ø–∏—Å–∫–µ –∏–Ω–¥–µ–∫—Å –Ω–∞ 1 –º–µ–Ω—å—à–µ
            if row_number <= len(rows):
                row_data = rows[row_number - 1]
                
                # –ö–æ–ª–æ–Ω–∫–∞ E = –∏–Ω–¥–µ–∫—Å 4
                if len(row_data) > 4:
                    cell_value = row_data[4]
                    
                    if not cell_value:
                        return None
                    
                    try:
                        return int(float(str(cell_value).replace(',', '').replace(' ', '')))
                    except:
                        return str(cell_value)
        
        return None
            
    except Exception as e:
        return None

def verify_project(project_data, db, csv_dir):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ CSV"""
    project_id = project_data['id']
    sheet_id = project_data['sheet_id']
    
    print(f"\n{'='*70}")
    print(f"üîç ID {project_id}: {project_data['name'][:55]}")
    
    csv_path = csv_dir / f"project_{project_id}.csv"
    print(f"üì• CSV...", end=' ', flush=True)
    
    if not download_csv(sheet_id, csv_path):
        return None
    
    size_kb = csv_path.stat().st_size / 1024
    print(f"‚úÖ {size_kb:.0f} KB")
    
    with db.get_session() as session:
        products = session.execute(text("""
            SELECT 
                p.id, p.name, p.row_number,
                po.quantity, po.route
            FROM products p
            INNER JOIN price_offers po ON p.id = po.product_id
            WHERE p.project_id = :pid
            AND po.quantity >= 300
            AND po.quantity % 10 = 0
            ORDER BY p.row_number
        """), {'pid': project_id}).fetchall()
        
        if not products:
            print(f"‚ö†Ô∏è  –ù–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            return None
        
        print(f"üìä –ü—Ä–æ–≤–µ—Ä—è—é {len(products)} –∑–∞–ø–∏—Å–µ–π...", end=' ', flush=True)
        
        results = []
        checked_rows = {}
        
        for prod in products:
            row_num = prod.row_number
            
            if row_num not in checked_rows:
                checked_rows[row_num] = extract_quantity_from_csv(csv_path, row_num)
            
            excel_qty = checked_rows[row_num]
            db_qty = int(prod.quantity)
            
            is_x10 = False
            if excel_qty and isinstance(excel_qty, int) and excel_qty * 10 == db_qty:
                is_x10 = True
            
            results.append({
                'product_id': prod.id,
                'product_name': prod.name,
                'row': row_num,
                'excel': excel_qty,
                'db': db_qty,
                'route': prod.route,
                'is_x10': is_x10
            })
        
        x10_count = sum(1 for r in results if r['is_x10'])
        ok_count = sum(1 for r in results if r['excel'] == r['db'])
        
        print(f"Done!")
        print(f"  ‚ùå x10: {x10_count}/{len(results)} ({x10_count/len(results)*100:.0f}%)", end='')
        print(f"  ‚úÖ OK: {ok_count}/{len(results)} ({ok_count/len(results)*100:.0f}%)")
        
        if x10_count > 0:
            print(f"  üìã –ü—Ä–∏–º–µ—Ä—ã:")
            shown = 0
            for r in results:
                if r['is_x10'] and shown < 2:
                    print(f"    –†{r['row']}: {r['excel']} ‚Üí {r['db']}")
                    shown += 1
        
        return {
            'id': project_id,
            'name': project_data['name'],
            'url': project_data['url'],
            'total': len(results),
            'x10': x10_count,
            'ok': ok_count,
            'results': results
        }

def main():
    print("="*70)
    print("üîç –ü–†–û–í–ï–†–ö–ê –¢–ò–†–ê–ñ–ï–ô –ß–ï–†–ï–ó CSV")
    print("="*70)
    
    with open('projects_to_verify.json', 'r', encoding='utf-8') as f:
        projects = json.load(f)
    
    print(f"\nüìã –ü—Ä–æ–≤–µ—Ä—è—é –≤—Å–µ {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"üìÅ CSV —Ñ–∞–π–ª—ã –≤: verification_csv/\n")
    
    # –û—Ç–¥–µ–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è CSV
    csv_dir = Path('verification_csv')
    csv_dir.mkdir(exist_ok=True)
    
    db = PostgreSQLManager()
    all_results = []
    
    start_time = time.time()
    
    for i, proj in enumerate(projects, 1):
        print(f"\n{'#'*70}")
        print(f"# {i}/{len(projects)}")
        
        result = verify_project(proj, db, csv_dir)
        if result:
            all_results.append(result)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–µ–∫—Ç–æ–≤
        if i % 10 == 0:
            elapsed = time.time() - start_time
            avg_time = elapsed / i
            remaining = (len(projects) - i) * avg_time
            print(f"\n‚è±Ô∏è  –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(projects)} | –û—Å—Ç–∞–ª–æ—Å—å: ~{remaining/60:.1f} –º–∏–Ω")
        
        time.sleep(0.3)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    # –ò—Ç–æ–≥
    print("\n\n" + "="*70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*70)
    
    if not all_results:
        print("\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    total_x10 = sum(r['x10'] for r in all_results)
    total_rec = sum(r['total'] for r in all_results)
    projects_with_errors = len([r for r in all_results if r['x10'] > 0])
    
    print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(all_results)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_rec:,}")
    print(f"‚ùå –û—à–∏–±–æ–∫ x10: {total_x10:,} ({total_x10/total_rec*100:.1f}%)")
    print(f"‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {projects_with_errors}/{len(all_results)}")
    
    # –¢–æ–ø –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
    error_projects = sorted([r for r in all_results if r['x10'] > 0], 
                          key=lambda x: x['x10'], reverse=True)
    
    if error_projects:
        print(f"\nüìã –¢–û–ü-20 –ü–†–û–ï–ö–¢–û–í –° –û–®–ò–ë–ö–ê–ú–ò:")
        for r in error_projects[:20]:
            pct = r['x10']/r['total']*100 if r['total'] > 0 else 0
            print(f"  ‚ùå ID {r['id']}: {r['x10']}/{r['total']} ({pct:.0f}%) - {r['name'][:50]}")
    
    # CSV –æ—Ç—á–µ—Ç
    timestamp = datetime.now().strftime('%Y%m%d_%H%M')
    csv_report = Path(f"–ü–†–û–í–ï–†–ö–ê_–¢–ò–†–ê–ñ–ï–ô_50_–ü–†–û–ï–ö–¢–û–í_{timestamp}.csv")
    
    with open(csv_report, 'w', newline='', encoding='utf-8-sig') as f:
        writer = csv.writer(f)
        writer.writerow([
            'ID_–ü—Ä–æ–µ–∫—Ç–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞', 'ID_–¢–æ–≤–∞—Ä–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ_—Ç–æ–≤–∞—Ä–∞',
            '–°—Ç—Ä–æ–∫–∞', '–¢–∏—Ä–∞–∂_Google', '–¢–∏—Ä–∞–∂_–ë–î', '–ú–∞—Ä—à—Ä—É—Ç', '–û—à–∏–±–∫–∞_x10', 'URL'
        ])
        
        for proj in all_results:
            for r in proj['results']:
                writer.writerow([
                    proj['id'], proj['name'],
                    r['product_id'], r['product_name'],
                    r['row'], r['excel'], r['db'],
                    r['route'], '–î–ê' if r['is_x10'] else '–ù–ï–¢',
                    proj['url']
                ])
    
    print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {csv_report}")
    print(f"üìÅ CSV —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: verification_csv/")
    
    # –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if total_x10 > 0:
        error_pct = total_x10 / total_rec * 100
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
        if error_pct > 10:
            print(f"   üö® –ö–†–ò–¢–ò–ß–ù–û: {error_pct:.1f}% –æ—à–∏–±–æ–∫!")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∞—Å—Å–æ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è {projects_with_errors} –ø—Ä–æ–µ–∫—Ç–æ–≤")
        elif error_pct > 5:
            print(f"   ‚ö†Ô∏è  –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫ ({error_pct:.1f}%)")
            print(f"   –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏ >10%")
        else:
            print(f"   ‚úÖ –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫ ({error_pct:.1f}%)")
            print(f"   –í—ã–±–æ—Ä–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏")
    
    elapsed = time.time() - start_time
    print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed/60:.1f} –º–∏–Ω—É—Ç")
    print("="*70)

if __name__ == '__main__':
    main()




