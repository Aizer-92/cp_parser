#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ Template 6
–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
"""

import sys
from pathlib import Path
from sqlalchemy import text
from openpyxl import load_workbook

sys.path.insert(0, str(Path(__file__).parent))
from database.postgresql_manager import PostgreSQLManager
from download_google_sheet import download_sheet_as_excel

# –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
PROBLEM_PROJECTS = [860, 846, 794, 292]

def analyze_project(project_id):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É Excel —Ñ–∞–π–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    db = PostgreSQLManager()
    
    # –ü–æ–ª—É—á–∞–µ–º table_id –ø—Ä–æ–µ–∫—Ç–∞
    with db.get_session() as session:
        table_id = session.execute(text("""
            SELECT table_id FROM projects WHERE id = :id
        """), {'id': project_id}).scalar()
    
    if not table_id:
        print(f"‚ùå –ü—Ä–æ–µ–∫—Ç {project_id}: table_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    print(f"\n{'='*80}")
    print(f"üì• –ü–†–û–ï–ö–¢ {project_id} (table_id: {table_id})")
    print(f"{'='*80}")
    
    excel_path = Path(f"excel_files/project_{project_id}_{table_id}.xlsx")
    
    if not excel_path.exists():
        print(f"üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")
        try:
            download_sheet_as_excel(table_id, str(excel_path))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return
    else:
        print(f"‚úÖ –§–∞–π–ª —É–∂–µ –µ—Å—Ç—å")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    try:
        wb = load_workbook(excel_path, data_only=True)
        ws = wb.active
        
        print(f"\nüìã –°–¢–†–£–ö–¢–£–†–ê –§–ê–ô–õ–ê:")
        print(f"  –°—Ç—Ä–æ–∫: {ws.max_row}")
        print(f"  –°—Ç–æ–ª–±—Ü–æ–≤: {ws.max_column}")
        
        # –°—Ç—Ä–æ–∫–∞ 2 (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
        print(f"\nüìå –°–¢–†–û–ö–ê 2 (–∑–∞–≥–æ–ª–æ–≤–∫–∏):")
        headers = []
        for col in range(1, min(20, ws.max_column + 1)):
            val = ws.cell(2, col).value
            if val:
                headers.append((col, str(val)[:40]))
                print(f"  Col {col}: {str(val)[:60]}")
        
        # –°—Ç—Ä–æ–∫–∞ 3 (–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏)
        print(f"\nüìå –°–¢–†–û–ö–ê 3 (–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏):")
        for col in range(1, min(20, ws.max_column + 1)):
            val = ws.cell(3, col).value
            if val:
                print(f"  Col {col}: {str(val)[:60]}")
        
        # –°—Ç—Ä–æ–∫–∞ 4 (–ø–µ—Ä–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
        print(f"\nüìå –°–¢–†–û–ö–ê 4 (–ø–µ—Ä–≤—ã–µ –¥–∞–Ω–Ω—ã–µ):")
        for col in range(1, min(10, ws.max_column + 1)):
            val = ws.cell(4, col).value
            if val:
                print(f"  Col {col}: {str(val)[:60]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print(f"\nüñºÔ∏è  –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø:")
        if hasattr(ws, '_images'):
            print(f"  –í—Å–µ–≥–æ: {len(ws._images)}")
            if ws._images:
                for i, img in enumerate(ws._images[:3], 1):
                    if hasattr(img.anchor, '_from'):
                        row = img.anchor._from.row + 1
                        col = img.anchor._from.col + 1
                        print(f"  {i}. –°—Ç—Ä–æ–∫–∞ {row}, –ö–æ–ª–æ–Ω–∫–∞ {col}")
        else:
            print(f"  ‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
        
        # –¢–æ–≤–∞—Ä—ã –≤ –ë–î
        with db.get_session() as session:
            product_count = session.execute(text("""
                SELECT COUNT(*) FROM products WHERE project_id = :id
            """), {'id': project_id}).scalar()
            
            print(f"\nüìä –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:")
            print(f"  –¢–æ–≤–∞—Ä—ã: {product_count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

def main():
    print("=" * 80)
    print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –ü–†–û–ï–ö–¢–û–í TEMPLATE 6")
    print("=" * 80)
    
    for project_id in PROBLEM_PROJECTS:
        try:
            analyze_project(project_id)
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ {project_id}: {e}")
    
    print("\n" + "=" * 80)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 80)

if __name__ == '__main__':
    main()



"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ Template 6
–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
"""

import sys
from pathlib import Path
from sqlalchemy import text
from openpyxl import load_workbook

sys.path.insert(0, str(Path(__file__).parent))
from database.postgresql_manager import PostgreSQLManager
from download_google_sheet import download_sheet_as_excel

# –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
PROBLEM_PROJECTS = [860, 846, 794, 292]

def analyze_project(project_id):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É Excel —Ñ–∞–π–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    db = PostgreSQLManager()
    
    # –ü–æ–ª—É—á–∞–µ–º table_id –ø—Ä–æ–µ–∫—Ç–∞
    with db.get_session() as session:
        table_id = session.execute(text("""
            SELECT table_id FROM projects WHERE id = :id
        """), {'id': project_id}).scalar()
    
    if not table_id:
        print(f"‚ùå –ü—Ä–æ–µ–∫—Ç {project_id}: table_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    print(f"\n{'='*80}")
    print(f"üì• –ü–†–û–ï–ö–¢ {project_id} (table_id: {table_id})")
    print(f"{'='*80}")
    
    excel_path = Path(f"excel_files/project_{project_id}_{table_id}.xlsx")
    
    if not excel_path.exists():
        print(f"üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")
        try:
            download_sheet_as_excel(table_id, str(excel_path))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return
    else:
        print(f"‚úÖ –§–∞–π–ª —É–∂–µ –µ—Å—Ç—å")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    try:
        wb = load_workbook(excel_path, data_only=True)
        ws = wb.active
        
        print(f"\nüìã –°–¢–†–£–ö–¢–£–†–ê –§–ê–ô–õ–ê:")
        print(f"  –°—Ç—Ä–æ–∫: {ws.max_row}")
        print(f"  –°—Ç–æ–ª–±—Ü–æ–≤: {ws.max_column}")
        
        # –°—Ç—Ä–æ–∫–∞ 2 (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
        print(f"\nüìå –°–¢–†–û–ö–ê 2 (–∑–∞–≥–æ–ª–æ–≤–∫–∏):")
        headers = []
        for col in range(1, min(20, ws.max_column + 1)):
            val = ws.cell(2, col).value
            if val:
                headers.append((col, str(val)[:40]))
                print(f"  Col {col}: {str(val)[:60]}")
        
        # –°—Ç—Ä–æ–∫–∞ 3 (–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏)
        print(f"\nüìå –°–¢–†–û–ö–ê 3 (–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏):")
        for col in range(1, min(20, ws.max_column + 1)):
            val = ws.cell(3, col).value
            if val:
                print(f"  Col {col}: {str(val)[:60]}")
        
        # –°—Ç—Ä–æ–∫–∞ 4 (–ø–µ—Ä–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
        print(f"\nüìå –°–¢–†–û–ö–ê 4 (–ø–µ—Ä–≤—ã–µ –¥–∞–Ω–Ω—ã–µ):")
        for col in range(1, min(10, ws.max_column + 1)):
            val = ws.cell(4, col).value
            if val:
                print(f"  Col {col}: {str(val)[:60]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print(f"\nüñºÔ∏è  –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø:")
        if hasattr(ws, '_images'):
            print(f"  –í—Å–µ–≥–æ: {len(ws._images)}")
            if ws._images:
                for i, img in enumerate(ws._images[:3], 1):
                    if hasattr(img.anchor, '_from'):
                        row = img.anchor._from.row + 1
                        col = img.anchor._from.col + 1
                        print(f"  {i}. –°—Ç—Ä–æ–∫–∞ {row}, –ö–æ–ª–æ–Ω–∫–∞ {col}")
        else:
            print(f"  ‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
        
        # –¢–æ–≤–∞—Ä—ã –≤ –ë–î
        with db.get_session() as session:
            product_count = session.execute(text("""
                SELECT COUNT(*) FROM products WHERE project_id = :id
            """), {'id': project_id}).scalar()
            
            print(f"\nüìä –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:")
            print(f"  –¢–æ–≤–∞—Ä—ã: {product_count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

def main():
    print("=" * 80)
    print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –ü–†–û–ï–ö–¢–û–í TEMPLATE 6")
    print("=" * 80)
    
    for project_id in PROBLEM_PROJECTS:
        try:
            analyze_project(project_id)
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ {project_id}: {e}")
    
    print("\n" + "=" * 80)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 80)

if __name__ == '__main__':
    main()










