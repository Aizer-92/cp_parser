#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
"""

import sys
from pathlib import Path
from sqlalchemy import text
import time
import subprocess

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager

def check_upload_progress():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏"""
    db = PostgreSQLManager()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ø–∞—Ä—Å–∏–ª–∏
    template4_missing = []
    with open('missing_images_template4.txt', 'r') as f:
        for line in f:
            parts = line.strip().split('\t')
            if len(parts) >= 1:
                template4_missing.append(int(parts[0]))
    
    template5_missing = []
    with open('missing_images_template5.txt', 'r') as f:
        for line in f:
            parts = line.strip().split('\t')
            if len(parts) >= 1:
                template5_missing.append(int(parts[0]))
    
    all_missing = template4_missing + template5_missing
    
    with db.get_session() as session:
        without_url = session.execute(text("""
            SELECT COUNT(*)
            FROM product_images pi
            JOIN products p ON pi.product_id = p.id
            WHERE p.project_id = ANY(:ids)
            AND (pi.image_url IS NULL OR pi.image_url = '')
        """), {'ids': all_missing}).scalar()
        
        with_url = session.execute(text("""
            SELECT COUNT(*)
            FROM product_images pi
            JOIN products p ON pi.product_id = p.id
            WHERE p.project_id = ANY(:ids)
            AND pi.image_url IS NOT NULL AND pi.image_url != ''
        """), {'ids': all_missing}).scalar()
        
        total = without_url + with_url
        return with_url, total, without_url

def is_upload_running():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏"""
    result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
    for line in result.stdout.split('\n'):
        if 'upload_reparsed' in line and 'grep' not in line:
            return True
    return False

def main():
    print("=" * 80)
    print("‚è±Ô∏è  –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–ì–†–£–ó–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 80)
    print("\n–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏...")
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥\n")
    
    check_count = 0
    
    while True:
        check_count += 1
        
        try:
            uploaded, total, remaining = check_upload_progress()
            progress = (uploaded / total * 100) if total > 0 else 0
            
            print(f"[{time.strftime('%H:%M:%S')}] –ü—Ä–æ–≥—Ä–µ—Å—Å: {uploaded}/{total} ({progress:.1f}%) | –û—Å—Ç–∞–ª–æ—Å—å: {remaining}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if remaining == 0:
                print("\n" + "=" * 80)
                print("‚úÖ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
                print("=" * 80)
                print("\nüöÄ –ó–∞–ø—É—Å–∫–∞—é –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤ –®–∞–±–ª–æ–Ω–∞ 5...")
                print("\n" + "=" * 80 + "\n")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
                subprocess.run([sys.executable, 'cleanup_template5_files.py'])
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if not is_upload_running() and remaining > 0:
                print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω, –Ω–æ –æ—Å—Ç–∞–ª–æ—Å—å {remaining} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
                print(f"‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥: upload_reparsed.log")
                break
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            break
        
        # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥
        time.sleep(30)
    
    print("\n" + "=" * 80)
    print("‚úÖ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 80)

if __name__ == '__main__':
    main()




"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
"""

import sys
from pathlib import Path
from sqlalchemy import text
import time
import subprocess

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager

def check_upload_progress():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏"""
    db = PostgreSQLManager()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ø–∞—Ä—Å–∏–ª–∏
    template4_missing = []
    with open('missing_images_template4.txt', 'r') as f:
        for line in f:
            parts = line.strip().split('\t')
            if len(parts) >= 1:
                template4_missing.append(int(parts[0]))
    
    template5_missing = []
    with open('missing_images_template5.txt', 'r') as f:
        for line in f:
            parts = line.strip().split('\t')
            if len(parts) >= 1:
                template5_missing.append(int(parts[0]))
    
    all_missing = template4_missing + template5_missing
    
    with db.get_session() as session:
        without_url = session.execute(text("""
            SELECT COUNT(*)
            FROM product_images pi
            JOIN products p ON pi.product_id = p.id
            WHERE p.project_id = ANY(:ids)
            AND (pi.image_url IS NULL OR pi.image_url = '')
        """), {'ids': all_missing}).scalar()
        
        with_url = session.execute(text("""
            SELECT COUNT(*)
            FROM product_images pi
            JOIN products p ON pi.product_id = p.id
            WHERE p.project_id = ANY(:ids)
            AND pi.image_url IS NOT NULL AND pi.image_url != ''
        """), {'ids': all_missing}).scalar()
        
        total = without_url + with_url
        return with_url, total, without_url

def is_upload_running():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏"""
    result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
    for line in result.stdout.split('\n'):
        if 'upload_reparsed' in line and 'grep' not in line:
            return True
    return False

def main():
    print("=" * 80)
    print("‚è±Ô∏è  –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–ì–†–£–ó–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 80)
    print("\n–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏...")
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥\n")
    
    check_count = 0
    
    while True:
        check_count += 1
        
        try:
            uploaded, total, remaining = check_upload_progress()
            progress = (uploaded / total * 100) if total > 0 else 0
            
            print(f"[{time.strftime('%H:%M:%S')}] –ü—Ä–æ–≥—Ä–µ—Å—Å: {uploaded}/{total} ({progress:.1f}%) | –û—Å—Ç–∞–ª–æ—Å—å: {remaining}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if remaining == 0:
                print("\n" + "=" * 80)
                print("‚úÖ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
                print("=" * 80)
                print("\nüöÄ –ó–∞–ø—É—Å–∫–∞—é –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤ –®–∞–±–ª–æ–Ω–∞ 5...")
                print("\n" + "=" * 80 + "\n")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
                subprocess.run([sys.executable, 'cleanup_template5_files.py'])
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if not is_upload_running() and remaining > 0:
                print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω, –Ω–æ –æ—Å—Ç–∞–ª–æ—Å—å {remaining} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
                print(f"‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥: upload_reparsed.log")
                break
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            break
        
        # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥
        time.sleep(30)
    
    print("\n" + "=" * 80)
    print("‚úÖ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 80)

if __name__ == '__main__':
    main()







