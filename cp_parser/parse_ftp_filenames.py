#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤ —Å FTP –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
–§–æ—Ä–º–∞—Ç: table_id_–ü–û–ó–ò–¶–ò–Ø_—Å—É—Ñ—Ñ–∏–∫—Å_hash.png
"""

import re
import csv
from datetime import datetime

def parse_filename(filename):
    """
    –ü–∞—Ä—Å–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    
    –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤:
    1. 1dsi__IfdxC-e1mhEGTWC72M0LLu8ZDaTQ2pcssebdI8_J3_1_acecbcc28340b119.png
       table_id: 1dsi__IfdxC-e1mhEGTWC72M0LLu8ZDaTQ2pcssebdI8
       position: J3
       suffix: 1
       hash: acecbcc28340b119
    
    2. 1VjBBtTxdqP5WNixYOyikXqwPHxoPRyjKo9WMdaozvKU_O4_04a64599.png
       table_id: 1VjBBtTxdqP5WNixYOyikXqwPHxoPRyjKo9WMdaozvKU
       position: O4
       suffix: None
       hash: 04a64599
    
    3. 1ixbq5wYPcpYcsNR1qtVovPljsZTlwlPBJFKE-xxPzVk_S76_2_292508337.png
       table_id: 1ixbq5wYPcpYcsNR1qtVovPljsZTlwlPBJFKE-xxPzVk
       position: S76
       suffix: 2
       hash: 292508337
    """
    
    # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    name_without_ext = filename.rsplit('.', 1)[0] if '.' in filename else filename
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω: table_id_–ü–û–ó–ò–¶–ò–Ø_[—Å—É—Ñ—Ñ–∏–∫—Å_]hash
    # –ü–æ–∑–∏—Ü–∏—è = –±—É–∫–≤–∞ + —Ü–∏—Ñ—Ä—ã (A1, J3, O4, S76, etc)
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –ø–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º
    parts = name_without_ext.split('_')
    
    if len(parts) < 3:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        return {
            'table_id': None,
            'position': None,
            'suffix': None,
            'hash': None,
            'full_url': f"https://s3.ru1.storage.beget.cloud/73d16f7545b3-promogoods/images/{filename}",
            'filename': filename,
            'parse_error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π'
        }
    
    # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –≤—Å–µ–≥–¥–∞ hash
    hash_part = parts[-1]
    
    # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –ø–æ–∑–∏—Ü–∏—è (–±—É–∫–≤–∞+—Ü–∏—Ñ—Ä—ã) –∏–ª–∏ —Å—É—Ñ—Ñ–∏–∫—Å (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞)
    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞ - –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å
    position_or_suffix = parts[-2]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ–∑–∏—Ü–∏–∏: –±—É–∫–≤–∞ + —Ü–∏—Ñ—Ä—ã
    position_match = re.match(r'^([A-Z]+)(\d+)$', position_or_suffix)
    
    if position_match:
        # –≠—Ç–æ –ø–æ–∑–∏—Ü–∏—è, —Å—É—Ñ—Ñ–∏–∫—Å–∞ –Ω–µ—Ç
        position = position_or_suffix
        suffix = None
        # table_id = –≤—Å–µ —á–∞—Å—Ç–∏ –¥–æ –ø–æ–∑–∏—Ü–∏–∏
        table_id = '_'.join(parts[:-2])
    else:
        # –≠—Ç–æ —Å—É—Ñ—Ñ–∏–∫—Å (—Ü–∏—Ñ—Ä–∞), –∑–Ω–∞—á–∏—Ç –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç —Ä–∞–Ω—å—à–µ
        if len(parts) < 4:
            return {
                'table_id': None,
                'position': None,
                'suffix': None,
                'hash': None,
                'full_url': f"https://s3.ru1.storage.beget.cloud/73d16f7545b3-promogoods/images/{filename}",
                'filename': filename,
                'parse_error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º'
            }
        
        suffix = position_or_suffix
        position = parts[-3]
        # table_id = –≤—Å–µ —á–∞—Å—Ç–∏ –¥–æ –ø–æ–∑–∏—Ü–∏–∏
        table_id = '_'.join(parts[:-3])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        if not re.match(r'^([A-Z]+)(\d+)$', position):
            return {
                'table_id': None,
                'position': None,
                'suffix': None,
                'hash': None,
                'full_url': f"https://s3.ru1.storage.beget.cloud/73d16f7545b3-promogoods/images/{filename}",
                'filename': filename,
                'parse_error': f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–∑–∏—Ü–∏–∏: {position}'
            }
    
    return {
        'table_id': table_id,
        'position': position,
        'suffix': suffix,
        'hash': hash_part,
        'full_url': f"https://s3.ru1.storage.beget.cloud/73d16f7545b3-promogoods/images/{filename}",
        'filename': filename,
        'parse_error': None
    }

def main():
    print("="*80)
    print("üìã –ü–ê–†–°–ò–ù–ì –ù–ê–ó–í–ê–ù–ò–ô –§–ê–ô–õ–û–í –° FTP")
    print("="*80)
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –∞–Ω–∞–ª–∏–∑–æ–º
    storage_file = "STORAGE_ANALYSIS_20251012_1455.txt"
    
    print(f"\nüìÇ –ß–∏—Ç–∞—é —Ñ–∞–π–ª: {storage_file}")
    
    filenames = []
    with open(storage_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤—ã–µ 9 —Å—Ç—Ä–æ–∫)
        for line in lines[9:]:
            line = line.strip()
            if not line or line.startswith('=') or line.startswith('-'):
                continue
            
            # –§–æ—Ä–º–∞—Ç: "  123.   10.97 MB - filename.png"
            parts = line.split(' - ', 1)
            if len(parts) == 2:
                filename = parts[1].strip()
                if filename:
                    filenames.append(filename)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(filenames):,}\n")
    
    print("üîç –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤...")
    
    parsed_data = []
    errors = []
    
    for filename in filenames:
        result = parse_filename(filename)
        parsed_data.append(result)
        
        if result['parse_error']:
            errors.append(result)
    
    print(f"‚úÖ –°–ø–∞—Ä—Å–µ–Ω–æ: {len(parsed_data):,}")
    print(f"‚ùå –û—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(errors):,}\n")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ CSV
    timestamp = datetime.now().strftime("%Y%m%d_%H%M")
    output_file = f"FTP_FILES_PARSED_{timestamp}.csv"
    
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤ CSV: {output_file}")
    
    with open(output_file, 'w', encoding='utf-8', newline='') as f:
        writer = csv.writer(f)
        writer.writerow([
            'URL',
            'Table_ID', 
            'Position',
            'Suffix',
            'Hash',
            'Filename',
            'Parse_Error'
        ])
        
        for item in parsed_data:
            writer.writerow([
                item['full_url'],
                item['table_id'] or '',
                item['position'] or '',
                item['suffix'] or '',
                item['hash'] or '',
                item['filename'],
                item['parse_error'] or ''
            ])
    
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(parsed_data):,} –∑–∞–ø–∏—Å–µ–π")
    
    # –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    print("\n" + "="*80)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*80)
    
    # –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ
    successful = [p for p in parsed_data if not p['parse_error']]
    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ: {len(successful):,} ({len(successful)/len(parsed_data)*100:.1f}%)")
    
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ table_id
    unique_tables = set(p['table_id'] for p in successful if p['table_id'])
    print(f"üìã –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö Table ID: {len(unique_tables):,}")
    
    # –° —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ –∏ –±–µ–∑
    with_suffix = [p for p in successful if p['suffix']]
    without_suffix = [p for p in successful if not p['suffix']]
    print(f"\nüì∑ –° —Å—É—Ñ—Ñ–∏–∫—Å–æ–º (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ): {len(with_suffix):,}")
    print(f"üì∑ –ë–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ç–æ): {len(without_suffix):,}")
    
    # –ü—Ä–∏–º–µ—Ä—ã —Å –æ—à–∏–±–∫–∞–º–∏
    if errors:
        print(f"\n‚ùå –ü–†–ò–ú–ï–†–´ –û–®–ò–ë–û–ö –ü–ê–†–°–ò–ù–ì–ê (–ø–µ—Ä–≤—ã–µ 10):")
        for i, err in enumerate(errors[:10], 1):
            print(f"   {i}. {err['filename'][:70]}...")
            print(f"      –û—à–∏–±–∫–∞: {err['parse_error']}")
    
    # –¢–æ–ø table_id –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–∞–π–ª–æ–≤
    from collections import Counter
    table_counts = Counter(p['table_id'] for p in successful if p['table_id'])
    
    print(f"\nüîù –¢–û–ü-20 TABLE_ID –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –§–ê–ô–õ–û–í:")
    for i, (table_id, count) in enumerate(table_counts.most_common(20), 1):
        short_id = table_id[:40] + '...' if len(table_id) > 40 else table_id
        print(f"   {i:2d}. {short_id:45s} : {count:4d} —Ñ–∞–π–ª–æ–≤")
    
    print("\n" + "="*80)
    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç: {output_file}")
    print("="*80)

if __name__ == '__main__':
    main()

