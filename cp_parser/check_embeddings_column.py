#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–ª–æ–Ω–∫–∏ name_embedding_text –≤ –ë–î.
–†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π, —Ç–∞–∫ –∏ –¥–ª—è Railway –ë–î.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    # –õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î
    python3 check_embeddings_column.py
    
    # Railway –ë–î
    export DATABASE_URL="postgresql://postgres:...railway.app/railway"
    python3 check_embeddings_column.py
"""

import os
import sys
from sqlalchemy import create_engine, text, inspect
from dotenv import load_dotenv

load_dotenv()

# –¶–≤–µ—Ç–∞
GREEN = '\033[92m'
RED = '\033[91m'
BLUE = '\033[94m'
YELLOW = '\033[93m'
RESET = '\033[0m'
BOLD = '\033[1m'

def main():
    db_url = os.getenv('DATABASE_URL')
    
    if not db_url:
        print(f"{RED}‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env{RESET}")
        sys.exit(1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ë–î
    if 'railway.app' in db_url:
        db_type = "üöÇ Railway –ë–î"
    else:
        db_type = "üíª –õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î"
    
    print(f"\n{BOLD}{BLUE}{'=' * 80}{RESET}")
    print(f"{BOLD}{BLUE}–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ name_embedding_text - {db_type}{RESET}")
    print(f"{BOLD}{BLUE}{'=' * 80}{RESET}\n")
    
    try:
        engine = create_engine(db_url)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        with engine.connect() as conn:
            result = conn.execute(text("SELECT version()"))
            version = result.fetchone()[0]
            print(f"{GREEN}‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ{RESET}")
            print(f"   PostgreSQL: {version[:50]}...\n")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
        inspector = inspect(engine)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        if 'products' not in inspector.get_table_names():
            print(f"{RED}‚ùå –¢–∞–±–ª–∏—Ü–∞ 'products' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!{RESET}")
            sys.exit(1)
        
        columns = inspector.get_columns('products')
        
        print(f"{BOLD}üìä –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã products:{RESET}")
        print("-" * 80)
        
        has_embedding_col = False
        
        for col in columns:
            if col['name'] == 'name_embedding_text':
                has_embedding_col = True
                print(f"{GREEN}üü¢ {col['name']:30} {str(col['type']):20} {'NULL' if col['nullable'] else 'NOT NULL'}{RESET}")
            elif col['name'] in ['id', 'name', 'category']:
                print(f"{BLUE}   {col['name']:30} {str(col['type']):20} {'NULL' if col['nullable'] else 'NOT NULL'}{RESET}")
        
        print("-" * 80)
        
        if has_embedding_col:
            print(f"\n{GREEN}‚úÖ –ö–æ–ª–æ–Ω–∫–∞ name_embedding_text –°–£–©–ï–°–¢–í–£–ï–¢!{RESET}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
            with engine.connect() as conn:
                result = conn.execute(text("""
                    SELECT 
                        COUNT(*) as total,
                        COUNT(name_embedding_text) as with_embeddings,
                        COUNT(*) - COUNT(name_embedding_text) as without_embeddings
                    FROM products
                """))
                row = result.fetchone()
                
                total = row[0]
                with_emb = row[1]
                without_emb = row[2]
                coverage = (with_emb / total * 100) if total > 0 else 0
                
                print(f"\n{BOLD}üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ embeddings:{RESET}")
                print(f"   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:       {total:,}")
                print(f"   –° embeddings:        {with_emb:,} ({coverage:.1f}%)")
                print(f"   –ë–µ–∑ embeddings:      {without_emb:,}")
                
                if coverage == 100:
                    print(f"\n{GREEN}üéâ –í–°–ï —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç embeddings! –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≥–æ—Ç–æ–≤!{RESET}")
                elif coverage > 0:
                    print(f"\n{YELLOW}‚ö†Ô∏è  Embeddings –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω–æ. –ó–∞–ø—É—Å—Ç–∏:{RESET}")
                    print(f"   python3 generate_embeddings_simple.py")
                else:
                    print(f"\n{RED}‚ö†Ô∏è  Embeddings –ù–ï —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ó–∞–ø—É—Å—Ç–∏:{RESET}")
                    print(f"   python3 generate_embeddings_simple.py")
        else:
            print(f"\n{RED}‚ùå –ö–æ–ª–æ–Ω–∫–∞ name_embedding_text –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢!{RESET}")
            print(f"\n{YELLOW}üìù –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ –≤—ã–ø–æ–ª–Ω–∏:{RESET}")
            print(f"   python3 setup_embeddings_simple.py")
            print(f"\n{YELLOW}   –ò–ª–∏ —á–µ—Ä–µ–∑ SQL:{RESET}")
            print(f"   ALTER TABLE products ADD COLUMN name_embedding_text TEXT;")
    
    except Exception as e:
        print(f"{RED}‚ùå –û—à–∏–±–∫–∞: {e}{RESET}")
        sys.exit(1)
    
    print(f"\n{BOLD}{BLUE}{'=' * 80}{RESET}\n")

if __name__ == "__main__":
    main()





