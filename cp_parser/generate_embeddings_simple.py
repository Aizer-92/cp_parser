#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è embeddings –ë–ï–ó pgvector - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ TEXT –∫–æ–ª–æ–Ω–∫—É
"""

import os
import time
import json
from dotenv import load_dotenv
from database.postgresql_manager import db_manager
from sqlalchemy import text

load_dotenv()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenAI
try:
    from openai import OpenAI
    OPENAI_AVAILABLE = True
    client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
except:
    OPENAI_AVAILABLE = False
    print("‚ö†Ô∏è  OpenAI –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip3 install --break-system-packages openai")

def generate_embedding(text: str):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç embedding –¥–ª—è —Ç–µ–∫—Å—Ç–∞"""
    if not OPENAI_AVAILABLE:
        return None
    
    try:
        response = client.embeddings.create(
            input=text[:8000],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ OpenAI
            model="text-embedding-3-small"
        )
        return response.data[0].embedding
    except Exception as e:
        print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ embedding: {e}")
        return None

def count_products_without_embeddings():
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –±–µ–∑ embeddings"""
    with db_manager.get_session() as session:
        try:
            count = session.execute(text("""
                SELECT COUNT(*) 
                FROM products 
                WHERE name_embedding_text IS NULL
            """)).scalar()
            return count
        except:
            return None

def generate_all_embeddings(batch_size=10, limit=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç embeddings –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    if not OPENAI_AVAILABLE:
        print("‚ùå OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip3 install --break-system-packages openai")
        print("   –ò –¥–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ .env")
        return
    
    print("="*80)
    print("–ì–ï–ù–ï–†–ê–¶–ò–Ø EMBEDDINGS (–ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø)")
    print("="*80)
    print()
    
    with db_manager.get_session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞
            check = session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'products' 
                AND column_name = 'name_embedding_text'
            """)).fetchone()
            
            if not check:
                print("‚ùå –ö–æ–ª–æ–Ω–∫–∞ name_embedding_text –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python3 setup_embeddings_simple.py")
                return
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–æ–Ω–∫–∏: {e}")
            return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    with db_manager.get_session() as session:
        query = """
            SELECT id, name, description
            FROM products
            WHERE name_embedding_text IS NULL
            ORDER BY id
        """
        if limit:
            query += f" LIMIT {limit}"
        
        products = session.execute(text(query)).fetchall()
        
        total = len(products)
        if total == 0:
            print("‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –∏–º–µ—é—Ç embeddings!")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total}")
        print(f"‚è±Ô∏è  –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {total * 0.2:.1f} —Å–µ–∫—É–Ω–¥")
        print()
        
        success_count = 0
        error_count = 0
        
        for i, (product_id, name, description) in enumerate(products, 1):
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è embedding
                text_for_embedding = name or ""
                if description:
                    text_for_embedding += f" {description[:200]}"
                
                if not text_for_embedding.strip():
                    print(f"   ‚ö†Ô∏è  [{i}/{total}] ID {product_id}: –ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    error_count += 1
                    continue
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embedding
                embedding = generate_embedding(text_for_embedding)
                
                if embedding is None:
                    error_count += 1
                    continue
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É
                embedding_json = json.dumps(embedding)
                
                session.execute(text("""
                    UPDATE products 
                    SET name_embedding_text = :embedding
                    WHERE id = :product_id
                """), {
                    'embedding': embedding_json,
                    'product_id': product_id
                })
                
                success_count += 1
                
                # –ö–æ–º–º–∏—Ç–∏–º –±–∞—Ç—á–∞–º–∏
                if i % batch_size == 0:
                    session.commit()
                    print(f"‚úÖ [{i}/{total}] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count} —É—Å–ø–µ—à–Ω–æ, {error_count} –æ—à–∏–±–æ–∫")
                    time.sleep(0.2)  # Rate limiting
                
            except Exception as e:
                print(f"   ‚ùå [{i}/{total}] ID {product_id}: {e}")
                error_count += 1
                continue
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
        try:
            session.commit()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞: {e}")
        
        print()
        print("="*80)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("="*80)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
        print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_count/total*100:.1f}%")
        print()

def generate_test_embeddings():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç embeddings –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10 —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–µ—Å—Ç)"""
    print("="*80)
    print("–¢–ï–°–¢–û–í–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø (10 —Ç–æ–≤–∞—Ä–æ–≤)")
    print("="*80)
    print()
    generate_all_embeddings(batch_size=5, limit=10)

if __name__ == '__main__':
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == 'test':
        generate_test_embeddings()
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        count = count_products_without_embeddings()
        if count is not None:
            print(f"–¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ embeddings: {count}")
            print()
            if count > 0:
                answer = input(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å embeddings –¥–ª—è {count} —Ç–æ–≤–∞—Ä–æ–≤? (y/n): ")
                if answer.lower() == 'y':
                    generate_all_embeddings()
            else:
                print("‚úÖ –í—Å–µ embeddings —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        else:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup_embeddings_simple.py —Å–Ω–∞—á–∞–ª–∞")






