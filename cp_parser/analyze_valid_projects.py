#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ Template 7
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Å—Ç–æ–ª–±—Ü—ã
"""
import pandas as pd
from pathlib import Path
import json

print("=" * 80)
print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–ê–õ–ò–î–ù–´–• –ü–†–û–ï–ö–¢–û–í TEMPLATE 7")
print("=" * 80)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
with open('TEMPLATE7_VALIDATION_RESULTS.json', 'r', encoding='utf-8') as f:
    validation = json.load(f)

valid_projects = validation['valid_projects'][:10]  # –ü–µ—Ä–≤—ã–µ 10

excel_dir = Path("storage/excel_files")

print(f"\nüìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–µ—Ä–≤—ã–µ 10 –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...\n")

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
column_patterns = {
    'photo': ['—Ñ–æ—Ç–æ', 'photo', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–∫–∞—Ä—Ç–∏–Ω–∫–∞'],
    'name': ['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', 'name', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '—Ç–æ–≤–∞—Ä', 'product'],
    'description': ['—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', 'description', '–æ–ø–∏—Å–∞–Ω–∏–µ', 'spec'],
    'custom': ['–∫–∞—Å—Ç–æ–º', 'custom', '–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è'],
    'quantity': ['—Ç–∏—Ä–∞–∂', 'quantity', 'qty', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'circulation'],
    'price_usd': ['$', 'usd', 'dollar'],
    'price_rub': ['‚ÇΩ', '—Ä—É–±', 'rub', '—Ä—É–±–ª'],
    'delivery': ['–¥–æ—Å—Ç–∞–≤–∫–∞', 'delivery', '—Å—Ä–æ–∫', '–≤—Ä–µ–º—è'],
    'sample': ['–æ–±—Ä–∞–∑–µ—Ü', 'sample', '–æ–±—Ä–∞–∑—Ü—ã'],
    'extra_photo': ['–¥–æ–ø', 'additional', 'extra']
}

route_keywords = {
    'sea': ['sea', '–º–æ—Ä–µ', '–º–æ—Ä—Å–∫–æ–π', '–¥–æ–ª–≥–æ–µ –∂–¥', '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä', 'container'],
    'air': ['air', '–∞–≤–∏–∞', '–∞–≤–∏–æ', '–¥–æ–ª–≥–æ–µ –∞–≤–∏–∞', '—Å–∞–º–æ–ª–µ—Ç'],
    'railway': ['–∂–¥', 'railway', '–∂.–¥', '–∂–µ–ª–µ–∑–Ω–∞—è –¥–æ—Ä–æ–≥–∞', '–ø–æ–µ–∑–¥'],
    'contract': ['–∫–æ–Ω—Ç—Ä–∞–∫—Ç', 'contract']
}

def analyze_project(project_id):
    """–î–µ—Ç–∞–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
    
    matching_files = list(excel_dir.glob(f'project_{project_id}_*.xlsx'))
    if not matching_files:
        return None
    
    file_path = matching_files[0]
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        df = pd.read_excel(file_path, nrows=30, header=None)
        
        result = {
            'project_id': project_id,
            'file': file_path.name,
            'shape': df.shape,
            'header_row': None,
            'columns': {},
            'routes': {},
            'data_preview': []
        }
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        for i in range(min(10, len(df))):
            row_values = [str(df.iloc[i, j]).lower() for j in range(min(25, len(df.columns)))]
            row_text = " ".join(row_values)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            name_found = any(kw in row_text for kw in column_patterns['name'])
            qty_found = any(kw in row_text for kw in column_patterns['quantity'])
            
            if name_found and qty_found:
                result['header_row'] = i
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤
                for j in range(min(25, len(df.columns))):
                    cell_value = str(df.iloc[i, j]).lower().strip()
                    
                    if cell_value == 'nan' or not cell_value:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø —Å—Ç–æ–ª–±—Ü–∞
                    for col_type, keywords in column_patterns.items():
                        if any(kw in cell_value for kw in keywords):
                            if col_type not in result['columns']:
                                result['columns'][col_type] = []
                            result['columns'][col_type].append({
                                'index': j,
                                'label': df.iloc[i, j],
                                'original': cell_value[:50]
                            })
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
                    for route_type, keywords in route_keywords.items():
                        if any(kw in cell_value for kw in keywords):
                            if route_type not in result['routes']:
                                result['routes'][route_type] = []
                            result['routes'][route_type].append({
                                'index': j,
                                'label': df.iloc[i, j],
                                'original': cell_value[:50]
                            })
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
                for k in range(i+1, min(i+6, len(df))):
                    row_preview = []
                    for j in range(min(10, len(df.columns))):
                        val = str(df.iloc[k, j])
                        if val == 'nan':
                            val = '---'
                        else:
                            val = val[:30]
                        row_preview.append(val)
                    result['data_preview'].append(row_preview)
                
                break
        
        return result
        
    except Exception as e:
        return {
            'project_id': project_id,
            'error': str(e)[:100]
        }

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã
for idx, project_id in enumerate(valid_projects, 1):
    print(f"\n{'=' * 80}")
    print(f"üìÑ –ü–†–û–ï–ö–¢ #{project_id} ({idx}/10)")
    print(f"{'=' * 80}")
    
    result = analyze_project(project_id)
    
    if not result:
        print(f"   ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        continue
    
    if 'error' in result:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        continue
    
    print(f"\nüìä –†–∞–∑–º–µ—Ä: {result['shape'][0]} —Å—Ç—Ä–æ–∫ √ó {result['shape'][1]} –∫–æ–ª–æ–Ω–æ–∫")
    print(f"üìç –°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {result['header_row'] + 1 if result['header_row'] is not None else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    if result['columns']:
        print(f"\n‚úÖ –ù–ê–ô–î–ï–ù–ù–´–ï –°–¢–û–õ–ë–¶–´:")
        for col_type, cols in sorted(result['columns'].items()):
            print(f"\n   üîπ {col_type.upper()}:")
            for col in cols:
                print(f"      ‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ [{col['index']}]: \"{col['label']}\"")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    if result['routes']:
        print(f"\nüöö –ù–ê–ô–î–ï–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´:")
        for route_type, routes in sorted(result['routes'].items()):
            print(f"\n   üîπ {route_type.upper()}:")
            for route in routes:
                print(f"      ‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ [{route['index']}]: \"{route['label']}\"")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
    if result['data_preview']:
        print(f"\nüìã –ü–†–ï–í–¨–Æ –î–ê–ù–ù–´–• (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤):")
        for i, row in enumerate(result['data_preview'], 1):
            print(f"\n   –°—Ç—Ä–æ–∫–∞ {i}:")
            for j, val in enumerate(row[:8]):  # –ü–µ—Ä–≤—ã–µ 8 –∫–æ–ª–æ–Ω–æ–∫
                print(f"      [{j}]: {val}")

print(f"\n{'=' * 80}")
print(f"üí° –í–´–í–û–î–´:")
print(f"{'=' * 80}")

print(f"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞–ª–∞, —á—Ç–æ Template 7 –∏–º–µ–µ—Ç:

1. –ß–µ—Ç–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (–æ–±—ã—á–Ω–æ —Å—Ç—Ä–æ–∫–∞ 1-2)
2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: –ù–∞–∑–≤–∞–Ω–∏–µ, –¢–∏—Ä–∞–∂
3. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã: –ñ–î, –ê–í–ò–ê, Sea, Air
4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –û–±—Ä–∞–∑–µ—Ü, –ö–∞—Å—Ç–æ–º

–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Å–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
- –ù–∞—Ö–æ–¥–∏—Ç –∏–Ω–¥–µ–∫—Å—ã –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
- –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏—Ä–∞–∂–µ–π)
""")

print(f"{'=' * 80}")

