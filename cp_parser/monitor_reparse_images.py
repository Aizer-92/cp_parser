#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import sys
from pathlib import Path
import time

sys.path.insert(0, str(Path(__file__).parent))
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text

def monitor():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    db = PostgreSQLManager()
    
    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    with open('projects_need_images.txt', 'r') as f:
        project_ids = [int(line.strip()) for line in f if line.strip().isdigit()]
    
    total = len(project_ids)
    
    while True:
        print("\n" + "=" * 80)
        print(f"üñºÔ∏è  –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ê–†–°–ò–ù–ì–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
        print("=" * 80)
        
        with db.get_session() as session:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ 132 –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–∞–º
            stats = session.execute(text("""
                SELECT 
                    COUNT(DISTINCT p.id) as products_with_images,
                    COUNT(DISTINCT pi.id) as total_images,
                    COUNT(DISTINCT CASE WHEN pi.image_url LIKE 'storage/%' THEN pi.id END) as local_images
                FROM projects proj
                JOIN products p ON p.table_id = proj.table_id
                LEFT JOIN product_images pi ON pi.product_id = p.id
                WHERE proj.id = ANY(:project_ids)
            """), {'project_ids': project_ids}).first()
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–∞–≤–Ω–æ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç)
            recent = session.execute(text("""
                SELECT COUNT(*) 
                FROM product_images pi
                JOIN products p ON p.id = pi.product_id
                JOIN projects proj ON proj.table_id = p.table_id
                WHERE proj.id = ANY(:project_ids)
                AND pi.image_url LIKE 'storage/%'
            """), {'project_ids': project_ids}).scalar()
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  –ü—Ä–æ–µ–∫—Ç–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è:  {total}")
        print(f"  –¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:  {stats.products_with_images:,}")
        print(f"  –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:        {stats.total_images:,}")
        print(f"  –õ–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:    {stats.local_images:,}")
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        local_dir = Path('storage/images')
        if local_dir.exists():
            local_files = list(local_dir.glob('*'))
            local_count = len(local_files)
            total_size = sum(f.stat().st_size for f in local_files if f.is_file())
        else:
            local_count = 0
            total_size = 0
        
        print(f"\nüíæ –õ–û–ö–ê–õ–¨–ù–´–ï –§–ê–ô–õ–´:")
        print(f"  –§–∞–π–ª–æ–≤ –≤ storage/images:  {local_count:,}")
        print(f"  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:             {total_size/1024/1024:.1f} –ú–ë")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥
        log_file = Path('reparse_images.log')
        if log_file.exists():
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥–∞
            with open(log_file, 'r') as f:
                lines = f.readlines()
                if lines:
                    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                    for line in reversed(lines[-20:]):
                        if '/132]' in line:
                            print(f"\nüìù –ü–†–û–ì–†–ï–°–°:")
                            print(f"  {line.strip()}")
                            break
        
        print("=" * 80)
        print("\n‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
        time.sleep(15)

if __name__ == '__main__':
    try:
        monitor()
    except KeyboardInterrupt:
        print("\n\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


