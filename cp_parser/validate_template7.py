#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è Template 7 (Multiple Routes)

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ä–µ–∞–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç Template 7:
- –ï—Å—Ç—å 2+ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
- –ï—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–∏—Ä–∞–∂, —Ü–µ–Ω–∞)
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ
"""
import pandas as pd
from pathlib import Path
from collections import defaultdict
import json

print("=" * 80)
print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø TEMPLATE 7 (MULTIPLE ROUTES)")
print("=" * 80)

excel_dir = Path("storage/excel_files")
excel_files = sorted([f for f in excel_dir.glob("*.xlsx") if f.name.startswith("project_")])

# –ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
validation_results = {
    'valid': [],           # –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–∞–ª–∏–¥–Ω—ã–µ
    'warning': [],         # –° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏, –Ω–æ –ø–∞—Ä—Å—è—Ç—Å—è
    'invalid': [],         # –ù–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é
    'errors': []           # –û—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è
}

# –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
stats = {
    'total_checked': 0,
    'has_routes': 0,
    'has_header_row': 0,
    'has_product_name': 0,
    'has_quantity': 0,
    'has_prices': 0,
    'multirow_products': 0
}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
route_keywords = ['–∂–¥', 'railway', '–∂.–¥', '–∞–≤–∏–∞', 'air', 'sea', '–º–æ—Ä–µ', '–∫–æ–Ω—Ç—Ä–∞–∫—Ç', 'contract', '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä', 'container']
name_keywords = ['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', 'name', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '—Ç–æ–≤–∞—Ä', 'product']
quantity_keywords = ['—Ç–∏—Ä–∞–∂', 'quantity', 'qty', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']
price_keywords = ['—Ü–µ–Ω–∞', 'price', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', 'cost', '$', '‚ÇΩ', '—Ä—É–±']

print(f"\nüìÅ –ü—Ä–æ–≤–µ—Ä—è—é {len(excel_files)} —Ñ–∞–π–ª–æ–≤...")
print(f"   (–≠—Ç–æ –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã)\n")

def validate_project(file_path):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç"""
    try:
        project_id = file_path.stem.split("_")[1]
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        df = pd.read_excel(file_path, nrows=50, header=None)
        
        if df.empty:
            return {'status': 'invalid', 'reason': 'Empty file'}
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        all_text = ""
        for i in range(min(15, len(df))):
            for j in range(min(20, len(df.columns))):
                val = str(df.iloc[i, j]).strip().lower()
                if val and val != 'nan':
                    all_text += val + " "
        
        validation = {
            'project_id': project_id,
            'file': file_path.name,
            'checks': {},
            'warnings': [],
            'score': 0,
            'max_score': 6
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ï—Å—Ç—å –ª–∏ 2+ –º–∞—Ä—à—Ä—É—Ç–∞
        found_routes = []
        for keyword in route_keywords:
            if keyword in all_text:
                found_routes.append(keyword)
        found_routes = list(set(found_routes))
        
        validation['checks']['routes'] = {
            'passed': len(found_routes) >= 2,
            'count': len(found_routes),
            'found': found_routes[:4]  # –ü–µ—Ä–≤—ã–µ 4
        }
        if validation['checks']['routes']['passed']:
            validation['score'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ï—Å—Ç—å –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        header_row = None
        for i in range(min(10, len(df))):
            row_text = " ".join([str(df.iloc[i, j]).lower() for j in range(min(20, len(df.columns))) if str(df.iloc[i, j]) != 'nan'])
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            name_found = any(kw in row_text for kw in name_keywords)
            qty_found = any(kw in row_text for kw in quantity_keywords)
            
            if name_found and qty_found:
                header_row = i
                break
        
        validation['checks']['header_row'] = {
            'passed': header_row is not None,
            'row': header_row
        }
        if validation['checks']['header_row']['passed']:
            validation['score'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ï—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
        has_name_col = any(kw in all_text for kw in name_keywords)
        validation['checks']['product_name'] = {'passed': has_name_col}
        if has_name_col:
            validation['score'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ï—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å —Ç–∏—Ä–∞–∂–æ–º
        has_qty_col = any(kw in all_text for kw in quantity_keywords)
        validation['checks']['quantity'] = {'passed': has_qty_col}
        if has_qty_col:
            validation['score'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ï—Å—Ç—å –ª–∏ —Ü–µ–Ω—ã
        price_count = sum(1 for kw in price_keywords if kw in all_text)
        validation['checks']['prices'] = {
            'passed': price_count >= 2,
            'count': price_count
        }
        if validation['checks']['prices']['passed']:
            validation['score'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –ï—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        has_data = False
        if header_row is not None and header_row + 1 < len(df):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö 5 —Å—Ç—Ä–æ–∫–∞—Ö
            for i in range(header_row + 1, min(header_row + 6, len(df))):
                row_text = " ".join([str(df.iloc[i, j]) for j in range(min(5, len(df.columns))) if str(df.iloc[i, j]) != 'nan'])
                if len(row_text) > 10:  # –ï—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ
                    has_data = True
                    break
        
        validation['checks']['has_data'] = {'passed': has_data}
        if has_data:
            validation['score'] += 1
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if len(found_routes) == 1:
            validation['warnings'].append('–¢–æ–ª—å–∫–æ 1 –º–∞—Ä—à—Ä—É—Ç (–Ω—É–∂–Ω–æ 2+)')
        
        if price_count < len(found_routes) * 2:
            validation['warnings'].append(f'–ú–∞–ª–æ —Ü–µ–Ω ({price_count}) –¥–ª—è {len(found_routes)} –º–∞—Ä—à—Ä—É—Ç–æ–≤')
        
        if header_row and header_row > 5:
            validation['warnings'].append(f'–ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–∞–ª–µ–∫–æ (—Å—Ç—Ä–æ–∫–∞ {header_row+1})')
        
        return validation
        
    except Exception as e:
        return {
            'status': 'error',
            'project_id': file_path.stem.split("_")[1],
            'file': file_path.name,
            'error': str(e)[:100]
        }

# –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
for idx, file_path in enumerate(excel_files, 1):
    result = validate_project(file_path)
    
    stats['total_checked'] += 1
    
    if 'error' in result:
        validation_results['errors'].append(result)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if result['checks']['routes']['passed']:
            stats['has_routes'] += 1
        if result['checks']['header_row']['passed']:
            stats['has_header_row'] += 1
        if result['checks']['product_name']['passed']:
            stats['has_product_name'] += 1
        if result['checks']['quantity']['passed']:
            stats['has_quantity'] += 1
        if result['checks']['prices']['passed']:
            stats['has_prices'] += 1
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º
        if result['score'] >= 5:  # 5-6 –∏–∑ 6
            validation_results['valid'].append(result)
        elif result['score'] >= 3:  # 3-4 –∏–∑ 6
            validation_results['warning'].append(result)
        else:  # 0-2 –∏–∑ 6
            validation_results['invalid'].append(result)
    
    if idx % 100 == 0:
        print(f"   ‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {idx}/{len(excel_files)}")

# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
print(f"\n" + "=" * 80)
print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò")
print(f"=" * 80)

total = stats['total_checked']
valid_count = len(validation_results['valid'])
warning_count = len(validation_results['warning'])
invalid_count = len(validation_results['invalid'])
error_count = len(validation_results['errors'])

print(f"\n‚úÖ –í–ê–õ–ò–î–ù–´–ï (5-6/6):        {valid_count:4d} ({valid_count/total*100:5.1f}%)")
print(f"‚ö†Ô∏è  –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò (3-4/6): {warning_count:4d} ({warning_count/total*100:5.1f}%)")
print(f"‚ùå –ù–ï–í–ê–õ–ò–î–ù–´–ï (0-2/6):      {invalid_count:4d} ({invalid_count/total*100:5.1f}%)")
print(f"üí• –û–®–ò–ë–ö–ò –ß–¢–ï–ù–ò–Ø:           {error_count:4d} ({error_count/total*100:5.1f}%)")
print(f"{'‚îÄ' * 80}")
print(f"üìÅ –í–°–ï–ì–û –ü–†–û–í–ï–†–ï–ù–û:         {total:4d}")

print(f"\n" + "=" * 80)
print(f"üìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
print(f"=" * 80)

print(f"\n‚úÖ –ü—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
print(f"   ‚Ä¢ 2+ –º–∞—Ä—à—Ä—É—Ç–∞:           {stats['has_routes']:4d} ({stats['has_routes']/total*100:5.1f}%)")
print(f"   ‚Ä¢ –°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:     {stats['has_header_row']:4d} ({stats['has_header_row']/total*100:5.1f}%)")
print(f"   ‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ '–ù–∞–∑–≤–∞–Ω–∏–µ':    {stats['has_product_name']:4d} ({stats['has_product_name']/total*100:5.1f}%)")
print(f"   ‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ '–¢–∏—Ä–∞–∂':       {stats['has_quantity']:4d} ({stats['has_quantity']/total*100:5.1f}%)")
print(f"   ‚Ä¢ –¶–µ–Ω—ã (2+):             {stats['has_prices']:4d} ({stats['has_prices']/total*100:5.1f}%)")

# –ü—Ä–∏–º–µ—Ä—ã –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
if validation_results['valid']:
    print(f"\n" + "=" * 80)
    print(f"‚úÖ –ü–†–ò–ú–ï–†–´ –í–ê–õ–ò–î–ù–´–• –ü–†–û–ï–ö–¢–û–í (–ø–µ—Ä–≤—ã–µ 15):")
    print(f"=" * 80)
    
    for result in validation_results['valid'][:15]:
        score = result['score']
        routes = result['checks']['routes']
        warnings = f" ‚ö†Ô∏è {len(result['warnings'])}" if result['warnings'] else ""
        
        print(f"\n   #{result['project_id']} [{score}/6]{warnings}")
        print(f"      –ú–∞—Ä—à—Ä—É—Ç—ã: {', '.join(routes['found'])} ({routes['count']} –Ω–∞–π–¥–µ–Ω–æ)")
        if result['warnings']:
            for w in result['warnings']:
                print(f"      ‚ö†Ô∏è  {w}")

# –ü—Ä–∏–º–µ—Ä—ã —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
if validation_results['warning']:
    print(f"\n" + "=" * 80)
    print(f"‚ö†Ô∏è  –ü–†–ò–ú–ï–†–´ –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò (–ø–µ—Ä–≤—ã–µ 10):")
    print(f"=" * 80)
    
    for result in validation_results['warning'][:10]:
        score = result['score']
        routes = result['checks']['routes']
        
        print(f"\n   #{result['project_id']} [{score}/6]")
        print(f"      –ú–∞—Ä—à—Ä—É—Ç—ã: {routes['count']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏
        failed = []
        for check_name, check_data in result['checks'].items():
            if isinstance(check_data, dict) and not check_data.get('passed'):
                failed.append(check_name)
        
        if failed:
            print(f"      ‚ùå –ù–µ –ø—Ä–æ—à–ª–∏: {', '.join(failed)}")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
output = {
    'summary': {
        'total': total,
        'valid': valid_count,
        'warning': warning_count,
        'invalid': invalid_count,
        'errors': error_count
    },
    'stats': stats,
    'valid_projects': [r['project_id'] for r in validation_results['valid']],
    'warning_projects': [r['project_id'] for r in validation_results['warning']],
    'invalid_projects': [r['project_id'] for r in validation_results['invalid']]
}

with open('TEMPLATE7_VALIDATION_RESULTS.json', 'w', encoding='utf-8') as f:
    json.dump(output, f, indent=2, ensure_ascii=False)

print(f"\n" + "=" * 80)
print(f"üíæ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–û–•–†–ê–ù–ï–ù–´:")
print(f"=" * 80)
print(f"\n   üìÑ TEMPLATE7_VALIDATION_RESULTS.json")
print(f"      ‚Ä¢ –°–ø–∏—Å–∫–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö/–Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
print(f"      ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

print(f"\n" + "=" * 80)
print(f"üí° –í–´–í–û–î–´:")
print(f"=" * 80)

parseable = valid_count + warning_count
print(f"\n   ‚úÖ –ú–û–ñ–ù–û –ü–ê–†–°–ò–¢–¨: {parseable} –ø—Ä–æ–µ–∫—Ç–æ–≤ ({parseable/total*100:.1f}%)")
print(f"   ‚ùå –ù–ï –ü–ê–†–°–Ø–¢–°–Ø:   {invalid_count + error_count} –ø—Ä–æ–µ–∫—Ç–æ–≤ ({(invalid_count + error_count)/total*100:.1f}%)")

if parseable > 0:
    print(f"\n   üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ù–∞—á–∞—Ç—å —Å {valid_count} –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"      –ó–∞—Ç–µ–º –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞—Ä—Å–µ—Ä –¥–ª—è {warning_count} —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")

print(f"\n" + "=" * 80)

