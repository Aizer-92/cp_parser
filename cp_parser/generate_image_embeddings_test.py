#!/usr/bin/env python3
"""
–¢–ï–°–¢–û–í–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è embeddings –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞.
"""

import os
import sys
import time
from sqlalchemy import create_engine, text
from dotenv import load_dotenv
from PIL import Image
import requests
from io import BytesIO

load_dotenv()

# –¶–≤–µ—Ç–∞
GREEN = '\033[92m'
YELLOW = '\033[93m'
RED = '\033[91m'
BLUE = '\033[94m'
RESET = '\033[0m'

def print_success(text):
    print(f"{GREEN}‚úÖ {text}{RESET}")

def print_error(text):
    print(f"{RED}‚ùå {text}{RESET}")

def print_info(text):
    print(f"{BLUE}‚ÑπÔ∏è  {text}{RESET}")

def print_warning(text):
    print(f"{YELLOW}‚ö†Ô∏è  {text}{RESET}")

def load_clip_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç CLIP –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ embeddings"""
    print_info("–ó–∞–≥—Ä—É–∑–∫–∞ CLIP –º–æ–¥–µ–ª–∏...")
    
    try:
        from sentence_transformers import SentenceTransformer
        model = SentenceTransformer('clip-ViT-B-32')
        print_success("CLIP –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (sentence-transformers)")
        print_info("   –ú–æ–¥–µ–ª—å: clip-ViT-B-32")
        print_info("   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: 512")
        return model, "sentence-transformers"
    except ImportError:
        print_error("sentence-transformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print_info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞: pip install sentence-transformers")
        sys.exit(1)

def generate_embedding(image_url, model, model_type):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç embedding –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        response = requests.get(image_url, timeout=10)
        image = Image.open(BytesIO(response.content)).convert('RGB')
        
        if model_type == "sentence-transformers":
            embedding = model.encode(image)
            return embedding.tolist()
        
    except Exception as e:
        return None

def main():
    print(f"\n{BLUE}{'=' * 80}{RESET}")
    print(f"{BLUE}{'–¢–ï–°–¢–û–í–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø IMAGE EMBEDDINGS (100 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)'.center(80)}{RESET}")
    print(f"{BLUE}{'=' * 80}{RESET}\n")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    main_db_url = os.getenv('DATABASE_URL_PRIVATE') or os.getenv('DATABASE_URL')
    vector_db_url = os.getenv('VECTOR_DATABASE_URL')
    
    if not main_db_url or not vector_db_url:
        print_error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã DATABASE_URL –∏/–∏–ª–∏ VECTOR_DATABASE_URL")
        sys.exit(1)
    
    print_info(f"–û—Å–Ω–æ–≤–Ω–∞—è –ë–î: {main_db_url[:50]}...")
    print_info(f"–í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î: {vector_db_url[:50]}...")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    model, model_type = load_clip_model()
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
    print_info("\n1Ô∏è‚É£  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î...")
    main_engine = create_engine(main_db_url, pool_pre_ping=True)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ pgvector –ë–î
    print_info("\n2Ô∏è‚É£  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ pgvector –ë–î...")
    vector_engine = create_engine(vector_db_url, pool_pre_ping=True)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è embeddings –¥–ª—è –ø–µ—Ä–≤—ã—Ö 100 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    print_info("\n3Ô∏è‚É£  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è embeddings –¥–ª—è –ø–µ—Ä–≤—ã—Ö 100 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    print_warning("   –≠—Ç–æ –∑–∞–π–º–µ—Ç ~4-5 –º–∏–Ω—É—Ç\n")
    
    TEST_LIMIT = 100
    success_count = 0
    error_count = 0
    
    start_time = time.time()
    
    # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ–¥–Ω–æ –Ω–∞ —Ç–æ–≤–∞—Ä, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å—Ç–æ–ª–±—Ü—É –ê)
    with main_engine.connect() as conn:
        images = conn.execute(text("""
            SELECT DISTINCT ON (pi.product_id) 
                pi.id, pi.product_id, pi.image_url, pi.image_filename
            FROM product_images pi
            WHERE pi.product_id IS NOT NULL
            AND (
                (pi.image_url IS NOT NULL AND pi.image_url != '')
                OR (pi.image_filename IS NOT NULL AND pi.image_filename != '')
            )
            ORDER BY pi.product_id, 
                     CASE WHEN pi.column_number = 1 THEN 0 ELSE 1 END,
                     pi.id
            LIMIT :limit
        """), {"limit": TEST_LIMIT}).fetchall()
    
    print_success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embeddings
    for i, (image_id, product_id, image_url, image_filename) in enumerate(images, 1):
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä—è–º–æ–π URL - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ filename)
            if image_url and image_url.strip():
                final_url = image_url
            elif image_filename and image_filename.strip():
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–ª–∞—á–Ω—ã–π URL –∏–∑ filename
                final_url = f"https://s3.ru1.storage.beget.cloud/73d16f7545b3-promogoods/images/{image_filename}"
            else:
                error_count += 1
                continue
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è embedding
            embedding = generate_embedding(final_url, model, model_type)
            
            if embedding is None:
                error_count += 1
                continue
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ pgvector –ë–î
            with vector_engine.begin() as conn:
                conn.execute(text("""
                    INSERT INTO image_embeddings 
                        (image_id, product_id, image_embedding, image_url, model_version)
                    VALUES 
                        (:image_id, :product_id, :embedding, :url, :model)
                    ON CONFLICT (image_id) DO UPDATE
                    SET image_embedding = EXCLUDED.image_embedding,
                        updated_at = NOW()
                """), {
                    "image_id": image_id,
                    "product_id": product_id,
                    "embedding": embedding,
                    "url": final_url[:200],
                    "model": f"{model_type}/clip-vit-base-patch32"
                })
            
            success_count += 1
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if i % 10 == 0:
                elapsed = time.time() - start_time
                rate = i / elapsed if elapsed > 0 else 0
                remaining = (len(images) - i) / rate if rate > 0 else 0
                print(f"      ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i}/{len(images)} | "
                      f"–°–∫–æ—Ä–æ—Å—Ç—å: {rate:.1f}/—Å–µ–∫ | ETA: {remaining:.0f}—Å–µ–∫")
        
        except Exception as e:
            print_error(f"   [{i}/{len(images)}] ID {image_id}: {e}")
            error_count += 1
            continue
    
    elapsed_time = time.time() - start_time
    
    print(f"\n{GREEN}{'=' * 80}{RESET}")
    print_success(f"–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print_success(f"   –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(images)}")
    print(f"   {RED}–û—à–∏–±–æ–∫: {error_count}/{len(images)}{RESET}")
    print_success(f"   –í—Ä–µ–º—è: {elapsed_time:.0f} —Å–µ–∫—É–Ω–¥ ({elapsed_time / 60:.1f} –º–∏–Ω—É—Ç)")
    print_success(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {success_count / elapsed_time:.1f} embeddings/—Å–µ–∫")
    print(f"{GREEN}{'=' * 80}{RESET}\n")
    
    if success_count > 0:
        print_info("üìù –ß—Ç–æ –¥–∞–ª—å—à–µ:")
        print("1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –ø–æ–∏—Å–∫ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º: py test_image_search.py")
        print("2. –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ö–æ—Ä–æ—à–µ–µ - –∑–∞–ø—É—Å—Ç–∏ –ø–æ–ª–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:")
        print("   py generate_image_embeddings.py")
    else:
        print_error("‚ùå –ù–∏ –æ–¥–Ω–æ–≥–æ embedding –Ω–µ —Å–æ–∑–¥–∞–Ω–æ!")
        print_info("   –ü—Ä–æ–≤–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ URL")

if __name__ == "__main__":
    main()

