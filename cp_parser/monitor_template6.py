#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –®–∞–±–ª–æ–Ω–∞ 6
"""
import sys
import time
from pathlib import Path

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text


def get_stats(db):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î"""
    with db.get_session() as session:
        # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        with open('template6_project_ids.txt', 'r') as f:
            target_ids = set(int(line.strip()) for line in f if line.strip().isdigit())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å–ø–∞—Ä—Å–µ–Ω–æ
        result = session.execute(text("""
            SELECT 
                COUNT(*) FILTER (WHERE parsing_status = 'complete') as completed,
                COUNT(*) FILTER (WHERE parsing_status = 'error') as errors,
                COUNT(*) FILTER (WHERE parsing_status = 'pending') as pending,
                SUM(total_products_found) as products,
                SUM(total_images_found) as images
            FROM projects
            WHERE id = ANY(:ids)
        """), {'ids': list(target_ids)}).fetchone()
        
        return {
            'total': len(target_ids),
            'completed': result[0] or 0,
            'errors': result[1] or 0,
            'pending': result[2] or 0,
            'products': result[3] or 0,
            'images': result[4] or 0
        }


def main():
    db = PostgreSQLManager()
    
    print("=" * 80)
    print("–ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ê–†–°–ò–ù–ì–ê –®–ê–ë–õ–û–ù–ê 6")
    print("=" * 80)
    
    while True:
        stats = get_stats(db)
        
        processed = stats['completed'] + stats['errors']
        progress = processed * 100 // stats['total'] if stats['total'] > 0 else 0
        
        print(f"\n[{time.strftime('%H:%M:%S')}] –ü—Ä–æ–≥—Ä–µ—Å—Å: {processed}/{stats['total']} ({progress}%)")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {stats['completed']}")
        print(f"  ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}")
        print(f"  ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {stats['pending']}")
        print(f"  üì¶ –¢–æ–≤–∞—Ä—ã: {stats['products']:,}")
        print(f"  üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {stats['images']:,}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if stats['pending'] == 0:
            print(f"\n{'='*80}")
            print("‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
            print("=" * 80)
            break
        
        time.sleep(10)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")




"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –®–∞–±–ª–æ–Ω–∞ 6
"""
import sys
import time
from pathlib import Path

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text


def get_stats(db):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î"""
    with db.get_session() as session:
        # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        with open('template6_project_ids.txt', 'r') as f:
            target_ids = set(int(line.strip()) for line in f if line.strip().isdigit())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å–ø–∞—Ä—Å–µ–Ω–æ
        result = session.execute(text("""
            SELECT 
                COUNT(*) FILTER (WHERE parsing_status = 'complete') as completed,
                COUNT(*) FILTER (WHERE parsing_status = 'error') as errors,
                COUNT(*) FILTER (WHERE parsing_status = 'pending') as pending,
                SUM(total_products_found) as products,
                SUM(total_images_found) as images
            FROM projects
            WHERE id = ANY(:ids)
        """), {'ids': list(target_ids)}).fetchone()
        
        return {
            'total': len(target_ids),
            'completed': result[0] or 0,
            'errors': result[1] or 0,
            'pending': result[2] or 0,
            'products': result[3] or 0,
            'images': result[4] or 0
        }


def main():
    db = PostgreSQLManager()
    
    print("=" * 80)
    print("–ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ê–†–°–ò–ù–ì–ê –®–ê–ë–õ–û–ù–ê 6")
    print("=" * 80)
    
    while True:
        stats = get_stats(db)
        
        processed = stats['completed'] + stats['errors']
        progress = processed * 100 // stats['total'] if stats['total'] > 0 else 0
        
        print(f"\n[{time.strftime('%H:%M:%S')}] –ü—Ä–æ–≥—Ä–µ—Å—Å: {processed}/{stats['total']} ({progress}%)")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {stats['completed']}")
        print(f"  ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}")
        print(f"  ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {stats['pending']}")
        print(f"  üì¶ –¢–æ–≤–∞—Ä—ã: {stats['products']:,}")
        print(f"  üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {stats['images']:,}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if stats['pending'] == 0:
            print(f"\n{'='*80}")
            print("‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
            print("=" * 80)
            break
        
        time.sleep(10)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")











