#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–µ–π
"""

import sys
import time
from pathlib import Path
sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text


def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–∞–º"""
    db = PostgreSQLManager()
    
    with db.get_session() as session:
        # –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å NULL row_number
        total_null = session.execute(
            text("""
                SELECT COUNT(DISTINCT project_id)
                FROM products
                WHERE row_number IS NULL
            """)
        ).scalar()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        stats = session.execute(
            text("""
                SELECT 
                    COUNT(DISTINCT p.project_id) as projects_with_images,
                    COUNT(pi.id) as total_images,
                    COUNT(DISTINCT pi.image_url) as unique_images,
                    SUM(CASE WHEN pi.is_main_image::text = 'true' THEN 1 ELSE 0 END) as main_images
                FROM products p
                JOIN product_images pi ON p.id = pi.product_id
                WHERE p.row_number IS NULL
            """)
        ).fetchone()
        
        return {
            'total_projects': total_null,
            'projects_with_images': stats[0],
            'total_images': stats[1],
            'unique_images': stats[2],
            'main_images': stats[3],
            'duplicates': stats[1] - stats[2]
        }


def read_last_log_lines(n=10):
    """–ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –∏–∑ –ª–æ–≥–∞"""
    log_file = Path('batch_processing.log')
    if not log_file.exists():
        return []
    
    with open(log_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()
        return lines[-n:] if len(lines) > n else lines


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "="*80)
    print("üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –û–ë–†–ê–ë–û–¢–ö–ò –ë–ê–¢–ß–ï–ô")
    print("="*80 + "\n")
    
    try:
        while True:
            stats = get_stats()
            
            print(f"\r{'='*80}", end='')
            print(f"\r‚è±Ô∏è  {time.strftime('%H:%M:%S')}", end=' | ')
            print(f"–ü—Ä–æ–µ–∫—Ç–æ–≤ —Å NULL: {stats['total_projects']:3}", end=' | ')
            print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats['total_images']:,}", end=' | ')
            print(f"–î—É–±–ª–∏–∫–∞—Ç–æ–≤: {stats['duplicates']:,}", end=' | ')
            print(f"–ì–ª–∞–≤–Ω—ã—Ö: {stats['main_images']:,}", end='    ')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
            log_lines = read_last_log_lines(3)
            if log_lines:
                print("\n\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
                for line in log_lines:
                    line = line.strip()
                    if line and ('–ë–ê–¢–ß' in line or '‚úÖ' in line or '–û—Å—Ç–∞–ª–æ—Å—å' in line):
                        print(f"  {line[:76]}")
            
            print("\n" + "="*80)
            
            time.sleep(5)
            print("\033[F" * 8, end='')  # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ 8 —Å—Ç—Ä–æ–∫ –≤–≤–µ—Ä—Ö
            
    except KeyboardInterrupt:
        print("\n\n‚úã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n")


if __name__ == "__main__":
    main()

