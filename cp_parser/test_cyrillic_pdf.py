"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ PDF
"""

from reportlab.lib.pagesizes import A4
from reportlab.lib.units import mm
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from pathlib import Path

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–∞ DejaVu
font_dir = Path(__file__).parent / 'fonts'
font_file = font_dir / 'DejaVuSans.ttf'
font_bold_file = font_dir / 'DejaVuSans-Bold.ttf'

print(f"üìÅ –®—Ä–∏—Ñ—Ç Regular: {font_file}")
print(f"üìÅ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {font_file.exists()}")
print(f"üìÅ –®—Ä–∏—Ñ—Ç Bold: {font_bold_file}")
print(f"üìÅ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {font_bold_file.exists()}")

if font_file.exists():
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç
        font_regular = TTFont('DejaVuSans', str(font_file))
        font_bold = TTFont('DejaVuSans-Bold', str(font_bold_file))
        
        pdfmetrics.registerFont(font_regular)
        pdfmetrics.registerFont(font_bold)
        
        print("‚úÖ –®—Ä–∏—Ñ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF
        output_file = Path(__file__).parent / 'test_cyrillic.pdf'
        doc = SimpleDocTemplate(
            str(output_file),
            pagesize=A4,
            rightMargin=20*mm,
            leftMargin=20*mm,
            topMargin=20*mm,
            bottomMargin=20*mm
        )
        
        # –°—Ç–∏–ª–∏
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Title'],
            fontName='DejaVuSans-Bold',
            fontSize=18,
            textColor=colors.HexColor('#1f2937')
        )
        
        normal_style = ParagraphStyle(
            'CustomNormal',
            parent=styles['Normal'],
            fontName='DejaVuSans',
            fontSize=12,
            textColor=colors.HexColor('#374151')
        )
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç
        story = []
        
        story.append(Paragraph('–¢–ï–°–¢ –ö–ò–†–ò–õ–õ–ò–¶–´ –í PDF', title_style))
        story.append(Spacer(1, 10*mm))
        
        story.append(Paragraph('–¢–æ–≤–∞—Ä: –ß–µ—Ö–æ–ª —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–π', normal_style))
        story.append(Paragraph('–û–ø–∏—Å–∞–Ω–∏–µ: –∫–∞—Ä–∞–±–∏–Ω –º–µ—Ç–∞–ª–ª, 10*10 —Å–º –Ω–∞ –º–æ–ª–Ω–∏–∏', normal_style))
        story.append(Spacer(1, 5*mm))
        
        story.append(Paragraph('–û–±—Ä–∞–∑–µ—Ü: $8000.00 | –°—Ä–æ–∫: 22 –¥–Ω.', normal_style))
        story.append(Spacer(1, 5*mm))
        
        story.append(Paragraph('–¶–µ–Ω—ã: 300 —à—Ç - $6.64 / ‚ÇΩ558.04', normal_style))
        story.append(Paragraph('–¶–µ–Ω—ã: 300 —à—Ç - $6.84 / ‚ÇΩ574.84', normal_style))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        doc.build(story)
        
        print(f"‚úÖ PDF —Å–æ–∑–¥–∞–Ω: {output_file}")
        print("üìÑ –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—É")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
else:
    print("‚ùå –®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")

