#!/usr/bin/env python3
"""
–û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –®–∞–±–ª–æ–Ω–∞ 5 –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ FTP
"""

import sys
from pathlib import Path
from sqlalchemy import text
import os

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager

def main():
    db = PostgreSQLManager()
    
    print("=" * 80)
    print("üßπ –û–ß–ò–°–¢–ö–ê –õ–û–ö–ê–õ–¨–ù–´–• –§–ê–ô–õ–û–í –®–ê–ë–õ–û–ù–ê 5")
    print("=" * 80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –®–∞–±–ª–æ–Ω–∞ 5
    with open('template_5_candidate_ids.txt', 'r') as f:
        template5_ids = [int(line.strip()) for line in f if line.strip().isdigit()]
    
    print(f"\nüìã –ü—Ä–æ–µ–∫—Ç–æ–≤ –®–∞–±–ª–æ–Ω–∞ 5: {len(template5_ids)}")
    
    with db.get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        images_without_url = session.execute(text("""
            SELECT COUNT(*)
            FROM product_images pi
            JOIN products p ON pi.product_id = p.id
            WHERE p.project_id = ANY(:ids)
            AND (pi.image_url IS NULL OR pi.image_url = '')
        """), {'ids': template5_ids}).scalar()
        
        if images_without_url > 0:
            print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: {images_without_url} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            print(f"‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏.")
            response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—á–∏—Å—Ç–∫—É? (yes/no): ")
            if response.lower() != 'yes':
                print("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ table_id –∏ local_path –¥–ª—è –®–∞–±–ª–æ–Ω–∞ 5
        results = session.execute(text("""
            SELECT DISTINCT pr.table_id, pi.local_path
            FROM projects pr
            JOIN products p ON pr.id = p.project_id
            LEFT JOIN product_images pi ON p.id = pi.product_id
            WHERE pr.id = ANY(:ids)
        """), {'ids': template5_ids}).fetchall()
        
        table_ids = set()
        image_paths = set()
        
        for table_id, local_path in results:
            if table_id:
                table_ids.add(table_id)
            if local_path:
                image_paths.add(local_path)
        
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ:")
        print(f"  ‚Ä¢ Excel —Ñ–∞–π–ª–æ–≤: {len(table_ids)}")
        print(f"  ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_paths)}")
        
        # –£–¥–∞–ª—è–µ–º Excel —Ñ–∞–π–ª—ã
        print(f"\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–æ–≤...")
        excel_dir = Path('storage/excel_files')
        deleted_excel = 0
        not_found_excel = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Excel —Ñ–∞–π–ª—ã –®–∞–±–ª–æ–Ω–∞ 5 –ø–æ –ø—Ä–æ–µ–∫—Ç–Ω—ã–º ID
        for proj_id in template5_ids:
            # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º project_{proj_id}_*.xlsx
            excel_files = list(excel_dir.glob(f"project_{proj_id}_*.xlsx")) + list(excel_dir.glob(f"project_{proj_id}_*.xls"))
            
            if excel_files:
                for excel_path in excel_files:
                    try:
                        os.remove(excel_path)
                        deleted_excel += 1
                        if deleted_excel % 50 == 0:
                            print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω–æ: {deleted_excel}")
                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {excel_path.name}: {e}")
            else:
                not_found_excel += 1
        
        print(f"\n  ‚úÖ –£–¥–∞–ª–µ–Ω–æ Excel: {deleted_excel}")
        print(f"  ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {not_found_excel}")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print(f"\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        deleted_images = 0
        not_found_images = 0
        
        for local_path in image_paths:
            if local_path and local_path.strip():
                img_path = Path(local_path)
                if img_path.exists():
                    try:
                        os.remove(img_path)
                        deleted_images += 1
                        if deleted_images % 500 == 0:
                            print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω–æ: {deleted_images}/{len(image_paths)}")
                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {img_path.name}: {e}")
                else:
                    not_found_images += 1
        
        print(f"\n  ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {deleted_images}")
        print(f"  ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {not_found_images}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        
        # –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–∞–π–ª—ã
        remaining_excel = len(list(excel_dir.glob('*.xlsx')))
        
        images_dir = Path('storage/images')
        if images_dir.exists():
            remaining_images = len(list(images_dir.glob('*.*')))
        else:
            remaining_images = 0
        
        print(f"  ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å Excel —Ñ–∞–π–ª–æ–≤: {remaining_excel}")
        print(f"  ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {remaining_images}")
        
        print("\n" + "=" * 80)
        print("‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 80)

if __name__ == '__main__':
    main()

