#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import sys
from pathlib import Path
import sqlite3
import psycopg2
from psycopg2.extras import RealDictCursor
import pandas as pd
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
SQLITE_DB_PATH = "database/commercial_proposals.db"
POSTGRESQL_URL = "postgresql://postgres:wpqIxsBFYwmaNBFmCtBahhIMVSSskeiB@centerbeam.proxy.rlwy.net:26590/railway"

class SafeDatabaseMigrator:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–∏–≥—Äator –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.sqlite_path = Path(SQLITE_DB_PATH)
        self.postgresql_url = POSTGRESQL_URL
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ SQLite –±–∞–∑—ã
        if not self.sqlite_path.exists():
            raise FileNotFoundError(f"SQLite –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.sqlite_path}")
        
        logger.info(f"üìÅ SQLite –±–∞–∑–∞: {self.sqlite_path}")
        logger.info(f"üåê PostgreSQL URL: {self.postgresql_url}")
    
    def test_connections(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ–±–µ–∏–º –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîå –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        # –¢–µ—Å—Ç SQLite
        try:
            sqlite_conn = sqlite3.connect(self.sqlite_path)
            cursor = sqlite_conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cursor.fetchall()
            logger.info(f"‚úÖ SQLite: –Ω–∞–π–¥–µ–Ω–æ {len(tables)} —Ç–∞–±–ª–∏—Ü")
            sqlite_conn.close()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ SQLite: {e}")
            return False
        
        # –¢–µ—Å—Ç PostgreSQL
        try:
            postgres_conn = psycopg2.connect(self.postgresql_url)
            cursor = postgres_conn.cursor()
            cursor.execute("SELECT version();")
            version = cursor.fetchone()
            logger.info(f"‚úÖ PostgreSQL: {version[0]}")
            postgres_conn.close()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ PostgreSQL: {e}")
            return False
        
        return True
    
    def get_sqlite_tables(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –∏–∑ SQLite"""
        conn = sqlite3.connect(self.sqlite_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = [row[0] for row in cursor.fetchall()]
        
        conn.close()
        return tables
    
    def get_table_schema(self, table_name):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã –∏–∑ SQLite"""
        conn = sqlite3.connect(self.sqlite_path)
        cursor = conn.cursor()
        
        cursor.execute(f"PRAGMA table_info({table_name});")
        columns = cursor.fetchall()
        
        conn.close()
        return columns
    
    def get_table_data(self, table_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã SQLite"""
        conn = sqlite3.connect(self.sqlite_path)
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
        df = pd.read_sql_query(f"SELECT * FROM {table_name}", conn)
        
        conn.close()
        return df
    
    def create_postgresql_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL –Ω–∞ –æ—Å–Ω–æ–≤–µ SQLite —Å—Ö–µ–º—ã"""
        logger.info("üèóÔ∏è  –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
        postgres_conn = psycopg2.connect(self.postgresql_url)
        cursor = postgres_conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –∏–∑ SQLite
        tables = self.get_sqlite_tables()
        
        for table_name in tables:
            logger.info(f"üìã –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É: {table_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã
            columns = self.get_table_schema(table_name)
            
            # –°–æ–∑–¥–∞–µ–º SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
            create_sql = f"CREATE TABLE IF NOT EXISTS {table_name} ("
            column_definitions = []
            
            for col in columns:
                col_id, col_name, col_type, not_null, default_val, pk = col
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã SQLite –≤ PostgreSQL —Å —É—á–µ—Ç–æ–º –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
                if col_type.upper() == 'INTEGER':
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º BIGINT –¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
                    pg_type = 'BIGINT'
                elif col_type.upper() == 'TEXT':
                    pg_type = 'TEXT'
                elif col_type.upper() == 'REAL':
                    pg_type = 'REAL'
                elif col_type.upper() == 'BLOB':
                    pg_type = 'BYTEA'
                else:
                    pg_type = 'TEXT'
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                constraints = []
                if pk:
                    constraints.append('PRIMARY KEY')
                if not_null and not pk:
                    constraints.append('NOT NULL')
                
                constraint_str = ' '.join(constraints)
                column_def = f"{col_name} {pg_type}"
                if constraint_str:
                    column_def += f" {constraint_str}"
                
                column_definitions.append(column_def)
            
            create_sql += ", ".join(column_definitions) + ");"
            
            try:
                cursor.execute(create_sql)
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —Å–æ–∑–¥–∞–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        
        postgres_conn.commit()
        postgres_conn.close()
    
    def migrate_table_safely(self, table_name):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –º–∏–≥—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info(f"üìã –ú–∏–≥—Ä–∏—Ä—É—é —Ç–∞–±–ª–∏—Ü—É: {table_name}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        sqlite_conn = sqlite3.connect(self.sqlite_path)
        postgres_conn = psycopg2.connect(self.postgresql_url)
        postgres_cursor = postgres_conn.cursor()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL
            postgres_cursor.execute(f"SELECT COUNT(*) FROM {table_name};")
            existing_count = postgres_cursor.fetchone()[0]
            
            if existing_count > 0:
                logger.info(f"‚ö†Ô∏è  –í —Ç–∞–±–ª–∏—Ü–µ {table_name} —É–∂–µ –µ—Å—Ç—å {existing_count} –∑–∞–ø–∏—Å–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                return {'status': 'skipped', 'count': existing_count}
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite
            df = self.get_table_data(table_name)
            
            if df.empty:
                logger.info(f"‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞")
                return {'status': 'empty', 'count': 0}
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
            columns = list(df.columns)
            placeholders = ', '.join(['%s'] * len(columns))
            columns_str = ', '.join(columns)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞—Ç—á–∞–º–∏
            insert_sql = f"INSERT INTO {table_name} ({columns_str}) VALUES ({placeholders})"
            
            records_inserted = 0
            errors_count = 0
            batch_size = 100  # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ 100 –∑–∞–ø–∏—Å–µ–π –∑–∞ —Ä–∞–∑
            
            for i in range(0, len(df), batch_size):
                batch_df = df.iloc[i:i+batch_size]
                
                try:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞—Ç—á–∞
                    batch_data = []
                    for _, row in batch_df.iterrows():
                        values = []
                        for val in row.values:
                            if pd.isna(val):
                                values.append(None)
                            elif isinstance(val, (int, float)) and val > 2147483647:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ INTEGER
                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–∏
                                values.append(str(val))
                            else:
                                values.append(val)
                        batch_data.append(tuple(values))
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –±–∞—Ç—á
                    postgres_cursor.executemany(insert_sql, batch_data)
                    records_inserted += len(batch_data)
                    
                    # –ö–æ–º–º–∏—Ç–∏–º –∫–∞–∂–¥—ã–π –±–∞—Ç—á
                    postgres_conn.commit()
                    
                    if records_inserted % 1000 == 0:
                        logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {records_inserted}/{len(df)}")
                        
                except Exception as e:
                    errors_count += 1
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –±–∞—Ç—á–∞ –≤ {table_name}: {e}")
                    postgres_conn.rollback()
                    
                    # –ü—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ –æ–¥–Ω–æ–π
                    for _, row in batch_df.iterrows():
                        try:
                            values = []
                            for val in row.values:
                                if pd.isna(val):
                                    values.append(None)
                                elif isinstance(val, (int, float)) and val > 2147483647:
                                    values.append(str(val))
                                else:
                                    values.append(val)
                            
                            postgres_cursor.execute(insert_sql, values)
                            records_inserted += 1
                        except Exception as single_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {single_error}")
                            logger.error(f"   –ó–Ω–∞—á–µ–Ω–∏—è: {values}")
            
            logger.info(f"‚úÖ {table_name}: {records_inserted} –∑–∞–ø–∏—Å–µ–π, {errors_count} –æ—à–∏–±–æ–∫")
            return {'status': 'success', 'count': records_inserted, 'errors': errors_count}
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}: {e}")
            postgres_conn.rollback()
            return {'status': 'error', 'count': 0, 'errors': 1}
        
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
            postgres_conn.close()
            sqlite_conn.close()
    
    def run_safe_migration(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
        logger.info("üöÄ –ù–ê–ß–ò–ù–ê–Æ –ë–ï–ó–û–ü–ê–°–ù–£–Æ –ú–ò–ì–†–ê–¶–ò–Æ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        logger.info("=" * 60)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if not self.test_connections():
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π. –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            self.create_postgresql_tables()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
            tables = self.get_sqlite_tables()
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É –æ—Ç–¥–µ–ª—å–Ω–æ
            total_records = 0
            results = {}
            
            for table_name in tables:
                result = self.migrate_table_safely(table_name)
                results[table_name] = result
                total_records += result.get('count', 0)
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ò:")
            logger.info("=" * 60)
            
            for table_name, result in results.items():
                status = result['status']
                count = result['count']
                errors = result.get('errors', 0)
                
                if status == 'skipped':
                    logger.info(f"‚è≠Ô∏è  {table_name}: {count} –∑–∞–ø–∏—Å–µ–π (—É–∂–µ –±—ã–ª–æ)")
                elif status == 'empty':
                    logger.info(f"üì≠ {table_name}: –ø—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞")
                elif status == 'success':
                    logger.info(f"‚úÖ {table_name}: {count} –∑–∞–ø–∏—Å–µ–π, {errors} –æ—à–∏–±–æ–∫")
                else:
                    logger.error(f"‚ùå {table_name}: –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏")
            
            logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}")
            logger.info("üéâ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–∏–≥—Äator –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite ‚Üí PostgreSQL")
    print("=" * 60)
    
    try:
        migrator = SafeDatabaseMigrator()
        success = migrator.run_safe_migration()
        
        if success:
            print("\n‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üåê PostgreSQL URL: {POSTGRESQL_URL}")
            print("üìù –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PostgreSQL")
        else:
            print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
