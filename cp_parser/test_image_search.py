#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
"""

import os
import sys
from sqlalchemy import create_engine, text
from dotenv import load_dotenv
from PIL import Image
import requests
from io import BytesIO

load_dotenv()

# –¶–≤–µ—Ç–∞
GREEN = '\033[92m'
YELLOW = '\033[93m'
RED = '\033[91m'
BLUE = '\033[94m'
RESET = '\033[0m'
BOLD = '\033[1m'

def load_clip_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç CLIP –º–æ–¥–µ–ª—å"""
    from sentence_transformers import SentenceTransformer
    model = SentenceTransformer('clip-ViT-B-32')
    return model, "sentence-transformers"

def generate_embedding(image_url, model, model_type):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç embedding –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        response = requests.get(image_url, timeout=10)
        image = Image.open(BytesIO(response.content)).convert('RGB')
        
        if model_type == "sentence-transformers":
            embedding = model.encode(image)
            return embedding.tolist()
    except Exception as e:
        print(f"{RED}‚ùå –û—à–∏–±–∫–∞: {e}{RESET}")
        return None

def search_similar_images(query_embedding, vector_engine, limit=10):
    """–ò—â–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ pgvector –ë–î"""
    
    query_vector_str = '[' + ','.join(map(str, query_embedding)) + ']'
    
    with vector_engine.connect() as conn:
        sql_query = f"""
            SELECT 
                ie.product_id,
                ie.image_url,
                1 - (ie.image_embedding <=> '{query_vector_str}'::vector) as similarity
            FROM image_embeddings ie
            ORDER BY ie.image_embedding <=> '{query_vector_str}'::vector
            LIMIT {limit}
        """
        results = conn.execute(text(sql_query)).fetchall()
    
    return results

def get_product_info(product_ids, main_engine):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö"""
    
    if not product_ids:
        return []
    
    with main_engine.connect() as conn:
        placeholders = ','.join([f':id{i}' for i in range(len(product_ids))])
        params = {f'id{i}': pid for i, pid in enumerate(product_ids)}
        
        result = conn.execute(text(f"""
            SELECT id, name, description, article_number
            FROM products
            WHERE id IN ({placeholders})
        """), params)
        
        products = {row[0]: row for row in result.fetchall()}
    
    return products

def main():
    print(f"\n{BOLD}{BLUE}{'=' * 80}{RESET}")
    print(f"{BOLD}{BLUE}{'–¢–ï–°–¢ –ü–û–ò–°–ö–ê –ü–û –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú'.center(80)}{RESET}")
    print(f"{BOLD}{BLUE}{'=' * 80}{RESET}\n")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    main_db_url = os.getenv('DATABASE_URL') or os.getenv('DATABASE_URL_PRIVATE')
    vector_db_url = os.getenv('VECTOR_DATABASE_URL')
    
    if not main_db_url or not vector_db_url:
        print(f"{RED}‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã DATABASE_URL –∏/–∏–ª–∏ VECTOR_DATABASE_URL{RESET}")
        sys.exit(1)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    print(f"{BLUE}‚ÑπÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ CLIP –º–æ–¥–µ–ª–∏...{RESET}")
    model, model_type = load_clip_model()
    print(f"{GREEN}‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞{RESET}\n")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    main_engine = create_engine(main_db_url, pool_pre_ping=True)
    vector_engine = create_engine(vector_db_url, pool_pre_ping=True)
    
    # –ü–æ–ª—É—á–∞–µ–º product_id –∏–∑ pgvector –ë–î
    with vector_engine.connect() as conn:
        result = conn.execute(text("""
            SELECT product_id FROM image_embeddings LIMIT 100
        """))
        product_ids_with_embeddings = [r[0] for r in result.fetchall()]
    
    if not product_ids_with_embeddings:
        print(f"{RED}‚ùå –ù–µ—Ç embeddings –≤ –ë–î! –ó–∞–ø—É—Å—Ç–∏ —Å–Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.{RESET}")
        sys.exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
    with main_engine.connect() as conn:
        placeholders = ','.join([f':id{i}' for i in range(min(100, len(product_ids_with_embeddings)))])
        params = {f'id{i}': pid for i, pid in enumerate(product_ids_with_embeddings[:100])}
        
        test_products = conn.execute(text(f"""
            SELECT DISTINCT ON (pi.product_id)
                pi.product_id,
                p.name,
                pi.image_url,
                pi.image_filename
            FROM product_images pi
            JOIN products p ON p.id = pi.product_id
            WHERE pi.product_id IN ({placeholders})
            ORDER BY pi.product_id, 
                     CASE WHEN pi.column_number = 1 THEN 0 ELSE 1 END
            LIMIT 5
        """), params).fetchall()
    
    if not test_products:
        print(f"{RED}‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞!{RESET}")
        sys.exit(1)
    
    print(f"{BLUE}üìù –î–æ—Å—Ç—É–ø–Ω–æ {len(test_products)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞:{RESET}\n")
    for i, (pid, name, url, filename) in enumerate(test_products, 1):
        print(f"   {i}. [{pid}] {name[:50]}...")
    
    print(f"\n{YELLOW}–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (1-{len(test_products)}) –∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞: {RESET}", end='')
    try:
        choice = int(input().strip())
        if choice == 0:
            print(f"{BLUE}üëã –í—ã—Ö–æ–¥{RESET}")
            sys.exit(0)
        if choice < 1 or choice > len(test_products):
            print(f"{RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!{RESET}")
            sys.exit(1)
    except ValueError:
        print(f"{RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!{RESET}")
        sys.exit(1)
    
    # –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
    selected = test_products[choice - 1]
    product_id, product_name, image_url, image_filename = selected
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL
    if image_url and image_url.strip():
        final_url = image_url
    elif image_filename and image_filename.strip():
        final_url = f"https://s3.ru1.storage.beget.cloud/73d16f7545b3-promogoods/images/{image_filename}"
    else:
        print(f"{RED}‚ùå –ù–µ—Ç URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!{RESET}")
        sys.exit(1)
    
    print(f"\n{BLUE}{'=' * 80}{RESET}")
    print(f"{BOLD}üîç –¢–ï–°–¢–ò–†–£–ï–ú –ü–û–ò–°–ö –ü–û –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Æ:{RESET}")
    print(f"   ID: {product_id}")
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}")
    print(f"   URL: {final_url[:70]}...")
    print(f"{BLUE}{'=' * 80}{RESET}\n")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è embedding
    print(f"{BLUE}‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è embedding...{RESET}")
    query_embedding = generate_embedding(final_url, model, model_type)
    
    if not query_embedding:
        print(f"{RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å embedding!{RESET}")
        sys.exit(1)
    
    print(f"{GREEN}‚úÖ Embedding —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ({len(query_embedding)} —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å){RESET}\n")
    
    # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö
    print(f"{BLUE}üîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤...{RESET}\n")
    similar = search_similar_images(query_embedding, vector_engine, limit=20)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
    product_ids = [r[0] for r in similar]
    products_info = get_product_info(product_ids, main_engine)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"{BOLD}{GREEN}üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:{RESET}\n")
    
    for i, (pid, img_url, similarity) in enumerate(similar, 1):
        product_info = products_info.get(pid)
        
        if not product_info:
            continue
        
        pname = product_info[1] or "N/A"
        article = product_info[3] or "N/A"
        
        # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç similarity
        if similarity >= 0.95:
            color = GREEN
            emoji = "üéØ"
            label = "–û–ß–ï–ù–¨ –ü–û–•–û–ñ"
        elif similarity >= 0.85:
            color = BLUE
            emoji = "‚úÖ"
            label = "–ü–û–•–û–ñ"
        elif similarity >= 0.75:
            color = YELLOW
            emoji = "‚ö†Ô∏è"
            label = "–ú–û–ñ–ï–¢ –ë–´–¢–¨"
        else:
            color = RED
            emoji = "‚ùå"
            label = "–ù–ï –ü–û–•–û–ñ"
        
        # –û—Ç–º–µ—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–≤–∞—Ä
        if pid == product_id:
            marker = f"{BOLD}[–ò–°–•–û–î–ù–´–ô –¢–û–í–ê–†]{RESET}"
        else:
            marker = ""
        
        print(f"{i:3d}. {color}[{similarity:.3f}] {emoji} {label:15s}{RESET} {marker}")
        print(f"      ID: {pid} | –ê—Ä—Ç–∏–∫—É–ª: {article}")
        print(f"      {pname[:70]}")
        print(f"      {img_url[:70] if img_url else 'N/A'}...")
        print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    similarities = [r[2] for r in similar]
    avg_sim = sum(similarities) / len(similarities)
    
    print(f"{BLUE}{'=' * 80}{RESET}")
    print(f"{BOLD}üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:{RESET}")
    print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(similar)} —Ç–æ–≤–∞—Ä–æ–≤")
    print(f"   –ú–∏–Ω–∏–º—É–º: {min(similarities):.3f}")
    print(f"   –°—Ä–µ–¥–Ω–∏–π: {avg_sim:.3f}")
    print(f"   –ú–∞–∫—Å–∏–º—É–º: {max(similarities):.3f}")
    print(f"{BLUE}{'=' * 80}{RESET}\n")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
    very_similar = sum(1 for s in similarities if s >= 0.95)
    similar_count = sum(1 for s in similarities if 0.85 <= s < 0.95)
    maybe_count = sum(1 for s in similarities if 0.75 <= s < 0.85)
    not_similar = sum(1 for s in similarities if s < 0.75)
    
    print(f"{BOLD}üéØ –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê:{RESET}")
    print(f"   {GREEN}–û—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏–µ (>0.95): {very_similar}{RESET}")
    print(f"   {BLUE}–ü–æ—Ö–æ–∂–∏–µ (0.85-0.95): {similar_count}{RESET}")
    print(f"   {YELLOW}–ú–æ–∂–µ—Ç –±—ã—Ç—å (0.75-0.85): {maybe_count}{RESET}")
    print(f"   {RED}–ù–µ –ø–æ—Ö–æ–∂–∏–µ (<0.75): {not_similar}{RESET}")
    print()
    
    if very_similar >= 10:
        print(f"{GREEN}‚úÖ –û–¢–õ–ò–ß–ù–û! –ú–Ω–æ–≥–æ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤{RESET}")
    elif similar_count >= 10:
        print(f"{BLUE}‚úÖ –•–û–†–û–®–û! –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã{RESET}")
    elif maybe_count >= 10:
        print(f"{YELLOW}‚ö†Ô∏è  –°–†–ï–î–ù–ï. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –æ—á–µ–Ω—å —Ç–æ—á–Ω—ã–µ{RESET}")
    else:
        print(f"{RED}‚ùå –ü–õ–û–•–û. –ü–æ–∏—Å–∫ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã{RESET}")
    
    print(f"\n{BLUE}üí° –•–æ—á–µ—à—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä? –ó–∞–ø—É—Å—Ç–∏ —Å–Ω–æ–≤–∞: py test_image_search.py{RESET}\n")

if __name__ == "__main__":
    main()

