#!/usr/bin/env python3
"""
–ë–´–°–¢–†–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ä–∞–∂–µ–π —á–µ—Ä–µ–∑ CSV –¥–ª—è –≤—Å–µ—Ö Template 4
CSV —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ 10-20 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ —á–µ–º Excel
"""

import sys
from pathlib import Path
sys.path.insert(0, str(Path.cwd()))

import json
from google.oauth2.service_account import Credentials
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text
import os
import csv as csv_lib
from datetime import datetime
import time
import requests

# Railway DB
os.environ['USE_RAILWAY_DB'] = 'true'

def download_csv(sheet_id, output_path):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∫–∞–∫ CSV (–æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ)"""
    try:
        scope = ['https://www.googleapis.com/auth/spreadsheets.readonly',
                 'https://www.googleapis.com/auth/drive.readonly']
        creds = Credentials.from_service_account_file('service_account.json', scopes=scope)
        
        export_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid=0"
        
        response = requests.get(export_url, headers={'Authorization': f'Bearer {creds.token}'}, timeout=10)
        
        if response.status_code == 200:
            with open(output_path, 'wb') as f:
                f.write(response.content)
            return True
        return False
    except:
        return False

def extract_quantity_from_csv(csv_path, row_number):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏—Ä–∞–∂ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ E (–∏–Ω–¥–µ–∫—Å 4)"""
    try:
        with open(csv_path, 'r', encoding='utf-8') as f:
            reader = csv_lib.reader(f)
            rows = list(reader)
            
            if row_number <= len(rows):
                row_data = rows[row_number - 1]
                
                if len(row_data) > 4:
                    cell_value = row_data[4]
                    
                    if not cell_value:
                        return None
                    
                    try:
                        return int(float(str(cell_value).replace(',', '').replace(' ', '')))
                    except:
                        return str(cell_value)
        return None
    except:
        return None

def verify_project(project_data, db, csv_dir):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ CSV"""
    project_id = project_data['id']
    sheet_id = project_data['sheet_id']
    
    csv_path = csv_dir / f"proj_{project_id}.csv"
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç
    if not csv_path.exists():
        if not download_csv(sheet_id, csv_path):
            return None
    
    with db.get_session() as session:
        products = session.execute(text("""
            SELECT 
                p.id, p.name, p.row_number,
                po.quantity, po.route
            FROM products p
            INNER JOIN price_offers po ON p.id = po.product_id
            WHERE p.project_id = :pid
            AND po.quantity >= 300
            AND po.quantity % 10 = 0
            ORDER BY p.row_number
        """), {'pid': project_id}).fetchall()
        
        if not products:
            return None
        
        results = []
        checked_rows = {}
        
        for prod in products:
            row_num = prod.row_number
            
            if row_num not in checked_rows:
                checked_rows[row_num] = extract_quantity_from_csv(csv_path, row_num)
            
            excel_qty = checked_rows[row_num]
            db_qty = int(prod.quantity)
            
            is_x10 = False
            if excel_qty and isinstance(excel_qty, int) and excel_qty * 10 == db_qty:
                is_x10 = True
            
            results.append({
                'product_id': prod.id,
                'product_name': prod.name,
                'row': row_num,
                'csv_qty': excel_qty,
                'db_qty': db_qty,
                'route': prod.route,
                'is_x10': is_x10
            })
        
        x10_count = sum(1 for r in results if r['is_x10'])
        
        return {
            'id': project_id,
            'name': project_data['name'],
            'url': project_data['url'],
            'total': len(results),
            'x10': x10_count,
            'results': results
        }

def main():
    print("="*70)
    print("üöÄ –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ß–ï–†–ï–ó CSV - –í–°–ï TEMPLATE 4")
    print("="*70)
    
    db = PostgreSQLManager()
    
    print("\nüìä –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ Template 4...")
    
    with db.get_session() as session:
        projects_data = session.execute(text("""
            SELECT DISTINCT
                pr.id,
                pr.project_name,
                pr.google_sheets_url
            FROM projects pr
            INNER JOIN products p ON pr.id = p.project_id
            WHERE p.sample_price IS NOT NULL
            AND pr.google_sheets_url IS NOT NULL
            ORDER BY pr.id
        """)).fetchall()
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(projects_data)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
    projects = []
    for proj in projects_data:
        if '/d/' in proj.google_sheets_url:
            sheet_id = proj.google_sheets_url.split('/d/')[1].split('/')[0]
            projects.append({
                'id': proj.id,
                'name': proj.project_name,
                'sheet_id': sheet_id,
                'url': proj.google_sheets_url
            })
    
    print(f"üìã –° –≤–∞–ª–∏–¥–Ω—ã–º–∏ URL: {len(projects)}")
    print(f"üìÅ CSV –≤: verification_csv_all/\n")
    
    csv_dir = Path('verification_csv_all')
    csv_dir.mkdir(exist_ok=True)
    
    all_results = []
    failed = 0
    
    start_time = time.time()
    
    for i, proj in enumerate(projects, 1):
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤—ã–≤–æ–¥
        if i == 1 or i % 50 == 0 or i == len(projects):
            print(f"\rüîç {i}/{len(projects)} ({i/len(projects)*100:.1f}%)", end='', flush=True)
        
        result = verify_project(proj, db, csv_dir)
        if result:
            all_results.append(result)
        else:
            failed += 1
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 200
        if i % 200 == 0:
            elapsed = time.time() - start_time
            avg_time = elapsed / i
            remaining = (len(projects) - i) * avg_time
            errors_count = len([r for r in all_results if r['x10'] > 0])
            print(f"\n‚è±Ô∏è  {i}/{len(projects)} ({i/len(projects)*100:.0f}%) | "
                  f"–û—à–∏–±–∫–∏: {errors_count} –ø—Ä–æ–µ–∫—Ç–æ–≤ | "
                  f"–û—Å—Ç–∞–ª–æ—Å—å: ~{remaining/60:.0f} –º–∏–Ω")
        
        time.sleep(0.05)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
    
    # –ò—Ç–æ–≥
    print("\n\n" + "="*70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*70)
    
    if not all_results:
        print("\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å")
        return
    
    total_x10 = sum(r['x10'] for r in all_results)
    total_rec = sum(r['total'] for r in all_results)
    projects_errors = len([r for r in all_results if r['x10'] > 0])
    
    print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(all_results):,} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed:,} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"üìä –ó–∞–ø–∏—Å–µ–π: {total_rec:,}")
    print(f"‚ùå –û—à–∏–±–æ–∫ x10: {total_x10:,} ({total_x10/total_rec*100:.1f}%)")
    print(f"‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {projects_errors:,} ({projects_errors/len(all_results)*100:.1f}%)")
    
    # –¢–æ–ø –æ—à–∏–±–æ–∫
    error_projects = sorted([r for r in all_results if r['x10'] > 0], 
                          key=lambda x: x['x10'], reverse=True)
    
    if error_projects:
        print(f"\nüìã –¢–û–ü-20 –° –ù–ê–ò–ë–û–õ–¨–®–ò–ú –ö–û–õ-–í–û–ú –û–®–ò–ë–û–ö:")
        for r in error_projects[:20]:
            pct = r['x10']/r['total']*100
            print(f"  ‚ùå ID {r['id']}: {r['x10']}/{r['total']} ({pct:.0f}%) - {r['name'][:40]}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV
    timestamp = datetime.now().strftime('%Y%m%d_%H%M')
    csv_report = Path(f"–ü–û–õ–ù–ê–Ø_–ü–†–û–í–ï–†–ö–ê_CSV_{timestamp}.csv")
    
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é –æ—Ç—á–µ—Ç...")
    
    with open(csv_report, 'w', newline='', encoding='utf-8-sig') as f:
        writer = csv_lib.writer(f)
        writer.writerow([
            'ID_–ü—Ä–æ–µ–∫—Ç–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ', 'ID_–¢–æ–≤–∞—Ä–∞', '–¢–æ–≤–∞—Ä',
            '–°—Ç—Ä–æ–∫–∞', '–¢–∏—Ä–∞–∂_Google', '–¢–∏—Ä–∞–∂_–ë–î', '–ú–∞—Ä—à—Ä—É—Ç', '–û—à–∏–±–∫–∞_x10', 'URL'
        ])
        
        for proj in all_results:
            for r in proj['results']:
                writer.writerow([
                    proj['id'], proj['name'],
                    r['product_id'], r['product_name'],
                    r['row'], r['csv_qty'], r['db_qty'],
                    r['route'], '–î–ê' if r['is_x10'] else '–ù–ï–¢',
                    proj['url']
                ])
    
    print(f"‚úÖ –û—Ç—á–µ—Ç: {csv_report}")
    
    # –°–ø–∏—Å–æ–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if error_projects:
        fix_list = Path(f"–ò–°–ü–†–ê–í–ò–¢–¨_–ü–†–û–ï–ö–¢–´_{timestamp}.csv")
        
        with open(fix_list, 'w', newline='', encoding='utf-8-sig') as f:
            writer = csv_lib.writer(f)
            writer.writerow(['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–û—à–∏–±–æ–∫', '–í—Å–µ–≥–æ', '%', 'URL'])
            
            for r in error_projects:
                pct = r['x10']/r['total']*100
                writer.writerow([r['id'], r['name'], r['x10'], r['total'], f"{pct:.1f}%", r['url']])
        
        print(f"‚úÖ –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {fix_list}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    if total_x10 > 0:
        error_pct = total_x10 / total_rec * 100
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
        if error_pct > 10:
            print(f"   üö® {error_pct:.1f}% –æ—à–∏–±–æ–∫! –ú–∞—Å—Å–æ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        elif error_pct > 5:
            print(f"   ‚ö†Ô∏è  {error_pct:.1f}% –æ—à–∏–±–æ–∫. –ò—Å–ø—Ä–∞–≤–∏—Ç—å >10%")
        else:
            print(f"   ‚úÖ {error_pct:.1f}% –æ—à–∏–±–æ–∫. –í—ã–±–æ—Ä–æ—á–Ω–æ")
    
    elapsed = time.time() - start_time
    print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è: {elapsed/60:.1f} –º–∏–Ω—É—Ç ({elapsed/len(projects):.2f} —Å–µ–∫/–ø—Ä–æ–µ–∫—Ç)")
    print("="*70)

if __name__ == '__main__':
    main()




