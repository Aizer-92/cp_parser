#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ x10 –≤ —Ç–∏—Ä–∞–∂–∞—Ö Template 4
–ë–ï–ó–û–ü–ê–°–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –±—ç–∫–∞–ø–æ–º –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–∫–∞—Ç–∞
"""

import sys
from pathlib import Path
sys.path.insert(0, str(Path.cwd()))

from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text
import os
import csv as csv_lib
from datetime import datetime

# Railway DB
os.environ['USE_RAILWAY_DB'] = 'true'

def create_backup(db, offer_ids):
    """–°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø –æ—Ñ—Ñ–µ—Ä–æ–≤ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_file = f"BACKUP_BEFORE_FIX_{timestamp}.csv"
    
    print(f"\nüì¶ –°–æ–∑–¥–∞—é –±—ç–∫–∞–ø...", flush=True)
    
    with db.get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä–æ–≤
        offers = session.execute(text("""
            SELECT 
                po.id,
                po.product_id,
                po.quantity,
                po.route,
                po.price_usd,
                po.price_rub,
                p.project_id,
                pr.project_name
            FROM price_offers po
            INNER JOIN products p ON po.product_id = p.id
            INNER JOIN projects pr ON p.project_id = pr.id
            WHERE po.id = ANY(:ids)
            ORDER BY po.id
        """), {'ids': offer_ids}).fetchall()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        with open(backup_file, 'w', encoding='utf-8', newline='') as f:
            writer = csv_lib.writer(f)
            writer.writerow(['ID_–û—Ñ—Ñ–µ—Ä–∞', 'ID_–¢–æ–≤–∞—Ä–∞', 'ID_–ü—Ä–æ–µ–∫—Ç–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ_–ü—Ä–æ–µ–∫—Ç–∞',
                           'Quantity_OLD', '–ú–∞—Ä—à—Ä—É—Ç', 'Price_USD', 'Price_RUB'])
            
            for offer in offers:
                writer.writerow([
                    offer.id,
                    offer.product_id,
                    offer.project_id,
                    offer.project_name,
                    offer.quantity,
                    offer.route,
                    offer.price_usd,
                    offer.price_rub
                ])
        
        print(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_file}", flush=True)
        print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(offers)} –æ—Ñ—Ñ–µ—Ä–æ–≤", flush=True)
        
        return backup_file

def update_quantities(db, offer_ids):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç quantity –¥–ª—è –æ—Ñ—Ñ–µ—Ä–æ–≤ (–¥–µ–ª–∏—Ç –Ω–∞ 10)"""
    print(f"\nüîß –ò—Å–ø—Ä–∞–≤–ª—è—é —Ç–∏—Ä–∞–∂–∏...", flush=True)
    
    with db.get_session() as session:
        result = session.execute(text("""
            UPDATE price_offers
            SET quantity = quantity / 10
            WHERE id = ANY(:ids)
            RETURNING id, quantity
        """), {'ids': offer_ids})
        
        updated = result.fetchall()
        session.commit()
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {len(updated)} –æ—Ñ—Ñ–µ—Ä–æ–≤", flush=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        print(f"\nüìä –ü—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ç–∏—Ä–∞–∂–µ–π (–ø–µ—Ä–≤—ã–µ 10):", flush=True)
        for i, row in enumerate(updated[:10], 1):
            print(f"   {i}. –û—Ñ—Ñ–µ—Ä {row.id}: –Ω–æ–≤—ã–π —Ç–∏—Ä–∞–∂ = {row.quantity}", flush=True)
        
        if len(updated) > 10:
            print(f"   ... –∏ –µ—â–µ {len(updated) - 10} –æ—Ñ—Ñ–µ—Ä–æ–≤", flush=True)
        
        return len(updated)

def verify_update(db, offer_ids):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ"""
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...", flush=True)
    
    with db.get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∏—Ä–∞–∂–∏ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 10 (—Ç.–µ. –Ω–µ –±—ã–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã)
        still_x10 = session.execute(text("""
            SELECT COUNT(*)
            FROM price_offers
            WHERE id = ANY(:ids)
            AND quantity >= 300
            AND quantity % 10 = 0
        """), {'ids': offer_ids}).scalar()
        
        if still_x10 > 0:
            print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: {still_x10} –æ—Ñ—Ñ–µ—Ä–æ–≤ –≤—Å–µ –µ—â–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 10", flush=True)
            print(f"   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ —Ç–∞–º –±—ã–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏—Ä–∞–∂–∏ (3000, 5000 –∏ —Ç.–¥.)", flush=True)
        else:
            print(f"‚úÖ –í—Å–µ –æ—Ñ—Ñ–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!", flush=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–≤—ã–º —Ç–∏—Ä–∞–∂–∞–º
        stats = session.execute(text("""
            SELECT 
                COUNT(*) as total,
                MIN(quantity) as min_qty,
                MAX(quantity) as max_qty,
                AVG(quantity) as avg_qty
            FROM price_offers
            WHERE id = ANY(:ids)
        """), {'ids': offer_ids}).first()
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", flush=True)
        print(f"   –í—Å–µ–≥–æ –æ—Ñ—Ñ–µ—Ä–æ–≤: {stats.total}", flush=True)
        print(f"   –ú–∏–Ω. —Ç–∏—Ä–∞–∂: {stats.min_qty}", flush=True)
        print(f"   –ú–∞–∫—Å. —Ç–∏—Ä–∞–∂: {stats.max_qty}", flush=True)
        print(f"   –°—Ä–µ–¥–Ω–∏–π: {stats.avg_qty:.1f}", flush=True)

def main():
    print("="*80, flush=True)
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–û–ö x10 –í –¢–ò–†–ê–ñ–ê–•", flush=True)
    print("="*80, flush=True)
    
    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    fix_file = "–ò–°–ü–†–ê–í–ò–¢–¨_SMART_20251012_1358.csv"
    
    if not Path(fix_file).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {fix_file}", flush=True)
        print(f"üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python3 check_quantities_smart.py", flush=True)
        return
    
    print(f"\nüìÇ –ß–∏—Ç–∞—é —Ñ–∞–π–ª: {fix_file}", flush=True)
    
    offer_ids = []
    with open(fix_file, 'r', encoding='utf-8') as f:
        reader = csv_lib.DictReader(f)
        for row in reader:
            offer_ids.append(int(row['ID_–û—Ñ—Ñ–µ—Ä–∞']))
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {len(offer_ids)}", flush=True)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    print(f"\nüìä –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ Railway –ë–î...", flush=True)
    db = PostgreSQLManager()
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    backup_file = create_backup(db, offer_ids)
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("\n" + "="*80, flush=True)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢!", flush=True)
    print("="*80, flush=True)
    print(f"–ë—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ: {len(offer_ids)} –æ—Ñ—Ñ–µ—Ä–æ–≤", flush=True)
    print(f"–û–ø–µ—Ä–∞—Ü–∏—è: quantity = quantity / 10", flush=True)
    print(f"–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_file}", flush=True)
    print(f"\n–î–ª—è –æ—Ç–∫–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç restore —Å –±—ç–∫–∞–ø-—Ñ–∞–π–ª–æ–º", flush=True)
    print("="*80, flush=True)
    
    response = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ '–î–ê' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è): ")
    
    if response.strip().upper() != '–î–ê':
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", flush=True)
        print(f"üíæ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {backup_file}", flush=True)
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    print("\nüöÄ –ù–ê–ß–ò–ù–ê–Æ –û–ë–ù–û–í–õ–ï–ù–ò–ï...", flush=True)
    updated_count = update_quantities(db, offer_ids)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    verify_update(db, offer_ids)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*80, flush=True)
    print("‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!", flush=True)
    print("="*80, flush=True)
    print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Ñ—Ñ–µ—Ä–æ–≤: {updated_count}", flush=True)
    print(f"üíæ –ë—ç–∫–∞–ø: {backup_file}", flush=True)
    print(f"\nüí° –î–ª—è –æ—Ç–∫–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:", flush=True)
    print(f"   python3 restore_backup.py {backup_file}", flush=True)
    print("="*80, flush=True)

if __name__ == '__main__':
    main()

