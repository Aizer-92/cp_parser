#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫ —Ç–æ–≤–∞—Ä–∞–º –ø–æ row_number
–° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±–ª–∞—á–Ω—ã—Ö URL
"""

import sys
from pathlib import Path
import re

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text

# –û–±–ª–∞—á–Ω—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
FTP_BASE_URL = "https://ru1.storage.beget.cloud/creonproject/images/"

def extract_row_from_filename(filename, table_id):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    –§–æ—Ä–º–∞—Ç: table_id_COLUMNROW_timestamp.ext
    –ù–∞–ø—Ä–∏–º–µ—Ä: 1xAPdmVpr..._A10_278785378.png -> row 10
    """
    # –£–±–∏—Ä–∞–µ–º table_id –∏–∑ –Ω–∞—á–∞–ª–∞
    pattern = f"{table_id}_([A-Z]+)([0-9]+)_"
    match = re.search(pattern, filename)
    if match:
        col_letter = match.group(1)
        row_num = int(match.group(2))
        return row_num, col_letter
    return None, None

def main():
    db = PostgreSQLManager()
    
    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    with open('projects_need_images.txt', 'r') as f:
        project_ids = [int(line.strip()) for line in f if line.strip().isdigit()]
    
    print("=" * 80)
    print("üîó –ü–†–ò–í–Ø–ó–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ö –¢–û–í–ê–†–ê–ú (—Å –æ–±–ª–∞—á–Ω—ã–º–∏ URL)")
    print("=" * 80)
    
    # –≠–¢–ê–ü 1: –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
    print("\nüìã –≠–¢–ê–ü 1: –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤...")
    
    with db.get_session() as session:
        # –ù–∞—Ö–æ–¥–∏–º ID –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
        duplicates = session.execute(text("""
            WITH ranked AS (
                SELECT 
                    p.id,
                    p.table_id,
                    p.row_number,
                    p.created_at,
                    ROW_NUMBER() OVER (
                        PARTITION BY p.table_id, p.row_number 
                        ORDER BY p.created_at DESC
                    ) as rn
                FROM products p
                JOIN projects proj ON proj.table_id = p.table_id
                WHERE proj.id = ANY(:ids)
            )
            SELECT id FROM ranked WHERE rn > 1
        """), {'ids': project_ids}).fetchall()
        
        to_delete_ids = [row.id for row in duplicates]
        
        if to_delete_ids:
            print(f"  –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(to_delete_ids)}")
            print(f"  –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            session.execute(text("""
                DELETE FROM product_images
                WHERE product_id = ANY(:ids)
            """), {'ids': to_delete_ids})
            
            # –£–¥–∞–ª—è–µ–º —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            session.execute(text("""
                DELETE FROM price_offers
                WHERE product_id = ANY(:ids)
            """), {'ids': to_delete_ids})
            
            # –£–¥–∞–ª—è–µ–º —Å–∞–º–∏ —Ç–æ–≤–∞—Ä—ã-–¥—É–±–ª–∏–∫–∞—Ç—ã
            result = session.execute(text("""
                DELETE FROM products
                WHERE id = ANY(:ids)
            """), {'ids': to_delete_ids})
            
            session.commit()
            print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω–æ: {result.rowcount} —Ç–æ–≤–∞—Ä–æ–≤-–¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        else:
            print(f"  ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –≠–¢–ê–ü 2: –ü—Ä–∏–≤—è–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤
    print("\nüñºÔ∏è  –≠–¢–ê–ü 2: –ü—Ä–∏–≤—è–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    local_dir = Path('storage/images')
    if not local_dir.exists():
        print(f"  ‚ùå –ü–∞–ø–∫–∞ {local_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    local_files = [f for f in local_dir.glob('*') if f.is_file()]
    print(f"  –õ–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(local_files):,}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ 132 –ø—Ä–æ–µ–∫—Ç–æ–≤
    with db.get_session() as session:
        products = session.execute(text("""
            SELECT 
                p.id as product_id,
                p.table_id,
                p.row_number,
                p.name
            FROM products p
            JOIN projects proj ON proj.table_id = p.table_id
            LEFT JOIN product_images pi ON pi.product_id = p.id
            WHERE proj.id = ANY(:ids)
            AND pi.id IS NULL
            ORDER BY p.table_id, p.row_number
        """), {'ids': project_ids}).fetchall()
        
        print(f"  –¢–æ–≤–∞—Ä–æ–≤ –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(products):,}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        used_filenames = session.execute(text("""
            SELECT DISTINCT image_filename
            FROM product_images
        """)).fetchall()
        used_set = {row.image_filename for row in used_filenames}
        print(f"  –£–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(used_set):,}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É: (table_id, row_number) -> product_id
        product_map = {}
        for prod in products:
            key = (prod.table_id, prod.row_number)
            product_map[key] = prod.product_id
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã - —Ç–æ–ª—å–∫–æ —Ç–µ –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã
        available_files = [f for f in local_files if f.name not in used_set]
        print(f"  –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏: {len(available_files):,}")
        
        print(f"\n  –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...")
        linked = 0
        skipped_no_product = 0
        skipped_parse_error = 0
        errors = 0
        
        for i, file in enumerate(available_files, 1):
            if i % 500 == 0:
                print(f"    –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i:,}/{len(available_files):,} | –ü—Ä–∏–≤—è–∑–∞–Ω–æ: {linked:,}")
            
            filename = file.name
            
            # –ò—â–µ–º table_id –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π)
            table_id = None
            for prod in products:
                if prod.table_id in filename:
                    table_id = prod.table_id
                    break
            
            if not table_id:
                skipped_parse_error += 1
                continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
            row_num, col_letter = extract_row_from_filename(filename, table_id)
            
            if not row_num or not col_letter:
                skipped_parse_error += 1
                continue
            
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä
            key = (table_id, row_num)
            product_id = product_map.get(key)
            
            if not product_id:
                skipped_no_product += 1
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –û–ë–õ–ê–ß–ù–´–ú URL
            try:
                is_main = (col_letter == 'A')  # –ö–æ–ª–æ–Ω–∫–∞ A = –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ
                cloud_url = FTP_BASE_URL + filename
                
                session.execute(text("""
                    INSERT INTO product_images (
                        product_id, table_id, image_filename, image_url,
                        is_main_image, row_number, created_at, updated_at
                    )
                    VALUES (:pid, :tid, :fname, :url, :is_main, :row, NOW(), NOW())
                """), {
                    'pid': product_id,
                    'tid': table_id,
                    'fname': filename,
                    'url': cloud_url,
                    'is_main': is_main,
                    'row': row_num
                })
                linked += 1
                
                if linked % 500 == 0:
                    session.commit()
                    
            except Exception as e:
                errors += 1
                if errors <= 3:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞: {str(e)[:80]}")
        
        session.commit()
    
    # –ò–¢–û–ì–ò
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–ò:")
    print("=" * 80)
    print(f"‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:      {linked:,}")
    print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –µ—Å—Ç—å):      {skipped_exists:,}")
    print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç —Ç–æ–≤–∞—Ä–∞):    {skipped_no_product:,}")
    print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞): {skipped_parse_error:,}")
    print(f"‚ùå –û—à–∏–±–æ–∫:                     {errors:,}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    with db.get_session() as session:
        stats = session.execute(text("""
            SELECT 
                COUNT(DISTINCT p.id) as total_products,
                COUNT(DISTINCT CASE WHEN pi.id IS NOT NULL THEN p.id END) as with_images,
                COUNT(DISTINCT CASE WHEN pi.id IS NULL THEN p.id END) as without_images,
                COUNT(pi.id) as total_images,
                COUNT(CASE WHEN pi.image_url LIKE 'https://%' THEN 1 END) as cloud_images
            FROM products p
            JOIN projects proj ON proj.table_id = p.table_id
            LEFT JOIN product_images pi ON pi.product_id = p.id
            WHERE proj.id = ANY(:ids)
        """), {'ids': project_ids}).first()
        
        print(f"\nüì¶ –¢–û–í–ê–†–´ (–ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏):")
        print(f"  –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:           {stats.total_products:,}")
        print(f"  ‚úÖ –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:       {stats.with_images:,} ({stats.with_images*100//stats.total_products}%)")
        print(f"  ‚ùå –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:       {stats.without_images:,} ({stats.without_images*100//stats.total_products}%)")
        print(f"\nüñºÔ∏è  –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø:")
        print(f"  –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:       {stats.total_images:,}")
        print(f"  ‚òÅÔ∏è  –û–±–ª–∞—á–Ω—ã–µ URL:          {stats.cloud_images:,}")
    
    print("=" * 80)

if __name__ == '__main__':
    main()

