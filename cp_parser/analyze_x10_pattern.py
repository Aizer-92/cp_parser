#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –æ—à–∏–±–æ–∫ x10
–ü–æ—á–µ–º—É –Ω–µ –≤—Å–µ —Ç–∏—Ä–∞–∂–∏ –∏–º–µ—é—Ç –æ—à–∏–±–∫—É?
"""

import sys
from pathlib import Path
sys.path.insert(0, str(Path.cwd()))

from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text
import os
import csv

# Railway DB
os.environ['USE_RAILWAY_DB'] = 'true'

def extract_quantity_from_csv(csv_path, row_number):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏—Ä–∞–∂ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ E"""
    try:
        with open(csv_path, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            rows = list(reader)
            
            if row_number <= len(rows):
                row_data = rows[row_number - 1]
                
                if len(row_data) > 4:
                    cell_value = row_data[4]
                    
                    if not cell_value:
                        return None
                    
                    try:
                        return int(float(str(cell_value).replace(',', '').replace(' ', '')))
                    except:
                        return str(cell_value)
        return None
    except:
        return None

def analyze_project_pattern(project_id, csv_path, db):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    with db.get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç–æ–≤–∞—Ä—ã –∏ –æ—Ñ—Ñ–µ—Ä—ã (–Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ)
        all_data = session.execute(text("""
            SELECT 
                p.id, p.name, p.row_number,
                po.quantity, po.route, po.price_usd
            FROM products p
            INNER JOIN price_offers po ON p.id = po.product_id
            WHERE p.project_id = :pid
            ORDER BY p.row_number, po.quantity
        """), {'pid': project_id}).fetchall()
        
        if not all_data:
            return None
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ—Ñ—Ñ–µ—Ä
        results = []
        checked_rows = {}
        
        for offer in all_data:
            row_num = offer.row_number
            
            if row_num not in checked_rows:
                checked_rows[row_num] = extract_quantity_from_csv(csv_path, row_num)
            
            csv_qty = checked_rows[row_num]
            db_qty = int(offer.quantity)
            
            is_x10 = False
            is_correct = False
            is_suspicious = (db_qty >= 300 and db_qty % 10 == 0)
            
            if csv_qty and isinstance(csv_qty, int):
                if csv_qty * 10 == db_qty:
                    is_x10 = True
                elif csv_qty == db_qty:
                    is_correct = True
            
            results.append({
                'row': row_num,
                'product_name': offer.name,
                'csv_qty': csv_qty,
                'db_qty': db_qty,
                'route': offer.route,
                'is_x10': is_x10,
                'is_correct': is_correct,
                'is_suspicious': is_suspicious,
                'price_usd': float(offer.price_usd) if offer.price_usd else None
            })
        
        return results

def main():
    print("="*70)
    print("üîç –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–ê –û–®–ò–ë–û–ö x10")
    print("="*70)
    
    csv_dir = Path('verification_csv_all')
    db = PostgreSQLManager()
    
    # –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –æ—à–∏–±–æ–∫
    test_projects = [
        204,  # 100% –æ—à–∏–±–æ–∫
        155,  # 53% –æ—à–∏–±–æ–∫
        197,  # 50% –æ—à–∏–±–æ–∫
        83,   # 26% –æ—à–∏–±–æ–∫
        271,  # 17% –æ—à–∏–±–æ–∫
    ]
    
    for proj_id in test_projects:
        csv_path = csv_dir / f"proj_{proj_id}.csv"
        
        if not csv_path.exists():
            print(f"\n‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç {proj_id}: CSV –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
        
        print(f"\n{'='*70}")
        
        with db.get_session() as session:
            proj_info = session.execute(text("""
                SELECT project_name FROM projects WHERE id = :pid
            """), {'pid': proj_id}).fetchone()
        
        print(f"üìä –ü–†–û–ï–ö–¢ ID {proj_id}: {proj_info.project_name[:50]}")
        print("="*70)
        
        results = analyze_project_pattern(proj_id, csv_path, db)
        
        if not results:
            continue
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total = len(results)
        x10_count = sum(1 for r in results if r['is_x10'])
        correct_count = sum(1 for r in results if r['is_correct'])
        suspicious_count = sum(1 for r in results if r['is_suspicious'])
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  –í—Å–µ–≥–æ –æ—Ñ—Ñ–µ—Ä–æ–≤: {total}")
        print(f"  ‚ùå –° –æ—à–∏–±–∫–æ–π x10: {x10_count} ({x10_count/total*100:.1f}%)")
        print(f"  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ: {correct_count} ({correct_count/total*100:.1f}%)")
        print(f"  ‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ (>=300, –∫—Ä–∞—Ç–Ω—ã 10): {suspicious_count}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏—Ä–∞–∂–∏ —Å –æ—à–∏–±–∫–æ–π vs –±–µ–∑ –æ—à–∏–±–∫–∏
        x10_quantities = [r['db_qty'] for r in results if r['is_x10']]
        correct_quantities = [r['db_qty'] for r in results if r['is_correct']]
        
        print(f"\nüîç –¢–ò–†–ê–ñ–ò –° –û–®–ò–ë–ö–û–ô x10:")
        print(f"  –î–∏–∞–ø–∞–∑–æ–Ω: {min(x10_quantities) if x10_quantities else 'N/A'} - {max(x10_quantities) if x10_quantities else 'N/A'}")
        if x10_quantities:
            print(f"  –ü—Ä–∏–º–µ—Ä—ã: {sorted(set(x10_quantities))[:10]}")
        
        print(f"\n‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ï –¢–ò–†–ê–ñ–ò:")
        print(f"  –î–∏–∞–ø–∞–∑–æ–Ω: {min(correct_quantities) if correct_quantities else 'N/A'} - {max(correct_quantities) if correct_quantities else 'N/A'}")
        if correct_quantities:
            print(f"  –ü—Ä–∏–º–µ—Ä—ã: {sorted(set(correct_quantities))[:10]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: –º–æ–∂–µ—Ç –æ—à–∏–±–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö?
        print(f"\nüéØ –ü–ê–¢–¢–ï–†–ù –ê–ù–ê–õ–ò–ó:")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º —Ç–∏—Ä–∞–∂–µ–π
        ranges = {
            '< 500': [],
            '500-1000': [],
            '1000-5000': [],
            '5000-10000': [],
            '> 10000': []
        }
        
        for r in results:
            qty = r['db_qty']
            has_error = r['is_x10']
            
            if qty < 500:
                ranges['< 500'].append(has_error)
            elif qty < 1000:
                ranges['500-1000'].append(has_error)
            elif qty < 5000:
                ranges['1000-5000'].append(has_error)
            elif qty < 10000:
                ranges['5000-10000'].append(has_error)
            else:
                ranges['> 10000'].append(has_error)
        
        for range_name, errors_list in ranges.items():
            if errors_list:
                error_count = sum(errors_list)
                total_in_range = len(errors_list)
                pct = error_count / total_in_range * 100
                print(f"  {range_name:15}: {error_count}/{total_in_range} ({pct:.0f}% –æ—à–∏–±–æ–∫)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ –∏ –±–µ–∑
        print(f"\nüìù –ü–†–ò–ú–ï–†–´ –° –û–®–ò–ë–ö–û–ô x10:")
        x10_examples = [r for r in results if r['is_x10']][:3]
        for ex in x10_examples:
            print(f"  –°—Ç—Ä–æ–∫–∞ {ex['row']}: CSV={ex['csv_qty']} ‚Üí –ë–î={ex['db_qty']} | {ex['route']}")
        
        print(f"\nüìù –ü–†–ò–ú–ï–†–´ –ë–ï–ó –û–®–ò–ë–ö–ò (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ):")
        correct_examples = [r for r in results if r['is_correct']][:3]
        for ex in correct_examples:
            print(f"  –°—Ç—Ä–æ–∫–∞ {ex['row']}: CSV={ex['csv_qty']} = –ë–î={ex['db_qty']} | {ex['route']}")
    
    print(f"\n\n{'='*70}")
    print("üí° –í–´–í–û–î–´")
    print("="*70)
    
    print("""
1. –ü—Ä–æ–≤–µ—Ä–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Ç–∏—Ä–∞–∂–µ–π –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞
2. –í–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ <1000)
3. –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å —Ç–∏–ø–æ–º –º–∞—Ä—à—Ä—É—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
4. –ù—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–µ—Ä–∞ - –ø–æ—á–µ–º—É —É–º–Ω–æ–∂–∞–ª —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Ç–∏—Ä–∞–∂–µ–π
    """)

if __name__ == '__main__':
    main()


