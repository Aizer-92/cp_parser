#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å Google Sheets API - 403 PERMISSION_DENIED

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON credentials
2. –§–æ—Ä–º–∞—Ç private_key
3. –î–æ—Å—Ç—É–ø –∫ Google Sheets API
4. –î–æ—Å—Ç—É–ø –∫ Google Drive API
5. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import sys
import json
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

def print_section(title):
    """–ö—Ä–∞—Å–∏–≤–æ –ø–µ—á–∞—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
    print("\n" + "="*60)
    print(f"  {title}")
    print("="*60)

def check_credentials_json():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ JSON credentials"""
    print_section("1. –ü–†–û–í–ï–†–ö–ê JSON CREDENTIALS")
    
    creds_json = os.environ.get('GOOGLE_CREDENTIALS_JSON')
    if not creds_json:
        print("‚ùå GOOGLE_CREDENTIALS_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return None
    
    print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDENTIALS_JSON –Ω–∞–π–¥–µ–Ω–∞")
    print(f"   –î–ª–∏–Ω–∞: {len(creds_json)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    try:
        creds_dict = json.loads(creds_json)
        print("‚úÖ JSON –≤–∞–ª–∏–¥–µ–Ω")
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ['type', 'project_id', 'private_key_id', 'private_key', 
                      'client_email', 'client_id', 'auth_uri', 'token_uri']
    
    print("\nüìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:")
    for field in required_fields:
        if field in creds_dict:
            if field == 'private_key':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç private_key
                pk = creds_dict[field]
                if '\\n' in pk or '\\\\n' in pk:
                    print(f"   ‚ö†Ô∏è  {field}: –Ω–∞–π–¥–µ–Ω (–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ \\n)")
                else:
                    print(f"   ‚úÖ {field}: –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"   ‚úÖ {field}: {creds_dict.get(field, 'N/A')[:50]}...")
        else:
            print(f"   ‚ùå {field}: –û–¢–°–£–¢–°–¢–í–£–ï–¢!")
            return None
    
    return creds_dict

def check_private_key_format(creds_dict):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ private_key"""
    print_section("2. –ü–†–û–í–ï–†–ö–ê –§–û–†–ú–ê–¢–ê PRIVATE_KEY")
    
    private_key = creds_dict.get('private_key', '')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ BEGIN/END
    if 'BEGIN PRIVATE KEY' not in private_key:
        print("‚ùå private_key –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'BEGIN PRIVATE KEY'")
        print("   –í–æ–∑–º–æ–∂–Ω–æ –∫–ª—é—á –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return False
    
    if 'END PRIVATE KEY' not in private_key:
        print("‚ùå private_key –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'END PRIVATE KEY'")
        return False
    
    print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –º–∞—Ä–∫–µ—Ä—ã BEGIN/END PRIVATE KEY")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    if '\\\\n' in private_key:
        print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –¥–≤–æ–π–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ \\\\n")
        print("   –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã!")
        return False
    
    if '\\n' in private_key:
        print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ \\n –≤–º–µ—Å—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–æ–∫")
        print("   –ü–æ–ø—ã—Ç–∞—é—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å...")
        creds_dict['private_key'] = private_key.replace('\\n', '\n')
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    lines = private_key.split('\n')
    print(f"‚úÖ –ö–ª—é—á —Å–æ–¥–µ—Ä–∂–∏—Ç {len(lines)} —Å—Ç—Ä–æ–∫")
    
    if len(lines) < 3:
        print("‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å—Ç—Ä–æ–∫! –í–æ–∑–º–æ–∂–Ω–æ –∫–ª—é—á –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
        return False
    
    return True

def test_credentials_auth(creds_dict):
    """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print_section("3. –¢–ï–°–¢ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
    
    try:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º private_key –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if '\\n' in creds_dict['private_key']:
            creds_dict['private_key'] = creds_dict['private_key'].replace('\\n', '\n')
        
        scopes = [
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive',
            'https://www.googleapis.com/auth/drive.file'
        ]
        
        credentials = service_account.Credentials.from_service_account_info(
            creds_dict,
            scopes=scopes
        )
        
        print("‚úÖ Credentials —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        print(f"   Service Account: {creds_dict['client_email']}")
        print(f"   Project ID: {creds_dict['project_id']}")
        
        return credentials
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è credentials: {e}")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        return None

def test_sheets_api(credentials):
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets API"""
    print_section("4. –¢–ï–°–¢ GOOGLE SHEETS API")
    
    try:
        sheets_service = build('sheets', 'v4', credentials=credentials)
        print("‚úÖ Service –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
        test_id = "test_invalid_id_12345"
        try:
            sheets_service.spreadsheets().get(spreadsheetId=test_id).execute()
            print("‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ: –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª –±–µ–∑ –æ—à–∏–±–∫–∏")
        except HttpError as e:
            if e.resp.status == 404:
                print("‚úÖ Google Sheets API –†–ê–ë–û–¢–ê–ï–¢!")
                print("   (404 Not Found - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ ID)")
                return True
            elif e.resp.status == 403:
                print("‚ùå Google Sheets API –ù–ï –î–û–°–¢–£–ü–ï–ù!")
                print(f"   HTTP 403: {e.error_details}")
                print("\nüîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
                print("   1. API –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ Google Cloud Console")
                print("   2. APIs –≤–∫–ª—é—á–µ–Ω—ã –≤ –î–†–£–ì–û–ú –ø—Ä–æ–µ–∫—Ç–µ (–Ω–µ —Ç–∞–º –≥–¥–µ Service Account)")
                print("   3. Billing –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–≤—è–∑–∫–∞ –∫–∞—Ä—Ç—ã)")
                print("   4. Service Account –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ (–Ω—É–∂–Ω–∞ —Ä–æ–ª—å Editor –∏–ª–∏ Owner)")
                print("\nüìù –ü–†–û–í–ï–†–¨:")
                print(f"   - –ü—Ä–æ–µ–∫—Ç: {credentials.project_id}")
                print("   - APIs Dashboard: https://console.cloud.google.com/apis/dashboard")
                print("   - Billing: https://console.cloud.google.com/billing")
                print("   - IAM: https://console.cloud.google.com/iam-admin/iam")
                return False
            else:
                print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {e.resp.status}")
                print(f"   –î–µ—Ç–∞–ª–∏: {e.error_details}")
                return False
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ API: {e}")
        return False

def test_drive_api(credentials):
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Google Drive API"""
    print_section("5. –¢–ï–°–¢ GOOGLE DRIVE API")
    
    try:
        drive_service = build('drive', 'v3', credentials=credentials)
        print("‚úÖ Service –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ (–ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
        try:
            results = drive_service.files().list(pageSize=1).execute()
            print("‚úÖ Google Drive API –†–ê–ë–û–¢–ê–ï–¢!")
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(results.get('files', []))}")
            return True
        except HttpError as e:
            if e.resp.status == 403:
                print("‚ùå Google Drive API –ù–ï –î–û–°–¢–£–ü–ï–ù!")
                print(f"   HTTP 403: {e.error_details}")
                return False
            else:
                print(f"‚ö†Ô∏è  –°—Ç–∞—Ç—É—Å: {e.resp.status}")
                print(f"   –î–µ—Ç–∞–ª–∏: {e.error_details}")
                return False
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ API: {e}")
        return False

def test_create_spreadsheet(credentials, creds_dict):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è Google Sheet"""
    print_section("6. –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø GOOGLE SHEET")
    
    try:
        sheets_service = build('sheets', 'v4', credentials=credentials)
        
        spreadsheet = {
            'properties': {
                'title': f'TEST - Diagnostic Script - {creds_dict["project_id"]}'
            }
        }
        
        print("üß™ –ü—Ä–æ–±—É—é —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É...")
        result = sheets_service.spreadsheets().create(
            body=spreadsheet,
            fields='spreadsheetId,spreadsheetUrl'
        ).execute()
        
        print("‚úÖ –£–°–ü–ï–•! –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞!")
        print(f"   ID: {result['spreadsheetId']}")
        print(f"   URL: {result['spreadsheetUrl']}")
        
        print("\nüóëÔ∏è  –ü—Ä–æ–±—É—é —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É...")
        try:
            drive_service = build('drive', 'v3', credentials=credentials)
            drive_service.files().delete(fileId=result['spreadsheetId']).execute()
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞")
        except:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ")
            print(f"   –£–¥–∞–ª–∏ –≤—Ä—É—á–Ω—É—é: {result['spreadsheetUrl']}")
        
        return True
    
    except HttpError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã!")
        print(f"   HTTP {e.resp.status}: {e.error_details}")
        
        if e.resp.status == 403:
            print("\nüîç –î–ò–ê–ì–ù–û–ó: –ü–†–û–ë–õ–ï–ú–ê –° –ü–†–ê–í–ê–ú–ò!")
            print("\nüìù –ß–¢–û –ü–†–û–í–ï–†–ò–¢–¨:")
            print("   1. BILLING:")
            print(f"      https://console.cloud.google.com/billing/linkedaccount?project={creds_dict['project_id']}")
            print("      –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (–¥–∞–∂–µ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)")
            print()
            print("   2. IAM –†–û–õ–ò:")
            print(f"      https://console.cloud.google.com/iam-admin/iam?project={creds_dict['project_id']}")
            print(f"      Service Account {creds_dict['client_email']} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–æ–ª—å:")
            print("      - Editor –ò–õ–ò")
            print("      - Owner –ò–õ–ò")
            print("      - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–æ–ª–∏: 'Drive File Creator' + 'Sheets Editor'")
            print()
            print("   3. APIS ENABLED –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –ü–†–û–ï–ö–¢–ï:")
            print(f"      https://console.cloud.google.com/apis/dashboard?project={creds_dict['project_id']}")
            print("      –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã: Google Sheets API, Google Drive API")
        
        return False
    
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("\n" + "üîç " * 30)
    print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê GOOGLE SHEETS API - 403 PERMISSION_DENIED")
    print("üîç " * 30)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON
    creds_dict = check_credentials_json()
    if not creds_dict:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON credentials")
        sys.exit(1)
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ private_key
    if not check_private_key_format(creds_dict):
        print("\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º private_key")
    
    # 3. –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    credentials = test_credentials_auth(creds_dict)
    if not credentials:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å credentials")
        sys.exit(1)
    
    # 4-5. –¢–µ—Å—Ç APIs
    sheets_ok = test_sheets_api(credentials)
    drive_ok = test_drive_api(credentials)
    
    if not sheets_ok or not drive_ok:
        print("\n‚ùå –û–î–ò–ù –ò–õ–ò –û–ë–ê API –ù–ï –†–ê–ë–û–¢–ê–Æ–¢!")
        print("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ –≤—ã–±—Ä–∞–Ω –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–†–û–ï–ö–¢ –≤ Google Cloud Console")
        print(f"      Project ID: {creds_dict['project_id']}")
        print("   2. –í–∫–ª—é—á–∏ APIs –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ (–Ω–µ –≤ –¥—Ä—É–≥–æ–º!)")
        print("   3. –ù–∞—Å—Ç—Ä–æ–π Billing (–ø—Ä–∏–≤—è–∂–∏ –∫–∞—Ä—Ç—É)")
        print("   4. –î–∞–π Service Account —Ä–æ–ª—å Editor –∏–ª–∏ Owner")
        sys.exit(1)
    
    # 6. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    if not test_create_spreadsheet(credentials, creds_dict):
        print("\n‚ùå –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!")
        print("   APIs —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –Ω–µ —É–¥–∞–ª–æ—Å—å")
        print("   –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å Billing –∏–ª–∏ IAM —Ä–æ–ª—è–º–∏")
        sys.exit(1)
    
    # –£—Å–ø–µ—Ö!
    print_section("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
    print("\nüéâ Google Sheets API –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    print(f"   Project ID: {creds_dict['project_id']}")
    print(f"   Service Account: {creds_dict['client_email']}")
    print("\n‚úÖ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!")

if __name__ == '__main__':
    main()

