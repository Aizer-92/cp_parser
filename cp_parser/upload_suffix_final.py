"""
–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ –Ω–∞ FTP Beget S3
"""
import sys
from pathlib import Path
from sqlalchemy import text
from ftplib import FTP_TLS
import time

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager

# FTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
FTP_HOST = 'ftp.ru1.storage.beget.cloud'
FTP_USERNAME = 'RECD00AQJIM4300MLJ0W'
FTP_PASSWORD = 'FIucJ3i9iIWZ5ieJvabvI0OxEn2Yv4gG5XRUeSNf'
FTP_REMOTE_DIR = '/73d16f7545b3-promogoods/images'

class SuffixImageUploader:
    def __init__(self):
        self.db = PostgreSQLManager()
        self.images_dir = Path('storage/images')
        
    def get_suffix_images(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏"""
        with open('template_4_perfect_ids.txt', 'r') as f:
            project_ids = [int(line.strip()) for line in f if line.strip()]
        
        with self.db.get_session() as session:
            result = session.execute(text("""
                SELECT DISTINCT pi.image_filename
                FROM product_images pi
                JOIN products p ON pi.product_id = p.id
                WHERE p.project_id = ANY(:ids)
                  AND (
                    pi.image_filename LIKE '%_1_%' OR
                    pi.image_filename LIKE '%_2_%' OR
                    pi.image_filename LIKE '%_3_%'
                  )
                ORDER BY pi.image_filename
            """), {'ids': project_ids}).fetchall()
            
            return [row[0] for row in result]
    
    def upload_to_ftp(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ FTP"""
        filenames = self.get_suffix_images()
        total = len(filenames)
        
        print("=" * 100)
        print(f"üì§ –ó–ê–ì–†–£–ó–ö–ê {total:,} –î–û–ü –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –° –°–£–§–§–ò–ö–°–ê–ú–ò –ù–ê FTP")
        print("=" * 100)
        
        print(f"\nüîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ {FTP_HOST}...")
        
        try:
            ftp = FTP_TLS()
            ftp.connect(FTP_HOST, 21, timeout=30)
            ftp.login(FTP_USERNAME, FTP_PASSWORD)
            ftp.prot_p()  # –ó–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            ftp.cwd(FTP_REMOTE_DIR)
            
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {FTP_REMOTE_DIR}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
            print(f"\nüìã –ü—Ä–æ–≤–µ—Ä—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –Ω–∞ FTP...")
            existing_files = set()
            try:
                existing_files = set(ftp.nlst())
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(existing_files):,} —Ñ–∞–π–ª–æ–≤ –Ω–∞ FTP")
            except:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –±—É–¥—É –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤—Å–µ")
            
            uploaded = 0
            skipped = 0
            errors = 0
            start_time = time.time()
            
            print(f"\nüöÄ –ù–ê–ß–ò–ù–ê–Æ –ó–ê–ì–†–£–ó–ö–£:")
            print("-" * 100)
            
            for i, filename in enumerate(filenames, 1):
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
                    if filename in existing_files:
                        skipped += 1
                        if i % 200 == 0:
                            elapsed = time.time() - start_time
                            speed = i / elapsed if elapsed > 0 else 0
                            eta = (total - i) / speed if speed > 0 else 0
                            print(f"   ‚è≠Ô∏è  [{i:,}/{total:,}] –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped:,} | "
                                  f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {uploaded:,} | –û—à–∏–±–æ–∫: {errors} | "
                                  f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Ñ/—Å | ETA: {eta/60:.1f}–º–∏–Ω")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
                    file_path = self.images_dir / filename
                    if not file_path.exists():
                        errors += 1
                        if errors <= 5:
                            print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
                        continue
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º
                    with open(file_path, 'rb') as f:
                        ftp.storbinary(f'STOR {filename}', f)
                    
                    uploaded += 1
                    
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Ñ–∞–π–ª–æ–≤
                    if uploaded % 100 == 0:
                        elapsed = time.time() - start_time
                        speed = i / elapsed if elapsed > 0 else 0
                        eta = (total - i) / speed if speed > 0 else 0
                        print(f"   ‚úÖ [{i:,}/{total:,}] –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {uploaded:,} | "
                              f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped:,} | –û—à–∏–±–æ–∫: {errors} | "
                              f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Ñ/—Å | ETA: {eta/60:.1f}–º–∏–Ω")
                
                except Exception as e:
                    errors += 1
                    if errors <= 5:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ {filename}: {str(e)[:50]}")
            
            ftp.quit()
            
            elapsed = time.time() - start_time
            
            print("\n" + "=" * 100)
            print(f"‚úÖ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ:  {uploaded:,}")
            print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ:  {skipped:,}")
            print(f"   –û—à–∏–±–æ–∫:     {errors}")
            print(f"   –í—Ä–µ–º—è:      {elapsed/60:.1f} –º–∏–Ω—É—Ç")
            if elapsed > 0:
                print(f"   –°–∫–æ—Ä–æ—Å—Ç—å:   {total/elapsed:.1f} —Ñ–∞–π–ª–æ–≤/—Å–µ–∫")
            print("=" * 100)
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

if __name__ == "__main__":
    uploader = SuffixImageUploader()
    uploader.upload_to_ftp()





–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ –Ω–∞ FTP Beget S3
"""
import sys
from pathlib import Path
from sqlalchemy import text
from ftplib import FTP_TLS
import time

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager

# FTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
FTP_HOST = 'ftp.ru1.storage.beget.cloud'
FTP_USERNAME = 'RECD00AQJIM4300MLJ0W'
FTP_PASSWORD = 'FIucJ3i9iIWZ5ieJvabvI0OxEn2Yv4gG5XRUeSNf'
FTP_REMOTE_DIR = '/73d16f7545b3-promogoods/images'

class SuffixImageUploader:
    def __init__(self):
        self.db = PostgreSQLManager()
        self.images_dir = Path('storage/images')
        
    def get_suffix_images(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏"""
        with open('template_4_perfect_ids.txt', 'r') as f:
            project_ids = [int(line.strip()) for line in f if line.strip()]
        
        with self.db.get_session() as session:
            result = session.execute(text("""
                SELECT DISTINCT pi.image_filename
                FROM product_images pi
                JOIN products p ON pi.product_id = p.id
                WHERE p.project_id = ANY(:ids)
                  AND (
                    pi.image_filename LIKE '%_1_%' OR
                    pi.image_filename LIKE '%_2_%' OR
                    pi.image_filename LIKE '%_3_%'
                  )
                ORDER BY pi.image_filename
            """), {'ids': project_ids}).fetchall()
            
            return [row[0] for row in result]
    
    def upload_to_ftp(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ FTP"""
        filenames = self.get_suffix_images()
        total = len(filenames)
        
        print("=" * 100)
        print(f"üì§ –ó–ê–ì–†–£–ó–ö–ê {total:,} –î–û–ü –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –° –°–£–§–§–ò–ö–°–ê–ú–ò –ù–ê FTP")
        print("=" * 100)
        
        print(f"\nüîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ {FTP_HOST}...")
        
        try:
            ftp = FTP_TLS()
            ftp.connect(FTP_HOST, 21, timeout=30)
            ftp.login(FTP_USERNAME, FTP_PASSWORD)
            ftp.prot_p()  # –ó–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            ftp.cwd(FTP_REMOTE_DIR)
            
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {FTP_REMOTE_DIR}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
            print(f"\nüìã –ü—Ä–æ–≤–µ—Ä—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –Ω–∞ FTP...")
            existing_files = set()
            try:
                existing_files = set(ftp.nlst())
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(existing_files):,} —Ñ–∞–π–ª–æ–≤ –Ω–∞ FTP")
            except:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –±—É–¥—É –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤—Å–µ")
            
            uploaded = 0
            skipped = 0
            errors = 0
            start_time = time.time()
            
            print(f"\nüöÄ –ù–ê–ß–ò–ù–ê–Æ –ó–ê–ì–†–£–ó–ö–£:")
            print("-" * 100)
            
            for i, filename in enumerate(filenames, 1):
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
                    if filename in existing_files:
                        skipped += 1
                        if i % 200 == 0:
                            elapsed = time.time() - start_time
                            speed = i / elapsed if elapsed > 0 else 0
                            eta = (total - i) / speed if speed > 0 else 0
                            print(f"   ‚è≠Ô∏è  [{i:,}/{total:,}] –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped:,} | "
                                  f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {uploaded:,} | –û—à–∏–±–æ–∫: {errors} | "
                                  f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Ñ/—Å | ETA: {eta/60:.1f}–º–∏–Ω")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
                    file_path = self.images_dir / filename
                    if not file_path.exists():
                        errors += 1
                        if errors <= 5:
                            print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
                        continue
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º
                    with open(file_path, 'rb') as f:
                        ftp.storbinary(f'STOR {filename}', f)
                    
                    uploaded += 1
                    
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Ñ–∞–π–ª–æ–≤
                    if uploaded % 100 == 0:
                        elapsed = time.time() - start_time
                        speed = i / elapsed if elapsed > 0 else 0
                        eta = (total - i) / speed if speed > 0 else 0
                        print(f"   ‚úÖ [{i:,}/{total:,}] –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {uploaded:,} | "
                              f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped:,} | –û—à–∏–±–æ–∫: {errors} | "
                              f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Ñ/—Å | ETA: {eta/60:.1f}–º–∏–Ω")
                
                except Exception as e:
                    errors += 1
                    if errors <= 5:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ {filename}: {str(e)[:50]}")
            
            ftp.quit()
            
            elapsed = time.time() - start_time
            
            print("\n" + "=" * 100)
            print(f"‚úÖ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ:  {uploaded:,}")
            print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ:  {skipped:,}")
            print(f"   –û—à–∏–±–æ–∫:     {errors}")
            print(f"   –í—Ä–µ–º—è:      {elapsed/60:.1f} –º–∏–Ω—É—Ç")
            if elapsed > 0:
                print(f"   –°–∫–æ—Ä–æ—Å—Ç—å:   {total/elapsed:.1f} —Ñ–∞–π–ª–æ–≤/—Å–µ–∫")
            print("=" * 100)
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

if __name__ == "__main__":
    uploader = SuffixImageUploader()
    uploader.upload_to_ftp()












