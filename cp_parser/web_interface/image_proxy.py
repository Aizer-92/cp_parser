#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ–∫—Å–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
"""

import boto3
from botocore.exceptions import ClientError
import io
from flask import Response, abort
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ S3
S3_ACCESS_KEY = 'RECD00AQJIM4300MLJ0W'
S3_SECRET_KEY = 'FIucJ3i9iIWZ5ieJvabvI0OxEn2Yv4gG5XRUeSNf'
S3_BUCKET = '73d16f7545b3-promogoods'
S3_REGION = 'ru1'
S3_ENDPOINT = 'https://s3.ru1.storage.beget.cloud'

# –°–æ–∑–¥–∞–µ–º S3 –∫–ª–∏–µ–Ω—Ç
s3_client = boto3.client(
    's3',
    aws_access_key_id=S3_ACCESS_KEY,
    aws_secret_access_key=S3_SECRET_KEY,
    region_name=S3_REGION,
    endpoint_url=S3_ENDPOINT,
    config=boto3.session.Config(
        signature_version='s3v4',
        s3={'addressing_style': 'path'}
    )
)

def get_image_from_s3(filename):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á —Ñ–∞–π–ª–∞
        s3_key = f"images/{filename}"
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ S3
        response = s3_client.get_object(Bucket=S3_BUCKET, Key=s3_key)
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        image_data = response['Body'].read()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        content_type = response.get('ContentType', 'image/jpeg')
        content_length = response.get('ContentLength', len(image_data))
        
        return image_data, content_type, content_length
        
    except ClientError as e:
        error_code = e.response['Error']['Code']
        if error_code == 'NoSuchKey':
            logging.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ S3: {filename}")
            return None, None, None
        else:
            logging.error(f"–û—à–∏–±–∫–∞ S3 –¥–ª—è —Ñ–∞–π–ª–∞ {filename}: {e}")
            return None, None, None
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ {filename}: {e}")
        return None, None, None

def serve_image_proxy(filename):
    """–û—Ç–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ S3
    image_data, content_type, content_length = get_image_from_s3(filename)
    
    if image_data is None:
        abort(404)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
    response = Response(
        image_data,
        mimetype=content_type,
        headers={
            'Content-Length': str(content_length),
            'Cache-Control': 'public, max-age=3600',  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 1 —á–∞—Å
            'ETag': f'"{filename}"'
        }
    )
    
    return response

def generate_presigned_url(filename, expiration=3600):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        s3_key = f"images/{filename}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π URL
        presigned_url = s3_client.generate_presigned_url(
            'get_object',
            Params={'Bucket': S3_BUCKET, 'Key': s3_key},
            ExpiresIn=expiration
        )
        
        return presigned_url
        
    except ClientError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ URL –¥–ª—è {filename}: {e}")
        return None
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL –¥–ª—è {filename}: {e}")
        return None

def test_s3_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å S3"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        response = s3_client.list_objects_v2(
            Bucket=S3_BUCKET,
            Prefix='images/',
            MaxKeys=1
        )
        
        if 'Contents' in response:
            print("‚úÖ S3 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print("‚ö†Ô∏è  S3 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ø–∞–ø–∫–∞ images –ø—É—Å—Ç–∞")
            return True
            
    except ClientError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ S3 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ S3: {e}")
        return False

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é S3 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
    test_s3_connection()
