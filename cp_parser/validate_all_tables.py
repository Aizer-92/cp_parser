#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ production_data
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–π–¥—É—Ç —Å—Ç—Ä–æ–≥—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–∞
"""

import sys
import os
from pathlib import Path
import time
from collections import defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.structure_parser import CommercialProposalParser
from openpyxl import load_workbook

def validate_single_file(parser, file_path):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ–¥–∏–Ω Excel —Ñ–∞–π–ª"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º workbook
        wb = load_workbook(file_path, data_only=True)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–∏—Å—Ç
        sheet_name = parser.find_matching_sheet(wb)
        if not sheet_name:
            return {
                'valid': False,
                'rating': 0,
                'errors': ['–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–∏—Å—Ç (–ü—Ä–æ—Å—á–µ—Ç, Calculation)'],
                'sheet_name': None
            }
        
        ws = wb[sheet_name]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        structure_result = parser.validate_table_structure(ws, sheet_name)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É
        min_rating = 62.5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Å—á–∏—Ç–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤–∞–ª–∏–¥–Ω—ã–º
        is_valid = structure_result['confidence_score'] >= min_rating
        
        return {
            'valid': is_valid,
            'rating': structure_result['confidence_score'],
            'errors': structure_result.get('validation_errors', []),
            'sheet_name': sheet_name
        }
        
    except Exception as e:
        return {
            'valid': False,
            'rating': 0,
            'errors': [f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}'],
            'sheet_name': None
        }

def validate_all_production_files():
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ production_data"""
    
    print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –°–¢–†–£–ö–¢–£–†–´ –í–°–ï–• –¢–ê–ë–õ–ò–¶")
    print("=" * 60)
    
    production_dir = Path("production_data")
    if not production_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ production_data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ xlsx —Ñ–∞–π–ª—ã
    xlsx_files = list(production_dir.glob("*.xlsx"))
    total_files = len(xlsx_files)
    
    if total_files == 0:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤ –≤ production_data/")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {total_files}")
    print("-" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = CommercialProposalParser()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'total': total_files,
        'valid': 0,
        'invalid': 0,
        'errors': 0,
        'valid_files': [],
        'invalid_files': [],
        'error_files': [],
        'rating_distribution': defaultdict(int)
    }
    
    start_time = time.time()
    
    for i, file_path in enumerate(xlsx_files, 1):
        try:
            print(f"{i:3d}/{total_files}: {file_path.name[:50]}")
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
            result = validate_single_file(parser, str(file_path))
            
            if result['valid']:
                stats['valid'] += 1
                stats['valid_files'].append({
                    'name': file_path.name,
                    'rating': result.get('rating', 0),
                    'sheet': result.get('sheet_name', 'N/A')
                })
                print(f"      ‚úÖ –í–ê–õ–ò–î–ù–ê - —Ä–µ–π—Ç–∏–Ω–≥: {result.get('rating', 0):.1f}%")
            else:
                stats['invalid'] += 1
                stats['invalid_files'].append({
                    'name': file_path.name,
                    'rating': result.get('rating', 0),
                    'errors': result.get('errors', [])
                })
                errors = result.get('errors', [])
                main_error = errors[0] if errors else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
                print(f"      ‚ùå –ù–ï –í–ê–õ–ò–î–ù–ê - {main_error}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º
            rating = result.get('rating', 0)
            rating_range = int(rating // 10) * 10
            stats['rating_distribution'][rating_range] += 1
            
        except Exception as e:
            stats['errors'] += 1
            stats['error_files'].append({
                'name': file_path.name,
                'error': str(e)
            })
            print(f"      üí• –û–®–ò–ë–ö–ê: {str(e)[:50]}")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 20 —Ñ–∞–π–ª–æ–≤
        if i % 20 == 0:
            elapsed = time.time() - start_time
            avg_time = elapsed / i
            remaining = (total_files - i) * avg_time
            valid_percent = (stats['valid'] / i) * 100
            print(f"\n‚è±Ô∏è  –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{total_files} ({i/total_files*100:.1f}%)")
            print(f"   –í–∞–ª–∏–¥–Ω—ã—Ö: {stats['valid']}/{i} ({valid_percent:.1f}%)")
            print(f"   –í—Ä–µ–º—è: {elapsed:.1f}—Å, –æ—Å—Ç–∞–ª–æ—Å—å: ~{remaining:.1f}—Å\n")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    elapsed_total = time.time() - start_time
    valid_percent = (stats['valid'] / stats['total']) * 100
    
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò:")
    print("=" * 60)
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_total:.1f} —Å–µ–∫—É–Ω–¥")
    print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['total']}")
    print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {stats['valid']} ({valid_percent:.1f}%)")
    print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {stats['invalid']}")
    print(f"üí• –û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats['errors']}")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º
    print(f"\nüìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –†–ï–ô–¢–ò–ù–ì–ê–ú –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:")
    for rating_range in sorted(stats['rating_distribution'].keys()):
        count = stats['rating_distribution'][rating_range]
        percent = (count / stats['total']) * 100
        print(f"  {rating_range:2d}-{rating_range+9:2d}%: {count:3d} —Ñ–∞–π–ª–æ–≤ ({percent:.1f}%)")
    
    # –¢–û–ü –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if stats['valid_files']:
        print(f"\nüèÜ –¢–û–ü-10 –í–ê–õ–ò–î–ù–´–• –§–ê–ô–õ–û–í:")
        top_valid = sorted(stats['valid_files'], key=lambda x: x['rating'], reverse=True)[:10]
        for i, file_info in enumerate(top_valid, 1):
            print(f"  {i:2d}. {file_info['rating']:5.1f}% - {file_info['name'][:50]}")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
    if stats['invalid_files']:
        print(f"\n‚ùå –û–°–ù–û–í–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ù–ï–í–ê–õ–ò–î–ù–û–°–¢–ò:")
        error_counts = defaultdict(int)
        for file_info in stats['invalid_files']:
            errors = file_info.get('errors', [])
            if errors:
                error_counts[errors[0]] += 1
        
        for error, count in sorted(error_counts.items(), key=lambda x: x[1], reverse=True):
            percent = (count / stats['invalid']) * 100
            print(f"  ‚Ä¢ {error}: {count} —Ñ–∞–π–ª–æ–≤ ({percent:.1f}%)")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if valid_percent >= 70:
        print(f"  üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! {valid_percent:.1f}% —Ñ–∞–π–ª–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ –ø–∞—Ä—Å–∏–Ω–≥—É")
    elif valid_percent >= 50:
        print(f"  ‚úÖ –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! {valid_percent:.1f}% —Ñ–∞–π–ª–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ –ø–∞—Ä—Å–∏–Ω–≥—É")
    elif valid_percent >= 30:
        print(f"  ‚ö†Ô∏è  –°–†–ï–î–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! {valid_percent:.1f}% —Ñ–∞–π–ª–æ–≤ —Ç—Ä–µ–±—É—é—Ç —É–ª—É—á—à–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞")
    else:
        print(f"  ‚ùå –ù–ò–ó–ö–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –¢–æ–ª—å–∫–æ {valid_percent:.1f}% —Ñ–∞–π–ª–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ –ø–∞—Ä—Å–∏–Ω–≥—É")
    
    print(f"\nüöÄ –ì–æ—Ç–æ–≤–æ! –í–∞–ª–∏–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π:")
    print(f"   python3 production_parser.py")

if __name__ == "__main__":
    validate_all_production_files()
