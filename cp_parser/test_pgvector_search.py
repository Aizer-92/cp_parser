#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç pgvector –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import os
import sys
from dotenv import load_dotenv

load_dotenv()

# –¶–≤–µ—Ç–∞
GREEN = '\033[92m'
YELLOW = '\033[93m'
RED = '\033[91m'
BLUE = '\033[94m'
RESET = '\033[0m'

print(f"\n{BLUE}{'=' * 80}{RESET}")
print(f"{BLUE}{'–¢–ï–°–¢ pgvector –ü–û–ò–°–ö–ê'.center(80)}{RESET}")
print(f"{BLUE}{'=' * 80}{RESET}\n")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
print("1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
vector_db = os.getenv('VECTOR_DATABASE_URL')
openai_key = os.getenv('OPENAI_API_KEY')

if not vector_db:
    print(f"{RED}‚ùå VECTOR_DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω{RESET}")
    sys.exit(1)
else:
    print(f"{GREEN}‚úÖ VECTOR_DATABASE_URL: {vector_db[:50]}...{RESET}")

if not openai_key:
    print(f"{RED}‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω{RESET}")
    sys.exit(1)
else:
    print(f"{GREEN}‚úÖ OPENAI_API_KEY: sk-proj-...{openai_key[-10:]}{RESET}")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
print("\n2Ô∏è‚É£  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ pgvector –ë–î...")
try:
    from sqlalchemy import create_engine, text
    engine = create_engine(vector_db, pool_pre_ping=True)
    
    with engine.connect() as conn:
        result = conn.execute(text("SELECT COUNT(*) FROM product_embeddings"))
        count = result.scalar()
    
    print(f"{GREEN}‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ! –ù–∞–π–¥–µ–Ω–æ {count} embeddings{RESET}")
    
except Exception as e:
    print(f"{RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}{RESET}")
    sys.exit(1)

# –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
print("\n3Ô∏è‚É£  –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫...")
test_queries = ["—Ä—é–∫–∑–∞–∫", "–∫—Ä—É–∂–∫–∞", "—Ä—É—á–∫–∞"]

try:
    from openai import OpenAI
    import httpx
    import time
    
    client = OpenAI(api_key=openai_key)
    
    for query in test_queries:
        print(f"\n   üîç –ü–æ–∏—Å–∫: '{query}'")
        
        start_time = time.time()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embedding
        response = client.embeddings.create(
            model="text-embedding-3-small",
            input=query,
            timeout=httpx.Timeout(10.0)
        )
        embedding = response.data[0].embedding
        
        embedding_time = time.time() - start_time
        
        # –ü–æ–∏—Å–∫ –≤ –ë–î
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º list –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è pgvector
        query_vector_str = '[' + ','.join(map(str, embedding)) + ']'
        
        search_start = time.time()
        with engine.connect() as conn:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º format SQL —Ç–∞–∫ –∫–∞–∫ SQLAlchemy text() –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å ::vector cast
            sql_query = f"""
                SELECT product_id, product_name,
                       1 - (name_embedding <=> '{query_vector_str}'::vector) as similarity
                FROM product_embeddings
                WHERE 1 - (name_embedding <=> '{query_vector_str}'::vector) >= 0.25
                ORDER BY name_embedding <=> '{query_vector_str}'::vector
                LIMIT 5
            """
            results = conn.execute(text(sql_query)).fetchall()
        
        search_time = time.time() - search_start
        total_time = time.time() - start_time
        
        print(f"      ‚è±Ô∏è  Embedding: {embedding_time:.2f}—Å | –ü–æ–∏—Å–∫: {search_time:.2f}—Å | –í—Å–µ–≥–æ: {total_time:.2f}—Å")
        print(f"      üìä –ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        if results:
            print(f"      {GREEN}‚úÖ –¢–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:{RESET}")
            for i, (pid, pname, sim) in enumerate(results[:3], 1):
                print(f"         {i}. [{sim:.3f}] {pname}")
        else:
            print(f"      {YELLOW}‚ö†Ô∏è  –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ{RESET}")

except Exception as e:
    print(f"{RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}{RESET}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# –ò—Ç–æ–≥–æ
print(f"\n{BLUE}{'=' * 80}{RESET}")
print(f"{GREEN}‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!{RESET}")
print(f"{BLUE}{'=' * 80}{RESET}\n")

print("üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
print("1. –ó–∞–ø—É—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:")
print("   cd web_interface && python3 app.py")
print("")
print("2. –û—Ç–∫—Ä–æ–π http://localhost:5000 –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –ø–æ–∏—Å–∫")
print("")
print("3. –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ - –¥–µ–ø–ª–æ–π –Ω–∞ Railway!")
print("")

