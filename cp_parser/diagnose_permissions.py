#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ Service Account
"""

import os
import sys
import json
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

def test_read_existing_file():
    """–¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞"""
    print("\n" + "="*60)
    print("  –¢–ï–°–¢ 1: –ß–¢–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –§–ê–ô–õ–ê")
    print("="*60)
    
    creds_json = os.environ.get('GOOGLE_CREDENTIALS_JSON')
    creds_dict = json.loads(creds_json)
    
    scopes = [
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive',
        'https://www.googleapis.com/auth/drive.file'
    ]
    
    credentials = service_account.Credentials.from_service_account_info(
        creds_dict,
        scopes=scopes
    )
    
    drive_service = build('drive', 'v3', credentials=credentials)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        results = drive_service.files().list(
            pageSize=10,
            fields="files(id, name, mimeType)"
        ).execute()
        
        files = results.get('files', [])
        
        if not files:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            return None
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        for f in files:
            print(f"   - {f['name']} ({f['mimeType']})")
        
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–π Google Sheets
        sheets_files = [f for f in files if 'spreadsheet' in f.get('mimeType', '')]
        
        if sheets_files:
            sheet_id = sheets_files[0]['id']
            print(f"\nüß™ –ü—Ä–æ–±—É—é –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É: {sheets_files[0]['name']}")
            
            sheets_service = build('sheets', 'v4', credentials=credentials)
            
            try:
                sheet_metadata = sheets_service.spreadsheets().get(
                    spreadsheetId=sheet_id
                ).execute()
                
                print("‚úÖ –ß–¢–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –§–ê–ô–õ–ê –†–ê–ë–û–¢–ê–ï–¢!")
                return sheet_id
            except HttpError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: HTTP {e.resp.status}")
                print(f"   {e.error_details}")
                return None
        else:
            print("‚ö†Ô∏è  –ù–µ—Ç Google Sheets —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞")
            return None
            
    except HttpError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: HTTP {e.resp.status}")
        print(f"   {e.error_details}")
        return None

def test_write_to_existing_file(sheet_id):
    """–¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª"""
    print("\n" + "="*60)
    print("  –¢–ï–°–¢ 2: –ó–ê–ü–ò–°–¨ –í –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –§–ê–ô–õ")
    print("="*60)
    
    if not sheet_id:
        print("‚ö†Ô∏è  –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ –∑–∞–ø–∏—Å–∏")
        return False
    
    creds_json = os.environ.get('GOOGLE_CREDENTIALS_JSON')
    creds_dict = json.loads(creds_json)
    
    scopes = [
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive',
        'https://www.googleapis.com/auth/drive.file'
    ]
    
    credentials = service_account.Credentials.from_service_account_info(
        creds_dict,
        scopes=scopes
    )
    
    sheets_service = build('sheets', 'v4', credentials=credentials)
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É
        print(f"üß™ –ü—Ä–æ–±—É—é –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É: {sheet_id}")
        
        result = sheets_service.spreadsheets().values().update(
            spreadsheetId=sheet_id,
            range='Sheet1!Z1',  # –î–∞–ª–µ–∫–∞—è —è—á–µ–π–∫–∞ —á—Ç–æ–±—ã –Ω–µ –∏—Å–ø–æ—Ä—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            valueInputOption='RAW',
            body={'values': [['test']]}
        ).execute()
        
        print("‚úÖ –ó–ê–ü–ò–°–¨ –í –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –§–ê–ô–õ –†–ê–ë–û–¢–ê–ï–¢!")
        print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ —è—á–µ–µ–∫: {result.get('updatedCells')}")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        sheets_service.spreadsheets().values().clear(
            spreadsheetId=sheet_id,
            range='Sheet1!Z1'
        ).execute()
        
        return True
        
    except HttpError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: HTTP {e.resp.status}")
        print(f"   {e.error_details}")
        
        if e.resp.status == 403:
            print("\nüîç –î–ò–ê–ì–ù–û–ó: Service Account –º–æ–∂–µ—Ç –ß–ò–¢–ê–¢–¨, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –ü–ò–°–ê–¢–¨!")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   1. –§–∞–π–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            print("   2. –§–∞–π–ª –Ω–µ —Ä–∞—Å—à–∞—Ä–µ–Ω —Å Service Account —Å –ø—Ä–∞–≤–∞–º–∏ Editor")
            print("   3. Organization policy –∑–∞–ø—Ä–µ—â–∞–µ—Ç –∑–∞–ø–∏—Å—å")
        
        return False

def test_create_in_shared_drive():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ Shared Drive"""
    print("\n" + "="*60)
    print("  –¢–ï–°–¢ 3: –°–û–ó–î–ê–ù–ò–ï –í SHARED DRIVE")
    print("="*60)
    
    creds_json = os.environ.get('GOOGLE_CREDENTIALS_JSON')
    creds_dict = json.loads(creds_json)
    
    scopes = [
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive',
        'https://www.googleapis.com/auth/drive.file'
    ]
    
    credentials = service_account.Credentials.from_service_account_info(
        creds_dict,
        scopes=scopes
    )
    
    drive_service = build('drive', 'v3', credentials=credentials)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ Shared Drives
        shared_drives = drive_service.drives().list().execute()
        
        drives = shared_drives.get('drives', [])
        
        if not drives:
            print("‚ö†Ô∏è  Shared Drives –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ Shared Drives: {len(drives)}")
        for d in drives:
            print(f"   - {d['name']}")
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –≤ –ø–µ—Ä–≤–æ–º Shared Drive
        drive_id = drives[0]['id']
        print(f"\nüß™ –ü—Ä–æ–±—É—é —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –≤: {drives[0]['name']}")
        
        sheets_service = build('sheets', 'v4', credentials=credentials)
        
        spreadsheet = {
            'properties': {
                'title': f'TEST - Shared Drive - {creds_dict["project_id"]}'
            }
        }
        
        result = sheets_service.spreadsheets().create(
            body=spreadsheet,
            fields='spreadsheetId,spreadsheetUrl'
        ).execute()
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ Shared Drive
        file_id = result['spreadsheetId']
        drive_service.files().update(
            fileId=file_id,
            addParents=drive_id,
            supportsAllDrives=True,
            fields='id, parents'
        ).execute()
        
        print("‚úÖ –°–û–ó–î–ê–ù–ò–ï –í SHARED DRIVE –†–ê–ë–û–¢–ê–ï–¢!")
        print(f"   URL: {result['spreadsheetUrl']}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        drive_service.files().delete(
            fileId=file_id,
            supportsAllDrives=True
        ).execute()
        
        return True
        
    except HttpError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: HTTP {e.resp.status}")
        print(f"   {e.error_details}")
        return False

def test_domain_restrictions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ domain restrictions"""
    print("\n" + "="*60)
    print("  –ü–†–û–í–ï–†–ö–ê DOMAIN RESTRICTIONS")
    print("="*60)
    
    creds_json = os.environ.get('GOOGLE_CREDENTIALS_JSON')
    creds_dict = json.loads(creds_json)
    
    client_email = creds_dict.get('client_email', '')
    
    print(f"Service Account: {client_email}")
    
    if '@' in client_email:
        domain = client_email.split('@')[1]
        print(f"Domain: {domain}")
        
        if 'iam.gserviceaccount.com' in domain:
            print("‚úÖ –≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Service Account domain")
            print("   (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å domain restrictions)")
        else:
            print("‚ö†Ô∏è  –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π domain!")
            print("   –í–æ–∑–º–æ–∂–Ω—ã domain restrictions!")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "üîç " * 30)
    print("–î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ê–í SERVICE ACCOUNT")
    print("üîç " * 30)
    
    # –¢–µ—Å—Ç 1: –ß—Ç–µ–Ω–∏–µ
    sheet_id = test_read_existing_file()
    
    # –¢–µ—Å—Ç 2: –ó–∞–ø–∏—Å—å
    if sheet_id:
        test_write_to_existing_file(sheet_id)
    
    # –¢–µ—Å—Ç 3: Shared Drive
    test_create_in_shared_drive()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ domain restrictions
    test_domain_restrictions()
    
    print("\n" + "="*60)
    print("  –ò–¢–û–ì–ò")
    print("="*60)
    print("\n–ï—Å–ª–∏ Service Account –º–æ–∂–µ—Ç:")
    print("‚úÖ –ß–∏—Ç–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã")
    print("‚ùå –ù–æ –ù–ï –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ")
    print("\n–¢–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤:")
    print("1. Organization Policy (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤)")
    print("2. Domain restrictions")
    print("3. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –ø—Ä–∞–≤–∞ (—Ö–æ—Ç—è —Ä–æ–ª—å Owner –¥–æ–ª–∂–Ω–∞ –¥–∞–≤–∞—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∞)")
    print("\n–†–ï–®–ï–ù–ò–ï:")
    print("- –°–æ–∑–¥–∞–π —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é –≤ My Drive")
    print("- –†–∞—Å—à–∞—Ä—å –µ–≥–æ —Å Service Account email —Å –ø—Ä–∞–≤–∞–º–∏ Editor")
    print("- –ó–∞–ø–∏—Å—ã–≤–∞–π –≤ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö")

if __name__ == '__main__':
    main()

