#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∫–∞—á–∞–Ω–Ω—ã—Ö Excel —Ñ–∞–π–ª–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞—Ä—Å–µ—Ä–∞
"""

import sys
from pathlib import Path
from datetime import datetime
import json
import openpyxl

sys.path.insert(0, str(Path(__file__).parent))

from src.structure_parser import CommercialProposalParser

def validate_single_file(file_path: Path, parser: CommercialProposalParser, index: int, total: int):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ–¥–∏–Ω Excel —Ñ–∞–π–ª"""
    
    file_name = file_path.name
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel
        workbook = openpyxl.load_workbook(file_path, data_only=True)
        
        if len(workbook.sheetnames) == 0:
            return {
                'file': file_name,
                'status': 'error',
                'error': 'No sheets in workbook'
            }
        
        worksheet = workbook[workbook.sheetnames[0]]
        sheet_name = workbook.sheetnames[0]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        validation = parser.validate_table_structure(worksheet, sheet_name)
        
        if validation['is_valid']:
            return {
                'file': file_name,
                'status': 'valid',
                'main_columns': validation.get('matched_main_columns_count', 0),
                'routes': validation.get('matched_routes_count', 0),
                'structure': validation
            }
        else:
            return {
                'file': file_name,
                'status': 'invalid',
                'errors': validation.get('validation_errors', []),
                'main_columns': validation.get('matched_main_columns_count', 0),
                'routes': validation.get('matched_routes_count', 0)
            }
        
    except Exception as e:
        return {
            'file': file_name,
            'status': 'error',
            'error': str(e)
        }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("="*80)
    print("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –í–°–ï–• –°–ö–ê–ß–ê–ù–ù–´–• –§–ê–ô–õ–û–í")
    print("="*80)
    print()
    
    # 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Excel —Ñ–∞–π–ª—ã
    excel_dir = Path(__file__).parent / 'storage' / 'excel_files'
    excel_files = sorted(excel_dir.glob("*.xlsx"))
    
    if len(excel_files) == 0:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤")
        return
    
    print(f"üìÅ –ü–∞–ø–∫–∞: {excel_dir}")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(excel_files)}")
    print()
    
    # 2. –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = CommercialProposalParser()
    
    # 3. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    results = {
        'valid': [],
        'invalid': [],
        'error': []
    }
    
    print("‚è±Ô∏è  –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é...\n")
    
    start_time = datetime.now()
    
    for i, file_path in enumerate(excel_files, 1):
        if i % 50 == 0 or i == 1:
            print(f"[{i}/{len(excel_files)}] –ü—Ä–æ–≤–µ—Ä—è—é: {file_path.name}")
        
        result = validate_single_file(file_path, parser, i, len(excel_files))
        
        status = result['status']
        results[status].append(result)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Ñ–∞–π–ª–æ–≤
        if i % 100 == 0:
            valid_count = len(results['valid'])
            invalid_count = len(results['invalid'])
            error_count = len(results['error'])
            
            print(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(excel_files)}")
            print(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {valid_count} ({valid_count/i*100:.1f}%)")
            print(f"   ‚ö†Ô∏è  –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {invalid_count} ({invalid_count/i*100:.1f}%)")
            print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count} ({error_count/i*100:.1f}%)")
            print()
    
    # 4. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    end_time = datetime.now()
    duration = (end_time - start_time).total_seconds()
    
    print("\n" + "="*80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò")
    print("="*80)
    
    total = len(excel_files)
    valid_count = len(results['valid'])
    invalid_count = len(results['invalid'])
    error_count = len(results['error'])
    
    print(f"\n‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {valid_count} ({valid_count/total*100:.1f}%)")
    print(f"‚ö†Ô∏è  –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {invalid_count} ({invalid_count/total*100:.1f}%)")
    print(f"‚ùå –û—à–∏–±–æ–∫ —á—Ç–µ–Ω–∏—è: {error_count} ({error_count/total*100:.1f}%)")
    
    print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {duration:.0f} —Å–µ–∫ ({duration/60:.1f} –º–∏–Ω)")
    print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {total/duration:.1f} —Ñ–∞–π–ª–æ–≤/—Å–µ–∫")
    
    # 5. –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
    if invalid_count > 0:
        print(f"\n‚ö†Ô∏è  –ü–†–ò–ß–ò–ù–´ –ù–ï–í–ê–õ–ò–î–ù–û–°–¢–ò (–¢–û–ü-10):")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏
        error_reasons = {}
        for result in results['invalid']:
            errors = result.get('errors', [])
            if isinstance(errors, list):
                for err in errors:
                    error_str = str(err)[:100]  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                    error_reasons[error_str] = error_reasons.get(error_str, 0) + 1
            else:
                error_str = str(errors)[:100]
                error_reasons[error_str] = error_reasons.get(error_str, 0) + 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
        sorted_errors = sorted(error_reasons.items(), key=lambda x: x[1], reverse=True)
        
        for i, (error, count) in enumerate(sorted_errors[:10], 1):
            print(f"   {i}. ({count} —Ñ–∞–π–ª–æ–≤) {error}")
    
    # 6. –ü—Ä–∏–º–µ—Ä—ã –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if valid_count > 0:
        print(f"\n‚úÖ –ü–†–ò–ú–ï–†–´ –í–ê–õ–ò–î–ù–´–• –§–ê–ô–õ–û–í (–ø–µ—Ä–≤—ã–µ 5):")
        for result in results['valid'][:5]:
            print(f"   - {result['file']}")
            print(f"     –°—Ç–æ–ª–±—Ü—ã: {result['main_columns']}, –ú–∞—Ä—à—Ä—É—Ç—ã: {result['routes']}")
    
    # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report = {
        'timestamp': datetime.now().isoformat(),
        'total_files': total,
        'statistics': {
            'valid': valid_count,
            'invalid': invalid_count,
            'errors': error_count,
            'valid_percentage': round(valid_count/total*100, 2),
            'duration_seconds': round(duration, 2)
        },
        'results': {
            'valid': results['valid'][:100],  # –ü–µ—Ä–≤—ã–µ 100
            'invalid': results['invalid'][:100],  # –ü–µ—Ä–≤—ã–µ 100
            'error': results['error'][:100]  # –ü–µ—Ä–≤—ã–µ 100
        },
        'error_reasons': dict(sorted(error_reasons.items(), key=lambda x: x[1], reverse=True)[:20]) if invalid_count > 0 else {}
    }
    
    with open('validation_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"\n‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: validation_report.json")
    
    # 8. –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    if valid_count > 0:
        valid_files = [r['file'] for r in results['valid']]
        with open('valid_files_list.txt', 'w', encoding='utf-8') as f:
            f.write('\n'.join(valid_files))
        
        print(f"‚úÖ –°–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: valid_files_list.txt")
    
    print("\n" + "="*80)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("="*80)
    
    if valid_count > 0:
        print(f"\n1Ô∏è‚É£  –ì–æ—Ç–æ–≤–æ {valid_count} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
        print(f"2Ô∏è‚É£  –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 parse_valid_files.py")
    
    if invalid_count > 0:
        print(f"\n3Ô∏è‚É£  {invalid_count} —Ñ–∞–π–ª–æ–≤ —Ç—Ä–µ–±—É—é—Ç –Ω–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞")
        print(f"4Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏—á–∏–Ω—ã –≤ validation_report.json")
    
    print("\n" + "="*80)

if __name__ == "__main__":
    main()




