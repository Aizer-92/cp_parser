#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö Excel —Ñ–∞–π–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É PROJECTS
–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ —Å table_id –∏ –ø—É—Ç—è–º–∏ –∫ —Ñ–∞–π–ª–∞–º
"""

import sys
import os
from pathlib import Path
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from database.manager import db_manager, project_service

def generate_table_id(filename: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è table_id –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ –∑–∞–º–µ–Ω—è–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    table_id = filename.replace('.xlsx', '').replace('.csv', '')
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    table_id = table_id.replace('-', '_').replace(' ', '_').replace('(', '').replace(')', '')
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(table_id) > 50:
        table_id = table_id[:50]
    return table_id

def extract_project_name(filename: str) -> str:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    name = filename.replace('.xlsx', '').replace('.csv', '')
    
    # –î–ª—è —Ñ–∞–π–ª–æ–≤ —Ç–∏–ø–∞ google_sheet_20250923_–ü—Ä–æ—Å—á–µ—Ç-–û–ê–≠_Client__Description
    if '–ü—Ä–æ—Å—á–µ—Ç-' in name:
        parts = name.split('_')
        # –ò—â–µ–º —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ –¥–∞—Ç—ã
        for i, part in enumerate(parts):
            if '–ü—Ä–æ—Å—á–µ—Ç-' in part:
                project_parts = parts[i:]
                return '_'.join(project_parts).replace('_', ' ')
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if name.startswith('google_sheet_'):
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å google_sheet_ –∏ –¥–∞—Ç—É
        parts = name.split('_')
        if len(parts) > 2:
            # –£–±–∏—Ä–∞–µ–º google_sheet –∏ –¥–∞—Ç—É
            return '_'.join(parts[2:]).replace('_', ' ')
    
    return name.replace('_', ' ')

def load_test_files_to_database():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger(__name__)
    
    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–∞–º
    test_data_dir = project_root / "test_data"
    
    if not test_data_dir.exists():
        logger.error(f"‚ùå –ü–∞–ø–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {test_data_dir}")
        return False
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö Excel —Ñ–∞–π–ª–æ–≤
    excel_files = list(test_data_dir.glob("*.xlsx"))
    logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(excel_files)} Excel —Ñ–∞–π–ª–æ–≤")
    
    if not excel_files:
        logger.warning("‚ö†Ô∏è Excel —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    if not db_manager.health_check():
        logger.error("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    successful_imports = 0
    failed_imports = 0
    
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    for file_path in excel_files:
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
            table_id = generate_table_id(file_path.name)
            project_name = extract_project_name(file_path.name)
            file_size_mb = round(file_path.stat().st_size / (1024*1024), 2)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ
            project = project_service.create_project(
                table_id=table_id,
                project_name=project_name,
                file_name=file_path.name,
                file_path=str(file_path),
                file_size_mb=file_size_mb,
                parsing_status='pending'
            )
            
            logger.info(f"‚úÖ {file_path.name} ‚Üí ID: {project.id}, table_id: {table_id}")
            successful_imports += 1
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path.name}: {e}")
            failed_imports += 1
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info("\n" + "="*60)
    logger.info("üìä –ò–¢–û–ì–ò –ó–ê–ì–†–£–ó–ö–ò")
    logger.info("="*60)
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {successful_imports} —Ñ–∞–π–ª–æ–≤")
    logger.info(f"‚ùå –û—à–∏–±–æ–∫: {failed_imports} —Ñ–∞–π–ª–æ–≤")
    logger.info(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(excel_files)}")
    
    if successful_imports > 0:
        logger.info("\nüéØ –§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ –ø–∞—Ä—Å–∏–Ω–≥—É!")
        show_sample_records()
    
    return successful_imports > 0

def show_sample_records():
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    from database.models import Project
    
    with db_manager.get_session() as session:
        projects = session.query(Project).limit(5).all()
        
        print("\nüìã –ü–†–ò–ú–ï–†–´ –ó–ê–ì–†–£–ñ–ï–ù–ù–´–• –ó–ê–ü–ò–°–ï–ô:")
        print("-" * 100)
        print(f"{'ID':<4} {'table_id':<25} {'–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞':<40} {'–†–∞–∑–º–µ—Ä':<8}")
        print("-" * 100)
        
        for project in projects:
            name_short = project.project_name[:37] + "..." if len(project.project_name) > 40 else project.project_name
            print(f"{project.id:<4} {project.table_id:<25} {name_short:<40} {project.file_size_mb:<8}")

def clear_projects_table():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    from database.models import Project
    
    response = input("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã PROJECTS. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
    if response.lower() != 'yes':
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return False
    
    with db_manager.get_session() as session:
        deleted_count = session.query(Project).delete()
        session.commit()
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã PROJECTS")
    
    return True

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ë–î')
    parser.add_argument('--clear', action='store_true', help='–û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–æ–≤')
    parser.add_argument('--show', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏')
    
    args = parser.parse_args()
    
    if args.clear:
        clear_projects_table()
    elif args.show:
        show_sample_records()
    else:
        load_test_files_to_database()



