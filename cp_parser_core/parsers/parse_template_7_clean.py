#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–µ—Ä –¥–ª—è –®–∞–±–ª–æ–Ω–∞ 7 (Multiple Routes - 406 –ø—Ä–æ–µ–∫—Ç–æ–≤)

–ê–î–ê–ü–¢–ò–†–û–í–ê–ù –ò–ó TEMPLATE 4 –° –ö–õ–Æ–ß–ï–í–´–ú–ò –ò–ó–ú–ï–ù–ï–ù–ò–Ø–ú–ò:
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ (–Ω–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (1-3, –Ω–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è 4)
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 2+ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–Ω–µ —Ç–æ–ª—å–∫–æ –ñ–î/–ê–í–ò–ê)
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –õ–û–ö–ê–õ–¨–ù–û (–Ω–µ FTP)

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- parse_quantity: int(float(value)) - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 100.0 ‚Üí 100
- –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã —Ç–∏—Ä–∞–∂–µ–π: –±–µ—Ä—ë–º –ü–ï–†–í–û–ï —á–∏—Å–ª–æ
- –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã —Å—Ä–æ–∫–æ–≤: –±–µ—Ä—ë–º –ü–û–°–õ–ï–î–ù–ï–ï —á–∏—Å–ª–æ
"""
import sys
from pathlib import Path
from openpyxl import load_workbook
from datetime import datetime
import re
import hashlib

sys.path.insert(0, str(Path.cwd()))
from database.postgresql_manager import PostgreSQLManager
from sqlalchemy import text


class Template7Parser:
    """
    –ü–∞—Ä—Å–µ—Ä –¥–ª—è –®–∞–±–ª–æ–Ω–∞ 7 (Multiple Routes)
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - 406 –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å 2+ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
    - –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    - Multi-row —Ç–æ–≤–∞—Ä—ã (–¥–æ–ø. —Ç–∏—Ä–∞–∂–∏ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
    """
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ!)
    COLUMN_PATTERNS = {
        'photo': ['—Ñ–æ—Ç–æ', 'photo', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'],
        'name': ['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', 'name', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '—Ç–æ–≤–∞—Ä', 'product'],
        'description': ['—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', 'description', '–æ–ø–∏—Å–∞–Ω–∏–µ', 'spec'],
        'custom': ['–∫–∞—Å—Ç–æ–º', 'custom', '–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è'],
        'quantity': ['—Ç–∏—Ä–∞–∂', 'quantity', 'qty', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'circulation'],
        'sample': ['–æ–±—Ä–∞–∑–µ—Ü', 'sample']
    }
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
    ROUTE_PATTERNS = {
        'sea': ['sea', '–º–æ—Ä–µ', '–º–æ—Ä—Å–∫–æ–π', '–¥–æ–ª–≥–æ–µ –∂–¥', '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä', 'container'],
        'air': ['air', '–∞–≤–∏–∞', '–∞–≤–∏–æ', '–¥–æ–ª–≥–æ–µ –∞–≤–∏–∞'],
        'railway': ['–∂–¥', 'railway', '–∂.–¥', '–∂–µ–ª–µ–∑–Ω–∞—è –¥–æ—Ä–æ–≥–∞'],
        'contract': ['–∫–æ–Ω—Ç—Ä–∞–∫—Ç', 'contract']
    }
    
    def __init__(self):
        self.db = PostgreSQLManager()
        self.storage_dir = Path('storage/images')
        self.storage_dir.mkdir(parents=True, exist_ok=True)
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ (–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞!)
        self.columns = {}
        self.routes = {}
        self.header_row = None
        self.data_start_row = None
    
    def _find_header_and_detect_structure(self, ws):
        """
        –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò –Ω–∞—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: True –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞
        """
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (1-3)
        for row_idx in range(1, 4):
            row_values = [str(cell.value or '').strip().lower() for cell in ws[row_idx]]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            has_name = any(pattern in val for val in row_values for pattern in self.COLUMN_PATTERNS['name'])
            has_quantity = any(pattern in val for val in row_values for pattern in self.COLUMN_PATTERNS['quantity'])
            
            if has_name and has_quantity:
                self.header_row = row_idx
                self.data_start_row = row_idx + 1
                print(f"   üìç –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {row_idx}")
                break
        
        if not self.header_row:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        header_values = [str(cell.value or '').strip() for cell in ws[self.header_row]]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
        for col_idx, header in enumerate(header_values, start=1):
            header_lower = header.lower()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            for col_type, patterns in self.COLUMN_PATTERNS.items():
                if any(pattern in header_lower for pattern in patterns):
                    if col_type not in self.columns:  # –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                        self.columns[col_type] = col_idx
                        print(f"   ‚úì {col_type}: –∫–æ–ª–æ–Ω–∫–∞ {col_idx} ({header})")
            
            # –ú–∞—Ä—à—Ä—É—Ç—ã (–Ω–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞)
            for route_key, patterns in self.ROUTE_PATTERNS.items():
                if any(pattern in header_lower for pattern in patterns):
                    if route_key not in self.routes:
                        self.routes[route_key] = {'columns': [], 'start_col': col_idx}
                        print(f"   üö¢ {route_key}: –∫–æ–ª–æ–Ω–∫–∞ {col_idx} ({header})")
                        
                        # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å–ø—Ä–∞–≤–∞ (–¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞)
                        # –û–±—ã—á–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: [USD, RUB, —Å—Ä–æ –∫, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ]
                        next_route_col = 999
                        for other_route, other_patterns in self.ROUTE_PATTERNS.items():
                            if other_route != route_key:
                                for check_col in range(col_idx + 1, min(col_idx + 10, len(header_values))):
                                    check_header = header_values[check_col].lower() if check_col < len(header_values) else ""
                                    if any(p in check_header for p in other_patterns):
                                        next_route_col = min(next_route_col, check_col + 1)
                                        break
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–ª–æ–Ω–∫—É –∏ –¥–æ 4 —Å–æ—Å–µ–¥–Ω–∏—Ö (–æ–±—ã—á–Ω–æ USD, RUB, —Å—Ä–æ–∫, +1)
                        max_cols = min(col_idx + 5, next_route_col, len(header_values) + 1)
                        for related_col in range(col_idx, max_cols):
                            if related_col <= len(header_values):
                                self.routes[route_key]['columns'].append(related_col)
                        
                        print(f"      ‚îî‚îÄ –ö–æ–ª–æ–Ω–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {self.routes[route_key]['columns']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        has_required = 'name' in self.columns and 'quantity' in self.columns
        has_routes = len(self.routes) >= 2
        
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ: {len(self.columns)} –∫–æ–ª–æ–Ω–æ–∫, {len(self.routes)} –º–∞—Ä—à—Ä—É—Ç–æ–≤")
        
        return has_required and has_routes
    
    def parse_project(self, project_id):
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç"""
        try:
            print(f"\n{'='*80}")
            print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–∞ #{project_id}")
            print(f"{'='*80}")
            
            # –ò—â–µ–º —Ñ–∞–π–ª
            excel_dir = Path('storage/excel_files')
            matching_files = list(excel_dir.glob(f'project_{project_id}_*.xlsx'))
            
            if not matching_files:
                return {'success': False, 'error': 'File not found'}
            
            file_path = matching_files[0]
            print(f"üìÅ –§–∞–π–ª: {file_path.name}")
            
            # –ü–∞—Ä—Å–∏–º
            wb_data = load_workbook(str(file_path), data_only=True)
            wb_images = load_workbook(str(file_path), data_only=False)
            
            ws_data = wb_data.active
            ws_images = wb_images.active
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò
            print("\nüîé –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
            if not self._find_header_and_detect_structure(ws_data):
                wb_data.close()
                wb_images.close()
                return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É Template 7'}
            
            # –ü–æ–ª—É—á–∞–µ–º table_id –∏–∑ –ë–î
            with self.db.get_session() as session:
                result = session.execute(
                    text("SELECT table_id FROM projects WHERE id = :pid"),
                    {'pid': project_id}
                ).fetchone()
                
                if not result:
                    return {'success': False, 'error': 'Project not in DB'}
                
                table_id = result[0]
            
            # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã
            print(f"\nüì¶ –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–∞—á–∞–ª–æ —Å–æ —Å—Ç—Ä–æ–∫–∏ {self.data_start_row})...")
            products = self._parse_products(ws_data, ws_images, project_id, table_id)
            
            wb_data.close()
            wb_images.close()
            
            return {
                'success': True,
                'products': len(products),
                'total_offers': sum(len(p['offers']) for p in products),
                'total_images': sum(len(p['images']) for p in products)
            }
            
        except Exception as e:
            import traceback
            return {'success': False, 'error': str(e), 'traceback': traceback.format_exc()}
    
    def _parse_products(self, ws_data, ws_images, project_id, table_id):
        """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ª–∏—Å—Ç–∞"""
        products = []
        current_product = None
        
        max_row = ws_data.max_row
        
        for row in range(self.data_start_row, max_row + 1):
            name = self._get_cell_value(ws_data, row, self.columns.get('name'))
            quantity = self._get_cell_value(ws_data, row, self.columns.get('quantity'))
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not name and not quantity:
                continue
            
            # –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            if name and len(str(name).strip()) >= 3:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–æ–≤–∞—Ä
                if current_product:
                    self._save_product(current_product, project_id, table_id)
                    products.append(current_product)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                current_product = self._create_product(ws_data, ws_images, row, table_id)
            
            # –ü–∞—Ä—Å–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
            if current_product and quantity:
                offers = self._parse_offers(ws_data, row)
                current_product['offers'].extend(offers)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä
        if current_product:
            self._save_product(current_product, project_id, table_id)
            products.append(current_product)
        
        return products
    
    def _create_product(self, ws_data, ws_images, row, table_id):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–≤–∞—Ä–∞"""
        name = self._get_cell_value(ws_data, row, self.columns.get('name'))
        description = self._get_cell_value(ws_data, row, self.columns.get('description'))
        custom_field = self._get_cell_value(ws_data, row, self.columns.get('custom'))
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—Ä–∞–∑—Ü–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        sample_price_raw = self._get_cell_value(ws_data, row, self.columns.get('sample'))
        sample_price = self._parse_price(sample_price_raw) if sample_price_raw else None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = self._extract_images(ws_images, row, table_id)
        
        return {
            'name': str(name).strip(),
            'description': str(description).strip() if description else None,
            'custom_field': str(custom_field).strip() if custom_field else None,
            'sample_price': str(sample_price) if sample_price else None,
            'sample_delivery_time': None,
            'row_number': row,
            'offers': [],
            'images': images
        }
    
    def _parse_offers(self, ws_data, row):
        """
        –ü–∞—Ä—Å–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –í–°–ï–• –º–∞—Ä—à—Ä—É—Ç–æ–≤
        
        Template 7 –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å: –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        """
        offers = []
        quantity = self._get_cell_value(ws_data, row, self.columns.get('quantity'))
        
        if not quantity:
            return offers
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ö–†–ò–¢–ò–ß–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ Template 4)
        qty = self._parse_quantity(quantity)
        if not qty or qty <= 0 or qty > 1_000_000:
            return offers
        
        # –ü–∞—Ä—Å–∏–º –ö–ê–ñ–î–´–ô –º–∞—Ä—à—Ä—É—Ç
        for route_key, route_data in self.routes.items():
            route_cols = route_data['columns']
            
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ = USD, –≤—Ç–æ—Ä–∞—è = RUB, —Ç—Ä–µ—Ç—å—è = —Å—Ä–æ–∫
            # –ù–æ —ç—Ç–æ –≥–∏–±–∫–æ - –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            price_usd = None
            price_rub = None
            delivery = None
            
            if len(route_cols) >= 1:
                price_usd = self._parse_price(self._get_cell_value(ws_data, row, route_cols[0]))
            if len(route_cols) >= 2:
                price_rub = self._parse_price(self._get_cell_value(ws_data, row, route_cols[1]))
            if len(route_cols) >= 3:
                delivery = self._parse_delivery_time(self._get_cell_value(ws_data, row, route_cols[2]))
            
            # –°–æ–∑–¥–∞—ë–º –æ—Ñ—Ñ–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–µ–Ω–∞
            if price_usd or price_rub:
                # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω (–∫–∞–∫ –≤ Template 4)
                if price_usd and price_usd >= 10_000:
                    price_usd = None
                if price_rub and price_rub >= 1_000_000:
                    price_rub = None
                
                if price_usd or price_rub:  # –µ—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    offers.append({
                        'quantity': qty,
                        'price_usd': f"{price_usd:.2f}" if price_usd else None,
                        'price_rub': f"{price_rub:.2f}" if price_rub else None,
                        'route': route_key.upper(),  # 'SEA', 'AIR', 'RAILWAY', 'CONTRACT'
                        'delivery_time_days': delivery if delivery and delivery <= 365 else 60
                    })
        
        return offers
    
    def _extract_images(self, ws_images, row, table_id):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Excel (blob) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –õ–û–ö–ê–õ–¨–ù–û
        
        –í –ë–î –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ü–£–¢–¨ –∫ –±—É–¥—É—â–µ–º—É –æ–±–ª–∞—á–Ω–æ–º—É —Ñ–∞–π–ª—É (–¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ S3)
        
        –ü–†–ê–í–ò–õ–¨–ù–´–ô –°–ü–û–°–û–ë (–∫–∞–∫ –≤ Template 4): image.anchor._from.row/col
        """
        images = []
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ª–∏—Å—Ç–∞
            if not hasattr(ws_images, '_images'):
                return images
            
            img_index = 0
            for image in ws_images._images:
                try:
                    # –ü–†–ê–í–ò–õ–¨–ù–´–ô –°–ü–û–°–û–ë: –∏—Å–ø–æ–ª—å–∑—É–µ–º anchor._from
                    if not hasattr(image, 'anchor') or not hasattr(image.anchor, '_from'):
                        continue
                    
                    img_row = image.anchor._from.row + 1  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ openpyxl –∏–Ω–¥–µ–∫—Å—ã —Å 0
                    img_col = image.anchor._from.col + 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
                    if img_row != row:
                        continue
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –∏–º—è —Ñ–∞–π–ª–∞
                    col_letter = chr(64 + img_col)  # 1=A, 2=B, ...
                    cell_pos = f"{col_letter}{row}"
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ blob
                    img_data = image._data()
                    img_hash = hashlib.md5(img_data).hexdigest()[:8]
                    
                    # –ò–º—è —Ñ–∞–π–ª–∞ (—Å –∏–Ω–¥–µ–∫—Å–æ–º –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫–µ)
                    if img_index == 0:
                        filename = f"{table_id}_{cell_pos}_{img_hash}.png"
                    else:
                        filename = f"{table_id}_{cell_pos}_{img_index}_{img_hash}.png"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –õ–û–ö–ê–õ–¨–ù–û –≤ storage/images/
                    file_path = self.storage_dir / filename
                    with open(file_path, 'wb') as f:
                        f.write(img_data)
                    
                    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í –ë–î —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –ë–£–î–£–©–ï–ú–£ –æ–±–ª–∞—á–Ω–æ–º—É —Ñ–∞–π–ª—É
                    cloud_path = f"73d16f7545b3-promogoods/images/{filename}"
                    
                    is_main = len(images) == 0  # –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ = –≥–ª–∞–≤–Ω–æ–µ
                    images.append({
                        'filename': filename,
                        'cloud_path': cloud_path,
                        'position': cell_pos,
                        'is_main': is_main
                    })
                    
                    img_index += 1
                    
                except Exception as img_err:
                    print(f"      ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_err}")
                    import traceback
                    traceback.print_exc()
                    continue
                    
        except Exception as e:
            print(f"      ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            import traceback
            traceback.print_exc()
        
        return images
    
    def _save_product(self, product, project_id, table_id):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –ë–î (–ª–æ–≥–∏–∫–∞ Template 4)
        """
        try:
            with self.db.get_session() as session:
                # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä (—Å created_at!)
                product_result = session.execute(
                    text("""
                        INSERT INTO products (
                            project_id, name, description, custom_field,
                            sample_price, sample_delivery_time, row_number,
                            created_at, updated_at
                        )
                        VALUES (
                            :project_id, :name, :description, :custom_field,
                            :sample_price, :sample_delivery_time, :row_number,
                            NOW(), NOW()
                        )
                        RETURNING id
                    """),
                    {
                        'project_id': project_id,
                        'name': product['name'],
                        'description': product['description'],
                        'custom_field': product['custom_field'],
                        'sample_price': product['sample_price'],
                        'sample_delivery_time': product['sample_delivery_time'],
                        'row_number': product['row_number']
                    }
                )
                product_id = product_result.fetchone()[0]
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Ñ—Ñ–µ—Ä—ã
                for offer in product['offers']:
                    session.execute(
                        text("""
                            INSERT INTO price_offers (
                                product_id, quantity, price_usd, price_rub,
                                route, delivery_time_days,
                                created_at, updated_at
                            )
                            VALUES (
                                :product_id, :quantity, :price_usd, :price_rub,
                                :route, :delivery_time_days,
                                NOW(), NOW()
                            )
                        """),
                        {
                            'product_id': product_id,
                            'quantity': offer['quantity'],
                            'price_usd': offer['price_usd'],
                            'price_rub': offer['price_rub'],
                            'route': offer['route'],
                            'delivery_time_days': offer['delivery_time_days']
                        }
                    )
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                for img in product['images']:
                    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: 
                    # image_filename = —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
                    # image_url = –ø–æ–ª–Ω—ã–π URL –∫ –æ–±–ª–∞—á–Ω–æ–º—É —Ñ–∞–π–ª—É (–¥–ª—è –±—É–¥—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ S3)
                    full_s3_url = f"https://s3.ru1.storage.beget.cloud/{img['cloud_path']}"
                    
                    session.execute(
                        text("""
                            INSERT INTO product_images (
                                product_id, table_id, cell_position, image_filename,
                                image_url, is_main_image,
                                created_at, updated_at
                            )
                            VALUES (
                                :product_id, :table_id, :cell_position, :image_filename,
                                :image_url, :is_main_image,
                                NOW(), NOW()
                            )
                        """),
                        {
                            'product_id': product_id,
                            'table_id': table_id,
                            'cell_position': img['position'],
                            'image_filename': img['filename'],  # —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
                            'image_url': full_s3_url,  # –ø–æ–ª–Ω—ã–π URL –Ω–∞ S3 (–¥–ª—è –±—É–¥—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏)
                            'is_main_image': img['is_main']
                        }
                    )
                
                session.commit()
                print(f"   ‚úÖ –¢–æ–≤–∞—Ä #{product_id}: {product['name']} ({len(product['offers'])} –æ—Ñ—Ñ–µ—Ä–æ–≤, {len(product['images'])} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
    
    # ========================================================================
    # –ü–†–û–í–ï–†–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –ü–ê–†–°–ò–ù–ì–ê –ò–ó TEMPLATE 4
    # ========================================================================
    
    def _get_cell_value(self, ws, row, col):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏"""
        if not col:
            return None
        try:
            return ws.cell(row=row, column=col).value
        except:
            return None
    
    def _parse_quantity(self, value):
        """
        –ü–∞—Ä—Å–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ü–†–û–í–ï–†–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê TEMPLATE 4)
        
        üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê x10:
        "100.0" ‚Üí 100 (–ù–ï 1000!)
        """
        if not value:
            return None
        
        val_str = str(value).strip().replace(' ', '')
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ñ–∏—Å - –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ (–ò–ù–¢–ï–†–í–ê–õ)
        if '-' in val_str:
            val_str = val_str.split('-')[0].strip()
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ float (–¥–ª—è "10000.0" ‚Üí 10000)
        try:
            return int(float(val_str))
        except (ValueError, TypeError):
            return None
    
    def _parse_price(self, value):
        """–ü–∞—Ä—Å–∏—Ç —Ü–µ–Ω—É (–ü–†–û–í–ï–†–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê TEMPLATE 4)"""
        if not value:
            return None
        
        try:
            val_str = str(value).strip()
            val_str = val_str.replace(',', '.').replace(' ', '')
            val_str = ''.join(c for c in val_str if c.isdigit() or c == '.')
            
            if val_str:
                return float(val_str)
        except:
            pass
        
        return None
    
    def _parse_delivery_time(self, value):
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ (–ü–†–û–í–ï–†–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê TEMPLATE 4)
        
        –ò–ù–¢–ï–†–í–ê–õ: –±–µ—Ä—ë–º –ü–û–°–õ–ï–î–ù–ï–ï —á–∏—Å–ª–æ (–º–∞–∫—Å–∏–º—É–º)
        """
        if not value:
            return None
        
        try:
            val_str = str(value).strip()
            
            # –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω - –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º (—Ö—É–∂–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞)
            if '-' in val_str:
                val_str = val_str.split('-')[-1].strip()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–∏—Ñ—Ä—ã
            digits = ''.join(filter(str.isdigit, val_str))
            
            if digits:
                days = int(digits)
                return days if days <= 365 else None
        except:
            pass
        
        return None


# ========================================================================
# –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–£–°–ö
# ========================================================================

if __name__ == '__main__':
    import json
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ Template 7 –ø—Ä–æ–µ–∫—Ç–æ–≤
    with open('TEMPLATE7_FILTERED_RESULTS.json', 'r', encoding='utf-8') as f:
        template7_data = json.load(f)
    
    # –≠—Ç–æ —Å–ø–∏—Å–æ–∫ project_id (—Å—Ç—Ä–æ–∫–∏)
    project_ids = template7_data.get('template7_projects', [])
    
    print(f"\n{'='*80}")
    print(f"üß™ –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–£–°–ö –ü–ê–†–°–ï–†–ê TEMPLATE 7")
    print(f"{'='*80}")
    print(f"–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ Template 7: {len(project_ids)}")
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–æ–µ–∫—Ç–æ–≤...")
    
    parser = Template7Parser()
    results = []
    
    for i, project_id in enumerate(project_ids[:10], 1):
        project_id = int(project_id)
        result = parser.parse_project(project_id)
        results.append({
            'project_id': project_id,
            'result': result
        })
        
        # –û—á–∏—â–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        parser.columns = {}
        parser.routes = {}
        parser.header_row = None
        parser.data_start_row = None
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*80}")
    print(f"üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*80}")
    
    successful = [r for r in results if r['result']['success']]
    failed = [r for r in results if not r['result']['success']]
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(successful)}/10")
    print(f"‚ùå –û—à–∏–±–∫–∏: {len(failed)}/10")
    
    if successful:
        print(f"\nüì¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö:")
        total_products = sum(r['result']['products'] for r in successful)
        total_offers = sum(r['result']['total_offers'] for r in successful)
        total_images = sum(r['result']['total_images'] for r in successful)
        print(f"   –¢–æ–≤–∞—Ä–æ–≤: {total_products}")
        print(f"   –û—Ñ—Ñ–µ—Ä–æ–≤: {total_offers}")
        print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
    
    if failed:
        print(f"\n‚ùå –û—à–∏–±–∫–∏:")
        for r in failed:
            print(f"   –ü—Ä–æ–µ–∫—Ç #{r['project_id']}: {r['result']['error']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('TEMPLATE7_TEST_RESULTS.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ TEMPLATE7_TEST_RESULTS.json")
    print(f"{'='*80}\n")

