"""
üîê AUTH API ROUTER
–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

from fastapi import APIRouter, HTTPException, Response, Request
from fastapi.responses import RedirectResponse, FileResponse
from pydantic import BaseModel
import secrets
import sys
from pathlib import Path

router = APIRouter(tags=["auth"])

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
active_sessions = set()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
AUTH_USERNAME = "admin"
AUTH_PASSWORD = "admin123"

def load_auth_config():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
    global AUTH_USERNAME, AUTH_PASSWORD
    try:
        config_dir = Path(__file__).parent.parent.parent / "config"
        if str(config_dir) not in sys.path:
            sys.path.insert(0, str(config_dir))
        
        from config_loader import get_app_config
        app_config = get_app_config()
        
        AUTH_USERNAME = app_config.auth.username
        AUTH_PASSWORD = app_config.auth.password
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
load_auth_config()

def create_session_token() -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏"""
    token = secrets.token_urlsafe(32)
    active_sessions.add(token)
    return token

def verify_session(session_token: str = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
    return session_token and session_token in active_sessions

class LoginRequest(BaseModel):
    username: str
    password: str

@router.get("/login")
async def login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞"""
    return FileResponse('login.html')

@router.post("/api/login")
async def login(request: LoginRequest, response: Response):
    """
    –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    """
    if request.username == AUTH_USERNAME and request.password == AUTH_PASSWORD:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session_token = create_session_token()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie
        response.set_cookie(
            key="session_token",
            value=session_token,
            httponly=True,
            max_age=86400,  # 24 —á–∞—Å–∞
            samesite="lax"
        )
        
        return {
            "success": True,
            "message": "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥",
            "redirect": "/"
        }
    else:
        raise HTTPException(
            status_code=401,
            detail="–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
        )

@router.post("/api/logout")
async def logout(response: Response, request: Request):
    """
    –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    """
    session_token = request.cookies.get("session_token")
    
    # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
    if session_token and session_token in active_sessions:
        active_sessions.remove(session_token)
    
    # –£–¥–∞–ª—è–µ–º cookie
    response.delete_cookie("session_token")
    
    return {"success": True, "message": "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω"}

@router.get("/api/auth/status")
async def auth_status(request: Request):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    session_token = request.cookies.get("session_token")
    is_authenticated = verify_session(session_token)
    
    return {
        "authenticated": is_authenticated,
        "username": AUTH_USERNAME if is_authenticated else None
    }

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
__all__ = ['router', 'verify_session', 'active_sessions']
