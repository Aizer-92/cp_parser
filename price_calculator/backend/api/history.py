"""
üìö HISTORY API ROUTER
–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞—Å—á–µ—Ç–æ–≤
"""

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
from datetime import datetime
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
root_dir = Path(__file__).parent.parent.parent
if str(root_dir) not in sys.path:
    sys.path.insert(0, str(root_dir))

from database import get_calculation_history, save_calculation_to_db, update_calculation

router = APIRouter(prefix="/api", tags=["history"])

class CalculationHistoryItem(BaseModel):
    id: int
    product_name: str
    unit_price_yuan: float
    weight_per_unit_kg: float
    quantity: int
    cost_per_unit_rub: float
    sale_price_per_unit_rub: float
    profit_per_unit_rub: float
    total_cost_rub: float
    total_sale_price_rub: float
    total_profit_rub: float
    delivery_type: str
    markup: float
    is_precise_calculation: bool
    created_at: str
    category: Optional[str] = None
    tnved_code: Optional[str] = None
    duty_rate: Optional[str] = None
    vat_rate: Optional[str] = None

@router.get("/history", response_model=List[CalculationHistoryItem])
async def get_history():
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—á–µ—Ç–æ–≤
    """
    try:
        history = get_calculation_history()
        return history
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

@router.delete("/history/{calculation_id}")
async def delete_calculation(calculation_id: int):
    """
    –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—á–µ—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
        from database import get_database_connection
        
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        
        if db_type == "postgresql":
            cursor.execute("DELETE FROM calculations WHERE id = %s", (calculation_id,))
        else:
            cursor.execute("DELETE FROM calculations WHERE id = ?", (calculation_id,))
        
        conn.commit()
        cursor.close()
        conn.close()
        
        return {"success": True, "message": "–†–∞—Å—á–µ—Ç —É–¥–∞–ª–µ–Ω"}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")

@router.put("/history/{calculation_id}")
async def update_calculation_endpoint(calculation_id: int, data: Dict[str, Any]):
    """
    –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏
    """
    try:
        update_calculation(calculation_id, data)
        return {"success": True, "message": "–†–∞—Å—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω"}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
