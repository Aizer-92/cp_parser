"""
üì¶ CATEGORIES API ROUTER
–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ (CRUD)
"""

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
root_dir = Path(__file__).parent.parent.parent
if str(root_dir) not in sys.path:
    sys.path.insert(0, str(root_dir))

from database import get_database_connection, upsert_category

router = APIRouter(prefix="/api/categories", tags=["categories"])

@router.get("")
async def list_categories():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    """
    try:
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        
        if db_type == "postgres":
            cursor.execute("SELECT DISTINCT ON (id) id, data FROM categories ORDER BY id")
        else:
            cursor.execute("SELECT id, data FROM categories GROUP BY id ORDER BY id")
        
        rows = cursor.fetchall()
        cursor.close()
        
        categories = []
        for row in rows:
            import json
            
            # –î–ª—è PostgreSQL row —ç—Ç–æ dict, –¥–ª—è SQLite —ç—Ç–æ tuple
            if db_type == "postgres":
                category_id = row['id']
                category_json = row['data']
            else:
                category_id = row[0]
                category_json = row[1]
            
            # –ü–∞—Ä—Å–∏–º JSON
            if isinstance(category_json, str):
                category_data = json.loads(category_json)
            elif isinstance(category_json, dict):
                # PostgreSQL JSONB –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict –Ω–∞–ø—Ä—è–º—É—é - —Å–æ–∑–¥–∞–µ–º –ù–û–í–´–ô dict
                category_data = dict(category_json)
            else:
                category_data = dict(category_json) if category_json else {}
            
            # üî• –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∑–¥–∞–µ–º –ù–û–í–´–ô dict —Å ID –≤ –Ω–∞—á–∞–ª–µ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
            result = {
                'id': category_id,
                **category_data
            }
            
            categories.append(result)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        return categories
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}")

@router.get("/names")
async def get_category_names():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è V2)
    """
    try:
        import yaml
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ YAML (–ø—Ä–æ—â–µ –∏ –±—ã—Å—Ç—Ä–µ–µ)
        categories_path = root_dir / "config" / "categories.yaml"
        
        with open(categories_path, 'r', encoding='utf-8') as f:
            categories_data = yaml.safe_load(f)
        
        categories = categories_data.get('categories', [])
        
        if not categories:
            print("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—É—Å—Ç—ã–µ")
            return []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º
        category_names = []
        for cat in categories:
            name = cat.get('category', '')
            material = cat.get('material', '')
            
            if not name:
                continue
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if material:
                display_name = f"{name} ({material})"
            else:
                display_name = name
            
            category_names.append({
                'value': name,  # –†–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API
                'label': display_name  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            })
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(category_names)}")
        return sorted(category_names, key=lambda x: x['label'])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        import traceback
        traceback.print_exc()
        return []

@router.get("/statistics")
async def get_categories_statistics():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ü–µ–Ω–∞–º –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    """
    try:
        from database import get_database_connection
        
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ü–µ–Ω–∞–º –≤ —é–∞–Ω—è—Ö –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if db_type == "postgres":
            query = """
                SELECT 
                    category,
                    COUNT(*) as count,
                    MIN(price_yuan) as min_price,
                    MAX(price_yuan) as max_price,
                    AVG(price_yuan) as avg_price,
                    PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY price_yuan) as median_price
                FROM calculations
                WHERE category IS NOT NULL AND price_yuan > 0
                GROUP BY category
                ORDER BY count DESC
            """
        else:
            # SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç PERCENTILE_CONT
            query = """
                SELECT 
                    category,
                    COUNT(*) as count,
                    MIN(price_yuan) as min_price,
                    MAX(price_yuan) as max_price,
                    AVG(price_yuan) as avg_price
                FROM calculations
                WHERE category IS NOT NULL AND price_yuan > 0
                GROUP BY category
                ORDER BY count DESC
            """
        
        cursor.execute(query)
        rows = cursor.fetchall()
        
        statistics = []
        for row in rows:
            if db_type == "postgres":
                if hasattr(row, 'keys'):
                    stat = dict(row)
                else:
                    columns = [desc[0] for desc in cursor.description]
                    stat = dict(zip(columns, row))
            else:
                columns = [desc[0] for desc in cursor.description]
                stat = dict(zip(columns, row))
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
            statistics.append({
                'category': stat['category'],
                'count': int(stat['count']) if stat['count'] else 0,
                'min_price': float(stat['min_price']) if stat.get('min_price') else 0,
                'max_price': float(stat['max_price']) if stat.get('max_price') else 0,
                'avg_price': float(stat['avg_price']) if stat.get('avg_price') else 0,
                'median_price': float(stat['median_price']) if stat.get('median_price') else None
            })
        
        cursor.close()
        conn.close()
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {len(statistics)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        return statistics
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        import traceback
        traceback.print_exc()
        return []

@router.get("/{category_id}")
async def get_category(category_id: int):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
    """
    try:
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        
        if db_type == "postgres":
            cursor.execute("SELECT id, data FROM categories WHERE id = %s", (category_id,))
        else:
            cursor.execute("SELECT id, data FROM categories WHERE id = ?", (category_id,))
        
        row = cursor.fetchone()
        cursor.close()
        
        if not row:
            raise HTTPException(status_code=404, detail="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        import json
        category_data = json.loads(row[1] if isinstance(row[1], str) else row[1])
        category_data['id'] = row[0]
        
        return category_data
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")

@router.post("")
async def create_category(category: Dict[str, Any]):
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —á–µ—Ä–µ–∑ upsert_category
        category_id = upsert_category(category)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å ID
        category['id'] = category_id
        
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {category.get('category')} (ID: {category_id})")
        return category
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")

@router.put("/{category_id}")
async def update_category(category_id: int, category: Dict[str, Any]):
    """
    –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        
        if db_type == "postgres":
            cursor.execute("SELECT id FROM categories WHERE id = %s", (category_id,))
        else:
            cursor.execute("SELECT id FROM categories WHERE id = ?", (category_id,))
        
        if not cursor.fetchone():
            cursor.close()
            raise HTTPException(status_code=404, detail="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        import json
        
        if db_type == "postgres":
            cursor.execute(
                "UPDATE categories SET data = %s WHERE id = %s",
                (json.dumps(category), category_id)
            )
        else:
            cursor.execute(
                "UPDATE categories SET data = ? WHERE id = ?",
                (json.dumps(category), category_id)
            )
        
        conn.commit()
        cursor.close()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category['id'] = category_id
        
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {category.get('category')} (ID: {category_id})")
        return category
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")

@router.delete("/{category_id}")
async def delete_category(category_id: int):
    """
    –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    """
    try:
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        if db_type == "postgres":
            cursor.execute("SELECT id FROM categories WHERE id = %s", (category_id,))
        else:
            cursor.execute("SELECT id FROM categories WHERE id = ?", (category_id,))
        
        if not cursor.fetchone():
            cursor.close()
            raise HTTPException(status_code=404, detail="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –£–¥–∞–ª—è–µ–º
        if db_type == "postgres":
            cursor.execute("DELETE FROM categories WHERE id = %s", (category_id,))
        else:
            cursor.execute("DELETE FROM categories WHERE id = ?", (category_id,))
        
        conn.commit()
        cursor.close()
        
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞ (ID: {category_id})")
        return {"success": True, "message": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞"}
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")