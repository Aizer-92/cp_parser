"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã V3 API

–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:
1. Factory
2. Position
3. Calculation
4. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã

–ó–∞–ø—É—Å–∫:
    python3 test_v3_api.py
"""
import sys
from decimal import Decimal
from sqlalchemy.orm import Session

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, '.')

from models_v3 import get_db, init_db, SessionLocal
from services_v3 import (
    FactoryService,
    PositionService,
    CalculationService,
    RecalculationService
)


def test_v3_api():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ V3 API —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï V3 API")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î (—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    print("\nüì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    db: Session = SessionLocal()
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É
        print("\n" + "=" * 60)
        print("1Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –§–ê–ë–†–ò–ö–ò")
        print("=" * 60)
        
        factory_service = FactoryService(db)
        
        factory_data = {
            'name': '–¢–µ—Å—Ç–æ–≤–∞—è —Ñ–∞–±—Ä–∏–∫–∞ —Ñ—É—Ç–±–æ–ª–æ–∫',
            'contact': 'https://wechat.com/test_factory',
            'comment': '–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è V3 API',
            'default_sample_time_days': 7,
            'default_production_time_days': 15,
            'default_sample_price_yuan': Decimal('50.00')
        }
        
        factory, created = factory_service.get_or_create(
            name=factory_data['name'],
            **{k: v for k, v in factory_data.items() if k != 'name'}
        )
        
        if created:
            print(f"‚úÖ –§–∞–±—Ä–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID={factory.id}, Name='{factory.name}'")
        else:
            print(f"‚ÑπÔ∏è –§–∞–±—Ä–∏–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ID={factory.id}, Name='{factory.name}'")
        
        print(f"   Contact: {factory.contact}")
        print(f"   Default sample time: {factory.default_sample_time_days} –¥–Ω–µ–π")
        print(f"   Default production time: {factory.default_production_time_days} –¥–Ω–µ–π")
        
        # 2. –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        print("\n" + "=" * 60)
        print("2Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –ü–û–ó–ò–¶–ò–ò")
        print("=" * 60)
        
        position_service = PositionService(db)
        
        position_data = {
            'name': '–§—É—Ç–±–æ–ª–∫–∞ —Ö–ª–æ–ø–∫–æ–≤–∞—è —Å –ø—Ä–∏–Ω—Ç–æ–º',
            'description': '–•–ª–æ–ø–∫–æ–≤–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ 180–≥/–º¬≤, —Ä–∞–∑–º XS-3XL, –ø—Ä–∏–Ω—Ç —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è',
            'category': '—Ñ—É—Ç–±–æ–ª–∫–∞',
            'design_files_urls': [
                'https://drive.google.com/design1.ai',
                'https://drive.google.com/design2.pdf'
            ],
            'custom_fields': {
                'material': '—Ö–ª–æ–ø–æ–∫ 100%',
                'weight': '180 –≥/–º¬≤',
                'colors': ['–±–µ–ª—ã–π', '—á–µ—Ä–Ω—ã–π', '—Å–µ—Ä—ã–π'],
                'print_type': '—à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è'
            }
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–æ–∑–∏—Ü–∏—è
        existing_positions = position_service.search(position_data['name'], limit=1)
        if existing_positions:
            position = existing_positions[0]
            print(f"‚ÑπÔ∏è –ü–æ–∑–∏—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ID={position.id}, Name='{position.name}'")
        else:
            position = position_service.create(position_data)
            print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID={position.id}, Name='{position.name}'")
        
        print(f"   Category: {position.category}")
        print(f"   Description: {position.description}")
        print(f"   Design files: {len(position.design_files_urls or [])} —Ñ–∞–π–ª–æ–≤")
        print(f"   Custom fields: {list((position.custom_fields or {}).keys())}")
        
        # 3. –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—á—ë—Ç
        print("\n" + "=" * 60)
        print("3Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –†–ê–°–ß–Å–¢–ê")
        print("=" * 60)
        
        calculation_service = CalculationService(db)
        
        calculation_data = {
            'position_id': position.id,
            'factory_id': factory.id,
            'sample_time_days': 7,
            'production_time_days': 15,
            'sample_price_yuan': Decimal('50.00'),
            'factory_comment': '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ V3 API',
            'quantity': 1000,
            'price_yuan': Decimal('15.50'),
            'calculation_type': 'quick',
            'weight_kg': Decimal('0.200')
        }
        
        calculation = calculation_service.create(calculation_data)
        print(f"‚úÖ –†–∞—Å—á—ë—Ç —Å–æ–∑–¥–∞–Ω: ID={calculation.id}")
        print(f"   Position: {position.name}")
        print(f"   Factory: {factory.name}")
        print(f"   Quantity: {calculation.quantity} —à—Ç")
        print(f"   Price: {calculation.price_yuan} ¬•")
        print(f"   Weight: {calculation.weight_kg} –∫–≥")
        print(f"   Type: {calculation.calculation_type}")
        
        # 4. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        print("\n" + "=" * 60)
        print("4Ô∏è‚É£ –ü–ï–†–ï–°–ß–Å–¢ –ú–ê–†–®–†–£–¢–û–í –õ–û–ì–ò–°–¢–ò–ö–ò")
        print("=" * 60)
        
        recalc_service = RecalculationService(db)
        
        try:
            routes = recalc_service.recalculate_routes(
                calculation_id=calculation.id,
                category='—Ñ—É—Ç–±–æ–ª–∫–∞'
            )
            
            print(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã: {len(routes)} –º–∞—Ä—à—Ä—É—Ç–æ–≤")
            print()
            
            for route in routes:
                print(f"üìç {route.route_name}:")
                print(f"   –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {route.cost_price_rub or 0:.2f} ‚ÇΩ / {route.cost_price_usd or 0:.2f} $")
                print(f"   –ü—Ä–æ–¥–∞–∂–Ω–∞—è —Ü–µ–Ω–∞: {route.sale_price_rub or 0:.2f} ‚ÇΩ / {route.sale_price_usd or 0:.2f} $")
                print(f"   –ü—Ä–∏–±—ã–ª—å: {route.profit_rub or 0:.2f} ‚ÇΩ / {route.profit_usd or 0:.2f} $")
                print(f"   –û–±—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {route.total_cost_rub or 0:.2f} ‚ÇΩ")
                print()
            
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á—ë—Ç–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (ValueError): {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á—ë—Ç–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (Exception): {e}")
            print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            traceback.print_exc()
        
        # 5. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 60)
        
        total_factories = factory_service.count()
        total_positions = position_service.count()
        total_calculations = calculation_service.count()
        
        print(f"–§–∞–±—Ä–∏–∫ –≤ –ë–î: {total_factories}")
        print(f"–ü–æ–∑–∏—Ü–∏–π –≤ –ë–î: {total_positions}")
        print(f"–†–∞—Å—á—ë—Ç–æ–≤ –≤ –ë–î: {total_calculations}")
        
        print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        
        return {
            'factory_id': factory.id,
            'position_id': position.id,
            'calculation_id': calculation.id,
            'routes_count': len(routes) if 'routes' in locals() else 0
        }
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return None
    finally:
        db.close()


if __name__ == "__main__":
    result = test_v3_api()
    
    if result:
        print("\nüéâ V3 API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print(f"   Factory ID: {result['factory_id']}")
        print(f"   Position ID: {result['position_id']}")
        print(f"   Calculation ID: {result['calculation_id']}")
        print(f"   Routes calculated: {result['routes_count']}")
    else:
        print("\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ!")
        sys.exit(1)

