#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ Railway PostgreSQL –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway –ë–î.
"""

import os
import json
from typing import List, Dict, Any
from models.category import Category, CategoryRequirements

# Railway database credentials
RAILWAY_CONFIG = {
    'host': 'gondola.proxy.rlwy.net',
    'port': 13805,
    'user': 'postgres',
    'password': 'JETlvQuqWYZXRtltmiCIqXPibyPONZAS',
    'database': 'railway'
}


def connect_to_railway():
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Railway PostgreSQL"""
    try:
        import psycopg2
        from psycopg2.extras import RealDictCursor
        
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway PostgreSQL...")
        conn = psycopg2.connect(
            host=RAILWAY_CONFIG['host'],
            port=RAILWAY_CONFIG['port'],
            user=RAILWAY_CONFIG['user'],
            password=RAILWAY_CONFIG['password'],
            database=RAILWAY_CONFIG['database'],
            cursor_factory=RealDictCursor
        )
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Railway")
        return conn
        
    except ImportError:
        print("‚ùå psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install psycopg2-binary")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway: {e}")
        return None


def load_categories_from_railway(conn) -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Railway PostgreSQL"""
    cursor = conn.cursor()
    
    try:
        cursor.execute('SELECT data FROM categories ORDER BY category')
        rows = cursor.fetchall()
        
        categories = []
        for row in rows:
            raw = row['data']
            
            # JSONB –≤ Postgres –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ dict
            if isinstance(raw, dict):
                categories.append(raw)
            elif isinstance(raw, str):
                try:
                    categories.append(json.loads(raw))
                except json.JSONDecodeError as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    continue
        
        print(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ Railway")
        return categories
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        import traceback
        traceback.print_exc()
        return []


def migrate_category_data(cat_data: Dict[str, Any]) -> Category:
    """
    –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Railway –≤ –Ω–æ–≤—ã–π Category.
    –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ from_dict
    category = Category.from_dict(cat_data)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
    if category.name == "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è":
        category.requirements.requires_logistics_rate = True
        print(f"  üÜï '{category.name}' - –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∞—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞")
    
    return category


def save_migrated_categories(categories: List[Category], output_file: str = 'config/categories_from_railway.json'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    data = {
        'version': '2.0',
        'source': 'Railway PostgreSQL',
        'description': 'Categories migrated from Railway production database',
        'total_categories': len(categories),
        'categories': [cat.to_dict() for cat in categories]
    }
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ {output_file}")


def generate_comparison_report(railway_cats: List[Category], local_file: str = 'config/categories_migrated.json'):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –æ —Ä–∞–∑–ª–∏—á–∏—è—Ö –º–µ–∂–¥—É Railway –∏ –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    report = """
# –û—Ç—á—ë—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ Railway

## –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
- **Railway PostgreSQL** (Production database)
- Host: gondola.proxy.rlwy.net:13805
- Database: railway

"""
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    try:
        with open(local_file, 'r', encoding='utf-8') as f:
            local_data = json.load(f)
            local_count = len(local_data.get('categories', []))
        
        report += f"""
## –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

| –ü–∞—Ä–∞–º–µ—Ç—Ä | Railway | –õ–æ–∫–∞–ª—å–Ω–æ |
|----------|---------|----------|
| –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π | {len(railway_cats)} | {local_count} |
| –†–∞–∑–Ω–∏—Ü–∞ | {len(railway_cats) - local_count:+d} | |

"""
    except FileNotFoundError:
        report += "\n*–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*\n\n"
    
    report += f"""
## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Railway –∫–∞—Ç–µ–≥–æ—Ä–∏–π

- **–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:** {len(railway_cats)}
- **–¢—Ä–µ–±—É—é—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:** {sum(1 for c in railway_cats if c.needs_custom_params())}
- **–° –±–∞–∑–æ–≤—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏:** {sum(1 for c in railway_cats if c.rail_base and c.rail_base > 0)}
- **–° –ø–æ—à–ª–∏–Ω–∞–º–∏:** {sum(1 for c in railway_cats if c.duty_rate is not None)}

## –ö–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

"""
    
    for cat in railway_cats:
        if cat.needs_custom_params():
            report += f"""
### {cat.name}
- –ú–∞—Ç–µ—Ä–∏–∞–ª: {cat.material[:50]}{'...' if len(cat.material) > 50 else ''}
- –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏: rail={cat.rail_base}, air={cat.air_base}
- –¢—Ä–µ–±—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(cat.get_required_params_names())}
"""
    
    report += """
## –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

"""
    
    test_categories = ['–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', '—Å—É–º–∫–∞', '–§—É—Ç–±–æ–ª–∫–∏', '–ë–ª–æ–∫–Ω–æ—Ç']
    for cat_name in test_categories:
        cat = next((c for c in railway_cats if c.name == cat_name), None)
        if cat:
            report += f"""
### {cat.name}
- ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤ Railway
- –ú–∞—Ç–µ—Ä–∏–∞–ª: {cat.material if cat.material else '–ù–µ —É–∫–∞–∑–∞–Ω'}
- –°—Ç–∞–≤–∫–∏: rail={cat.rail_base}, air={cat.air_base}
- –ü–æ—à–ª–∏–Ω–∞: {cat.duty_rate}%, –ù–î–°: {cat.vat_rate}%
- –¢—Ä–µ–±—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {'–î–∞' if cat.needs_custom_params() else '–ù–µ—Ç'}
"""
        else:
            report += f"\n### {cat_name}\n- ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Railway\n"
    
    report += """
## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

1. ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Railway –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã
2. ‚úÖ –í—Å–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ production —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
3. üìù –û–±–Ω–æ–≤–∏—Ç—å price_calculator.py –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
4. üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î —Å Railway –¥–∞–Ω–Ω—ã–º–∏

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å categories_from_railway.json
2. –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ price_calculator.py
3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Category.from_dict() –¥–ª—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å Railway –¥–∞–Ω–Ω—ã–º–∏
"""
    
    return report


def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ Railway"""
    print("="*60)
    print("üöÄ –ú–ò–ì–†–ê–¶–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô –ò–ó RAILWAY")
    print("="*60)
    
    # 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Railway
    conn = connect_to_railway()
    if not conn:
        print("\n‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Railway")
        return 1
    
    try:
        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Railway
        railway_cats_data = load_categories_from_railway(conn)
        if not railway_cats_data:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Railway")
            return 1
        
        # 3. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        print("\nüîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç...")
        migrated_categories = []
        stats = {
            'total': 0,
            'success': 0,
            'needs_custom_params': 0,
            'errors': 0
        }
        
        for cat_data in railway_cats_data:
            stats['total'] += 1
            cat_name = cat_data.get('category', 'UNKNOWN')
            
            try:
                category = migrate_category_data(cat_data)
                migrated_categories.append(category)
                stats['success'] += 1
                
                if category.needs_custom_params():
                    stats['needs_custom_params'] += 1
                    print(f"  ‚öôÔ∏è  {category.name} - —Ç—Ä–µ–±—É–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                
            except Exception as e:
                stats['errors'] += 1
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ '{cat_name}': {e}")
                import traceback
                traceback.print_exc()
        
        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        output_file = 'config/categories_from_railway.json'
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ {output_file}...")
        save_migrated_categories(migrated_categories, output_file)
        
        # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print(f"  –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {stats['total']}")
        print(f"  –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['success']}")
        print(f"  –¢—Ä–µ–±—É—é—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {stats['needs_custom_params']}")
        print(f"  –û—à–∏–±–æ–∫: {stats['errors']}")
        
        # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
        
        test_names = ['–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', '—Å—É–º–∫–∞', '–§—É—Ç–±–æ–ª–∫–∏', '–ë–ª–æ–∫–Ω–æ—Ç']
        for cat_name in test_names:
            cat = next((c for c in migrated_categories if c.name == cat_name), None)
            if cat:
                print(f"\n‚úì {cat.name}:")
                if cat.material:
                    print(f"  - –ú–∞—Ç–µ—Ä–∏–∞–ª: {cat.material[:60]}{'...' if len(cat.material) > 60 else ''}")
                print(f"  - –¢—Ä–µ–±—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {cat.needs_custom_params()}")
                print(f"  - –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏: rail={cat.rail_base}, air={cat.air_base}")
                if cat.duty_rate is not None:
                    print(f"  - –ü–æ—à–ª–∏–Ω–∞: {cat.duty_rate}%, –ù–î–°: {cat.vat_rate}%")
                print(f"  - –¢–ù –í–≠–î: {cat.tnved_code if cat.tnved_code else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                
                # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                is_valid, errors = cat.validate_params({})
                if not is_valid:
                    print(f"  - ‚ö†Ô∏è –¢—Ä–µ–±—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(cat.get_required_params_names()[:2])}...")
            else:
                print(f"\n‚ö†Ô∏è '{cat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Railway")
        
        # 7. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        print("\nüìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞...")
        report = generate_comparison_report(migrated_categories)
        
        report_file = 'RAILWAY_MIGRATION_REPORT.md'
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"üìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {report_file}")
        
        # 8. –ò—Ç–æ–≥
        print("\n" + "="*60)
        print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ò–ó RAILWAY –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
        print("="*60)
        print(f"\n–§–∞–π–ª—ã:")
        print(f"  - {output_file} (Railway –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)")
        print(f"  - {report_file} (–æ—Ç—á—ë—Ç)")
        print("\n–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:")
        print("  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å categories_from_railway.json")
        print("  - –û–±–Ω–æ–≤–∏—Ç—å price_calculator.py")
        print("  - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å production –¥–∞–Ω–Ω—ã–º–∏")
        print("="*60)
        
    finally:
        conn.close()
        print("\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Railway –∑–∞–∫—Ä—ã—Ç–æ")
    
    return 0


if __name__ == '__main__':
    import sys
    sys.exit(main())

