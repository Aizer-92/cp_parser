"""
Recalculation Service - —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞

–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
1. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–æ–π —Ä–∞—Å—á—ë—Ç–∞ (price_calculator.py)
2. –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ LogisticsRoute –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
3. –ü–µ—Ä–µ—Å—á—ë—Ç –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å—á—ë—Ç–∞
"""
from typing import Dict, List, Optional
from decimal import Decimal
from sqlalchemy.orm import Session

from models_v3 import Calculation, LogisticsRoute, Position
from .logistics_service import LogisticsService
from .calculation_service import CalculationService

# Import —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á—ë—Ç–∞
from services.calculation_orchestrator import CalculationOrchestrator
from price_calculator import PriceCalculator


class RecalculationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ª–æ–≥–∏—Å—Ç–∏–∫–∏
    
    –°–≤—è–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É —Ä–∞—Å—á—ë—Ç–∞ —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –ë–î
    """
    
    def __init__(self, db: Session):
        self.db = db
        self.logistics_service = LogisticsService(db)
        self.calculation_service = CalculationService(db)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        calculator = PriceCalculator()
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Å–ª–æ–≤–∞—Ä—å {category_name: category_data}
        categories_dict = {cat['category']: cat for cat in calculator.categories}
        self.orchestrator = CalculationOrchestrator(categories_dict)
    
    def recalculate_routes(
        self, 
        calculation_id: int,
        category: Optional[str] = None,
        custom_logistics: Optional[Dict] = None
    ) -> List[LogisticsRoute]:
        """
        –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞
        
        Args:
            calculation_id: ID —Ä–∞—Å—á—ë—Ç–∞
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ Position)
            custom_logistics: –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
            
        Raises:
            ValueError: –ï—Å–ª–∏ —Ä–∞—Å—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        print(f"üîç DEBUG: recalculate_routes –≤—ã–∑–≤–∞–Ω —Å calculation_id={calculation_id}, category={category}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—á—ë—Ç —Å –ø–æ–∑–∏—Ü–∏–µ–π
        print("üîç DEBUG: –ó–∞–≥—Ä—É–∂–∞–µ–º calculation...")
        calculation = self.calculation_service.get_with_full_details(calculation_id)
        print(f"üîç DEBUG: Calculation –∑–∞–≥—Ä—É–∂–µ–Ω: {calculation is not None}")
        if not calculation:
            raise ValueError(f"Calculation {calculation_id} not found")
        
        print(f"üîç DEBUG: calculation.position = {calculation.position}")
        if not calculation.position:
            raise ValueError(f"Position not found for calculation {calculation_id}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        print("üîç DEBUG: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é...")
        category = category or calculation.position.category
        print(f"üîç DEBUG: category = {category}")
        if not category:
            raise ValueError("Category is required for calculation")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å –¥–ª—è quick —Ä–∞—Å—á–µ—Ç–∞
        print(f"üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞: {calculation.calculation_type}")
        if calculation.calculation_type == 'quick':
            if not calculation.weight_kg:
                raise ValueError("Weight is required for quick calculation")
            weight_kg = float(calculation.weight_kg)
        else:
            # –î–ª—è precise —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–Ω–∞ —É–ø–∞–∫–æ–≤–∫–∞
            if not calculation.packing_units_per_box:
                raise ValueError("Packing data is required for precise calculation")
            # –í–µ—Å –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            weight_kg = float(calculation.packing_box_weight) / calculation.packing_units_per_box if calculation.packing_box_weight else 0.2
        
        # –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—á—ë—Ç —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        start_result = self.orchestrator.start_calculation(
            product_name=calculation.position.name,
            quantity=calculation.quantity,
            weight_kg=weight_kg,
            unit_price_yuan=float(calculation.price_yuan),
            markup=1.7,  # Default markup, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
            forced_category=category,
            product_url=calculation.factory_custom_url or None
        )
        
        # –®–∞–≥ 2: –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö
        if start_result.get('needs_user_input'):
            if not custom_logistics:
                raise ValueError(f"Category '{category}' requires custom logistics parameters")
            
            self.orchestrator.provide_custom_params(custom_logistics)
        
        # –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á—ë—Ç
        try:
            print("üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º orchestrator.calculate()...")
            calc_response = self.orchestrator.calculate()
            print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω calc_response, —Ç–∏–ø = {type(calc_response)}")
            
            if not isinstance(calc_response, dict):
                print(f"üîç DEBUG: calc_response –ù–ï –°–õ–û–í–ê–†–¨! –≠—Ç–æ: {type(calc_response)}")
                print(f"üîç DEBUG: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {str(calc_response)[:200]}")
                raise ValueError(f"orchestrator.calculate() returned {type(calc_response)} instead of dict")
            
            print(f"üîç DEBUG: calc_response keys = {list(calc_response.keys())}")
            
            if not calc_response.get('success'):
                raise ValueError(calc_response.get('error', 'Unknown error'))
            
            result = calc_response['result']
            print(f"üîç DEBUG: result type = {type(result)}")
            print(f"üîç DEBUG: result keys = {list(result.keys()) if isinstance(result, dict) else 'NOT A DICT!'}")
        except ValueError:
            raise
        except Exception as e:
            print(f"üîç DEBUG: Exception –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—á—ë—Ç–∞: {type(e).__name__}: {e}")
            import traceback
            traceback.print_exc()
            raise ValueError(f"Calculation failed: {str(e)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        routes = []
        result_routes = result.get('routes', {})
        print(f"üîç DEBUG: result_routes type = {type(result_routes)}")
        print(f"üîç DEBUG: result_routes keys = {list(result_routes.keys()) if isinstance(result_routes, dict) else 'NOT A DICT'}")
        
        # routes - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å {route_name: route_data}, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫
        for route_key, route_data in result_routes.items():
            print(f"üîç DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç: {route_key}, type={type(route_data)}")
            route_name = self._normalize_route_name(route_key)
            
            logistics_data = {
                'custom_rate': self._get_decimal(route_data.get('logistics_rate')),
                'duty_rate': self._get_decimal(route_data.get('duty_rate')),
                'vat_rate': self._get_decimal(route_data.get('vat_rate')),
                'specific_rate': self._get_decimal(route_data.get('specific_rate')),
                'cost_price_rub': self._get_decimal(route_data.get('cost_per_unit_rub')),
                'cost_price_usd': self._get_decimal(route_data.get('cost_per_unit_usd')),
                'sale_price_rub': self._get_decimal(route_data.get('sale_per_unit_rub')),
                'sale_price_usd': self._get_decimal(route_data.get('sale_per_unit_usd')),
                'profit_rub': self._get_decimal(route_data.get('profit_per_unit_rub')),
                'profit_usd': self._get_decimal(route_data.get('profit_per_unit_usd')),
                'total_cost_rub': self._get_decimal(route_data.get('total_cost_rub')),
                'total_cost_usd': self._get_decimal(route_data.get('total_cost_usd')),
                'total_sale_rub': self._get_decimal(route_data.get('total_sale_rub')),
                'total_sale_usd': self._get_decimal(route_data.get('total_sale_usd')),
                'total_profit_rub': self._get_decimal(route_data.get('total_profit_rub')),
                'total_profit_usd': self._get_decimal(route_data.get('total_profit_usd')),
            }
            
            route = self.logistics_service.update_route(
                calculation_id=calculation_id,
                route_name=route_name,
                route_data=logistics_data
            )
            routes.append(route)
        
        return routes
    
    def _normalize_route_name(self, name: str) -> str:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É
        
        Highway –ñ–î ‚Üí highway_rail
        Highway –ê–≤–∏–∞ ‚Üí highway_air
        etc.
        """
        name_lower = name.lower()
        
        if '–∂–¥' in name_lower or 'rail' in name_lower:
            return 'highway_rail'
        elif '–∞–≤–∏–∞' in name_lower or 'air' in name_lower:
            return 'highway_air'
        elif '–∫–æ–Ω—Ç—Ä–∞–∫—Ç' in name_lower or 'contract' in name_lower:
            return 'highway_contract'
        elif 'prologix' in name_lower:
            return 'prologix'
        elif 'sea' in name_lower or '–º–æ—Ä–µ' in name_lower or 'container' in name_lower:
            return 'sea_container'
        else:
            # Fallback: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ lowercase
            return name.replace(' ', '_').lower()
    
    def _get_decimal(self, value) -> Optional[Decimal]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Decimal"""
        if value is None:
            return None
        try:
            return Decimal(str(value))
        except (ValueError, TypeError):
            return None

