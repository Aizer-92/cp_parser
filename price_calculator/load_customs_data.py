#!/usr/bin/env python3
"""
–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—à–ª–∏–Ω–∞–º –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
"""
import os
import sys
import json
from database import get_database_connection

# –î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CUSTOMS_DATA = {
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ—à–ª–∏–Ω–∞–º–∏
    "–ø–æ–≤–µ—Ä–±–∞–Ω–∫–∏": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–∫—Ä—É–∂–∫–∏": {"duty_rate": "12%", "vat_rate": "20%", "certificates": ["EAC"]},  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 11.5%
    "—Ç–µ—Ä–º–æ—Å—ã": {"duty_rate": "10%", "vat_rate": "20%", "certificates": ["EAC"]},  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 15%
    "—Ç–µ—Ä–º–æ–±—É—Ç—ã–ª–∫–∏": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
    "—Ç–µ—Ä–º–æ–∫—Ä—É–∂–∫–∏": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
    "—Ç–µ—Ä–º–æ—Å—Ç–∞–∫–∞–Ω—ã": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–∫–æ—Ñ—Ñ–µ—Ä—ã": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫–∏": {"duty_rate": "0%", "vat_rate": "20%", "certificates": []},
    "–±–ª–æ–∫–Ω–æ—Ç—ã": {"duty_rate": "0%", "vat_rate": "20%", "certificates": []},
    "–∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–ª–∞–Ω—å—è—Ä–¥": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
    "—Ä–µ—Ç—Ä–∞–∫—Ç–æ—Ä": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–ø–∞–∫–µ—Ç—ã": {"duty_rate": "5%", "vat_rate": "20%", "certificates": []},
    "—Ñ–ª–µ—à–∫–∏": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
    "—Ä—É—á–∫–∏": {"duty_rate": "7.5%", "vat_rate": "20%", "certificates": []},  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 6.5%
    # –¢–µ–∫—Å—Ç–∏–ª—å - –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–´–ï –ü–û–®–õ–ò–ù–´ (10% –∏–ª–∏ EUR/–∫–≥, —á—Ç–æ –±–æ–ª—å—à–µ)
    "—Ñ—É—Ç–±–æ–ª–∫–∏": {"duty_rate": "10%", "duty_type": "combined", "ad_valorem_rate": "10%", "specific_rate": "1.75 EUR/kg", "vat_rate": "20%", "certificates": ["EAC"]},
    "—Ñ—É—Ç–±–æ–ª–∫–∞": {"duty_rate": "10%", "duty_type": "combined", "ad_valorem_rate": "10%", "specific_rate": "1.75 EUR/kg", "vat_rate": "20%", "certificates": ["EAC"]},
    "—Ç–æ–ª—Å—Ç–æ–≤–∫–∞": {"duty_rate": "10%", "duty_type": "combined", "ad_valorem_rate": "10%", "specific_rate": "1.88 EUR/kg", "vat_rate": "20%", "certificates": ["EAC"]},
    "—Ö—É–¥–∏": {"duty_rate": "10%", "duty_type": "combined", "ad_valorem_rate": "10%", "specific_rate": "1.88 EUR/kg", "vat_rate": "20%", "certificates": ["EAC"]},
    "–ø–ª–µ–¥": {"duty_rate": "10%", "duty_type": "combined", "ad_valorem_rate": "10%", "specific_rate": "1.88 EUR/kg", "vat_rate": "20%", "certificates": ["EAC"]},
    "–ø–æ–¥—É—à–∫–∞": {"duty_rate": "10%", "duty_type": "combined", "ad_valorem_rate": "10%", "specific_rate": "1.88 EUR/kg", "vat_rate": "20%", "certificates": ["EAC"]},
    "–∫–µ–ø–∫–∞": {"duty_rate": "10%", "duty_type": "combined", "ad_valorem_rate": "10%", "specific_rate": "1.88 EUR/kg", "vat_rate": "20%", "certificates": ["EAC"]},
    "—à–∞—Ä—Ñ": {"duty_rate": "10%", "duty_type": "combined", "ad_valorem_rate": "10%", "specific_rate": "1.88 EUR/kg", "vat_rate": "20%", "certificates": ["EAC"]},
    "–ø–µ—Ä—á–∞—Ç–∫–∏": {"duty_rate": "10%", "duty_type": "combined", "ad_valorem_rate": "10%", "specific_rate": "1.88 EUR/kg", "vat_rate": "20%", "certificates": ["EAC"]},
    "–¥–æ–∂–¥–µ–≤–∏–∫": {"duty_rate": "10%", "duty_type": "combined", "ad_valorem_rate": "10%", "specific_rate": "1.88 EUR/kg", "vat_rate": "20%", "certificates": ["EAC"]},
    "–Ω–æ—Å–∫–∏": {"duty_rate": "10%", "duty_type": "combined", "ad_valorem_rate": "10%", "specific_rate": "1.88 EUR/kg", "vat_rate": "20%", "certificates": ["EAC"]},
    "—Å—É–º–∫–∏": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–∑–æ–Ω—Ç—ã": {"duty_rate": "6.5%", "vat_rate": "20%", "certificates": []},
    "—á–∞—Å—ã": {"duty_rate": "6%", "vat_rate": "20%", "certificates": ["EAC"]},
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    "–±—É—Ç—ã–ª–∫–∞": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–∫–æ—Ñ—Ñ–µ—Ä": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
    "—Ç–µ—Ä–º–æ—Å": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
    "—Ä—É—á–∫–∞": {"duty_rate": "7.5%", "vat_rate": "20%", "certificates": []},  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 6.5%
    "–ª–∞–º–ø–∞": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–∏–≥—Ä—É—à–∫–∞": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–∫–∞–±–µ–ª—å": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–±—Ä–µ–ª–æ–∫": {"duty_rate": "6.5%", "vat_rate": "20%", "certificates": []},
    "—á–µ—Ö–æ–ª": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
    "—Ä—é–∫–∑–∞–∫": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–∫–æ—Å–º–µ—Ç–∏—á–∫–∞": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–∫–æ–ª–æ–Ω–∫–∞": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
    "—Ñ–ª–µ—à–∫–∞": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
    # –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç–µ–∫—Å—Ç–∏–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ - –æ–Ω–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤—ã—à–µ —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—à–ª–∏–Ω–∞–º–∏
    "—É–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—å": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–∑–æ–Ω—Ç": {"duty_rate": "6.5%", "vat_rate": "20%", "certificates": []},
    # –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã: –ø–æ–¥—É—à–∫–∞, –∫–µ–ø–∫–∞, —à–∞—Ä—Ñ, –ø–µ—Ä—á–∞—Ç–∫–∏, –¥–æ–∂–¥–µ–≤–∏–∫, —Ç–æ–ª—Å—Ç–æ–≤–∫–∞, —Ö—É–¥–∏, –Ω–æ—Å–∫–∏
    # –û–Ω–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤—ã—à–µ —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—à–ª–∏–Ω–∞–º–∏
    "–∫–æ—Ä–æ–±–∫–∞": {"duty_rate": "5%", "vat_rate": "20%", "certificates": []},
    "–æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–ø–µ–Ω–∞–ª": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–±–µ–π–¥–∂": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–Ω–∞—É—à–Ω–∏–∫–∏": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–±–ª–æ–∫–Ω–æ—Ç": {"duty_rate": "0%", "vat_rate": "20%", "certificates": []},
    "–º–∞—Å—Å–∞–∂–µ—Ä": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–ø–æ—Å—É–¥–∞": {"duty_rate": "12%", "vat_rate": "20%", "certificates": ["EAC"]},  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 11.5%
    "–ø—Ä–æ–µ–∫—Ç–æ—Ä": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
    # –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç–µ–∫—Å—Ç–∏–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–∫–µ–ø–∫–∞, —à–∞—Ä—Ñ, –ø–µ—Ä—á–∞—Ç–∫–∏, –¥–æ–∂–¥–µ–≤–∏–∫, —Ç–æ–ª—Å—Ç–æ–≤–∫–∞, —Ö—É–¥–∏, –Ω–æ—Å–∫–∏)
    # –û–Ω–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤—ã—à–µ —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—à–ª–∏–Ω–∞–º–∏
    "—Ñ–æ–Ω–∞—Ä—å": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
    "–≥–∏—Ä–ª—è–Ω–¥–∞": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
    "—Å–≤–µ—á–∞": {"duty_rate": "5%", "vat_rate": "20%", "certificates": []},
    "–º–∞–≥–Ω–∏—Ç": {"duty_rate": "5%", "vat_rate": "20%", "certificates": []},
    # –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã: —Ç–æ–ª—Å—Ç–æ–≤–∫–∞, —Ö—É–¥–∏, –Ω–æ—Å–∫–∏ - —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤—ã—à–µ
    "–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
    "—Ç–∞–±–ª–µ—Ç–Ω–∏—Ü–∞": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
    "—Å—Ç–∏–∫–µ—Ä—ã": {"duty_rate": "5%", "vat_rate": "20%", "certificates": []},
    "–º—ã—à—å": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
    # –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: –Ω–æ—Å–∫–∏ - —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω –≤—ã—à–µ
    
    # –û–±—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    "–æ–±—â–∞—è": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]}
}

def load_customs_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        
        print(f"üöõ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º –≤ {db_type}...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cursor.execute("SELECT category, data FROM categories")
        existing_categories = cursor.fetchall()
        
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î: {len(existing_categories)}")
        
        updated_count = 0
        
        for row in existing_categories:
            try:
                if db_type == 'postgres':
                    category_name = row['category'] if isinstance(row, dict) else row[0]
                    category_data = row['data'] if isinstance(row, dict) else row[1]
                else:
                    category_name = row['category'] if hasattr(row, 'keys') else row[0]
                    category_data = row['data'] if hasattr(row, 'keys') else row[1]
                
                # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if isinstance(category_data, str):
                    category_json = json.loads(category_data)
                else:
                    category_json = category_data
                
                # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º
                customs_info = None
                category_lower = category_name.lower()
                
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if category_lower in CUSTOMS_DATA:
                    customs_info = CUSTOMS_DATA[category_lower]
                else:
                    # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
                    for customs_key, customs_value in CUSTOMS_DATA.items():
                        if customs_key in category_lower or category_lower in customs_key:
                            customs_info = customs_value
                            break
                
                if customs_info:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¢–ù –í–≠–î –∫–æ–¥ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    existing_tnved = category_json.get('tnved_code', '')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º
                    if existing_tnved:
                        # –ï—Å–ª–∏ –¢–ù –í–≠–î —É–∂–µ –µ—Å—Ç—å, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—à–ª–∏–Ω—ã
                        category_json['duty_rate'] = customs_info['duty_rate']
                        category_json['vat_rate'] = customs_info['vat_rate']
                        category_json['certificates'] = customs_info['certificates']
                        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—à–ª–∏–Ω—ã –¥–ª—è: {category_name} (–¢–ù –í–≠–î: {existing_tnved})")
                    else:
                        # –ï—Å–ª–∏ –¢–ù –í–≠–î –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –∫–æ–¥
                        category_json['tnved_code'] = "9999999999"  # –û–±—â–∏–π –∫–æ–¥ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
                        category_json['duty_rate'] = customs_info['duty_rate']
                        category_json['vat_rate'] = customs_info['vat_rate']
                        category_json['certificates'] = customs_info['certificates']
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {category_name} (–æ–±—â–∏–π –¢–ù –í–≠–î)")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                    updated_data = json.dumps(category_json, ensure_ascii=False)
                    
                    if db_type == 'postgres':
                        cursor.execute(
                            "UPDATE categories SET data = %s WHERE category = %s",
                            (updated_data, category_name)
                        )
                    else:
                        cursor.execute(
                            "UPDATE categories SET data = ? WHERE category = ?",
                            (updated_data, category_name)
                        )
                    
                    updated_count += 1
                else:
                    print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—à–ª–∏–Ω–∞–º –¥–ª—è: {category_name}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}: {e}")
                continue
        
        conn.commit()
        cursor.close()
        
        print(f"\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {updated_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT category, data FROM categories")
        all_categories = cursor.fetchall()
        
        print(f"\nüìã –°—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
        for row in all_categories:
            try:
                if db_type == 'postgres':
                    category_name = row['category'] if isinstance(row, dict) else row[0]
                    category_data = row['data'] if isinstance(row, dict) else row[1]
                else:
                    category_name = row['category'] if hasattr(row, 'keys') else row[0]
                    category_data = row['data'] if hasattr(row, 'keys') else row[1]
                
                if isinstance(category_data, str):
                    category_json = json.loads(category_data)
                else:
                    category_json = category_data
                
                has_customs = 'tnved_code' in category_json and category_json['tnved_code']
                status = "‚úÖ" if has_customs else "‚ùå"
                tnved = category_json.get('tnved_code', '–ù–ï–¢')
                print(f"  {status} {category_name} -> {tnved}")
                
            except Exception as e:
                print(f"  ‚ùå {category_name} -> –û–®–ò–ë–ö–ê: {e}")
        
        cursor.close()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    load_customs_data()
