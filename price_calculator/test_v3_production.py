"""
–¢–µ—Å—Ç V3 API –Ω–∞ Railway Production
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö endpoints —á–µ—Ä–µ–∑ HTTP
"""

import requests
import json

BASE_URL = "https://price-calculator-production.up.railway.app"

def test_v3_production():
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï V3 API –ù–ê PRODUCTION")
    print("=" * 60)
    
    # 1. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–±—Ä–∏–∫–∏
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏...")
    import time
    timestamp = int(time.time())
    factory_data = {
        "name": f"–¢–µ—Å—Ç–æ–≤–∞—è —Ñ–∞–±—Ä–∏–∫–∞ {timestamp}",
        "contact": "https://wechat.com/test_prod",
        "comment": "–¢–µ—Å—Ç —Å Railway",
        "default_sample_time_days": 7,
        "default_production_time_days": 15,
        "default_sample_price_yuan": 10.0
    }
    
    try:
        response = requests.post(f"{BASE_URL}/api/v3/factories/", json=factory_data, allow_redirects=False)
        print(f"   Status: {response.status_code}")
        print(f"   Response text: {response.text[:200]}")
        
        if response.status_code in [200, 201]:
            factory = response.json()
            print(f"   Response type: {type(factory)}")
            if isinstance(factory, list):
                print(f"   ‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞!")
                if len(factory) > 0:
                    factory = factory[0]
                else:
                    print(f"   ‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π!")
                    return
            
            print(f"‚úÖ –§–∞–±—Ä–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID={factory['id']}, Name='{factory['name']}'")
            factory_id = factory['id']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–±—Ä–∏–∫–∏: {response.status_code} - {response.text}")
            return
    except Exception as e:
        print(f"‚ùå Exception –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–±—Ä–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        return
    
    # 2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–±—Ä–∏–∫
    print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–±—Ä–∏–∫...")
    try:
        response = requests.get(f"{BASE_URL}/api/v3/factories")
        if response.status_code == 200:
            factories = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–∞–±—Ä–∏–∫: {len(factories)}")
            for f in factories[:3]:
                print(f"   - ID={f['id']}: {f['name']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–±—Ä–∏–∫: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Exception –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–±—Ä–∏–∫: {e}")
    
    # 3. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    print("\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏...")
    position_data = {
        "name": f"–§—É—Ç–±–æ–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–∞—è {timestamp}",
        "description": "–•–ª–æ–ø–æ–∫ 180–≥/–º¬≤, —Ç–µ—Å—Ç Railway",
        "category": "—Ñ—É—Ç–±–æ–ª–∫–∞",
        "design_files_urls": ["http://example.com/design.jpg"],
        "custom_fields": {"color": "white", "size": "L"}
    }
    
    try:
        response = requests.post(f"{BASE_URL}/api/v3/positions/", json=position_data, allow_redirects=False)
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200 or response.status_code == 201:
            position = response.json()
            print(f"   Response type: {type(position)}")
            if isinstance(position, list):
                print(f"   ‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞!")
                if len(position) > 0:
                    position = position[0]
                else:
                    print(f"   ‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π!")
                    return
            
            print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID={position['id']}, Name='{position['name']}'")
            position_id = position['id']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {response.status_code} - {response.text}")
            return
    except Exception as e:
        print(f"‚ùå Exception –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return
    
    # 4. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—á—ë—Ç–∞
    print("\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—á—ë—Ç–∞...")
    calculation_data = {
        "position_id": position_id,
        "factory_id": factory_id,
        "quantity": 500,
        "price_yuan": 12.5,
        "calculation_type": "quick",
        "weight_kg": 0.15,
        "factory_comment": "–¢–µ—Å—Ç production API"
    }
    
    try:
        response = requests.post(f"{BASE_URL}/api/v3/calculations/", json=calculation_data, allow_redirects=False)
        if response.status_code in [200, 201]:
            calculation = response.json()
            print(f"‚úÖ –†–∞—Å—á—ë—Ç —Å–æ–∑–¥–∞–Ω: ID={calculation['id']}")
            if 'position' in calculation and calculation['position']:
                print(f"   Position: {calculation['position'].get('name', 'N/A')}")
            if 'factory' in calculation and calculation['factory']:
                print(f"   Factory: {calculation['factory'].get('name', 'N/A')}")
            print(f"   Quantity: {calculation['quantity']} —à—Ç")
            calculation_id = calculation['id']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—á—ë—Ç–∞: {response.status_code} - {response.text}")
            return
    except Exception as e:
        print(f"‚ùå Exception –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—á—ë—Ç–∞: {e}")
        return
    
    # 5. –¢–µ—Å—Ç –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    print("\n5Ô∏è‚É£ –ü–µ—Ä–µ—Å—á—ë—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
    try:
        recalc_data = {"category": "—Ñ—É—Ç–±–æ–ª–∫–∞"}  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞
        response = requests.post(
            f"{BASE_URL}/api/v3/calculations/{calculation_id}/recalculate",
            json=recalc_data,
            allow_redirects=True
        )
        if response.status_code == 200:
            routes = response.json()  # –ù–∞–ø—Ä—è–º—É—é —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤
            print(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã: {len(routes)} –º–∞—Ä—à—Ä—É—Ç–æ–≤")
            for route in routes:
                print(f"   üìç {route['route_name']}:")
                cost_rub = float(route.get('cost_price_rub', 0) or 0)
                sale_rub = float(route.get('sale_price_rub', 0) or 0)
                print(f"      –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost_rub:.2f} ‚ÇΩ")
                print(f"      –ü—Ä–æ–¥–∞–∂–Ω–∞—è —Ü–µ–Ω–∞: {sale_rub:.2f} ‚ÇΩ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"‚ùå Exception –ø—Ä–∏ –ø–µ—Ä–µ—Å—á—ë—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
    
    # 6. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)
    
    try:
        factories_count = len(requests.get(f"{BASE_URL}/api/v3/factories").json())
        positions_count = len(requests.get(f"{BASE_URL}/api/v3/positions").json())
        calculations_count = len(requests.get(f"{BASE_URL}/api/v3/calculations").json())
        
        print(f"–§–∞–±—Ä–∏–∫ –≤ –ë–î: {factories_count}")
        print(f"–ü–æ–∑–∏—Ü–∏–π –≤ –ë–î: {positions_count}")
        print(f"–†–∞—Å—á—ë—Ç–æ–≤ –≤ –ë–î: {calculations_count}")
    except:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PRODUCTION API –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 60)

if __name__ == "__main__":
    test_v3_production()

