"""Add V3 tables with v3_ prefix

Revision ID: 98c029361ee0
Revises: 
Create Date: 2025-10-12 20:14:55.571262

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '98c029361ee0'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('v3_audit_logs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('entity_type', sa.String(length=50), nullable=False, comment='Тип сущности: Position, Calculation, LogisticsRoute, Factory'),
    sa.Column('entity_id', sa.Integer(), nullable=False, comment='ID изменённой сущности'),
    sa.Column('user_id', sa.Integer(), nullable=True, comment='ID пользователя (когда будет система пользователей)'),
    sa.Column('action', sa.String(length=20), nullable=False, comment='Тип действия: created, updated, deleted'),
    sa.Column('changes', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="JSON с изменениями: {'field': {'old': ..., 'new': ...}}"),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_v3_audit_logs_created_at'), 'v3_audit_logs', ['created_at'], unique=False)
    op.create_index(op.f('ix_v3_audit_logs_entity_id'), 'v3_audit_logs', ['entity_id'], unique=False)
    op.create_index(op.f('ix_v3_audit_logs_entity_type'), 'v3_audit_logs', ['entity_type'], unique=False)
    op.create_index(op.f('ix_v3_audit_logs_user_id'), 'v3_audit_logs', ['user_id'], unique=False)
    op.create_table('v3_factories',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Название фабрики'),
    sa.Column('contact', sa.Text(), nullable=True, comment='URL/WeChat/Email для связи'),
    sa.Column('comment', sa.Text(), nullable=True, comment='Общий комментарий о фабрике'),
    sa.Column('default_sample_time_days', sa.Integer(), nullable=True, comment='Типичный срок изготовления образца (дней)'),
    sa.Column('default_production_time_days', sa.Integer(), nullable=True, comment='Типичный срок изготовления тиража (дней)'),
    sa.Column('default_sample_price_yuan', sa.DECIMAL(precision=10, scale=2), nullable=True, comment='Типичная цена образца (юаней)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('v3_positions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Название позиции'),
    sa.Column('description', sa.Text(), nullable=True, comment='Описание товара'),
    sa.Column('category', sa.String(length=100), nullable=True, comment='Категория товара'),
    sa.Column('design_files_urls', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Массив URL на файлы дизайна в облаке'),
    sa.Column('custom_fields', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Дополнительные пользовательские поля (материал, цвет и т.д.)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_v3_positions_category'), 'v3_positions', ['category'], unique=False)
    op.create_index(op.f('ix_v3_positions_name'), 'v3_positions', ['name'], unique=False)
    op.create_table('v3_calculations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('position_id', sa.Integer(), nullable=False, comment='ID позиции'),
    sa.Column('factory_id', sa.Integer(), nullable=True, comment='ID фабрики из справочника (опционально)'),
    sa.Column('factory_custom_name', sa.String(length=255), nullable=True, comment='Название фабрики (если не из справочника)'),
    sa.Column('factory_custom_url', sa.Text(), nullable=True, comment='Ссылка/WeChat фабрики (если не из справочника)'),
    sa.Column('sample_time_days', sa.Integer(), nullable=True, comment='Срок изготовления образца (дней)'),
    sa.Column('production_time_days', sa.Integer(), nullable=True, comment='Срок изготовления тиража (дней)'),
    sa.Column('sample_price_yuan', sa.DECIMAL(precision=10, scale=2), nullable=True, comment='Цена образца (юаней)'),
    sa.Column('factory_comment', sa.Text(), nullable=True, comment='Комментарий по этому конкретному расчёту'),
    sa.Column('quantity', sa.Integer(), nullable=False, comment='Тираж (количество единиц)'),
    sa.Column('price_yuan', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='Цена за единицу в юанях'),
    sa.Column('calculation_type', sa.String(length=20), nullable=False, comment='Тип расчёта: quick (простой вес) или precise (пакинг)'),
    sa.Column('weight_kg', sa.DECIMAL(precision=10, scale=3), nullable=True, comment='Вес единицы товара (кг) для quick расчёта'),
    sa.Column('packing_units_per_box', sa.Integer(), nullable=True, comment='Единиц товара в одной коробке'),
    sa.Column('packing_box_weight', sa.DECIMAL(precision=10, scale=3), nullable=True, comment='Вес одной коробки (кг)'),
    sa.Column('packing_box_length', sa.DECIMAL(precision=10, scale=2), nullable=True, comment='Длина коробки (см)'),
    sa.Column('packing_box_width', sa.DECIMAL(precision=10, scale=2), nullable=True, comment='Ширина коробки (см)'),
    sa.Column('packing_box_height', sa.DECIMAL(precision=10, scale=2), nullable=True, comment='Высота коробки (см)'),
    sa.Column('packing_total_boxes', sa.Integer(), nullable=True, comment='Общее количество коробок'),
    sa.Column('packing_total_volume', sa.DECIMAL(precision=10, scale=3), nullable=True, comment='Общий объём (м³)'),
    sa.Column('packing_total_weight', sa.DECIMAL(precision=10, scale=3), nullable=True, comment='Общий вес (кг)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('(factory_id IS NOT NULL OR factory_custom_name IS NOT NULL)', name='factory_required'),
    sa.ForeignKeyConstraint(['factory_id'], ['v3_factories.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['position_id'], ['v3_positions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_v3_calculations_factory_id'), 'v3_calculations', ['factory_id'], unique=False)
    op.create_index(op.f('ix_v3_calculations_position_id'), 'v3_calculations', ['position_id'], unique=False)
    op.create_index(op.f('ix_v3_calculations_quantity'), 'v3_calculations', ['quantity'], unique=False)
    op.create_table('v3_logistics_routes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('calculation_id', sa.Integer(), nullable=False, comment='ID расчёта'),
    sa.Column('route_name', sa.String(length=50), nullable=False, comment='Название маршрута: highway_rail, highway_air, highway_contract, prologix, sea_container'),
    sa.Column('custom_rate', sa.DECIMAL(precision=10, scale=2), nullable=True, comment='Кастомная ставка логистики ($/кг)'),
    sa.Column('duty_rate', sa.DECIMAL(precision=5, scale=2), nullable=True, comment='Кастомная ставка пошлины (%)'),
    sa.Column('vat_rate', sa.DECIMAL(precision=5, scale=2), nullable=True, comment='Кастомная ставка НДС (%)'),
    sa.Column('specific_rate', sa.DECIMAL(precision=10, scale=2), nullable=True, comment='Специфическая ставка (если применимо)'),
    sa.Column('cost_price_rub', sa.DECIMAL(precision=10, scale=2), nullable=True, comment='Себестоимость за единицу (₽)'),
    sa.Column('cost_price_usd', sa.DECIMAL(precision=10, scale=2), nullable=True, comment='Себестоимость за единицу ($)'),
    sa.Column('sale_price_rub', sa.DECIMAL(precision=10, scale=2), nullable=True, comment='Продажная цена за единицу (₽)'),
    sa.Column('sale_price_usd', sa.DECIMAL(precision=10, scale=2), nullable=True, comment='Продажная цена за единицу ($)'),
    sa.Column('profit_rub', sa.DECIMAL(precision=10, scale=2), nullable=True, comment='Прибыль за единицу (₽)'),
    sa.Column('profit_usd', sa.DECIMAL(precision=10, scale=2), nullable=True, comment='Прибыль за единицу ($)'),
    sa.Column('total_cost_rub', sa.DECIMAL(precision=12, scale=2), nullable=True, comment='Общая себестоимость (₽)'),
    sa.Column('total_cost_usd', sa.DECIMAL(precision=12, scale=2), nullable=True, comment='Общая себестоимость ($)'),
    sa.Column('total_sale_rub', sa.DECIMAL(precision=12, scale=2), nullable=True, comment='Общая продажная цена (₽)'),
    sa.Column('total_sale_usd', sa.DECIMAL(precision=12, scale=2), nullable=True, comment='Общая продажная цена ($)'),
    sa.Column('total_profit_rub', sa.DECIMAL(precision=12, scale=2), nullable=True, comment='Общая прибыль (₽)'),
    sa.Column('total_profit_usd', sa.DECIMAL(precision=12, scale=2), nullable=True, comment='Общая прибыль ($)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['calculation_id'], ['v3_calculations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('calculation_id', 'route_name', name='unique_calc_route')
    )
    op.create_index(op.f('ix_v3_logistics_routes_calculation_id'), 'v3_logistics_routes', ['calculation_id'], unique=False)
    # NOTE: Намеренно НЕ удаляем старые таблицы (categories, customs_duties, calculations)
    # Они продолжают использоваться старым API
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('calculations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('product_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('category', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('price_yuan', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('weight_kg', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('markup', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('custom_rate', sa.REAL(), autoincrement=False, nullable=True),
    sa.Column('product_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cost_price_rub', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('cost_price_usd', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('sale_price_rub', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('sale_price_usd', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('profit_rub', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('profit_usd', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('calculation_type', sa.VARCHAR(length=20), server_default=sa.text("'quick'::character varying"), autoincrement=False, nullable=True),
    sa.Column('packing_units_per_box', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('packing_box_weight', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=True),
    sa.Column('packing_box_length', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=True),
    sa.Column('packing_box_width', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=True),
    sa.Column('packing_box_height', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=True),
    sa.Column('packing_total_boxes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('packing_total_volume', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=True),
    sa.Column('packing_total_weight', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=True),
    sa.Column('tnved_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('duty_rate', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('vat_rate', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('duty_amount_usd', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('vat_amount_usd', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('total_customs_cost_usd', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('certificates', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('customs_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('density_warning_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('calculated_density', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=True),
    sa.Column('category_density', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=True),
    sa.Column('custom_logistics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('forced_category', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('calculations_pkey'))
    )
    op.create_table('customs_duties',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('tnved_code', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('material', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('duty_rate', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('duty_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('vat_rate', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('certificates', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('required_documents', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('customs_duties_pkey')),
    sa.UniqueConstraint('tnved_code', name=op.f('customs_duties_tnved_code_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_customs_duties_tnved'), 'customs_duties', ['tnved_code'], unique=False)
    op.create_index(op.f('idx_customs_duties_category'), 'customs_duties', ['category'], unique=False)
    op.create_table('categories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('category', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('material', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('tnved_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('duty_rate', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('vat_rate', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('certificates', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('required_documents', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('categories_pkey')),
    sa.UniqueConstraint('category', 'material', name=op.f('categories_category_material_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_categories_tnved'), 'categories', ['tnved_code'], unique=False)
    op.drop_index(op.f('ix_v3_logistics_routes_calculation_id'), table_name='v3_logistics_routes')
    op.drop_table('v3_logistics_routes')
    op.drop_index(op.f('ix_v3_calculations_quantity'), table_name='v3_calculations')
    op.drop_index(op.f('ix_v3_calculations_position_id'), table_name='v3_calculations')
    op.drop_index(op.f('ix_v3_calculations_factory_id'), table_name='v3_calculations')
    op.drop_table('v3_calculations')
    op.drop_index(op.f('ix_v3_positions_name'), table_name='v3_positions')
    op.drop_index(op.f('ix_v3_positions_category'), table_name='v3_positions')
    op.drop_table('v3_positions')
    op.drop_table('v3_factories')
    op.drop_index(op.f('ix_v3_audit_logs_user_id'), table_name='v3_audit_logs')
    op.drop_index(op.f('ix_v3_audit_logs_entity_type'), table_name='v3_audit_logs')
    op.drop_index(op.f('ix_v3_audit_logs_entity_id'), table_name='v3_audit_logs')
    op.drop_index(op.f('ix_v3_audit_logs_created_at'), table_name='v3_audit_logs')
    op.drop_table('v3_audit_logs')
    # ### end Alembic commands ###
