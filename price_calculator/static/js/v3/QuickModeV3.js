/**
 * QuickModeV3.js - –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º —Ä–∞—Å—á—ë—Ç–∞ (Position + Calculation)
 * 
 * ‚úÖ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì: Template –≤—ã–Ω–µ—Å–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
 * @see ./templates/quick-mode.template.js
 */

// –ò–º–ø–æ—Ä—Ç template (ES module)
import { QUICK_MODE_TEMPLATE } from './templates/quick-mode.template.js';

window.QuickModeV3 = {
    // ============================================
    // TEMPLATE (–≤—ã–Ω–µ—Å–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)
    // ============================================
    template: QUICK_MODE_TEMPLATE,
    
    
    data() {
        return {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            productName: '',
            category: '',
            factoryUrl: '',
            priceYuan: 0,
            quantity: 1000,
            markup: 1.7,
            
            // –†–µ–∂–∏–º —Ä–∞—Å—á—ë—Ç–∞
            detailedMode: false,
            
            // –í–µ—Å (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º)
            weightKg: 0.2,
            
            // –ü–∞–∫–∫–∏–Ω–≥ (–¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)
            packingUnitsPerBox: 0,
            packingBoxWeight: 0,
            packingBoxLength: 0,
            packingBoxWidth: 0,
            packingBoxHeight: 0,
            
            // –°–æ—Å—Ç–æ—è–Ω–∏–µ
            isCalculating: false,
            availableCategories: [],
            
            // –í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø (–∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
            needsCustomParams: false,
            placeholderRoutes: {},
            lastRequestData: null // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        };
    },
    
    props: {
        position: {
            type: Object,
            default: null
        }
    },
    
    watch: {
        position: {
            immediate: true,
            handler(newPosition) {
                if (newPosition) {
                    console.log('üì• –ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:', newPosition);
                    this.fillFromPosition(newPosition);
                    // –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –Ω–∞—Ü–µ–Ω–∫—É
                    console.log('‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –Ω–∞—Ü–µ–Ω–∫—É, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"');
                }
            }
        }
    },
    
    async mounted() {
        await this.loadCategories();
    },
    
    
    methods: {
        async loadCategories() {
            try {
                const response = await axios.get(`${window.location.origin}/api/v3/categories`);
                const data = response.data;
                
                // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é
                if (Array.isArray(data)) {
                    this.availableCategories = data.map(c => c.category || c.name || c);
                } else if (data.categories && Array.isArray(data.categories)) {
                    // –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è
                    this.availableCategories = data.categories.map(c => c.category || c.name || c);
                } else {
                    console.warn('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', data);
                    this.availableCategories = [];
                }
                
                console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', this.availableCategories.length);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
            }
        },
        
        fillFromPosition(position) {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
            this.productName = position.name || '';
            this.category = position.category || '';
            this.factoryUrl = position.factory_url || '';
            this.priceYuan = position.price_yuan || 0;
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞–∫–∫–∏–Ω–≥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
            if (position.packing_units_per_box && position.packing_box_weight) {
                this.detailedMode = true;
                this.packingUnitsPerBox = position.packing_units_per_box;
                this.packingBoxWeight = position.packing_box_weight;
                this.packingBoxLength = position.packing_box_length || 0;
                this.packingBoxWidth = position.packing_box_width || 0;
                this.packingBoxHeight = position.packing_box_height || 0;
            } else if (position.weight_kg) {
                // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º
                this.detailedMode = false;
                this.weightKg = position.weight_kg;
            }
            
            console.log('‚úÖ –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏');
        },
        
        detectCategory() {
            if (!this.productName || this.productName.length < 2) return;
            
            const nameLower = this.productName.toLowerCase();
            const detected = this.availableCategories.find(cat => 
                nameLower.includes(cat.toLowerCase())
            );
            
            if (detected && detected !== this.category) {
                this.category = detected;
                console.log('‚úÖ –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', detected);
            }
        },
        
        async calculate() {
            this.isCalculating = true;
            this.result = null;
            this.needsCustomParams = false;
            
            try {
                const v3 = window.useCalculationV3();
                
                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
                const requestData = {
                    product_name: this.productName,
                    product_url: this.factoryUrl || '',
                    price_yuan: this.priceYuan,
                    quantity: this.quantity,
                    markup: this.markup,
                    forced_category: this.category || undefined,
                    is_precise_calculation: this.detailedMode
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É–ø–∞–∫–æ–≤–∫–∏ –∏–ª–∏ –≤–µ—Å–∞
                if (this.detailedMode) {
                    requestData.packing_units_per_box = this.packingUnitsPerBox;
                    requestData.packing_box_weight = this.packingBoxWeight;
                    requestData.packing_box_length = this.packingBoxLength;
                    requestData.packing_box_width = this.packingBoxWidth;
                    requestData.packing_box_height = this.packingBoxHeight;
                } else {
                    requestData.weight_kg = this.weightKg;
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–ø–∞
                this.lastRequestData = requestData;
                
                console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–∞—Å—á–µ—Ç:', requestData);
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á—ë—Ç
                const result = await v3.calculate(requestData);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω—ã –ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if (result.needs_custom_params) {
                    console.log('‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
                    this.needsCustomParams = true;
                    this.placeholderRoutes = result.routes || {};
                    this.category = result.category;
                } else {
                    // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    console.log('‚úÖ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º');
                    this.$emit('calculation-complete', {
                        result: result,
                        requestData: requestData
                    });
                }
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞:', error);
                const errorMsg = error.response?.data?.detail || error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á—ë—Ç';
                alert(`–û—à–∏–±–∫–∞: ${errorMsg}`);
            } finally {
                this.isCalculating = false;
            }
        },
        
        async applyCustomLogistics(customLogistics) {
            this.isCalculating = true;
            
            try {
                const v3 = window.useCalculationV3();
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
                const requestData = {
                    ...this.lastRequestData,
                    custom_logistics: customLogistics
                };
                
                console.log('üì§ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', requestData);
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á—ë—Ç —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                const result = await v3.calculate(requestData);
                
                // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —ç–º–∏—Ç–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                this.needsCustomParams = false;
                console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º');
                this.$emit('calculation-complete', {
                    result: result,
                    requestData: requestData
                });
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', error);
                const errorMsg = error.response?.data?.detail || error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á—ë—Ç';
                alert(`–û—à–∏–±–∫–∞: ${errorMsg}`);
            } finally {
                this.isCalculating = false;
            }
        },
        
        openCustomParams() {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            console.log('üîß –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫');
            this.needsCustomParams = true;
            this.placeholderRoutes = this.result.routes || {};
            this.lastRequestData = {
                product_name: this.productName,
                price_yuan: this.priceYuan,
                quantity: this.quantity,
                markup: this.markup,
                category: this.category,
                is_precise_calculation: this.detailedMode
            };
            
            if (this.detailedMode) {
                this.lastRequestData.packing_box_length = this.packingBoxLength;
                this.lastRequestData.packing_box_width = this.packingBoxWidth;
                this.lastRequestData.packing_box_height = this.packingBoxHeight;
                this.lastRequestData.packing_box_weight = this.packingBoxWeight;
                this.lastRequestData.packing_units_per_box = this.packingUnitsPerBox;
            } else {
                this.lastRequestData.weight_kg = this.weightKg;
            }
        },
        
        cancelCustomParams() {
            this.needsCustomParams = false;
            this.placeholderRoutes = {};
        },
        
        reset() {
            this.result = null;
            this.productName = '';
            this.factoryUrl = '';
            this.priceYuan = 0;
            this.quantity = 1000;
            this.weightKg = 0.2;
            this.markup = 1.7;
            this.expandedRoutes = {};
        },
        
        toggleRoute(key) {
            // Vue 3 –Ω–µ —Ç—Ä–µ–±—É–µ—Ç $set, –ø—Ä–æ—Å—Ç–æ –∏–∑–º–µ–Ω—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
            this.expandedRoutes[key] = !this.expandedRoutes[key];
        },
        
        formatRouteName(key) {
            const names = {
                highway_rail: '–ñ–î',
                highway_air: '–ê–≤–∏–∞',
                highway_contract: '–ö–æ–Ω—Ç—Ä–∞–∫—Ç',
                prologix: 'Prologix',
                sea_container: '–ú–æ—Ä–µ'
            };
            return names[key] || key;
        },
        
        formatPrice(price) {
            if (price === null || price === undefined || isNaN(price)) return '0';
            return Number(price).toLocaleString('ru-RU', {
                minimumFractionDigits: 0,
                maximumFractionDigits: 2
            });
        }
    }
};

