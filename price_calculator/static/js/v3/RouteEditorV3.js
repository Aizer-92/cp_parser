// RouteEditorV3.js - –†–µ–¥–∞–∫—Ç–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞ (–∞–Ω–∞–ª–æ–≥ V2)
window.RouteEditorV3 = {
    props: {
        routeKey: String,      // highway_rail, highway_air, highway_contract, prologix, sea_container
        route: Object,         // –î–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞
        calculationId: Number, // ID —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        category: String       // –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Å—Ç–∞–≤–æ–∫)
    },
    
    data() {
        return {
            isEditing: false,
            editParams: {
                custom_rate: null,       // –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞ ($/–∫–≥ –∏–ª–∏ ‚ÇΩ/–º¬≥)
                duty_type: 'percent',    // percent, specific, combined
                duty_rate: null,         // –ü–æ—à–ª–∏–Ω–∞ (%)
                specific_rate: null,     // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞ ($/–∫–≥)
                vat_rate: null          // –ù–î–° (%)
            }
        };
    },
    
    computed: {
        routeTitle() {
            const titles = {
                'highway_rail': 'Highway –ñ–î',
                'highway_air': 'Highway –ê–≤–∏–∞',
                'highway_contract': 'Highway –ø–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç',
                'prologix': 'Prologix',
                'sea_container': '–ú–æ—Ä–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º'
            };
            return titles[this.routeKey] || this.routeKey;
        },
        
        routeType() {
            return {
                isHighway: this.routeKey === 'highway_rail' || this.routeKey === 'highway_air',
                isContract: this.routeKey === 'highway_contract' || this.routeKey === 'prologix' || this.routeKey === 'sea_container',
                isPrologix: this.routeKey === 'prologix',
                isSeaContainer: this.routeKey === 'sea_container'
            };
        },
        
        canEditLogistics() {
            // –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∫—Ä–æ–º–µ sea_container –∏–º–µ—é—Ç –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Å—Ç–∞–≤–∫—É
            return this.routeKey !== 'sea_container';
        },
        
        canEditDuty() {
            // –¢–æ–ª—å–∫–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏–º–µ—é—Ç –ø–æ—à–ª–∏–Ω—ã
            return this.routeType.isContract;
        },
        
        logisticsUnit() {
            // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏
            if (this.routeKey === 'prologix') {
                return '‚ÇΩ/–º¬≥';
            }
            return '$/–∫–≥';
        },
        
        currentLogisticsRate() {
            // –ò–∑–≤–ª–µ—á—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É –∏–∑ breakdown
            if (!this.route || !this.route.breakdown) return null;
            
            const bd = this.route.breakdown;
            
            if (this.routeKey === 'prologix') {
                // –î–ª—è Prologix - —Å—Ç–∞–≤–∫–∞ –≤ —Ä—É–±–ª—è—Ö –∑–∞ –º¬≥
                return bd.prologix_rate_per_m3 || bd.logistics_rate_rub_per_m3;
            } else {
                // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —Å—Ç–∞–≤–∫–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –∑–∞ –∫–≥
                return bd.logistics_rate || bd.logistics_rate_usd_per_kg;
            }
        },
        
        currentDutyInfo() {
            // –ò–∑–≤–ª–µ—á—å —Ç–µ–∫—É—â–∏–µ –ø–æ—à–ª–∏–Ω—ã –∏–∑ route
            if (!this.route) return null;
            
            const customs = this.route.customs_info || {};
            
            return {
                duty_type: customs.duty_type || 'percent',
                duty_rate: customs.duty_rate,
                specific_rate: customs.specific_rate,
                vat_rate: customs.vat_rate
            };
        }
    },
    
    methods: {
        openEdit() {
            this.isEditing = true;
            
            // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if (this.canEditLogistics && this.currentLogisticsRate) {
                this.editParams.custom_rate = this.currentLogisticsRate;
            }
            
            if (this.canEditDuty && this.currentDutyInfo) {
                this.editParams.duty_type = this.currentDutyInfo.duty_type;
                this.editParams.duty_rate = this.currentDutyInfo.duty_rate;
                this.editParams.specific_rate = this.currentDutyInfo.specific_rate;
                this.editParams.vat_rate = this.currentDutyInfo.vat_rate;
            }
            
            console.log('‚úèÔ∏è –û—Ç–∫—Ä—ã—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:', this.routeKey, this.editParams);
        },
        
        cancelEdit() {
            this.isEditing = false;
        },
        
        async applyEdit() {
            console.log('üíæ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è', this.routeKey, this.editParams);
            
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å custom_logistics –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
            const customLogistics = {};
            customLogistics[this.routeKey] = {};
            
            // –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞
            if (this.canEditLogistics && this.editParams.custom_rate) {
                customLogistics[this.routeKey].custom_rate = parseFloat(this.editParams.custom_rate);
            }
            
            // –ü–æ—à–ª–∏–Ω—ã –∏ –ù–î–°
            if (this.canEditDuty) {
                customLogistics[this.routeKey].duty_type = this.editParams.duty_type;
                
                if (this.editParams.duty_rate) {
                    customLogistics[this.routeKey].duty_rate = parseFloat(this.editParams.duty_rate);
                }
                
                if (this.editParams.specific_rate) {
                    customLogistics[this.routeKey].specific_rate = parseFloat(this.editParams.specific_rate);
                }
                
                if (this.editParams.vat_rate) {
                    customLogistics[this.routeKey].vat_rate = parseFloat(this.editParams.vat_rate);
                }
            }
            
            console.log('üì§ Custom logistics:', customLogistics);
            
            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
            this.$emit('update-route', {
                routeKey: this.routeKey,
                customLogistics: customLogistics
            });
            
            this.isEditing = false;
        },
        
        formatPrice(value) {
            if (!value) return '0';
            return value.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
        }
    },
    
    template: `
    <div class="route-editor-card">
        <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–∞—Ä—à—Ä—É—Ç–∞ -->
        <div class="route-editor-header">
            <div>
                <h4 class="route-name">{{ routeTitle }}</h4>
                <div class="route-delivery-time" style="font-size: 12px; color: #6b7280; margin-top: 4px;">
                    {{ route.delivery_time || '‚Äî' }}
                </div>
            </div>
            <button 
                @click="openEdit" 
                v-if="!isEditing"
                class="btn-icon"
                title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ä—à—Ä—É—Ç–∞"
            >
                ‚úè
            </button>
        </div>
        
        <!-- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∫–æ–≥–¥–∞ –ù–ï —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º) -->
        <div v-if="!isEditing" class="route-results">
            <div class="route-row">
                <span class="route-label">–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                <span class="route-value">{{ formatPrice(route.cost_per_unit_rub) }} ‚ÇΩ/—à—Ç</span>
            </div>
            <div class="route-row">
                <span class="route-label">–ü—Ä–æ–¥–∞–∂–Ω–∞—è —Ü–µ–Ω–∞:</span>
                <span class="route-value">{{ formatPrice(route.sale_per_unit_rub) }} ‚ÇΩ/—à—Ç</span>
            </div>
            <div class="route-row">
                <span class="route-label">–ü—Ä–∏–±—ã–ª—å:</span>
                <span class="route-value text-success">{{ formatPrice(route.profit_per_unit_rub) }} ‚ÇΩ/—à—Ç</span>
            </div>
            
            <!-- –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏ -->
            <div v-if="canEditLogistics && currentLogisticsRate" class="route-row" style="margin-top: 8px; padding-top: 8px; border-top: 1px solid #e5e7eb;">
                <span class="route-label">–õ–æ–≥–∏—Å—Ç–∏–∫–∞:</span>
                <span class="route-value" style="font-size: 12px; color: #6b7280;">
                    {{ currentLogisticsRate.toFixed(2) }} {{ logisticsUnit }}
                </span>
            </div>
            
            <!-- –¢–µ–∫—É—â–∏–µ –ø–æ—à–ª–∏–Ω—ã -->
            <div v-if="canEditDuty && currentDutyInfo" style="margin-top: 4px;">
                <div v-if="currentDutyInfo.duty_rate" class="route-row">
                    <span class="route-label">–ü–æ—à–ª–∏–Ω–∞:</span>
                    <span class="route-value" style="font-size: 12px; color: #6b7280;">
                        {{ currentDutyInfo.duty_rate }}%
                    </span>
                </div>
                <div v-if="currentDutyInfo.vat_rate" class="route-row">
                    <span class="route-label">–ù–î–°:</span>
                    <span class="route-value" style="font-size: 12px; color: #6b7280;">
                        {{ currentDutyInfo.vat_rate }}%
                    </span>
                </div>
            </div>
        </div>
        
        <!-- –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–æ–≥–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º) -->
        <div v-if="isEditing" class="route-edit-form">
            <!-- –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞ (–¥–ª—è Highway –∏ Prologix) -->
            <div v-if="canEditLogistics" class="form-group">
                <label>–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞ ({{ logisticsUnit }})</label>
                <input
                    v-model.number="editParams.custom_rate"
                    type="number"
                    step="0.01"
                    min="0"
                    :placeholder="currentLogisticsRate ? currentLogisticsRate.toFixed(2) : '–ù–∞–ø—Ä–∏–º–µ—Ä: 3.5'"
                    class="form-input"
                />
                <div class="form-hint">
                    –¢–µ–∫—É—â–∞—è: {{ currentLogisticsRate ? currentLogisticsRate.toFixed(2) : '‚Äî' }} {{ logisticsUnit }}
                </div>
            </div>
            
            <!-- –ü–æ—à–ª–∏–Ω—ã –∏ –ù–î–° (–¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤) -->
            <div v-if="canEditDuty">
                <div class="form-group">
                    <label>–¢–∏–ø –ø–æ—à–ª–∏–Ω—ã</label>
                    <select v-model="editParams.duty_type" class="form-input">
                        <option value="percent">–ê–¥–≤–∞–ª–æ—Ä–Ω–∞—è (%)</option>
                        <option value="specific">–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è ($/–∫–≥)</option>
                        <option value="combined">–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è (% + $/–∫–≥)</option>
                    </select>
                </div>
                
                <div v-if="editParams.duty_type === 'percent' || editParams.duty_type === 'combined'" class="form-group">
                    <label>–ü–æ—à–ª–∏–Ω–∞ (%)</label>
                    <input
                        v-model.number="editParams.duty_rate"
                        type="number"
                        step="0.1"
                        min="0"
                        max="100"
                        :placeholder="currentDutyInfo && currentDutyInfo.duty_rate ? currentDutyInfo.duty_rate : '–ù–∞–ø—Ä–∏–º–µ—Ä: 15'"
                        class="form-input"
                    />
                    <div class="form-hint">
                        –¢–µ–∫—É—â–∞—è: {{ currentDutyInfo && currentDutyInfo.duty_rate ? currentDutyInfo.duty_rate + '%' : '‚Äî' }}
                    </div>
                </div>
                
                <div v-if="editParams.duty_type === 'specific' || editParams.duty_type === 'combined'" class="form-group">
                    <label>–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞ ($/–∫–≥)</label>
                    <input
                        v-model.number="editParams.specific_rate"
                        type="number"
                        step="0.01"
                        min="0"
                        :placeholder="currentDutyInfo && currentDutyInfo.specific_rate ? currentDutyInfo.specific_rate : '–ù–∞–ø—Ä–∏–º–µ—Ä: 2.5'"
                        class="form-input"
                    />
                    <div class="form-hint">
                        –¢–µ–∫—É—â–∞—è: {{ currentDutyInfo && currentDutyInfo.specific_rate ? currentDutyInfo.specific_rate + ' $/–∫–≥' : '‚Äî' }}
                    </div>
                </div>
                
                <div class="form-group">
                    <label>–ù–î–° (%)</label>
                    <input
                        v-model.number="editParams.vat_rate"
                        type="number"
                        step="0.1"
                        min="0"
                        max="100"
                        :placeholder="currentDutyInfo && currentDutyInfo.vat_rate ? currentDutyInfo.vat_rate : '–ù–∞–ø—Ä–∏–º–µ—Ä: 20'"
                        class="form-input"
                    />
                    <div class="form-hint">
                        –¢–µ–∫—É—â–∏–π: {{ currentDutyInfo && currentDutyInfo.vat_rate ? currentDutyInfo.vat_rate + '%' : '‚Äî' }}
                    </div>
                </div>
            </div>
            
            <!-- –ö–Ω–æ–ø–∫–∏ -->
            <div class="form-actions" style="display: flex; gap: 8px; margin-top: 16px;">
                <button @click="applyEdit" class="btn-primary">
                    –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                </button>
                <button @click="cancelEdit" class="btn-secondary">
                    –û—Ç–º–µ–Ω–∞
                </button>
            </div>
        </div>
    </div>
    `
};

