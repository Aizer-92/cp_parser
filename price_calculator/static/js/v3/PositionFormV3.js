/**
 * PositionFormV3.js - –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–∞—è –ø–æ—à–∞–≥–æ–≤–∞—è —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
 * 
 * ‚úÖ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì: Template –≤—ã–Ω–µ—Å–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
 * @see ./templates/position-form.template.js
 */

// –ò–º–ø–æ—Ä—Ç template (ES module)
import { POSITION_FORM_TEMPLATE } from './templates/position-form.template.js';

window.PositionFormV3 = {
    // ============================================
    // TEMPLATE (–≤—ã–Ω–µ—Å–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)
    // ============================================
    template: POSITION_FORM_TEMPLATE,
    
    
    props: {
        position: {
            type: Object,
            default: null
        }
    },
    
    data() {
        return {
            currentStep: 1,
            useSimpleWeight: false,
            isDragging: false,
            availableCategories: [],
            fileInputRef: null,
            fileInputMoreRef: null,
            form: {
                name: '',
                category: '',
                description: '',
                factory_url: '',
                price_yuan: null,
                weight_kg: null,
                customization: '',
                design_files_urls: [],
                // –ü–∞–∫–∫–∏–Ω–≥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                packing_box_length: null,
                packing_box_width: null,
                packing_box_height: null,
                packing_box_weight: null,
                packing_units_per_box: null
            },
            photoUrl: '',
            isSaving: false
        };
    },
    
    computed: {
        isEdit() {
            return !!this.position;
        },
        
        calculatedWeight() {
            if (!this.useSimpleWeight && 
                this.form.packing_box_weight && 
                this.form.packing_units_per_box && 
                this.form.packing_units_per_box > 0) {
                return this.form.packing_box_weight / this.form.packing_units_per_box;
            }
            return 0;
        }
    },
    
    async mounted() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        await this.loadCategories();
        
        if (this.position) {
            this.form = { 
                ...this.position,
                design_files_urls: this.position.design_files_urls || []
            };
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º: –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞–∫–∫–∏–Ω–≥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
            if (this.position.packing_units_per_box) {
                this.useSimpleWeight = false;
            } else {
                this.useSimpleWeight = true;
            }
        }
    },
    
    methods: {
        nextStep() {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —à–∞–≥–∞ 1
            if (this.currentStep === 1) {
                if (!this.form.name || !this.form.category) {
                    alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
                    return;
                }
            }
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —à–∞–≥–∞ 2
            if (this.currentStep === 2) {
                if (!this.form.price_yuan || this.form.price_yuan <= 0) {
                    alert('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ —é–∞–Ω—è—Ö');
                    return;
                }
                
                if (this.useSimpleWeight) {
                    if (!this.form.weight_kg || this.form.weight_kg <= 0) {
                        alert('–£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞');
                        return;
                    }
                } else {
                    if (!this.form.packing_box_length || !this.form.packing_box_width || 
                        !this.form.packing_box_height || !this.form.packing_box_weight || 
                        !this.form.packing_units_per_box) {
                        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–∞–∫–∫–∏–Ω–≥–∞');
                        return;
                    }
                }
            }
            
            this.currentStep++;
        },
        
        prevStep() {
            this.currentStep--;
        },
        
        handleSubmit() {
            if (this.currentStep === 2) {
                this.save();
            }
        },
        
        async save() {
            this.isSaving = true;
            try {
                const positionsAPI = window.usePositionsV3();
                
                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                const data = { ...this.form };
                
                // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–µ—Å - –æ—á–∏—â–∞–µ–º –ø–∞–∫–∫–∏–Ω–≥
                if (this.useSimpleWeight) {
                    data.packing_box_length = null;
                    data.packing_box_width = null;
                    data.packing_box_height = null;
                    data.packing_box_weight = null;
                    data.packing_units_per_box = null;
                } else {
                    // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–∫–∫–∏–Ω–≥ - –≤—ã—á–∏—Å–ª—è–µ–º weight_kg
                    data.weight_kg = this.calculatedWeight;
                }
                
                // –£–±–∏—Ä–∞–µ–º null/–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–æ –ù–ï 0!)
                Object.keys(data).forEach(key => {
                    if (data[key] === null || data[key] === '') {
                        delete data[key];
                    }
                });
                
                // –ö–†–ò–¢–ò–ß–ù–û: price_yuan –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å
                if (!data.price_yuan || data.price_yuan <= 0) {
                    alert('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ —é–∞–Ω—è—Ö –±–æ–ª—å—à–µ 0');
                    this.isSaving = false;
                    return;
                }
                
                let savedPosition;
                if (this.isEdit) {
                    savedPosition = await positionsAPI.updatePosition(this.position.id, data);
                    console.log('‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
                } else {
                    savedPosition = await positionsAPI.createPosition(data);
                    console.log('‚úÖ –ü–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', savedPosition);
                }
                
                // –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç
                if (!this.isEdit) {
                    this.$emit('saved', savedPosition);
                    this.$emit('calculate-routes', savedPosition);
                } else {
                    this.$emit('saved');
                }
                
                this.close();
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
                const errorMsg = error.response?.data?.detail || error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é';
                alert(`–û—à–∏–±–∫–∞: ${errorMsg}`);
            } finally {
                this.isSaving = false;
            }
        },
        
        async loadCategories() {
            try {
                const response = await axios.get('/api/v3/categories');
                const data = response.data;
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
                if (Array.isArray(data)) {
                    this.availableCategories = data;
                } else if (data.categories && Array.isArray(data.categories)) {
                    this.availableCategories = data.categories;
                } else {
                    this.availableCategories = [];
                }
                
                console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.availableCategories);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
            }
        },
        
        detectCategory() {
            if (!this.form.name || this.form.name.length < 3) return;
            
            const name = this.form.name.toLowerCase().trim();
            
            // –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ availableCategories
            const categories = this.availableCategories.map(c => {
                if (typeof c === 'string') return c.toLowerCase();
                if (c.category) return c.category.toLowerCase();
                return '';
            }).filter(c => c);
            
            console.log('üîç –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è:', name, '–≤ —Å–ø–∏—Å–∫–µ:', categories);
            
            // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
            for (const category of categories) {
                if (!category) continue;
                
                // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                if (name.includes(category)) {
                    this.form.category = category;
                    console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞:', category);
                    return;
                }
                
                // –ò–ª–∏ –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if (category.includes(name)) {
                    this.form.category = category;
                    console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞:', category);
                    return;
                }
            }
            
            console.log('‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è:', name);
        },
        
        triggerFileInput() {
            if (this.fileInputRef) {
                this.fileInputRef.click();
            }
        },
        
        triggerFileInputMore() {
            if (this.fileInputMoreRef) {
                this.fileInputMoreRef.click();
            }
        },
        
        handleDrop(e) {
            this.isDragging = false;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
            if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
                this.handleFileUpload(e.dataTransfer.files);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
            const url = e.dataTransfer.getData('text/plain');
            if (url && (url.startsWith('http://') || url.startsWith('https://'))) {
                this.form.design_files_urls.push(url);
            } else {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ');
            }
        },
        
        handleFileSelect(e) {
            const files = e.target.files;
            if (files && files.length > 0) {
                this.handleFileUpload(files);
            }
        },
        
        async handleFileUpload(files) {
            console.log('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤:', files.length);
            
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
                if (!file.type.startsWith('image/')) {
                    alert(`–§–∞–π–ª ${file.name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º`);
                    continue;
                }
                
                try {
                    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                    const formData = new FormData();
                    formData.append('file', file);
                    formData.append('folder', 'calc');
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ SFTP
                    const response = await axios.post('/api/sftp/upload', formData, {
                        headers: { 'Content-Type': 'multipart/form-data' }
                    });
                    
                    if (response.data.url) {
                        this.form.design_files_urls.push(response.data.url);
                        console.log('‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', response.data.url);
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', error);
                    alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${file.name}`);
                }
            }
        },
        
        addPhoto() {
            if (this.photoUrl && this.photoUrl.trim()) {
                const url = this.photoUrl.trim();
                if (url.startsWith('http://') || url.startsWith('https://')) {
                    this.form.design_files_urls.push(url);
                    this.photoUrl = '';
                } else {
                    alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://)');
                }
            }
        },
        
        removePhoto(index) {
            this.form.design_files_urls.splice(index, 1);
        },
        
        close() {
            this.$emit('close');
        }
    }
};
