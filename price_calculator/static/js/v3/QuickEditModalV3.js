// QuickEditModalV3.js - –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ quantity/markup
window.QuickEditModalV3 = {
    props: {
        calculationId: Number,
        initialQuantity: Number,
        initialMarkup: Number
    },
    
    data() {
        return {
            quantity: this.initialQuantity,
            markup: this.initialMarkup,
            isRecalculating: false
        };
    },
    
    methods: {
        close() {
            this.$emit('close');
        },
        
        async apply() {
            console.log('üíæ –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:', {
                calculationId: this.calculationId,
                quantity: this.quantity,
                markup: this.markup
            });
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (!this.quantity || this.quantity <= 0) {
                alert('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
                return;
            }
            
            if (!this.markup || this.markup <= 0) {
                alert('–ù–∞—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
                return;
            }
            
            this.isRecalculating = true;
            
            try {
                // –ü–µ—Ä–µ—Å—á–µ—Ç —á–µ—Ä–µ–∑ PUT API
                const response = await axios.put(
                    `/api/v3/calculations/${this.calculationId}`,
                    {
                        quantity: parseInt(this.quantity),
                        markup: parseFloat(this.markup)
                    }
                );
                
                console.log('‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω');
                
                // –≠–º–∏—Ç–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                this.$emit('recalculated', response.data);
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
                this.close();
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞:', error);
                const detail = error.response?.data?.detail;
                const message = typeof detail === 'string' ? detail : JSON.stringify(detail);
                alert('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞: ' + message);
            } finally {
                this.isRecalculating = false;
            }
        }
    },
    
    template: `
    <div class="modal-overlay" @click.self="close">
        <div class="modal-content" style="max-width: 400px;">
            <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
            <div class="modal-header">
                <h3>–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h3>
                <button @click="close" class="btn-close">√ó</button>
            </div>
            
            <!-- –§–æ—Ä–º–∞ -->
            <div class="modal-body">
                <div class="form-group">
                    <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (—à—Ç)</label>
                    <input
                        v-model.number="quantity"
                        type="number"
                        min="1"
                        step="1"
                        class="form-input"
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1000"
                        :disabled="isRecalculating"
                    />
                </div>
                
                <div class="form-group">
                    <label>–ù–∞—Ü–µ–Ω–∫–∞ (–º–Ω–æ–∂–∏—Ç–µ–ª—å)</label>
                    <input
                        v-model.number="markup"
                        type="number"
                        min="0.01"
                        step="0.01"
                        class="form-input"
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1.7"
                        :disabled="isRecalculating"
                    />
                    <div class="form-hint">
                        –ù–∞–ø—Ä–∏–º–µ—Ä: 1.7 = 70% –ø—Ä–∏–±—ã–ª–∏, 2.0 = 100% –ø—Ä–∏–±—ã–ª–∏
                    </div>
                </div>
            </div>
            
            <!-- –ö–Ω–æ–ø–∫–∏ -->
            <div class="modal-footer">
                <button
                    @click="apply"
                    :disabled="isRecalculating"
                    class="btn-primary"
                >
                    {{ isRecalculating ? '–ü–µ—Ä–µ—Å—á—ë—Ç...' : '–ü—Ä–∏–º–µ–Ω–∏—Ç—å' }}
                </button>
                <button
                    @click="close"
                    :disabled="isRecalculating"
                    class="btn-secondary"
                >
                    –û—Ç–º–µ–Ω–∞
                </button>
            </div>
        </div>
    </div>
    `
};

