// QuickModeV3.js - –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º —Ä–∞—Å—á—ë—Ç–∞ (Position + Calculation)
window.QuickModeV3 = {
    template: `
    <div class="quick-mode">
        <div class="card">
            <h2 class="card-title">–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á—ë—Ç</h2>
            
            <form @submit.prevent="calculate" class="form">
                
                <!-- ========================================== -->
                <!-- –°–ï–ö–¶–ò–Ø 1: –¢–û–í–ê–† (Position)                -->
                <!-- ========================================== -->
                <div class="form-section">
                    <h3 class="section-title">üì¶ –¢–æ–≤–∞—Ä</h3>
                    
                    <!-- –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ -->
                    <div class="form-group">
                        <label for="product-name">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *</label>
                        <input
                            id="product-name"
                            v-model="position.name"
                            type="text"
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –§—É—Ç–±–æ–ª–∫–∞ —Ö–ª–æ–ø–∫–æ–≤–∞—è"
                            required
                            class="form-input"
                        />
                    </div>
                    
                    <!-- –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è) -->
                    <div class="form-group">
                        <label for="category">
                            –ö–∞—Ç–µ–≥–æ—Ä–∏—è 
                            <span style="color: #6b7280; font-size: 13px;">(–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è)</span>
                        </label>
                        <input
                            id="category"
                            v-model="position.category"
                            type="text"
                            list="categories-list"
                            placeholder="–û–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                            class="form-input"
                        />
                        <datalist id="categories-list">
                            <option v-for="cat in availableCategories" :key="cat" :value="cat">
                        </datalist>
                    </div>
                    
                    <!-- –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ -->
                    <div class="form-group">
                        <label for="description">–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</label>
                        <textarea
                            id="description"
                            v-model="position.description"
                            rows="2"
                            placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏..."
                            class="form-input"
                        ></textarea>
                    </div>
                    
                    <!-- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ -->
                    <div class="form-group">
                        <label>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞</label>
                        <div class="photo-dropzone" @click="$refs.photoInput.click()" @drop.prevent="handlePhotoDrop" @dragover.prevent>
                            <input
                                ref="photoInput"
                                type="file"
                                accept="image/*"
                                multiple
                                style="display: none;"
                                @change="handlePhotoSelect"
                            />
                            <div v-if="position.photos.length === 0" class="dropzone-placeholder">
                                <span>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</span>
                            </div>
                            <div v-else class="photos-preview">
                                <div v-for="(photo, index) in position.photos" :key="index" class="photo-item">
                                    <img :src="photo.preview" :alt="photo.name" />
                                    <span v-if="index === 0" class="main-badge">–æ—Å–Ω–æ–≤–Ω–∞—è</span>
                                    <button type="button" @click.stop="removePhoto(index)" class="remove-photo">√ó</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è -->
                    <div class="form-group">
                        <label for="customization">–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞</label>
                        <textarea
                            id="customization"
                            v-model="position.customization"
                            rows="2"
                            placeholder="–û–ø–∏—à–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ (–ø–µ—á–∞—Ç—å, –≥—Ä–∞–≤–∏—Ä–æ–≤–∫–∞ –∏ —Ç.–¥.)"
                            class="form-input"
                        ></textarea>
                    </div>
                </div>
                
                <!-- ========================================== -->
                <!-- –°–ï–ö–¶–ò–Ø 2: –†–ê–°–ß–Å–¢ (Calculation)            -->
                <!-- ========================================== -->
                <div class="form-section">
                    <h3 class="section-title">üí∞ –†–∞—Å—á—ë—Ç</h3>
                    
                    <!-- –§–∞–±—Ä–∏–∫–∞ -->
                    <div class="form-group">
                        <label for="factory">üè≠ –§–∞–±—Ä–∏–∫–∞ (WeChat / URL)</label>
                        <div class="input-with-button">
                            <input
                                id="factory"
                                v-model="calculation.factory_url"
                                type="text"
                                placeholder="https://... –∏–ª–∏ WeChat ID"
                                class="form-input"
                            />
                            <button type="button" @click="selectFactory" class="btn-secondary btn-sm">
                                –ò–∑ —Å–ø–∏—Å–∫–∞
                            </button>
                        </div>
                    </div>
                    
                    <!-- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –¶–µ–Ω–∞, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –°—Ä–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ -->
                    <div class="form-row">
                        <div class="form-group flex-1">
                            <label for="price">–¶–µ–Ω–∞ (¬•) *</label>
                            <input
                                id="price"
                                v-model.number="calculation.price_yuan"
                                type="number"
                                step="0.01"
                                required
                                class="form-input"
                            />
                        </div>
                        
                        <div class="form-group flex-1">
                            <label for="quantity">–ö–æ–ª-–≤–æ *</label>
                            <input
                                id="quantity"
                                v-model.number="calculation.quantity"
                                type="number"
                                required
                                class="form-input"
                            />
                        </div>
                        
                        <div class="form-group flex-1">
                            <label for="production-time">–°—Ä–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (–¥–Ω–∏)</label>
                            <input
                                id="production-time"
                                v-model.number="calculation.production_time_days"
                                type="number"
                                min="0"
                                class="form-input"
                            />
                        </div>
                    </div>
                    
                    <!-- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ —É–ø–∞–∫–æ–≤–∫–∏ -->
                    <div class="mode-toggle">
                        <label class="toggle-label">
                            <input
                                type="radio"
                                :value="false"
                                v-model="calculation.detailedMode"
                                class="toggle-radio"
                            />
                            <span>–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á—ë—Ç (–ø–æ –≤–µ—Å—É)</span>
                        </label>
                        <label class="toggle-label">
                            <input
                                type="radio"
                                :value="true"
                                v-model="calculation.detailedMode"
                                class="toggle-radio"
                            />
                            <span>–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç (—É–ø–∞–∫–æ–≤–∫–∞)</span>
                        </label>
                    </div>
                    
                    <!-- –í–µ—Å (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º) -->
                    <div v-if="!calculation.detailedMode" class="weight-section">
                        <div class="form-group">
                            <label for="weight">–í–µ—Å 1 –µ–¥–∏–Ω–∏—Ü—ã (–∫–≥) *</label>
                            <input
                                id="weight"
                                v-model.number="calculation.weight_kg"
                                type="number"
                                step="0.01"
                                required
                                class="form-input"
                            />
                        </div>
                    </div>
                    
                    <!-- –ü–∞–∫–∫–∏–Ω–≥ (–¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º) -->
                    <div v-else class="packing-section">
                        <h4 style="font-size: 15px; font-weight: 600; margin-bottom: 12px;">üì¶ –£–ø–∞–∫–æ–≤–∫–∞ *</h4>
                        
                        <div class="form-row">
                            <div class="form-group flex-1">
                                <label for="units-per-box">–®—Ç—É–∫ –≤ –∫–æ—Ä–æ–±–∫–µ</label>
                                <input
                                    id="units-per-box"
                                    v-model.number="calculation.packing_units_per_box"
                                    type="number"
                                    required
                                    class="form-input"
                                />
                            </div>
                            
                            <div class="form-group flex-1">
                                <label for="box-weight">–í–µ—Å –∫–æ—Ä–æ–±–∫–∏ (–∫–≥)</label>
                                <input
                                    id="box-weight"
                                    v-model.number="calculation.packing_box_weight"
                                    type="number"
                                    step="0.01"
                                    required
                                    class="form-input"
                                />
                            </div>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group flex-1">
                                <label for="box-length">–î–ª–∏–Ω–∞ (–º)</label>
                                <input
                                    id="box-length"
                                    v-model.number="calculation.packing_box_length"
                                    type="number"
                                    step="0.01"
                                    required
                                    class="form-input"
                                />
                            </div>
                            
                            <div class="form-group flex-1">
                                <label for="box-width">–®–∏—Ä–∏–Ω–∞ (–º)</label>
                                <input
                                    id="box-width"
                                    v-model.number="calculation.packing_box_width"
                                    type="number"
                                    step="0.01"
                                    required
                                    class="form-input"
                                />
                            </div>
                            
                            <div class="form-group flex-1">
                                <label for="box-height">–í—ã—Å–æ—Ç–∞ (–º)</label>
                                <input
                                    id="box-height"
                                    v-model.number="calculation.packing_box_height"
                                    type="number"
                                    step="0.01"
                                    required
                                    class="form-input"
                                />
                            </div>
                        </div>
                        
                        <!-- –†–∞—Å—á—ë—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è -->
                        <div v-if="calculatedWeightPerUnit" class="calculated-values">
                            <div class="calc-item">
                                <span class="calc-label">–í–µ—Å 1 —à—Ç:</span>
                                <span class="calc-value">{{ calculatedWeightPerUnit }} –∫–≥</span>
                            </div>
                            <div class="calc-item">
                                <span class="calc-label">–û–±—ä—ë–º –∫–æ—Ä–æ–±–∫–∏:</span>
                                <span class="calc-value">{{ calculatedBoxVolume }} –º¬≥</span>
                            </div>
                            <div v-if="calculatedDensity" class="calc-item">
                                <span class="calc-label">–ü–ª–æ—Ç–Ω–æ—Å—Ç—å:</span>
                                <span class="calc-value">{{ calculatedDensity }} –∫–≥/–º¬≥</span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- –û–±—Ä–∞–∑–µ—Ü (–æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫) -->
                    <div class="sample-section">
                        <h4 style="font-size: 15px; font-weight: 600; margin: 16px 0 12px;">üé® –û–±—Ä–∞–∑–µ—Ü</h4>
                        <div class="form-row">
                            <div class="form-group flex-1">
                                <label for="sample-time">–°—Ä–æ–∫ –æ–±—Ä–∞–∑—Ü–∞ (–¥–Ω–∏)</label>
                                <input
                                    id="sample-time"
                                    v-model.number="calculation.sample_time_days"
                                    type="number"
                                    min="0"
                                    class="form-input"
                                />
                            </div>
                            
                            <div class="form-group flex-1">
                                <label for="sample-price">–¶–µ–Ω–∞ –æ–±—Ä–∞–∑—Ü–∞ (¬•)</label>
                                <input
                                    id="sample-price"
                                    v-model.number="calculation.sample_price_yuan"
                                    type="number"
                                    step="0.01"
                                    min="0"
                                    class="form-input"
                                />
                            </div>
                        </div>
                    </div>
                    
                    <!-- –ù–∞—Ü–µ–Ω–∫–∞ (–≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ) -->
                    <div class="markup-section">
                        <h4 style="font-size: 15px; font-weight: 600; margin: 16px 0 12px;">üíµ –ù–∞—Ü–µ–Ω–∫–∞</h4>
                        <div class="form-group">
                            <label for="markup">–ù–∞—Ü–µ–Ω–∫–∞ *</label>
                            <input
                                id="markup"
                                v-model.number="calculation.markup"
                                type="number"
                                step="0.1"
                                required
                                class="form-input"
                            />
                        </div>
                    </div>
                </div>
                
                <!-- –ö–Ω–æ–ø–∫–∏ -->
                <div class="form-actions">
                    <button
                        type="submit"
                        :disabled="isCalculating || !isFormValid"
                        class="btn-primary"
                    >
                        {{ isCalculating ? '–†–∞—Å—á—ë—Ç...' : '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å' }}
                    </button>
                    <button
                        v-if="result"
                        type="button"
                        @click="saveAsPosition"
                        class="btn-secondary"
                    >
                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ü–æ–∑–∏—Ü–∏–∏
                    </button>
                </div>
            </form>
        </div>
        
        <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∏–¥ -->
        <div v-if="result" class="results-compact">
            <div class="card-header">
                <h2 class="card-title">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h2>
                <button @click="reset" class="btn-text">–ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç</button>
            </div>
            
            <!-- –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ -->
            <div v-for="(route, key) in result.routes" :key="key" class="result-row">
                <span class="route-name">{{ formatRouteName(key) }}:</span>
                <span class="route-prices">
                    {{ formatPrice(route.cost_per_unit_rub) }}‚ÇΩ
                    <span class="route-arrow">‚Üí</span>
                    {{ formatPrice(route.sale_per_unit_rub) }}‚ÇΩ
                </span>
                <span class="route-profit" :class="{ negative: route.profit_rub < 0 }">
                    (–ø—Ä–∏–±—ã–ª—å {{ formatPrice(route.profit_rub) }}‚ÇΩ)
                </span>
            </div>
            
            <!-- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π -->
            <div class="form-actions" style="margin-top: 16px;">
                <button @click="saveCalculation" class="btn-secondary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—á—ë—Ç</button>
                <button @click="saveAsPosition" class="btn-secondary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ü–æ–∑–∏—Ü–∏–∏</button>
            </div>
        </div>
    </div>
    `,
    
    data() {
        return {
            // –ü–û–ó–ò–¶–ò–Ø (Position) - –ß–¢–û –º—ã –ø—Ä–æ–¥–∞–µ–º
            position: {
                name: '',
                category: '',
                description: '',
                customization: '',
                photos: []
            },
            
            // –†–ê–°–ß–Å–¢ (Calculation) - –≤–µ—Å—å —Ä–∞—Å—á—ë—Ç –æ—Ç —Ñ–∞–±—Ä–∏–∫–∏
            calculation: {
                // –§–∞–±—Ä–∏–∫–∞
                factory_url: '',
                
                // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á—ë—Ç
                price_yuan: 0,
                quantity: 1000,
                production_time_days: 0,
                
                // –†–µ–∂–∏–º —Ä–∞—Å—á—ë—Ç–∞
                detailedMode: false,
                weight_kg: 0.2,
                
                // –ü–∞–∫–∫–∏–Ω–≥ (–µ—Å–ª–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π)
                packing_units_per_box: 0,
                packing_box_weight: 0,
                packing_box_length: 0,
                packing_box_width: 0,
                packing_box_height: 0,
                
                // –û–±—Ä–∞–∑–µ—Ü (–æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫)
                sample_time_days: 0,
                sample_price_yuan: 0,
                
                // –ù–∞—Ü–µ–Ω–∫–∞ (–≤ –∫–æ–Ω—Ü–µ)
                markup: 1.7
            },
            
            availableCategories: [],
            isCalculating: false,
            result: null
        };
    },
    
    computed: {
        calculatedWeightPerUnit() {
            if (!this.calculation.detailedMode) return null;
            
            if (!this.calculation.packing_units_per_box || !this.calculation.packing_box_weight) {
                return null;
            }
            
            return (this.calculation.packing_box_weight / this.calculation.packing_units_per_box).toFixed(4);
        },
        
        calculatedBoxVolume() {
            if (!this.calculation.detailedMode) return null;
            
            const l = this.calculation.packing_box_length;
            const w = this.calculation.packing_box_width;
            const h = this.calculation.packing_box_height;
            
            if (!l || !w || !h) return null;
            
            return (l * w * h).toFixed(4);
        },
        
        calculatedDensity() {
            if (!this.calculation.detailedMode) return null;
            
            const volume = this.calculatedBoxVolume;
            const weight = this.calculation.packing_box_weight;
            
            if (!volume || !weight) return null;
            
            return (weight / parseFloat(volume)).toFixed(1);
        },
        
        isFormValid() {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
            if (!this.position.name || !this.calculation.price_yuan || !this.calculation.quantity) {
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –ø–æ —Ä–µ–∂–∏–º—É
            if (this.calculation.detailedMode) {
                return this.calculation.packing_units_per_box > 0 &&
                       this.calculation.packing_box_weight > 0 &&
                       this.calculation.packing_box_length > 0 &&
                       this.calculation.packing_box_width > 0 &&
                       this.calculation.packing_box_height > 0;
            } else {
                return this.calculation.weight_kg > 0;
            }
        }
    },
    
    watch: {
        // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        'position.name'(newName) {
            if (newName && newName.length > 2) {
                clearTimeout(this._categoryDetectTimer);
                this._categoryDetectTimer = setTimeout(() => {
                    this.detectCategory(newName);
                }, 500);
            }
        }
    },
    
    async mounted() {
        await this.loadCategories();
    },
    
    methods: {
        async loadCategories() {
            try {
                const v3 = window.useCalculationV3();
                const categories = await v3.getCategories();
                this.availableCategories = categories.map(c => c.category || c.name || c);
                console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', this.availableCategories.length);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
            }
        },
        
        detectCategory(productName) {
            if (!productName || !this.availableCategories.length) return;
            
            const nameLower = productName.toLowerCase();
            
            // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è
            const detected = this.availableCategories.find(cat => 
                nameLower.includes(cat.toLowerCase())
            );
            
            if (detected && detected !== this.position.category) {
                this.position.category = detected;
                console.log('‚úÖ –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', detected);
            } else if (!detected && !this.position.category) {
                this.position.category = '–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è';
                console.log('‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"');
            }
        },
        
        async calculate() {
            this.isCalculating = true;
            this.result = null;
            
            try {
                const v3 = window.useCalculationV3();
                
                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
                const requestData = {
                    product_name: this.position.name,
                    product_url: this.calculation.factory_url || '',
                    price_yuan: this.calculation.price_yuan,
                    quantity: this.calculation.quantity,
                    markup: this.calculation.markup,
                    forced_category: this.position.category || undefined,
                    is_precise_calculation: this.calculation.detailedMode
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É–ø–∞–∫–æ–≤–∫–∏ –∏–ª–∏ –≤–µ—Å–∞
                if (this.calculation.detailedMode) {
                    requestData.packing_units_per_box = this.calculation.packing_units_per_box;
                    requestData.packing_box_weight = this.calculation.packing_box_weight;
                    requestData.packing_box_length = this.calculation.packing_box_length;
                    requestData.packing_box_width = this.calculation.packing_box_width;
                    requestData.packing_box_height = this.calculation.packing_box_height;
                } else {
                    requestData.weight_kg = this.calculation.weight_kg;
                }
                
                console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–∞—Å—á–µ—Ç:', requestData);
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á—ë—Ç
                const result = await v3.calculate(requestData);
                this.result = result;
                
                console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞:', result);
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞:', error);
                const errorMsg = error.response?.data?.detail || error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á—ë—Ç';
                alert(`–û—à–∏–±–∫–∞: ${errorMsg}`);
            } finally {
                this.isCalculating = false;
            }
        },
        
        reset() {
            this.result = null;
            this.position.name = '';
            this.position.category = '';
            this.position.description = '';
            this.position.customization = '';
            this.position.photos = [];
        },
        
        selectFactory() {
            alert('–§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–±—Ä–∏–∫–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ');
        },
        
        saveCalculation() {
            alert('–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—á—ë—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
        },
        
        saveAsPosition() {
            this.$emit('save-as-position', {
                position: this.position,
                calculation: this.calculation,
                result: this.result
            });
        },
        
        // –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        handlePhotoSelect(event) {
            const files = Array.from(event.target.files);
            this.addPhotos(files);
        },
        
        handlePhotoDrop(event) {
            const files = Array.from(event.dataTransfer.files).filter(f => f.type.startsWith('image/'));
            this.addPhotos(files);
        },
        
        addPhotos(files) {
            files.forEach(file => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    this.position.photos.push({
                        file: file,
                        name: file.name,
                        preview: e.target.result
                    });
                };
                reader.readAsDataURL(file);
            });
        },
        
        removePhoto(index) {
            this.position.photos.splice(index, 1);
        },
        
        formatRouteName(key) {
            const names = {
                highway_rail: '–ñ–î',
                highway_air: '–ê–≤–∏–∞',
                highway_contract: '–ö–æ–Ω—Ç—Ä–∞–∫—Ç',
                prologix: 'Prologix',
                sea_container: '–ú–æ—Ä–µ'
            };
            return names[key] || key;
        },
        
        formatPrice(price) {
            if (price === null || price === undefined || isNaN(price)) return '0';
            return Number(price).toLocaleString('ru-RU', {
                minimumFractionDigits: 0,
                maximumFractionDigits: 2
            });
        }
    }
};


