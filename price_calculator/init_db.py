#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –¥–ª—è Railway
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 init_db.py
"""

import os
import sys

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ë–î, –¥–æ–±–∞–≤–ª—è—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏"""
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î...")
    
    try:
        from database import get_database_connection, close_database_connection
        
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ë–î: {db_type}")
        
        if db_type == 'postgres':
            print("üêò PostgreSQL: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º custom_logistics –µ—Å–ª–∏ –Ω–µ—Ç
            try:
                cursor.execute("""
                    ALTER TABLE calculations 
                    ADD COLUMN IF NOT EXISTS custom_logistics JSONB
                """)
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ custom_logistics –≥–æ—Ç–æ–≤–∞")
            except Exception as e:
                print(f"‚ö†Ô∏è custom_logistics: {e}")
                conn.rollback()
            
            # –î–æ–±–∞–≤–ª—è–µ–º forced_category –µ—Å–ª–∏ –Ω–µ—Ç
            try:
                cursor.execute("""
                    ALTER TABLE calculations 
                    ADD COLUMN IF NOT EXISTS forced_category TEXT
                """)
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ forced_category –≥–æ—Ç–æ–≤–∞")
            except Exception as e:
                print(f"‚ö†Ô∏è forced_category: {e}")
                conn.rollback()
            
            conn.commit()
            
        else:
            print("üì¶ SQLite: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...")
            cursor.execute("PRAGMA table_info(calculations)")
            columns = [row[1] for row in cursor.fetchall()]
            
            if 'custom_logistics' not in columns:
                cursor.execute("ALTER TABLE calculations ADD COLUMN custom_logistics TEXT")
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ custom_logistics")
            else:
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ custom_logistics —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            if 'forced_category' not in columns:
                cursor.execute("ALTER TABLE calculations ADD COLUMN forced_category TEXT")
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ forced_category")
            else:
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ forced_category —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            conn.commit()
        
        cursor.close()
        close_database_connection()
        
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = init_database()
    sys.exit(0 if success else 1)







