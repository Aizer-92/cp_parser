#!/usr/bin/env python3
"""
Railway PostgreSQL Database Helper
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –Ω–∞ Railway

‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
export RAILWAY_DB_HOST="gondola.proxy.rlwy.net"
export RAILWAY_DB_PORT="13805"
export RAILWAY_DB_USER="postgres"
export RAILWAY_DB_PASSWORD="your_password_here"
export RAILWAY_DB_NAME="railway"

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª .env (–Ω–µ –∫–æ–º–º–∏—Ç–∏—Ç—å –≤ Git!)
"""
import psycopg2
from psycopg2.extras import RealDictCursor
import json
import os

# Railway PostgreSQL Connection (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
RAILWAY_CONFIG = {
    'host': os.getenv('RAILWAY_DB_HOST', 'gondola.proxy.rlwy.net'),
    'port': int(os.getenv('RAILWAY_DB_PORT', '13805')),
    'user': os.getenv('RAILWAY_DB_USER', 'postgres'),
    'password': os.getenv('RAILWAY_DB_PASSWORD', ''),  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å!
    'database': os.getenv('RAILWAY_DB_NAME', 'railway')
}

def get_railway_connection():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway PostgreSQL"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–æ–ª—è
    if not RAILWAY_CONFIG['password']:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è Railway PostgreSQL!")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export RAILWAY_DB_PASSWORD='your_password'")
        return None
    
    try:
        conn = psycopg2.connect(**RAILWAY_CONFIG)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway PostgreSQL: {e}")
        return None

def execute_query(query, params=None, fetch=True):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å –∫ Railway –ë–î
    
    Args:
        query: SQL –∑–∞–ø—Ä–æ—Å
        params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        fetch: –í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (True) –∏–ª–∏ —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å (False)
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ None
    """
    conn = get_railway_connection()
    if not conn:
        return None
    
    try:
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        cursor.execute(query, params)
        
        if fetch:
            results = cursor.fetchall()
            conn.close()
            return results
        else:
            conn.commit()
            affected_rows = cursor.rowcount
            conn.close()
            print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {affected_rows}")
            return affected_rows
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        if conn:
            conn.rollback()
            conn.close()
        return None

def add_new_category_to_railway():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è' –≤ Railway PostgreSQL"""
    print("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è' –≤ Railway PostgreSQL...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    check_query = "SELECT * FROM categories WHERE category = %s"
    existing = execute_query(check_query, ('–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',))
    
    if existing and len(existing) > 0:
        print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Railway")
        print(f"   ID: {existing[0]['id']}, Category: {existing[0]['category']}")
        return
    
    # –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_data = {
        'tn_ved_code': '',
        'duty_rate': '0%',
        'vat_rate': '20%',
        'certificates': [],
        'description': '–î–ª—è —Ç–æ–≤–∞—Ä–æ–≤, –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ—à–ª–∏–Ω.'
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    insert_query = """
        INSERT INTO categories (category, material, data)
        VALUES (%s, %s, %s)
        RETURNING id, category
    """
    
    result = execute_query(
        insert_query,
        ('–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', '', json.dumps(category_data, ensure_ascii=False)),
        fetch=False
    )
    
    if result:
        print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Railway PostgreSQL")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º
        check_result = execute_query(check_query, ('–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',))
        if check_result:
            data = check_result[0]['data']
            # –ï—Å–ª–∏ data —É–∂–µ dict (PostgreSQL —Å RealDictCursor), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            # –ï—Å–ª–∏ data —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º JSON
            if isinstance(data, str):
                data = json.loads(data)
            print(f"   ID: {check_result[0]['id']}, Category: {check_result[0]['category']}")
            print(f"   Duty: {data.get('duty_rate', 'N/A')}, VAT: {data.get('vat_rate', 'N/A')}")

def list_categories():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ Railway PostgreSQL"""
    print("üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ Railway PostgreSQL:")
    
    query = "SELECT id, category, material FROM categories ORDER BY id"
    results = execute_query(query)
    
    if results:
        print(f"\n–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(results)}\n")
        for row in results:
            print(f"  {row['id']:3d}. {row['category']}")
            if row['material']:
                print(f"       ‚îî‚îÄ {row['material']}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

def get_category(category_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–º–µ–Ω–∏"""
    print(f"üîç –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_name}")
    
    query = "SELECT * FROM categories WHERE category = %s"
    results = execute_query(query, (category_name,))
    
    if results and len(results) > 0:
        row = results[0]
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:")
        print(f"   ID: {row['id']}")
        print(f"   Category: {row['category']}")
        print(f"   Material: {row['material']}")
        
        if row['data']:
            data = row['data']
            if isinstance(data, str):
                data = json.loads(data)
            print(f"\n   Data:")
            for key, value in data.items():
                print(f"     {key}: {value}")
        
        return row
    else:
        print(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None

if __name__ == '__main__':
    import sys
    
    if len(sys.argv) < 2:
        print("""
Railway PostgreSQL Helper - –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î –Ω–∞ Railway

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 railway_db.py add_new_category    # –î–æ–±–∞–≤–∏—Ç—å "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
    python3 railway_db.py list                # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    python3 railway_db.py get "–∫–∞—Ç–µ–≥–æ—Ä–∏—è"     # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    python3 railway_db.py test                # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

–ü—Ä–∏–º–µ—Ä—ã:
    python3 railway_db.py add_new_category
    python3 railway_db.py list
    python3 railway_db.py get "–∫—Ä—É–∂–∫–∏"
        """)
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command == 'test':
        conn = get_railway_connection()
        if conn:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            conn.close()
        else:
            print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
    
    elif command == 'add_new_category':
        add_new_category_to_railway()
    
    elif command == 'list':
        list_categories()
    
    elif command == 'get':
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            sys.exit(1)
        get_category(sys.argv[2])
    
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        sys.exit(1)

