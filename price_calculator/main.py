#!/usr/bin/env python3
"""
Price Calculator Web Application
FastAPI + Vue.js –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤
"""

from fastapi import FastAPI, HTTPException, Request, Response, Depends
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse, FileResponse, RedirectResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional, List, Dict, Any
import json
from datetime import datetime
import os
import secrets
from contextlib import asynccontextmanager

import importlib
import sys

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
if 'price_calculator' in sys.modules:
    importlib.reload(sys.modules['price_calculator'])
    
from price_calculator import PriceCalculator
from database import init_database, save_calculation_to_db, get_calculation_history, restore_from_backup, update_calculation
from customs_data import customs_loader

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ ConfigLoader
try:
    import sys
    from pathlib import Path
    config_dir = Path(__file__).parent / "config"
    if str(config_dir) not in sys.path:
        sys.path.insert(0, str(config_dir))
    
    from config_loader import get_app_config
    app_config = get_app_config()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    AUTH_USERNAME = app_config.auth.username
    AUTH_PASSWORD = app_config.auth.password  
    SESSION_SECRET = app_config.auth.session_secret
    
    print("OK –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ ConfigLoader")
    
except ImportError:
    # Fallback –∫ —Å—Ç–∞—Ä—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    print("WARNING ConfigLoader –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    AUTH_USERNAME = "admin"
    AUTH_PASSWORD = "admin123"
    SESSION_SECRET = secrets.token_urlsafe(32)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
active_sessions = set()

def create_session_token() -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏"""
    token = secrets.token_urlsafe(32)
    active_sessions.add(token)
    return token

def verify_session(session_token: str = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
    return session_token and session_token in active_sessions

def require_auth(request: Request):
    """Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        raise HTTPException(status_code=401, detail="Authentication required")
    return True

@asynccontextmanager
async def lifespan(app: FastAPI):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–ù–ï –ö–†–ò–¢–ò–ß–ù–û –µ—Å–ª–∏ —É–ø–∞–¥–µ—Ç)
    try:
        # ‚ö†Ô∏è –ú–ò–ì–†–ê–¶–ò–Ø –û–¢–ö–õ–Æ–ß–ï–ù–ê - –ë–î —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ Railway
        # init_database()  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è –∏–∑–º–µ–Ω—è—Ç—å —Å—Ö–µ–º—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –¥–µ–ø–ª–æ–µ
        restore_from_backup()
        print("OK –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    except Exception as e:
        print(f"WARNING –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        print("INFO –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏")
    
    print("OK –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
    yield
    # Cleanup –∑–¥–µ—Å—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

app = FastAPI(
    title="Price Calculator",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤",
    version="1.0.0",
    lifespan=lifespan
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –§–ê–ó–ê 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤ (Railway-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ)
from pathlib import Path

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = Path(__file__).resolve().parent
STATIC_DIR = BASE_DIR / "static"
TEMPLATES_DIR = BASE_DIR / "templates"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç (–¥–ª—è Railway)
STATIC_DIR.mkdir(exist_ok=True)
TEMPLATES_DIR.mkdir(exist_ok=True)

app.mount("/static", StaticFiles(directory=str(STATIC_DIR)), name="static")
# Vite build assets
DIST_DIR = Path(__file__).parent / "frontend" / "dist"
if DIST_DIR.exists():
    app.mount("/assets", StaticFiles(directory=str(DIST_DIR / "assets")), name="vite-assets")
    # Vite assets –¥–ª—è /vite/ –º–∞—Ä—à—Ä—É—Ç–∞
    app.mount("/vite/assets", StaticFiles(directory=str(DIST_DIR / "assets")), name="vite-route-assets")
templates = Jinja2Templates(directory=str(TEMPLATES_DIR))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞  
calculator = None

def get_calculator():
    global calculator
    if calculator is None:
        try:
            print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä...")
            calculator = PriceCalculator()
            print("‚úÖ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {e}")
            import traceback
            traceback.print_exc()
            return None
    return calculator

# Pydantic –º–æ–¥–µ–ª–∏
class CalculationRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    product_name: str
    price_yuan: float
    weight_kg: float
    quantity: int
    product_url: Optional[str] = ""
    custom_rate: Optional[float] = None
    delivery_type: str = "rail"  # rail –∏–ª–∏ air
    markup: float = 1.7
    # –§–ª–∞–≥ –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Å –ø–∞–∫–∏–Ω–≥–æ–º
    is_precise_calculation: bool = False
    # –ü–æ–ª—è –ø–∞–∫–∏–Ω–≥–∞ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ is_precise_calculation=True)
    packing_units_per_box: Optional[int] = None
    packing_box_weight: Optional[float] = None
    packing_box_length: Optional[float] = None
    packing_box_width: Optional[float] = None
    packing_box_height: Optional[float] = None

class CalculationResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã"""
    id: Optional[int] = None
    product_name: str
    category: str
    quantity: int
    unit_price_yuan: float
    total_price: Dict[str, float]
    logistics: Dict[str, Any]
    additional_costs: dict
    cost_price: Dict[str, Any]
    sale_price: Dict[str, Any] 
    markup: float
    profit: Dict[str, Any]
    weight_kg: float
    estimated_weight: float
    product_url: str
    created_at: Optional[str] = None
    # –¢–∏–ø —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    calculation_type: str = "quick"  # "quick" –∏–ª–∏ "precise"
    # –ü–æ–ª—è –ø–∞–∫–∏–Ω–≥–∞ (–∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤)
    packing_units_per_box: Optional[int] = None
    packing_box_weight: Optional[float] = None
    packing_box_length: Optional[float] = None
    packing_box_width: Optional[float] = None
    packing_box_height: Optional[float] = None
    # –î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º
    customs_info: Optional[Dict[str, Any]] = None
    customs_calculations: Optional[Dict[str, float]] = None
    density_warning: Optional[Dict[str, Any]] = None
    # –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –ö–û–ù–¢–†–ê–ö–¢–ê
    contract_cost: Optional[Dict[str, Any]] = None
    cost_difference: Optional[Dict[str, Any]] = None

class CategoryInfo(BaseModel):
    category: str
    material: str
    density: Optional[float] = None
    rates: Dict[str, float]
    tnved_code: Optional[str] = ""
    recommendations: Optional[Dict[str, Any]] = None
    
    class Config:
        extra = "ignore"  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ database.py

def save_calculation(calculation: dict, request: CalculationRequest = None) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print(f"üîß save_calculation: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è '{calculation.get('product_name')}'")
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
        db_data = {
            'product_name': calculation['product_name'],
            'category': calculation['category'],
            'price_yuan': calculation['unit_price_yuan'],
            'weight_kg': calculation['weight_kg'],
            'quantity': calculation['quantity'],
            'markup': calculation['markup'],
            'custom_rate': calculation['logistics'].get('rate_usd'),
            'product_url': calculation.get('product_url', ''),
            'cost_price_total_rub': calculation['cost_price']['total']['rub'],
            'cost_price_total_usd': calculation['cost_price']['total']['usd'],
            'sale_price_total_rub': calculation['sale_price']['total']['rub'],
            'sale_price_total_usd': calculation['sale_price']['total']['usd'],
            'profit_total_rub': calculation['profit']['total']['rub'],
            'profit_total_usd': calculation['profit']['total']['usd'],
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞
            'calculation_type': calculation.get('calculation_type', 'quick')
        }
        
        print(f"üîß –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: {len(db_data)} –ø–æ–ª–µ–π")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–∏–Ω–≥–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if request and request.packing_units_per_box:
            db_data.update({
                'packing_units_per_box': request.packing_units_per_box,
                'packing_box_weight': request.packing_box_weight,
                'packing_box_length': request.packing_box_length,
                'packing_box_width': request.packing_box_width,
                'packing_box_height': request.packing_box_height,
                # –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
                'packing_total_boxes': (calculation['quantity'] + request.packing_units_per_box - 1) // request.packing_units_per_box,  # ceiling division
                'packing_total_volume': (request.packing_box_length * request.packing_box_width * request.packing_box_height) * ((calculation['quantity'] + request.packing_units_per_box - 1) // request.packing_units_per_box),
                'packing_total_weight': request.packing_box_weight * ((calculation['quantity'] + request.packing_units_per_box - 1) // request.packing_units_per_box)
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—à–ª–∏–Ω–∞—Ö –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        customs_info = calculation.get('customs_info', {})
        customs_calculations = calculation.get('customs_calculations', {})
        density_warning = calculation.get('density_warning', {})
        
        if customs_info:
            db_data.update({
                'tnved_code': customs_info.get('tnved_code'),
                'duty_rate': customs_info.get('duty_rate'),
                'vat_rate': customs_info.get('vat_rate'),
                'certificates': ', '.join(customs_info.get('certificates', [])) if customs_info.get('certificates') else None,
                'customs_notes': customs_info.get('required_documents')
            })
        
        if customs_calculations:
            db_data.update({
                'duty_amount_usd': customs_calculations.get('duty_amount_usd'),
                'vat_amount_usd': customs_calculations.get('vat_amount_usd'),
                'total_customs_cost_usd': customs_calculations.get('total_customs_cost_usd')
            })
        
        if density_warning:
            db_data.update({
                'density_warning_message': density_warning.get('message'),
                'calculated_density': density_warning.get('calculated_density'),
                'category_density': density_warning.get('category_density')
            })
        
        print(f"üîß –í—ã–∑–æ–≤ save_calculation_to_db —Å {len(db_data)} –ø–æ–ª—è–º–∏")
        result_id = save_calculation_to_db(db_data)
        
        if result_id:
            print(f"‚úÖ save_calculation_to_db –≤–µ—Ä–Ω—É–ª ID: {result_id}")
        else:
            print(f"‚ö†Ô∏è save_calculation_to_db –≤–µ—Ä–Ω—É–ª None –∏–ª–∏ 0")
        
        return result_id
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ save_calculation: {e}")
        import traceback
        traceback.print_exc()
        return None

def get_history_calculations() -> List[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ database.py"""
    try:
        return get_calculation_history()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@app.get("/login", response_class=HTMLResponse)
async def login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    return """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - Price Calculator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <style>
        body {
            font-family: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
        }
        .input-field {
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            padding: 0.75rem;
            transition: all 0.2s ease;
        }
        .input-field:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }
        .btn-primary {
            background: #000;
            color: white;
            transition: all 0.2s ease;
        }
        .btn-primary:hover {
            background: #1f2937;
        }
        .card {
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 12px;
            transition: all 0.2s ease;
        }
        .card:hover {
            border-color: #d1d5db;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }
        .loading-spinner {
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <div id="app">
        <header class="bg-white border-b border-gray-200">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center h-16">
                    <div class="flex items-center">
                        <h1 class="text-xl font-semibold text-gray-900">Price Calculator</h1>
                    </div>
                    <div class="text-sm text-gray-500">–ó–∞—â–∏—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω</div>
                </div>
            </div>
        </header>

        <main class="flex items-center justify-center min-h-screen -mt-16 px-4">
            <div class="card w-full max-w-md p-8">
                <div class="text-center mb-8">
                    <div class="mb-4">
                        <div class="text-4xl text-gray-900 mb-2">üßÆ</div>
                    </div>
                    <h2 class="text-2xl font-bold text-gray-900 mb-2">–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
                    <p class="text-gray-500">–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</p>
                </div>

            <form @submit.prevent="handleLogin" class="space-y-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">–õ–æ–≥–∏–Ω</label>
                    <input 
                        v-model="credentials.username" 
                        type="text" 
                        required
                        class="input-field w-full" 
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω">
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">–ü–∞—Ä–æ–ª—å</label>
                    <input 
                        v-model="credentials.password" 
                        type="password" 
                        required
                        class="input-field w-full" 
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å">
                </div>

                <div v-if="errorMessage" class="p-3 bg-red-50 border border-red-200 rounded-lg">
                    <p class="text-red-700 text-sm">WARNING {{ errorMessage }}</p>
                </div>

                <button 
                    type="submit" 
                    :disabled="isLoading"
                    :class="['btn-primary px-8 py-3 rounded-lg font-medium w-full', 
                            isLoading ? 'opacity-50 cursor-not-allowed' : '']">
                    <span v-if="isLoading" class="loading-spinner inline-block w-4 h-4 mr-2">‚è≥</span>
                    {{ isLoading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏' }}
                </button>
            </form>

                <div class="mt-8 pt-6 border-t border-gray-200 text-center">
                    <p class="text-xs text-gray-400">
                        ¬© 2025 Price Calculator. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.
                    </p>
                </div>
            </div>
        </main>
    </div>

    <script>
        const { createApp } = Vue;
        
        createApp({
            data() {
                return {
                    credentials: {
                        username: '',
                        password: ''
                    },
                    isLoading: false,
                    errorMessage: ''
                }
            },
            methods: {
                async handleLogin() {
                    if (!this.credentials.username || !this.credentials.password) {
                        this.errorMessage = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
                        return;
                    }

                    this.isLoading = true;
                    this.errorMessage = '';

                    try {
                        const response = await fetch('/api/login', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(this.credentials)
                        });

                        const data = await response.json();

                        if (data.success) {
                            window.location.href = '/';
                        } else {
                            this.errorMessage = data.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
                        }

                    } catch (error) {
                        console.error('Login error:', error);
                        this.errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
                    } finally {
                        this.isLoading = false;
                    }
                }
            },
            mounted() {
                this.$nextTick(() => {
                    const usernameInput = document.querySelector('input[type="text"]');
                    if (usernameInput) {
                        usernameInput.focus();
                    }
                });
            }
        }).mount('#app');
    </script>
</body>
</html>
    """

@app.post("/api/login")
async def login(request: Request, response: Response):
    """API endpoint –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        data = await request.json()
        username = data.get("username", "")
        password = data.get("password", "")
        
        if username == AUTH_USERNAME and password == AUTH_PASSWORD:
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
            session_token = create_session_token()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å —Ç–æ–∫–µ–Ω–æ–º
            response.set_cookie(
                key="session_token",
                value=session_token,
                max_age=86400 * 7,  # 7 –¥–Ω–µ–π
                httponly=True,
                secure=False,  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True –¥–ª—è HTTPS
                samesite="lax"
            )
            
            return {"success": True, "message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"}
        else:
            return {"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"}
            
    except Exception as e:
        print(f"Login error: {e}")
        return {"success": False, "error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"}

@app.post("/api/logout")
async def logout(request: Request, response: Response):
    """API endpoint –¥–ª—è –≤—ã—Ö–æ–¥–∞"""
    session_token = request.cookies.get("session_token")
    if session_token and session_token in active_sessions:
        active_sessions.remove(session_token)
    
    response.delete_cookie("session_token")
    return {"success": True, "message": "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω"}

# API endpoints
@app.get("/")
async def root(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Vue.js"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–¥—É–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é (—Ç–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–Ω–∞—è)
    return FileResponse('index.html')

@app.get("/refactored")
async def refactored_version(request: Request):
    """üöÄ –ù–æ–≤–∞—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    return FileResponse('index-refactored.html')

@app.get("/vite")
async def vite_version(request: Request):
    """Vite –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º Vite build –≤–µ—Ä—Å–∏—é
    return FileResponse('frontend/dist/src/index.html')

@app.get("/monolith")
async def monolith_version(request: Request):
    """–ú–æ–Ω–æ–ª–∏—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –æ—Ç–∫–∞—Ç–∞)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    return FileResponse('index_monolith_backup.html')

@app.get("/test-components")
async def test_components(request: Request):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    return FileResponse('test_components.html')

@app.get("/test-simple")
async def test_simple(request: Request):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    return FileResponse('test_simple.html')

@app.get("/test-fixed")
async def test_fixed(request: Request):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    return FileResponse('test_fixed.html')

@app.get("/test-minimal")
async def test_minimal(request: Request):
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Vue.js"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    return FileResponse('test_minimal.html')

@app.post("/api/reload-calculator")
async def reload_calculator():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î"""
    try:
        global calculator
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        calculator = None
        print("üîÑ –°–±—Ä–æ—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞...")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        calc = get_calculator()
        
        if calc and hasattr(calc, 'categories') and calc.categories:
            categories_count = len(calc.categories)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—à–ª–∏–Ω–∞–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
            categories_with_customs = 0
            sample_category = None
            
            for category in calc.categories:
                if isinstance(category, dict) and 'duty_rate' in category and 'vat_rate' in category:
                    categories_with_customs += 1
                    if not sample_category:
                        sample_category = {
                            'name': category.get('category', 'Unknown'),
                            'duty_rate': category.get('duty_rate'),
                            'vat_rate': category.get('vat_rate'),
                            'tnved_code': category.get('tnved_code')
                        }
            
            return {
                "status": "success",
                "message": "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω",
                "categories_total": categories_count,
                "categories_with_customs": categories_with_customs,
                "sample_category": sample_category,
                "customs_loader_available": hasattr(calc, 'customs_loader') and calc.customs_loader is not None
            }
        else:
            return {
                "status": "warning", 
                "message": "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                "categories_total": 0,
                "categories_with_customs": 0
            }
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {str(e)}")

@app.post("/api/fix-missing-customs")
async def fix_missing_customs():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –¢–ù –í–≠–î"""
    try:
        from database import get_database_connection
        import json
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–æ—à–ª–∏–Ω—ã –ø–æ —Ç–∏–ø–∞–º –¢–ù –í–≠–î
        TNVED_CUSTOMS_MAP = {
            # –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã
            "85": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            
            # –¢–µ–∫—Å—Ç–∏–ª—å –∏ –æ–¥–µ–∂–¥–∞  
            "61": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "62": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "63": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "65": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            
            # –°—É–º–∫–∏ –∏ –∫–æ–∂–≥–∞–ª–∞–Ω—Ç–µ—Ä–µ—è
            "42": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            
            # –ö–µ—Ä–∞–º–∏–∫–∞ –∏ –ø–æ—Å—É–¥–∞
            "69": {"duty_rate": "11.5%", "vat_rate": "20%", "certificates": ["EAC"]},
            
            # –ü–ª–∞—Å—Ç–º–∞—Å—Å—ã
            "39": {"duty_rate": "5%", "vat_rate": "20%", "certificates": []},
            
            # –ò–≥—Ä—É—à–∫–∏
            "95": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
            
            # –ú–µ—Ç–∞–ª–ª—ã
            "71": {"duty_rate": "6.5%", "vat_rate": "20%", "certificates": []},
            "73": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
            "83": {"duty_rate": "6.5%", "vat_rate": "20%", "certificates": []},
            
            # –ö–Ω–∏–≥–∏ –∏ –ø–µ—á–∞—Ç–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è
            "48": {"duty_rate": "0%", "vat_rate": "10%", "certificates": []},
            
            # –ó–æ–Ω—Ç—ã
            "66": {"duty_rate": "6.5%", "vat_rate": "20%", "certificates": []},
            
            # –ß–∞—Å—ã
            "91": {"duty_rate": "6%", "vat_rate": "20%", "certificates": ["EAC"]},
            
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "default": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]}
        }
        
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –ø–æ—à–ª–∏–Ω, –Ω–æ —Å –¢–ù –í–≠–î
        cursor.execute("SELECT category, data FROM categories")
        all_categories = cursor.fetchall()
        
        updated_count = 0
        results = []
        
        for row in all_categories:
            try:
                if db_type == 'postgres':
                    category_name = row['category'] if isinstance(row, dict) else row[0]
                    category_data = row['data'] if isinstance(row, dict) else row[1]
                else:
                    category_name = row['category'] if hasattr(row, 'keys') else row[0]
                    category_data = row['data'] if hasattr(row, 'keys') else row[1]
                
                # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
                if isinstance(category_data, str):
                    category_json = json.loads(category_data)
                else:
                    category_json = category_data
                
                tnved_code = category_json.get('tnved_code', '')
                has_duty_rate = bool(category_json.get('duty_rate'))
                has_vat_rate = bool(category_json.get('vat_rate'))
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –¢–ù –í–≠–î, –Ω–æ –±–µ–∑ –ø–æ—à–ª–∏–Ω
                if tnved_code and not (has_duty_rate and has_vat_rate):
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—à–ª–∏–Ω—ã –ø–æ –ø–µ—Ä–≤—ã–º 2 —Ü–∏—Ñ—Ä–∞–º –¢–ù –í–≠–î
                    tnved_prefix = tnved_code[:2] if len(tnved_code) >= 2 else ""
                    
                    customs_info = TNVED_CUSTOMS_MAP.get(tnved_prefix, TNVED_CUSTOMS_MAP["default"])
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    category_json['duty_rate'] = customs_info['duty_rate']
                    category_json['vat_rate'] = customs_info['vat_rate']
                    category_json['certificates'] = customs_info['certificates']
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    updated_data = json.dumps(category_json, ensure_ascii=False)
                    
                    if db_type == 'postgres':
                        cursor.execute(
                            "UPDATE categories SET data = %s WHERE category = %s",
                            (updated_data, category_name)
                        )
                    else:
                        cursor.execute(
                            "UPDATE categories SET data = ? WHERE category = ?",
                            (updated_data, category_name)
                        )
                    
                    updated_count += 1
                    results.append(f"‚úÖ {category_name} (–¢–ù –í–≠–î: {tnved_code[:2]}**) -> {customs_info['duty_rate']}/{customs_info['vat_rate']}")
                    
            except Exception as e:
                results.append(f"‚ùå –û—à–∏–±–∫–∞ —Å {category_name}: {e}")
                continue
        
        conn.commit()
        cursor.close()
        
        return {
            "status": "success",
            "message": "–ü–æ—à–ª–∏–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –¢–ù –í–≠–î",
            "categories_updated": updated_count,
            "details": results[:30]  # –ü–µ—Ä–≤—ã–µ 30 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        }
        
    except Exception as e:
        import traceback
        traceback.print_exc()
        return {"error": f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—à–ª–∏–Ω: {str(e)}"}

@app.post("/api/load-customs-data")
async def load_customs_data_endpoint():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—à–ª–∏–Ω–∞–º –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        from database import get_database_connection
        import json
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        CUSTOMS_DATA = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ—à–ª–∏–Ω–∞–º–∏
            "–ø–æ–≤–µ—Ä–±–∞–Ω–∫–∏": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∫—Ä—É–∂–∫–∏": {"duty_rate": "11.5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ç–µ—Ä–º–æ—Å—ã": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ç–µ—Ä–º–æ–±—É—Ç—ã–ª–∫–∏": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ç–µ—Ä–º–æ–∫—Ä—É–∂–∫–∏": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ç–µ—Ä–º–æ—Å—Ç–∞–∫–∞–Ω—ã": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∫–æ—Ñ—Ñ–µ—Ä—ã": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫–∏": {"duty_rate": "0%", "vat_rate": "10%", "certificates": []},
            "–±–ª–æ–∫–Ω–æ—Ç—ã": {"duty_rate": "0%", "vat_rate": "10%", "certificates": []},
            "–∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–ª–∞–Ω—å—è—Ä–¥": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ä–µ—Ç—Ä–∞–∫—Ç–æ—Ä": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–ø–∞–∫–µ—Ç—ã": {"duty_rate": "5%", "vat_rate": "20%", "certificates": []},
            "—Ñ–ª–µ—à–∫–∏": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ä—É—á–∫–∏": {"duty_rate": "6.5%", "vat_rate": "20%", "certificates": []},
            "—Ñ—É—Ç–±–æ–ª–∫–∏": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Å—É–º–∫–∏": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∑–æ–Ω—Ç—ã": {"duty_rate": "6.5%", "vat_rate": "20%", "certificates": []},
            "—á–∞—Å—ã": {"duty_rate": "6%", "vat_rate": "20%", "certificates": ["EAC"]},
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            "–±—É—Ç—ã–ª–∫–∞": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∫–æ—Ñ—Ñ–µ—Ä": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ç–µ—Ä–º–æ—Å": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ä—É—á–∫–∞": {"duty_rate": "6.5%", "vat_rate": "20%", "certificates": []},
            "–ª–∞–º–ø–∞": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∏–≥—Ä—É—à–∫–∞": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∏–≥—Ä—É—à–∫–∏": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∫–∞–±–µ–ª—å": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–±—Ä–µ–ª–æ–∫": {"duty_rate": "6.5%", "vat_rate": "20%", "certificates": []},
            "—á–µ—Ö–æ–ª": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ä—é–∫–∑–∞–∫": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∫–æ—Å–º–µ—Ç–∏—á–∫–∞": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∫–æ–ª–æ–Ω–∫–∞": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ñ–ª–µ—à–∫–∞": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ñ—É—Ç–±–æ–ª–∫–∞": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–ø–ª–µ–¥": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—É–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—å": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∑–æ–Ω—Ç": {"duty_rate": "6.5%", "vat_rate": "20%", "certificates": []},
            "–ø–æ–¥—É—à–∫–∞": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∫–æ—Ä–æ–±–∫–∞": {"duty_rate": "5%", "vat_rate": "20%", "certificates": []},
            "–æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–ø–µ–Ω–∞–ª": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–±–µ–π–¥–∂": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–Ω–∞—É—à–Ω–∏–∫–∏": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–±–ª–æ–∫–Ω–æ—Ç": {"duty_rate": "0%", "vat_rate": "10%", "certificates": []},
            "–º–∞—Å—Å–∞–∂–µ—Ä": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–ø–æ—Å—É–¥–∞": {"duty_rate": "11.5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–ø—Ä–æ–µ–∫—Ç–æ—Ä": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∫–µ–ø–∫–∞": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—à–∞—Ä—Ñ": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–ø–µ—Ä—á–∞—Ç–∫–∏": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–¥–æ–∂–¥–µ–≤–∏–∫": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ñ–æ–Ω–∞—Ä—å": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–≥–∏—Ä–ª—è–Ω–¥–∞": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Å–≤–µ—á–∞": {"duty_rate": "5%", "vat_rate": "20%", "certificates": []},
            "–º–∞–≥–Ω–∏—Ç": {"duty_rate": "5%", "vat_rate": "20%", "certificates": []},
            "—Ç–æ–ª—Å—Ç–æ–≤–∫–∞": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ö—É–¥–∏": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ç–∞–±–ª–µ—Ç–Ω–∏—Ü–∞": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Å—Ç–∏–∫–µ—Ä—ã": {"duty_rate": "5%", "vat_rate": "20%", "certificates": []},
            "–º—ã—à—å": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–Ω–æ—Å–∫–∏": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            
            # –û–±—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "–æ–±—â–∞—è": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]}
        }
        
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        
        print(f"üöõ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º –≤ {db_type}...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cursor.execute("SELECT category, data FROM categories")
        existing_categories = cursor.fetchall()
        
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î: {len(existing_categories)}")
        
        updated_count = 0
        results = []
        
        for row in existing_categories:
            try:
                if db_type == 'postgres':
                    category_name = row['category'] if isinstance(row, dict) else row[0]
                    category_data = row['data'] if isinstance(row, dict) else row[1]
                else:
                    category_name = row['category'] if hasattr(row, 'keys') else row[0]
                    category_data = row['data'] if hasattr(row, 'keys') else row[1]
                
                # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if isinstance(category_data, str):
                    category_json = json.loads(category_data)
                else:
                    category_json = category_data
                
                # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º
                customs_info = None
                category_lower = category_name.lower()
                
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if category_lower in CUSTOMS_DATA:
                    customs_info = CUSTOMS_DATA[category_lower]
                else:
                    # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
                    for customs_key, customs_value in CUSTOMS_DATA.items():
                        if customs_key in category_lower or category_lower in customs_key:
                            customs_info = customs_value
                            break
                
                if customs_info:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¢–ù –í–≠–î –∫–æ–¥ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    existing_tnved = category_json.get('tnved_code', '')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º
                    if existing_tnved:
                        # –ï—Å–ª–∏ –¢–ù –í–≠–î —É–∂–µ –µ—Å—Ç—å, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—à–ª–∏–Ω—ã
                        category_json['duty_rate'] = customs_info['duty_rate']
                        category_json['vat_rate'] = customs_info['vat_rate']
                        category_json['certificates'] = customs_info['certificates']
                        results.append(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—à–ª–∏–Ω—ã –¥–ª—è: {category_name} (–¢–ù –í–≠–î: {existing_tnved})")
                    else:
                        # –ï—Å–ª–∏ –¢–ù –í–≠–î –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –∫–æ–¥
                        category_json['tnved_code'] = "9999999999"  # –û–±—â–∏–π –∫–æ–¥ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
                        category_json['duty_rate'] = customs_info['duty_rate']
                        category_json['vat_rate'] = customs_info['vat_rate']
                        category_json['certificates'] = customs_info['certificates']
                        results.append(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {category_name} (–æ–±—â–∏–π –¢–ù –í–≠–î)")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                    updated_data = json.dumps(category_json, ensure_ascii=False)
                    
                    if db_type == 'postgres':
                        cursor.execute(
                            "UPDATE categories SET data = %s WHERE category = %s",
                            (updated_data, category_name)
                        )
                    else:
                        cursor.execute(
                            "UPDATE categories SET data = ? WHERE category = ?",
                            (updated_data, category_name)
                        )
                    
                    updated_count += 1
                else:
                    results.append(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—à–ª–∏–Ω–∞–º –¥–ª—è: {category_name}")
                    
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}: {e}"
                results.append(error_msg)
                continue
        
        conn.commit()
        cursor.close()
        
        return {
            "status": "success",
            "database_type": db_type,
            "categories_found": len(existing_categories),
            "categories_updated": updated_count,
            "details": results[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
        }
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—à–ª–∏–Ω–∞–º: {str(e)}")

@app.post("/api/force-migrate")
async def force_migrate_database():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –ë–î - –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏"""
    try:
        from database import get_database_connection
        
        conn, db_type = get_database_connection()
        
        print(f"üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è {db_type}...")
        
        # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
        required_columns = [
            ('calculation_type', 'VARCHAR(50) DEFAULT \'quick\''),
            ('packing_units_per_box', 'INTEGER'),
            ('packing_box_weight', 'DECIMAL(10,3)'),
            ('packing_box_length', 'DECIMAL(10,2)'),
            ('packing_box_width', 'DECIMAL(10,2)'),
            ('packing_box_height', 'DECIMAL(10,2)'),
            ('packing_total_boxes', 'INTEGER'),
            ('packing_total_volume', 'DECIMAL(10,4)'),
            ('packing_total_weight', 'DECIMAL(10,3)'),
            ('tnved_code', 'VARCHAR(20)'),
            ('duty_rate', 'VARCHAR(20)'),
            ('vat_rate', 'VARCHAR(20)'),
            ('duty_amount_usd', 'DECIMAL(10,2)'),
            ('vat_amount_usd', 'DECIMAL(10,2)'),
            ('total_customs_cost_usd', 'DECIMAL(10,2)'),
            ('certificates', 'TEXT'),
            ('customs_notes', 'TEXT'),
            ('density_warning_message', 'TEXT'),
            ('calculated_density', 'DECIMAL(10,3)'),
            ('category_density', 'DECIMAL(10,3)')
        ]
        
        success_count = 0
        results = []
        
        for column_name, column_type in required_columns:
            # –ö–∞–∂–¥–∞—è –∫–æ–ª–æ–Ω–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è PostgreSQL
            cursor = conn.cursor()
            try:
                if db_type == 'postgres':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
                    cursor.execute("""
                        SELECT column_name 
                        FROM information_schema.columns 
                        WHERE table_name = 'calculations' AND column_name = %s
                    """, (column_name,))
                    
                    if not cursor.fetchone():
                        print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º {column_name}...")
                        cursor.execute(f'ALTER TABLE calculations ADD COLUMN {column_name} {column_type}')
                        conn.commit()
                        print(f"‚úÖ {column_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                        results.append(f"‚úÖ {column_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                        success_count += 1
                    else:
                        results.append(f"‚úì {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        
                else:  # SQLite
                    cursor.execute("PRAGMA table_info(calculations)")
                    existing_columns = [row[1] for row in cursor.fetchall()]
                    
                    if column_name not in existing_columns:
                        print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º {column_name}...")
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è SQLite
                        sqlite_type = column_type.replace('VARCHAR', 'TEXT').replace('DECIMAL', 'REAL')
                        cursor.execute(f'ALTER TABLE calculations ADD COLUMN {column_name} {sqlite_type}')
                        conn.commit()
                        print(f"‚úÖ {column_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                        results.append(f"‚úÖ {column_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                        success_count += 1
                    else:
                        results.append(f"‚úì {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        
            except Exception as e:
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                try:
                    conn.rollback()
                    print(f"üîÑ Rollback –¥–ª—è {column_name}")
                except:
                    pass
                    
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å {column_name}: {e}"
                print(error_msg)
                results.append(error_msg)
                continue
            finally:
                cursor.close()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        cursor = conn.cursor()
        try:
            if db_type == 'postgres':
                cursor.execute("""
                    SELECT column_name, data_type 
                    FROM information_schema.columns 
                    WHERE table_name = 'calculations' 
                    ORDER BY column_name
                """)
                final_columns = cursor.fetchall()
                results.append(f"üìã –ò—Ç–æ–≥–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ PostgreSQL: {len(final_columns)}")
            else:
                cursor.execute("PRAGMA table_info(calculations)")
                final_columns = cursor.fetchall()
                results.append(f"üìã –ò—Ç–æ–≥–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ SQLite: {len(final_columns)}")
        except Exception as e:
            results.append(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")
        finally:
            cursor.close()
        
        return {
            "status": "success",
            "database_type": db_type,
            "columns_added": success_count,
            "total_columns_checked": len(required_columns),
            "details": results
        }
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î: {str(e)}")

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        calc = get_calculator()
        calculator_status = "OK" if calc else "ERROR"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            conn, db_type = get_database_connection()
            if conn:
                db_status = f"OK ({db_type})"
            else:
                db_status = "ERROR"
        except Exception as e:
            db_status = f"ERROR: {str(e)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            config_loader = ConfigLoader()
            currencies = config_loader.load_currency_rates()
            config_status = "OK" if currencies else "ERROR"
        except Exception as e:
            config_status = f"ERROR: {str(e)}"
        
        status = {
            "status": "healthy" if all([
                calculator_status == "OK",
                db_status.startswith("OK"),
                config_status == "OK"
            ]) else "unhealthy",
            "calculator": calculator_status,
            "database": db_status,
            "config": config_status,
            "timestamp": datetime.now().isoformat()
        }
        
        print(f"üè• Health check: {status}")
        return status
        
    except Exception as e:
        print(f"‚ùå Health check failed: {e}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.post("/api/reconnect-db")
async def reconnect_database_endpoint(auth: bool = Depends(require_auth)):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from database import reconnect_database
        conn, db_type = reconnect_database()
        
        return {
            "success": True,
            "database_type": db_type,
            "message": f"–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {db_type} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return {
            "success": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.post("/debug/calculate")
async def debug_calculate(request: CalculationRequest):
    """Debug —Ä–∞—Å—á–µ—Ç —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        calc = get_calculator()
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = calc.find_category_by_name(request.product_name)
        
        debug_info = {
            "product_name": request.product_name,
            "found_category": category.get('category') if category else None,
            "has_customs_data": bool(category and category.get('duty_rate') and category.get('vat_rate')),
            "category_data": {
                "duty_rate": category.get('duty_rate') if category else None,
                "vat_rate": category.get('vat_rate') if category else None,
                "tnved_code": category.get('tnved_code') if category else None,
                "certificates": category.get('certificates') if category else None
            } if category else None
        }
        
        return debug_info
        
    except Exception as e:
        import traceback
        traceback.print_exc()
        return {"error": str(e)}

@app.post("/api/calculate", response_model=CalculationResponse)
async def calculate_price(request: CalculationRequest, auth: bool = Depends(require_auth)):
    """–†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print(f"üîç API CALCULATE REQUEST:")
        print(f"   product_name: {request.product_name}")
        print(f"   price_yuan: {request.price_yuan}")
        print(f"   weight_kg: {request.weight_kg}")
        print(f"   quantity: {request.quantity}")
        print(f"   is_precise_calculation: {request.is_precise_calculation}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not request.product_name or not request.product_name.strip():
            raise HTTPException(status_code=400, detail="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if request.price_yuan <= 0:
            raise HTTPException(status_code=400, detail="–¶–µ–Ω–∞ –≤ —é–∞–Ω—è—Ö –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        if request.quantity <= 0:
            raise HTTPException(status_code=400, detail="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        # –î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —É–ø–∞–∫–æ–≤–∫–∏
        if request.is_precise_calculation:
            if not request.packing_units_per_box or request.packing_units_per_box <= 0:
                raise HTTPException(status_code=400, detail="–î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–æ–±–∫–µ")
            if not request.packing_box_weight or request.packing_box_weight <= 0:
                raise HTTPException(status_code=400, detail="–î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —É–∫–∞–∂–∏—Ç–µ –≤–µ—Å –∫–æ—Ä–æ–±–∫–∏")
            if not request.packing_box_length or request.packing_box_length <= 0:
                raise HTTPException(status_code=400, detail="–î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —É–∫–∞–∂–∏—Ç–µ –¥–ª–∏–Ω—É –∫–æ—Ä–æ–±–∫–∏")
            if not request.packing_box_width or request.packing_box_width <= 0:
                raise HTTPException(status_code=400, detail="–î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —É–∫–∞–∂–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∫–æ—Ä–æ–±–∫–∏")
            if not request.packing_box_height or request.packing_box_height <= 0:
                raise HTTPException(status_code=400, detail="–î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —É–∫–∞–∂–∏—Ç–µ –≤—ã—Å–æ—Ç—É –∫–æ—Ä–æ–±–∫–∏")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
        calc = get_calculator()
        if not calc:
            raise HTTPException(status_code=500, detail="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        result = calc.calculate_cost(
            price_yuan=request.price_yuan,
            weight_kg=request.weight_kg,
            quantity=request.quantity,
            product_name=request.product_name,
            custom_rate=request.custom_rate,
            delivery_type=request.delivery_type,
            markup=request.markup,
            product_url=request.product_url
        )
        
        if not result:
            raise HTTPException(status_code=500, detail="–†–∞—Å—á–µ—Ç –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        
        print(f"‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è: {request.product_name}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–∏–Ω–≥–∞ –∏ —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if request.is_precise_calculation or (request.packing_units_per_box is not None and request.packing_units_per_box > 0):
            # –¢–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
            result['calculation_type'] = 'precise'
            packing_data = {
                'packing_units_per_box': request.packing_units_per_box or 0,
                'packing_box_weight': request.packing_box_weight or 0,
                'packing_box_length': request.packing_box_length or 0,
                'packing_box_width': request.packing_box_width or 0,
                'packing_box_height': request.packing_box_height or 0
            }
            result.update(packing_data)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
            if all([request.packing_units_per_box, request.packing_box_weight, 
                   request.packing_box_length, request.packing_box_width, request.packing_box_height]):
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∏–∑ –ø–∞–∫–∏–Ω–≥–∞
                box_volume = request.packing_box_length * request.packing_box_width * request.packing_box_height
                calculated_density = (request.packing_box_weight / box_volume) if box_volume > 0 else 0
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_density = result.get('category_density')
                
                if category_density and calculated_density > 0:
                    density_diff_percent = abs(calculated_density - category_density) / category_density * 100
                    
                    if density_diff_percent > 30:
                        result['density_warning'] = {
                            'message': f'–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ {density_diff_percent:.1f}%',
                            'calculated_density': round(calculated_density, 1),
                            'category_density': round(category_density, 1),
                            'difference_percent': round(density_diff_percent, 1)
                        }
            
        else:
            # –ë—ã—Å—Ç—Ä—ã–µ —Ä–∞—Å—á–µ—Ç—ã
            result['calculation_type'] = 'quick'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        if 'contract_cost' in result and result['contract_cost'] is not None:
            try:
                cost_per_unit = result['contract_cost']['per_unit']['rub']
                print(f"‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω: {cost_per_unit:.2f} —Ä—É–± –∑–∞ –µ–¥–∏–Ω–∏—Ü—É")
            except (KeyError, TypeError) as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ contract_cost: {e}")
        else:
            print("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º)")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º
        try:
            category_name = result.get('category', '')
            
            if category_name:
                customs_info = customs_loader.get_customs_info_by_category(category_name)
                if customs_info:
                    result['customs_info'] = customs_info
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∞–º–æ–∂–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
                    unit_price_usd = result.get('unit_price_yuan', 0) / 7.2  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
                    total_value_usd = unit_price_usd * request.quantity
                    
                    customs_calc = customs_loader.calculate_customs_cost(total_value_usd, customs_info)
                    result['customs_calculations'] = customs_calc
        except Exception as e:
            print(f"WARNING –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—à–ª–∏–Ω–∞–º: {e}")
            import traceback
            traceback.print_exc()
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—à–ª–∏–Ω–∞–º
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            print(f"üíæ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {request.product_name}")
            calculation_id = save_calculation(result, request)
            
            if calculation_id:
                result['id'] = calculation_id
                result['created_at'] = datetime.now().isoformat()
                print(f"‚úÖ –†–∞—Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î —Å ID: {calculation_id}")
            else:
                print(f"‚ùå save_calculation –≤–µ—Ä–Ω—É–ª None!")
                result['id'] = None
                result['created_at'] = datetime.now().isoformat()
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
            import traceback
            traceback.print_exc()
            result['id'] = None
            result['created_at'] = datetime.now().isoformat()
        
        return CalculationResponse(**result)
        
    except HTTPException:
        # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
        raise
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=400, detail=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {str(e)}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

# CATEGORIES API - moved to backend/api/categories.py
# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
try:
    from backend.api import categories
    app.include_router(categories.router)
    print("Categories router connected from backend/api/categories.py")
except Exception as e:
    print(f"WARNING: Could not load categories router: {e}")

@app.get("/debug/categories-without-customs")
async def debug_categories_without_customs():
    """Debug: –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—à–ª–∏–Ω–∞–º"""
    try:
        from database import get_database_connection
        import json
        
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cursor.execute("SELECT category, data FROM categories")
        all_categories = cursor.fetchall()
        cursor.close()
        
        categories_without_customs = []
        categories_with_tnved_but_no_customs = []
        
        for row in all_categories:
            try:
                if db_type == 'postgres':
                    category_name = row['category'] if isinstance(row, dict) else row[0]
                    category_data = row['data'] if isinstance(row, dict) else row[1]
                else:
                    category_name = row['category'] if hasattr(row, 'keys') else row[0]
                    category_data = row['data'] if hasattr(row, 'keys') else row[1]
                
                # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
                if isinstance(category_data, str):
                    category_json = json.loads(category_data)
                else:
                    category_json = category_data
                
                has_tnved = bool(category_json.get('tnved_code'))
                has_duty_rate = bool(category_json.get('duty_rate'))
                has_vat_rate = bool(category_json.get('vat_rate'))
                
                category_info = {
                    "name": category_name,
                    "tnved_code": category_json.get('tnved_code', ''),
                    "duty_rate": category_json.get('duty_rate', ''),
                    "vat_rate": category_json.get('vat_rate', ''),
                    "has_tnved": has_tnved,
                    "has_customs": has_duty_rate and has_vat_rate
                }
                
                if not (has_duty_rate and has_vat_rate):
                    categories_without_customs.append(category_info)
                    
                    if has_tnved:
                        categories_with_tnved_but_no_customs.append(category_info)
                        
            except Exception as e:
                categories_without_customs.append({
                    "name": category_name,
                    "error": str(e)
                })
        
        return {
            "total_categories": len(all_categories),
            "categories_without_customs": len(categories_without_customs),
            "categories_with_tnved_but_no_customs": len(categories_with_tnved_but_no_customs),
            "details": {
                "without_customs": categories_without_customs[:20],  # –ü–µ—Ä–≤—ã–µ 20
                "with_tnved_but_no_customs": categories_with_tnved_but_no_customs[:20]
            }
        }
        
    except Exception as e:
        import traceback
        traceback.print_exc()
        return {"error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}"}

@app.get("/debug/category/{product_name}")
async def debug_category_by_name(product_name: str):
    """Debug: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        calc = get_calculator()
        if not calc:
            return {"error": "Calculator not initialized"}
            
        category = calc.find_category_by_name(product_name)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üîç DEBUG: product_name='{product_name}'")
        print(f"üîç DEBUG: found_category='{category.get('category', 'None') if category else 'None'}'")
        
        if category:
            print(f"üîç DEBUG: duty_rate='{category.get('duty_rate', 'None')}'")
            print(f"üîç DEBUG: vat_rate='{category.get('vat_rate', 'None')}'")
            print(f"üîç DEBUG: tnved_code='{category.get('tnved_code', 'None')}'")
            
        return {
            "product_name": product_name,
            "category_found": category is not None,
            "category_data": category,
            "has_customs_data": bool(category and category.get('duty_rate') and category.get('vat_rate'))
        }
    except Exception as e:
        import traceback
        traceback.print_exc()
        return {"error": f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}"}

@app.get("/api/category/{product_name}")
async def get_category_by_name(product_name: str, auth: bool = Depends(require_auth)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    try:
        calc = get_calculator()
        category = calc.find_category_by_name(product_name)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"DEBUG: product_name='{product_name}', result_category='{category['category']}'")
        
        return CategoryInfo(**category)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")

@app.get("/api/recommendations/{product_name}")
async def get_recommendations(product_name: str, auth: bool = Depends(require_auth)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ü–µ–Ω–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏ –≤–µ—Å—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        calc = get_calculator()
        recommendations = calc.get_recommendations(product_name)
        category = calc.find_category_by_name(product_name)
        
        return {
            "product_name": product_name,
            "category": category.get('category', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'),
            "material": category.get('material', ''),
            "tnved_code": category.get('tnved_code', ''),
            "recommendations": recommendations
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")

@app.get("/api/exchange-rates")
async def get_exchange_rates(auth: bool = Depends(require_auth)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    try:
        calc = get_calculator()
        return {
            "yuan_to_usd": calc.currencies["yuan_to_usd"],
            "usd_to_rub": calc.currencies["usd_to_rub"],
            "yuan_to_rub": calc.currencies["yuan_to_rub"]
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {str(e)}")

@app.get("/api/settings")
async def get_settings(auth: bool = Depends(require_auth)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        calc = get_calculator()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if hasattr(calc, 'formula_config') and calc.formula_config:
            formula = calc.formula_config
            settings = {
                "currencies": {
                    "yuan_to_usd": calc.currencies["yuan_to_usd"],
                    "usd_to_rub": calc.currencies["usd_to_rub"],
                    "yuan_to_rub": calc.currencies["yuan_to_rub"]
                },
                "formula": {
                    "toni_commission_percent": formula.toni_commission_percent,
                    "transfer_percent": formula.transfer_percent,
                    "local_delivery_rate_yuan_per_kg": formula.local_delivery_rate_yuan_per_kg,
                    "msk_pickup_total_rub": formula.msk_pickup_total_rub,
                    "other_costs_percent": formula.other_costs_percent
                }
            }
        else:
            # Fallback –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            settings = {
                "currencies": {
                    "yuan_to_usd": calc.currencies["yuan_to_usd"],
                    "usd_to_rub": calc.currencies["usd_to_rub"],
                    "yuan_to_rub": calc.currencies["yuan_to_rub"]
                },
                "formula": {
                    "toni_commission_percent": 5.0,
                    "transfer_percent": 18.0,
                    "local_delivery_rate_yuan_per_kg": 2.0,
                    "msk_pickup_total_rub": 1000.0,
                    "other_costs_percent": 2.5
                }
            }
        
        return settings
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")

@app.post("/api/settings")
async def update_settings(settings: dict, auth: bool = Depends(require_auth)):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ConfigLoader –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        from config.config_loader import get_config_loader
        
        config_loader = get_config_loader()
        success = config_loader.save_settings(settings)
        
        if success:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            global calculator
            calculator = None  # –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç get_calculator() —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            calc = get_calculator()
            
            return {"success": True, "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"}
        else:
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")

@app.get("/api/history")
async def get_history(auth: bool = Depends(require_auth)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤"""
    try:
        history = get_history_calculations()
        return {"history": history}
    except Exception as e:
        print(f"WARNING –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
        return {"history": [], "error": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}

@app.get("/api/calculation/{calculation_id}")
async def get_calculation(calculation_id: int, auth: bool = Depends(require_auth)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π database –º–æ–¥—É–ª—å
        history = get_history_calculations()
        
        # –ò—â–µ–º —Ä–∞—Å—á–µ—Ç –ø–æ ID
        for calc in history:
            if calc.get('id') == calculation_id:
                return calc
        
        raise HTTPException(status_code=404, detail="–†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    except HTTPException:
        raise  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º 404 –¥–∞–ª—å—à–µ
    except Exception as e:
        print(f"WARNING –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        raise HTTPException(status_code=503, detail="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


@app.put("/api/calculation/{calculation_id}")
async def update_calculation_endpoint(calculation_id: int, request: CalculationRequest, auth: bool = Depends(require_auth)):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞"""
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
        calculator = PriceCalculator()
        result = calculator.calculate_cost(
            product_name=request.product_name,
            price_yuan=request.price_yuan,
            weight_kg=request.weight_kg,
            quantity=request.quantity,
            custom_rate=request.custom_rate,
            delivery_type=request.delivery_type,
            markup=request.markup,
            product_url=request.product_url
        )
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        calculation_data = {
            'product_name': request.product_name,
            'category': result.get('category', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'),
            'price_yuan': request.price_yuan,
            'weight_kg': request.weight_kg,
            'quantity': request.quantity,
            'markup': request.markup,
            'custom_rate': request.custom_rate,
            'product_url': request.product_url,
            'cost_price_rub': result['cost_price']['total']['rub'],
            'cost_price_usd': result['cost_price']['total']['usd'],
            'sale_price_rub': result['sale_price']['total']['rub'],
            'sale_price_usd': result['sale_price']['total']['usd'],
            'profit_rub': result['profit']['total']['rub'],
            'profit_usd': result['profit']['total']['usd']
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_calculation(calculation_id, calculation_data)
        
        return result
        
    except ValueError as e:
        print(f"ERROR –†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        raise HTTPException(status_code=404, detail="–†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"ERROR –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ lifespan

if __name__ == "__main__":
    import uvicorn
    import os
    
    port = int(os.environ.get("PORT", 8000))
    print(f"INFO –ó–∞–ø—É—Å–∫ Price Calculator –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    
    uvicorn.run("main:app", host="0.0.0.0", port=port, reload=False)
