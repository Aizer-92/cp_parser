#!/usr/bin/env python3
"""
Price Calculator Web Application
FastAPI + Vue.js –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤
"""

from fastapi import FastAPI, HTTPException, Request, Response, Depends, UploadFile, File, Form
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse, FileResponse, RedirectResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, model_validator
from typing import Optional, List, Dict, Any
import json
from datetime import datetime
import os
import secrets
from contextlib import asynccontextmanager

import importlib
import sys

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
if 'price_calculator' in sys.modules:
    importlib.reload(sys.modules['price_calculator'])
    
from price_calculator import PriceCalculator
from database import init_database, save_calculation_to_db, get_calculation_history, restore_from_backup, update_calculation
from customs_data import customs_loader

# DTO models –¥–ª—è type safety –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
from models.dto import (
    ProductInputDTO,
    CalculationResultDTO,
    CategoriesResponseDTO,
    CategoryDTO
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ ConfigLoader
try:
    import sys
    from pathlib import Path
    config_dir = Path(__file__).parent / "config"
    if str(config_dir) not in sys.path:
        sys.path.insert(0, str(config_dir))
    
    from config_loader import get_app_config
    app_config = get_app_config()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    AUTH_USERNAME = app_config.auth.username
    AUTH_PASSWORD = app_config.auth.password  
    SESSION_SECRET = app_config.auth.session_secret
    
    print("OK –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ ConfigLoader")
    
except ImportError:
    # Fallback –∫ —Å—Ç–∞—Ä—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    print("WARNING ConfigLoader –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    AUTH_USERNAME = "admin"
    AUTH_PASSWORD = "admin123"
    SESSION_SECRET = secrets.token_urlsafe(32)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
active_sessions = set()

def create_session_token() -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏"""
    token = secrets.token_urlsafe(32)
    active_sessions.add(token)
    return token

def verify_session(session_token: str = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
    return session_token and session_token in active_sessions

def require_auth(request: Request):
    """Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        raise HTTPException(status_code=401, detail="Authentication required")
    return True

@asynccontextmanager
async def lifespan(app: FastAPI):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–ù–ï –ö–†–ò–¢–ò–ß–ù–û –µ—Å–ª–∏ —É–ø–∞–¥–µ—Ç)
    try:
        # ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        from init_db import init_database as init_db_schema
        init_db_schema()
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
        init_database()
        restore_from_backup()
        print("OK –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    except Exception as e:
        print(f"WARNING –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        print("INFO –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏")
    
    print("OK –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
    yield
    # Cleanup –∑–¥–µ—Å—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

app = FastAPI(
    title="Price Calculator",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤",
    version="1.0.0",
    lifespan=lifespan
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –§–ê–ó–ê 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤ (Railway-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ)
from pathlib import Path

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = Path(__file__).resolve().parent
STATIC_DIR = BASE_DIR / "static"
TEMPLATES_DIR = BASE_DIR / "templates"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç (–¥–ª—è Railway)
STATIC_DIR.mkdir(exist_ok=True)
TEMPLATES_DIR.mkdir(exist_ok=True)

app.mount("/static", StaticFiles(directory=str(STATIC_DIR)), name="static")
# Vite build assets
DIST_DIR = Path(__file__).parent / "frontend" / "dist"
if DIST_DIR.exists():
    app.mount("/assets", StaticFiles(directory=str(DIST_DIR / "assets")), name="vite-assets")
    # Vite assets –¥–ª—è /vite/ –º–∞—Ä—à—Ä—É—Ç–∞
    app.mount("/vite/assets", StaticFiles(directory=str(DIST_DIR / "assets")), name="vite-route-assets")
templates = Jinja2Templates(directory=str(TEMPLATES_DIR))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞  
calculator = None

def get_calculator():
    global calculator
    if calculator is None:
        try:
            print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä...")
            calculator = PriceCalculator()
            print("‚úÖ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {e}")
            import traceback
            traceback.print_exc()
            return None
    return calculator

# Pydantic –º–æ–¥–µ–ª–∏
class RouteLogisticsParams(BaseModel):
    """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞"""
    custom_rate: Optional[float] = None  # –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (USD/kg)
    duty_type: Optional[str] = None  # –¢–∏–ø –ø–æ—à–ª–∏–Ω—ã: 'percent', 'combined', 'specific'
    duty_rate: Optional[float] = None  # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ (%)
    specific_rate: Optional[float] = None  # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –ø–æ—à–ª–∏–Ω–∞ (EUR/kg –∏–ª–∏ USD/kg)
    vat_rate: Optional[float] = None  # –ù–î–° (%)
    
    class Config:
        extra = "forbid"  # –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è

class CalculationRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    product_name: str
    link_or_wechat: Optional[str] = ""  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –∏–ª–∏ WeChat –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    price_yuan: float
    weight_kg: Optional[float] = None  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∏–∑ packing_box_weight –µ—Å–ª–∏ is_precise_calculation=True
    quantity: int
    product_url: Optional[str] = ""  # Legacy –ø–æ–ª–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    custom_rate: Optional[float] = None
    delivery_type: str = "rail"  # rail –∏–ª–∏ air
    markup: float = 1.7
    # –§–ª–∞–≥ –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Å –ø–∞–∫–∏–Ω–≥–æ–º
    is_precise_calculation: bool = False
    # –ü–æ–ª—è –ø–∞–∫–∏–Ω–≥–∞ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ is_precise_calculation=True)
    packing_units_per_box: Optional[int] = None
    packing_box_weight: Optional[float] = None
    packing_box_length: Optional[float] = None
    packing_box_width: Optional[float] = None
    packing_box_height: Optional[float] = None
    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞)
    # –ö–ª—é—á–∏: 'highway_rail', 'highway_air', 'contract', 'prologix', 'sea_container'
    custom_logistics: Optional[Dict[str, Dict[str, Any]]] = None
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
    forced_category: Optional[str] = None
    
    @model_validator(mode='after')
    def validate_and_calculate_weight(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—á—ë—Ç–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç –≤–µ—Å–∞"""
        if self.is_precise_calculation:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è —É–ø–∞–∫–æ–≤–∫–∏
            if not all([
                self.packing_units_per_box,
                self.packing_box_weight,
                self.packing_box_length,
                self.packing_box_width,
                self.packing_box_height
            ]):
                raise ValueError("–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ —Ç—Ä–µ–±—É—é—Ç—Å—è –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–ø–∞–∫–æ–≤–∫–∏: packing_box_weight, packing_box_length, packing_box_width, packing_box_height")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å –µ–¥–∏–Ω–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
            if not self.weight_kg:
                self.weight_kg = self.packing_box_weight / self.packing_units_per_box
                print(f"‚úÖ –í–µ—Å –µ–¥–∏–Ω–∏—Ü—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {self.weight_kg:.4f} –∫–≥")
        else:
            # –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞ weight_kg –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            if not self.weight_kg or self.weight_kg <= 0:
                raise ValueError("–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –≤–µ—Å –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ (weight_kg)")
        
        return self

class CalculationResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã"""
    id: Optional[int] = None
    product_name: str
    category: str
    quantity: int
    unit_price_yuan: float
    total_price: Dict[str, float]
    logistics: Dict[str, Any]
    additional_costs: dict
    cost_price: Dict[str, Any]
    sale_price: Dict[str, Any] 
    markup: float
    profit: Dict[str, Any]
    weight_kg: float
    estimated_weight: float
    product_url: str
    created_at: Optional[str] = None
    # –¢–∏–ø —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    calculation_type: str = "quick"  # "quick" –∏–ª–∏ "precise"
    # –ü–æ–ª—è –ø–∞–∫–∏–Ω–≥–∞ (–∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤)
    packing_units_per_box: Optional[int] = None
    packing_box_weight: Optional[float] = None
    packing_box_length: Optional[float] = None
    packing_box_width: Optional[float] = None
    packing_box_height: Optional[float] = None
    # –î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º
    customs_info: Optional[Dict[str, Any]] = None
    customs_calculations: Optional[Dict[str, float]] = None
    density_warning: Optional[Dict[str, Any]] = None
    # –ù–û–í–û–ï –ü–û–õ–ï: –î–∞–Ω–Ω—ã–µ –æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–±–∞–≤–∫–µ
    density_info: Optional[Dict[str, Any]] = None
    # –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –ö–û–ù–¢–†–ê–ö–¢–ê
    contract_cost: Optional[Dict[str, Any]] = None
    cost_difference: Optional[Dict[str, Any]] = None
    # –ù–û–í–û–ï –ü–û–õ–ï: Prologix —Ä–∞—Å—á–µ—Ç
    prologix_cost: Optional[Dict[str, Any]] = None
    # üöÄ –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –≤ –µ–¥–∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    routes: Optional[Dict[str, Any]] = None

class CategoryInfo(BaseModel):
    category: str
    material: str
    density: Optional[float] = None
    rates: Dict[str, float]
    tnved_code: Optional[str] = ""
    recommendations: Optional[Dict[str, Any]] = None
    
    class Config:
        extra = "ignore"  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ database.py

def save_calculation(calculation: dict, request: CalculationRequest = None) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print(f"üîß save_calculation: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è '{calculation.get('product_name')}'")
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
        db_data = {
            'product_name': calculation['product_name'],
            'category': calculation['category'],
            'price_yuan': calculation['unit_price_yuan'],
            'weight_kg': calculation['weight_kg'],
            'quantity': calculation['quantity'],
            'markup': calculation['markup'],
            'custom_rate': calculation['logistics'].get('rate_usd'),
            'product_url': calculation.get('product_url', ''),
            'cost_price_total_rub': calculation['cost_price']['total']['rub'],
            'cost_price_total_usd': calculation['cost_price']['total']['usd'],
            'sale_price_total_rub': calculation['sale_price']['total']['rub'],
            'sale_price_total_usd': calculation['sale_price']['total']['usd'],
            'profit_total_rub': calculation['profit']['total']['rub'],
            'profit_total_usd': calculation['profit']['total']['usd'],
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞
            'calculation_type': calculation.get('calculation_type', 'quick')
        }
        
        print(f"üîß –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: {len(db_data)} –ø–æ–ª–µ–π")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–∏–Ω–≥–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if request and request.packing_units_per_box:
            db_data.update({
                'packing_units_per_box': request.packing_units_per_box,
                'packing_box_weight': request.packing_box_weight,
                'packing_box_length': request.packing_box_length,
                'packing_box_width': request.packing_box_width,
                'packing_box_height': request.packing_box_height,
                # –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
                'packing_total_boxes': (calculation['quantity'] + request.packing_units_per_box - 1) // request.packing_units_per_box,  # ceiling division
                'packing_total_volume': (request.packing_box_length * request.packing_box_width * request.packing_box_height) * ((calculation['quantity'] + request.packing_units_per_box - 1) // request.packing_units_per_box),
                'packing_total_weight': request.packing_box_weight * ((calculation['quantity'] + request.packing_units_per_box - 1) // request.packing_units_per_box)
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—à–ª–∏–Ω–∞—Ö –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        customs_info = calculation.get('customs_info', {})
        customs_calculations = calculation.get('customs_calculations', {})
        density_warning = calculation.get('density_warning', {})
        
        if customs_info:
            db_data.update({
                'tnved_code': customs_info.get('tnved_code'),
                'duty_rate': customs_info.get('duty_rate'),
                'vat_rate': customs_info.get('vat_rate'),
                'certificates': ', '.join(customs_info.get('certificates', [])) if customs_info.get('certificates') else None,
                'customs_notes': customs_info.get('required_documents')
            })
        
        if customs_calculations:
            db_data.update({
                'duty_amount_usd': customs_calculations.get('duty_amount_usd'),
                'vat_amount_usd': customs_calculations.get('vat_amount_usd'),
                'total_customs_cost_usd': customs_calculations.get('total_customs_cost_usd')
            })
        
        if density_warning:
            db_data.update({
                'density_warning_message': density_warning.get('message'),
                'calculated_density': density_warning.get('calculated_density'),
                'category_density': density_warning.get('category_density')
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if request:
            if request.custom_logistics:
                db_data['custom_logistics'] = request.custom_logistics
            if request.forced_category:
                db_data['forced_category'] = request.forced_category
        
        print(f"üîß –í—ã–∑–æ–≤ save_calculation_to_db —Å {len(db_data)} –ø–æ–ª—è–º–∏")
        result_id = save_calculation_to_db(db_data)
        
        if result_id:
            print(f"‚úÖ save_calculation_to_db –≤–µ—Ä–Ω—É–ª ID: {result_id}")
        else:
            print(f"‚ö†Ô∏è save_calculation_to_db –≤–µ—Ä–Ω—É–ª None –∏–ª–∏ 0")
        
        return result_id
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ save_calculation: {e}")
        import traceback
        traceback.print_exc()
        return None

def get_history_calculations() -> List[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ database.py"""
    try:
        return get_calculation_history()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@app.get("/login", response_class=HTMLResponse)
async def login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    return """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - Price Calculator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <style>
        body {
            font-family: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
        }
        .input-field {
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            padding: 0.75rem;
            transition: all 0.2s ease;
        }
        .input-field:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }
        .btn-primary {
            background: #000;
            color: white;
            transition: all 0.2s ease;
        }
        .btn-primary:hover {
            background: #1f2937;
        }
        .card {
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 12px;
            transition: all 0.2s ease;
        }
        .card:hover {
            border-color: #d1d5db;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }
        .loading-spinner {
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <div id="app">
        <header class="bg-white border-b border-gray-200">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center h-16">
                    <div class="flex items-center">
                        <h1 class="text-xl font-semibold text-gray-900">Price Calculator</h1>
                    </div>
                    <div class="text-sm text-gray-500">–ó–∞—â–∏—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω</div>
                </div>
            </div>
        </header>

        <main class="flex items-center justify-center min-h-screen -mt-16 px-4">
            <div class="card w-full max-w-md p-8">
                <div class="text-center mb-8">
                    <div class="mb-4">
                        <div class="text-4xl text-gray-900 mb-2">üßÆ</div>
                    </div>
                    <h2 class="text-2xl font-bold text-gray-900 mb-2">–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
                    <p class="text-gray-500">–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</p>
                </div>

            <form @submit.prevent="handleLogin" class="space-y-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">–õ–æ–≥–∏–Ω</label>
                    <input 
                        v-model="credentials.username" 
                        type="text" 
                        required
                        class="input-field w-full" 
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω">
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">–ü–∞—Ä–æ–ª—å</label>
                    <input 
                        v-model="credentials.password" 
                        type="password" 
                        required
                        class="input-field w-full" 
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å">
                </div>

                <div v-if="errorMessage" class="p-3 bg-red-50 border border-red-200 rounded-lg">
                    <p class="text-red-700 text-sm">WARNING {{ errorMessage }}</p>
                </div>

                <button 
                    type="submit" 
                    :disabled="isLoading"
                    :class="['btn-primary px-8 py-3 rounded-lg font-medium w-full', 
                            isLoading ? 'opacity-50 cursor-not-allowed' : '']">
                    <span v-if="isLoading" class="loading-spinner inline-block w-4 h-4 mr-2">‚è≥</span>
                    {{ isLoading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏' }}
                </button>
            </form>

                <div class="mt-8 pt-6 border-t border-gray-200 text-center">
                    <p class="text-xs text-gray-400">
                        ¬© 2025 Price Calculator. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.
                    </p>
                </div>
            </div>
        </main>
    </div>

    <script>
        const { createApp } = Vue;
        
        createApp({
            data() {
                return {
                    credentials: {
                        username: '',
                        password: ''
                    },
                    isLoading: false,
                    errorMessage: ''
                }
            },
            methods: {
                async handleLogin() {
                    if (!this.credentials.username || !this.credentials.password) {
                        this.errorMessage = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
                        return;
                    }

                    this.isLoading = true;
                    this.errorMessage = '';

                    try {
                        const response = await fetch('/api/login', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(this.credentials)
                        });

                        const data = await response.json();

                        if (data.success) {
                            window.location.href = '/';
                        } else {
                            this.errorMessage = data.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
                        }

                    } catch (error) {
                        console.error('Login error:', error);
                        this.errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
                    } finally {
                        this.isLoading = false;
                    }
                }
            },
            mounted() {
                this.$nextTick(() => {
                    const usernameInput = document.querySelector('input[type="text"]');
                    if (usernameInput) {
                        usernameInput.focus();
                    }
                });
            }
        }).mount('#app');
    </script>
</body>
</html>
    """

@app.post("/api/login")
async def login(request: Request, response: Response):
    """API endpoint –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        data = await request.json()
        username = data.get("username", "")
        password = data.get("password", "")
        
        if username == AUTH_USERNAME and password == AUTH_PASSWORD:
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
            session_token = create_session_token()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å —Ç–æ–∫–µ–Ω–æ–º
            response.set_cookie(
                key="session_token",
                value=session_token,
                max_age=86400 * 7,  # 7 –¥–Ω–µ–π
                httponly=True,
                secure=False,  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True –¥–ª—è HTTPS
                samesite="lax"
            )
            
            return {"success": True, "message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"}
        else:
            return {"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"}
            
    except Exception as e:
        print(f"Login error: {e}")
        return {"success": False, "error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"}

@app.post("/api/logout")
async def logout(request: Request, response: Response):
    """API endpoint –¥–ª—è –≤—ã—Ö–æ–¥–∞"""
    session_token = request.cookies.get("session_token")
    if session_token and session_token in active_sessions:
        active_sessions.remove(session_token)
    
    response.delete_cookie("session_token")
    return {"success": True, "message": "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω"}

# API endpoints
@app.get("/")
async def root(request: Request):
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - V2 (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    return FileResponse('index_v2.html')

@app.get("/v1")
async def v1_page(request: Request):
    """üì¶ V1 - –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
    return FileResponse('index.html')

@app.get("/refactored")
async def refactored_version(request: Request):
    """üöÄ –ù–æ–≤–∞—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    return FileResponse('index-refactored.html')

@app.get("/vite")
async def vite_version(request: Request):
    """Vite –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º Vite build –≤–µ—Ä—Å–∏—é
    return FileResponse('frontend/dist/src/index.html')

@app.get("/monolith")
async def monolith_version(request: Request):
    """–ú–æ–Ω–æ–ª–∏—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –æ—Ç–∫–∞—Ç–∞)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    return FileResponse('index_monolith_backup.html')

@app.get("/test-components")
async def test_components(request: Request):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    return FileResponse('test_components.html')

@app.get("/test-simple")
async def test_simple(request: Request):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    return FileResponse('test_simple.html')

@app.get("/test-fixed")
async def test_fixed(request: Request):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    return FileResponse('test_fixed.html')

@app.get("/test-minimal")
async def test_minimal(request: Request):
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Vue.js"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    return FileResponse('test_minimal.html')

@app.post("/api/reload-calculator")
async def reload_calculator():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î"""
    try:
        global calculator
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        calculator = None
        print("üîÑ –°–±—Ä–æ—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞...")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        calc = get_calculator()
        
        if calc and hasattr(calc, 'categories') and calc.categories:
            categories_count = len(calc.categories)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—à–ª–∏–Ω–∞–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
            categories_with_customs = 0
            sample_category = None
            
            for category in calc.categories:
                if isinstance(category, dict) and 'duty_rate' in category and 'vat_rate' in category:
                    categories_with_customs += 1
                    if not sample_category:
                        sample_category = {
                            'name': category.get('category', 'Unknown'),
                            'duty_rate': category.get('duty_rate'),
                            'vat_rate': category.get('vat_rate'),
                            'tnved_code': category.get('tnved_code')
                        }
            
            return {
                "status": "success",
                "message": "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω",
                "categories_total": categories_count,
                "categories_with_customs": categories_with_customs,
                "sample_category": sample_category,
                "customs_loader_available": hasattr(calc, 'customs_loader') and calc.customs_loader is not None
            }
        else:
            return {
                "status": "warning", 
                "message": "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                "categories_total": 0,
                "categories_with_customs": 0
            }
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {str(e)}")

@app.post("/api/fix-missing-customs")
async def fix_missing_customs():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –¢–ù –í–≠–î"""
    try:
        from database import get_database_connection
        import json
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–æ—à–ª–∏–Ω—ã –ø–æ —Ç–∏–ø–∞–º –¢–ù –í–≠–î
        TNVED_CUSTOMS_MAP = {
            # –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã
            "85": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            
            # –¢–µ–∫—Å—Ç–∏–ª—å –∏ –æ–¥–µ–∂–¥–∞  
            "61": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "62": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "63": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "65": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            
            # –°—É–º–∫–∏ –∏ –∫–æ–∂–≥–∞–ª–∞–Ω—Ç–µ—Ä–µ—è
            "42": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            
            # –ö–µ—Ä–∞–º–∏–∫–∞ –∏ –ø–æ—Å—É–¥–∞
            "69": {"duty_rate": "11.5%", "vat_rate": "20%", "certificates": ["EAC"]},
            
            # –ü–ª–∞—Å—Ç–º–∞—Å—Å—ã
            "39": {"duty_rate": "5%", "vat_rate": "20%", "certificates": []},
            
            # –ò–≥—Ä—É—à–∫–∏
            "95": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
            
            # –ú–µ—Ç–∞–ª–ª—ã
            "71": {"duty_rate": "6.5%", "vat_rate": "20%", "certificates": []},
            "73": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
            "83": {"duty_rate": "6.5%", "vat_rate": "20%", "certificates": []},
            
            # –ö–Ω–∏–≥–∏ –∏ –ø–µ—á–∞—Ç–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è
            "48": {"duty_rate": "0%", "vat_rate": "10%", "certificates": []},
            
            # –ó–æ–Ω—Ç—ã
            "66": {"duty_rate": "6.5%", "vat_rate": "20%", "certificates": []},
            
            # –ß–∞—Å—ã
            "91": {"duty_rate": "6%", "vat_rate": "20%", "certificates": ["EAC"]},
            
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "default": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]}
        }
        
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –ø–æ—à–ª–∏–Ω, –Ω–æ —Å –¢–ù –í–≠–î
        cursor.execute("SELECT category, data FROM categories")
        all_categories = cursor.fetchall()
        
        updated_count = 0
        results = []
        
        for row in all_categories:
            try:
                if db_type == 'postgres':
                    category_name = row['category'] if isinstance(row, dict) else row[0]
                    category_data = row['data'] if isinstance(row, dict) else row[1]
                else:
                    category_name = row['category'] if hasattr(row, 'keys') else row[0]
                    category_data = row['data'] if hasattr(row, 'keys') else row[1]
                
                # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
                if isinstance(category_data, str):
                    category_json = json.loads(category_data)
                else:
                    category_json = category_data
                
                tnved_code = category_json.get('tnved_code', '')
                has_duty_rate = bool(category_json.get('duty_rate'))
                has_vat_rate = bool(category_json.get('vat_rate'))
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –¢–ù –í–≠–î, –Ω–æ –±–µ–∑ –ø–æ—à–ª–∏–Ω
                if tnved_code and not (has_duty_rate and has_vat_rate):
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—à–ª–∏–Ω—ã –ø–æ –ø–µ—Ä–≤—ã–º 2 —Ü–∏—Ñ—Ä–∞–º –¢–ù –í–≠–î
                    tnved_prefix = tnved_code[:2] if len(tnved_code) >= 2 else ""
                    
                    customs_info = TNVED_CUSTOMS_MAP.get(tnved_prefix, TNVED_CUSTOMS_MAP["default"])
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    category_json['duty_rate'] = customs_info['duty_rate']
                    category_json['vat_rate'] = customs_info['vat_rate']
                    category_json['certificates'] = customs_info['certificates']
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    updated_data = json.dumps(category_json, ensure_ascii=False)
                    
                    if db_type == 'postgres':
                        cursor.execute(
                            "UPDATE categories SET data = %s WHERE category = %s",
                            (updated_data, category_name)
                        )
                    else:
                        cursor.execute(
                            "UPDATE categories SET data = ? WHERE category = ?",
                            (updated_data, category_name)
                        )
                    
                    updated_count += 1
                    results.append(f"‚úÖ {category_name} (–¢–ù –í–≠–î: {tnved_code[:2]}**) -> {customs_info['duty_rate']}/{customs_info['vat_rate']}")
                    
            except Exception as e:
                results.append(f"‚ùå –û—à–∏–±–∫–∞ —Å {category_name}: {e}")
                continue
        
        conn.commit()
        cursor.close()
        
        return {
            "status": "success",
            "message": "–ü–æ—à–ª–∏–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –¢–ù –í–≠–î",
            "categories_updated": updated_count,
            "details": results[:30]  # –ü–µ—Ä–≤—ã–µ 30 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        }
        
    except Exception as e:
        import traceback
        traceback.print_exc()
        return {"error": f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—à–ª–∏–Ω: {str(e)}"}

@app.post("/api/load-customs-data")
async def load_customs_data_endpoint():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—à–ª–∏–Ω–∞–º –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        from database import get_database_connection
        import json
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        CUSTOMS_DATA = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ—à–ª–∏–Ω–∞–º–∏
            "–ø–æ–≤–µ—Ä–±–∞–Ω–∫–∏": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∫—Ä—É–∂–∫–∏": {"duty_rate": "11.5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ç–µ—Ä–º–æ—Å—ã": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ç–µ—Ä–º–æ–±—É—Ç—ã–ª–∫–∏": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ç–µ—Ä–º–æ–∫—Ä—É–∂–∫–∏": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ç–µ—Ä–º–æ—Å—Ç–∞–∫–∞–Ω—ã": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∫–æ—Ñ—Ñ–µ—Ä—ã": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫–∏": {"duty_rate": "0%", "vat_rate": "10%", "certificates": []},
            "–±–ª–æ–∫–Ω–æ—Ç—ã": {"duty_rate": "0%", "vat_rate": "10%", "certificates": []},
            "–∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–ª–∞–Ω—å—è—Ä–¥": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ä–µ—Ç—Ä–∞–∫—Ç–æ—Ä": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–ø–∞–∫–µ—Ç—ã": {"duty_rate": "5%", "vat_rate": "20%", "certificates": []},
            "—Ñ–ª–µ—à–∫–∏": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ä—É—á–∫–∏": {"duty_rate": "6.5%", "vat_rate": "20%", "certificates": []},
            "—Ñ—É—Ç–±–æ–ª–∫–∏": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Å—É–º–∫–∏": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∑–æ–Ω—Ç—ã": {"duty_rate": "6.5%", "vat_rate": "20%", "certificates": []},
            "—á–∞—Å—ã": {"duty_rate": "6%", "vat_rate": "20%", "certificates": ["EAC"]},
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            "–±—É—Ç—ã–ª–∫–∞": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∫–æ—Ñ—Ñ–µ—Ä": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ç–µ—Ä–º–æ—Å": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ä—É—á–∫–∞": {"duty_rate": "6.5%", "vat_rate": "20%", "certificates": []},
            "–ª–∞–º–ø–∞": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∏–≥—Ä—É—à–∫–∞": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∏–≥—Ä—É—à–∫–∏": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∫–∞–±–µ–ª—å": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–±—Ä–µ–ª–æ–∫": {"duty_rate": "6.5%", "vat_rate": "20%", "certificates": []},
            "—á–µ—Ö–æ–ª": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ä—é–∫–∑–∞–∫": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∫–æ—Å–º–µ—Ç–∏—á–∫–∞": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∫–æ–ª–æ–Ω–∫–∞": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ñ–ª–µ—à–∫–∞": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ñ—É—Ç–±–æ–ª–∫–∞": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–ø–ª–µ–¥": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—É–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—å": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∑–æ–Ω—Ç": {"duty_rate": "6.5%", "vat_rate": "20%", "certificates": []},
            "–ø–æ–¥—É—à–∫–∞": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∫–æ—Ä–æ–±–∫–∞": {"duty_rate": "5%", "vat_rate": "20%", "certificates": []},
            "–æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–ø–µ–Ω–∞–ª": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–±–µ–π–¥–∂": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–Ω–∞—É—à–Ω–∏–∫–∏": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–±–ª–æ–∫–Ω–æ—Ç": {"duty_rate": "0%", "vat_rate": "10%", "certificates": []},
            "–º–∞—Å—Å–∞–∂–µ—Ä": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–ø–æ—Å—É–¥–∞": {"duty_rate": "11.5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–ø—Ä–æ–µ–∫—Ç–æ—Ä": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∫–µ–ø–∫–∞": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—à–∞—Ä—Ñ": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–ø–µ—Ä—á–∞—Ç–∫–∏": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–¥–æ–∂–¥–µ–≤–∏–∫": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ñ–æ–Ω–∞—Ä—å": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–≥–∏—Ä–ª—è–Ω–¥–∞": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Å–≤–µ—á–∞": {"duty_rate": "5%", "vat_rate": "20%", "certificates": []},
            "–º–∞–≥–Ω–∏—Ç": {"duty_rate": "5%", "vat_rate": "20%", "certificates": []},
            "—Ç–æ–ª—Å—Ç–æ–≤–∫–∞": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ö—É–¥–∏": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä": {"duty_rate": "5%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Ç–∞–±–ª–µ—Ç–Ω–∏—Ü–∞": {"duty_rate": "9.6%", "vat_rate": "20%", "certificates": ["EAC"]},
            "—Å—Ç–∏–∫–µ—Ä—ã": {"duty_rate": "5%", "vat_rate": "20%", "certificates": []},
            "–º—ã—à—å": {"duty_rate": "0%", "vat_rate": "20%", "certificates": ["EAC"]},
            "–Ω–æ—Å–∫–∏": {"duty_rate": "8.8%", "vat_rate": "20%", "certificates": ["EAC"]},
            
            # –û–±—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "–æ–±—â–∞—è": {"duty_rate": "15%", "vat_rate": "20%", "certificates": ["EAC"]}
        }
        
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        
        print(f"üöõ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º –≤ {db_type}...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cursor.execute("SELECT category, data FROM categories")
        existing_categories = cursor.fetchall()
        
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î: {len(existing_categories)}")
        
        updated_count = 0
        results = []
        
        for row in existing_categories:
            try:
                if db_type == 'postgres':
                    category_name = row['category'] if isinstance(row, dict) else row[0]
                    category_data = row['data'] if isinstance(row, dict) else row[1]
                else:
                    category_name = row['category'] if hasattr(row, 'keys') else row[0]
                    category_data = row['data'] if hasattr(row, 'keys') else row[1]
                
                # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if isinstance(category_data, str):
                    category_json = json.loads(category_data)
                else:
                    category_json = category_data
                
                # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º
                customs_info = None
                category_lower = category_name.lower()
                
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if category_lower in CUSTOMS_DATA:
                    customs_info = CUSTOMS_DATA[category_lower]
                else:
                    # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
                    for customs_key, customs_value in CUSTOMS_DATA.items():
                        if customs_key in category_lower or category_lower in customs_key:
                            customs_info = customs_value
                            break
                
                if customs_info:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¢–ù –í–≠–î –∫–æ–¥ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    existing_tnved = category_json.get('tnved_code', '')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º
                    if existing_tnved:
                        # –ï—Å–ª–∏ –¢–ù –í–≠–î —É–∂–µ –µ—Å—Ç—å, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—à–ª–∏–Ω—ã
                        category_json['duty_rate'] = customs_info['duty_rate']
                        category_json['vat_rate'] = customs_info['vat_rate']
                        category_json['certificates'] = customs_info['certificates']
                        results.append(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—à–ª–∏–Ω—ã –¥–ª—è: {category_name} (–¢–ù –í–≠–î: {existing_tnved})")
                    else:
                        # –ï—Å–ª–∏ –¢–ù –í–≠–î –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –∫–æ–¥
                        category_json['tnved_code'] = "9999999999"  # –û–±—â–∏–π –∫–æ–¥ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
                        category_json['duty_rate'] = customs_info['duty_rate']
                        category_json['vat_rate'] = customs_info['vat_rate']
                        category_json['certificates'] = customs_info['certificates']
                        results.append(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {category_name} (–æ–±—â–∏–π –¢–ù –í–≠–î)")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                    updated_data = json.dumps(category_json, ensure_ascii=False)
                    
                    if db_type == 'postgres':
                        cursor.execute(
                            "UPDATE categories SET data = %s WHERE category = %s",
                            (updated_data, category_name)
                        )
                    else:
                        cursor.execute(
                            "UPDATE categories SET data = ? WHERE category = ?",
                            (updated_data, category_name)
                        )
                    
                    updated_count += 1
                else:
                    results.append(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—à–ª–∏–Ω–∞–º –¥–ª—è: {category_name}")
                    
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}: {e}"
                results.append(error_msg)
                continue
        
        conn.commit()
        cursor.close()
        
        return {
            "status": "success",
            "database_type": db_type,
            "categories_found": len(existing_categories),
            "categories_updated": updated_count,
            "details": results[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
        }
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—à–ª–∏–Ω–∞–º: {str(e)}")

@app.post("/api/force-migrate")
async def force_migrate_database():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –ë–î - –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏"""
    try:
        from database import get_database_connection
        
        conn, db_type = get_database_connection()
        
        print(f"üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è {db_type}...")
        
        # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
        required_columns = [
            ('calculation_type', 'VARCHAR(50) DEFAULT \'quick\''),
            ('packing_units_per_box', 'INTEGER'),
            ('packing_box_weight', 'DECIMAL(10,3)'),
            ('packing_box_length', 'DECIMAL(10,2)'),
            ('packing_box_width', 'DECIMAL(10,2)'),
            ('packing_box_height', 'DECIMAL(10,2)'),
            ('packing_total_boxes', 'INTEGER'),
            ('packing_total_volume', 'DECIMAL(10,4)'),
            ('packing_total_weight', 'DECIMAL(10,3)'),
            ('tnved_code', 'VARCHAR(20)'),
            ('duty_rate', 'VARCHAR(20)'),
            ('vat_rate', 'VARCHAR(20)'),
            ('duty_amount_usd', 'DECIMAL(10,2)'),
            ('vat_amount_usd', 'DECIMAL(10,2)'),
            ('total_customs_cost_usd', 'DECIMAL(10,2)'),
            ('certificates', 'TEXT'),
            ('customs_notes', 'TEXT'),
            ('density_warning_message', 'TEXT'),
            ('calculated_density', 'DECIMAL(10,3)'),
            ('category_density', 'DECIMAL(10,3)')
        ]
        
        success_count = 0
        results = []
        
        for column_name, column_type in required_columns:
            # –ö–∞–∂–¥–∞—è –∫–æ–ª–æ–Ω–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è PostgreSQL
            cursor = conn.cursor()
            try:
                if db_type == 'postgres':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
                    cursor.execute("""
                        SELECT column_name 
                        FROM information_schema.columns 
                        WHERE table_name = 'calculations' AND column_name = %s
                    """, (column_name,))
                    
                    if not cursor.fetchone():
                        print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º {column_name}...")
                        cursor.execute(f'ALTER TABLE calculations ADD COLUMN {column_name} {column_type}')
                        conn.commit()
                        print(f"‚úÖ {column_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                        results.append(f"‚úÖ {column_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                        success_count += 1
                    else:
                        results.append(f"‚úì {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        
                else:  # SQLite
                    cursor.execute("PRAGMA table_info(calculations)")
                    existing_columns = [row[1] for row in cursor.fetchall()]
                    
                    if column_name not in existing_columns:
                        print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º {column_name}...")
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è SQLite
                        sqlite_type = column_type.replace('VARCHAR', 'TEXT').replace('DECIMAL', 'REAL')
                        cursor.execute(f'ALTER TABLE calculations ADD COLUMN {column_name} {sqlite_type}')
                        conn.commit()
                        print(f"‚úÖ {column_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                        results.append(f"‚úÖ {column_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                        success_count += 1
                    else:
                        results.append(f"‚úì {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        
            except Exception as e:
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                try:
                    conn.rollback()
                    print(f"üîÑ Rollback –¥–ª—è {column_name}")
                except:
                    pass
                    
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å {column_name}: {e}"
                print(error_msg)
                results.append(error_msg)
                continue
            finally:
                cursor.close()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        cursor = conn.cursor()
        try:
            if db_type == 'postgres':
                cursor.execute("""
                    SELECT column_name, data_type 
                    FROM information_schema.columns 
                    WHERE table_name = 'calculations' 
                    ORDER BY column_name
                """)
                final_columns = cursor.fetchall()
                results.append(f"üìã –ò—Ç–æ–≥–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ PostgreSQL: {len(final_columns)}")
            else:
                cursor.execute("PRAGMA table_info(calculations)")
                final_columns = cursor.fetchall()
                results.append(f"üìã –ò—Ç–æ–≥–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ SQLite: {len(final_columns)}")
        except Exception as e:
            results.append(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")
        finally:
            cursor.close()
        
        return {
            "status": "success",
            "database_type": db_type,
            "columns_added": success_count,
            "total_columns_checked": len(required_columns),
            "details": results
        }
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î: {str(e)}")

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        calc = get_calculator()
        calculator_status = "OK" if calc else "ERROR"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            conn, db_type = get_database_connection()
            if conn:
                db_status = f"OK ({db_type})"
            else:
                db_status = "ERROR"
        except Exception as e:
            db_status = f"ERROR: {str(e)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            config_loader = ConfigLoader()
            currencies = config_loader.load_currency_rates()
            config_status = "OK" if currencies else "ERROR"
        except Exception as e:
            config_status = f"ERROR: {str(e)}"
        
        status = {
            "status": "healthy" if all([
                calculator_status == "OK",
                db_status.startswith("OK"),
                config_status == "OK"
            ]) else "unhealthy",
            "calculator": calculator_status,
            "database": db_status,
            "config": config_status,
            "timestamp": datetime.now().isoformat()
        }
        
        print(f"üè• Health check: {status}")
        return status
        
    except Exception as e:
        print(f"‚ùå Health check failed: {e}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.post("/api/reconnect-db")
async def reconnect_database_endpoint(auth: bool = Depends(require_auth)):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from database import reconnect_database
        conn, db_type = reconnect_database()
        
        return {
            "success": True,
            "database_type": db_type,
            "message": f"–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {db_type} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return {
            "success": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.post("/debug/calculate")
async def debug_calculate(request: CalculationRequest):
    """Debug —Ä–∞—Å—á–µ—Ç —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        calc = get_calculator()
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = calc.find_category_by_name(request.product_name)
        
        debug_info = {
            "product_name": request.product_name,
            "found_category": category.get('category') if category else None,
            "has_customs_data": bool(category and category.get('duty_rate') and category.get('vat_rate')),
            "category_data": {
                "duty_rate": category.get('duty_rate') if category else None,
                "vat_rate": category.get('vat_rate') if category else None,
                "tnved_code": category.get('tnved_code') if category else None,
                "certificates": category.get('certificates') if category else None
            } if category else None
        }
        
        return debug_info
        
    except Exception as e:
        import traceback
        traceback.print_exc()
        return {"error": str(e)}

@app.post("/api/calculate", response_model=CalculationResponse)
async def calculate_price(request: CalculationRequest, auth: bool = Depends(require_auth)):
    """–†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ V2 (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º V2 –ª–æ–≥–∏–∫—É (calculation_id=None –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ)
    return await _perform_calculation_and_save(request, calculation_id=None)

@app.post("/api/v2/calculate", response_model=CalculationResponse)
async def calculate_price_v2(request: CalculationRequest):
    """–†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ V2 (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é (calculation_id=None –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ)
    return await _perform_calculation_and_save(request, calculation_id=None)

@app.get("/api/v2/history")
async def get_history_v2():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ V2 (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    try:
        from database import get_calculation_history
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Ä–∞—Å—á–µ—Ç–æ–≤
        history = get_calculation_history()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è V2 (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ + –ø–æ–ª—è –ø–∞–∫–∏–Ω–≥–∞)
        formatted_history = []
        for item in history:
            formatted_history.append({
                'id': item.get('id'),
                'product_name': item.get('product_name'),
                'product_url': item.get('product_url'),  # –°—Å—ã–ª–∫–∞ –∏–ª–∏ WeChat
                'price_yuan': item.get('price_yuan'),
                'weight_kg': item.get('weight_kg'),
                'quantity': item.get('quantity'),
                'markup': item.get('markup'),
                'category': item.get('category'),
                'cost_price_rub': item.get('cost_price_rub'),
                'sale_price_rub': item.get('sale_price_rub'),
                'profit_rub': item.get('profit_rub'),
                'created_at': item.get('created_at'),
                'calculation_type': item.get('calculation_type'),
                # –ü–æ–ª—è –ø–∞–∫–∏–Ω–≥–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                'packing_units_per_box': item.get('packing_units_per_box'),
                'packing_box_weight': item.get('packing_box_weight'),
                'packing_box_length': item.get('packing_box_length'),
                'packing_box_width': item.get('packing_box_width'),
                'packing_box_height': item.get('packing_box_height'),
                # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (Stage 3)
                'custom_logistics': item.get('custom_logistics'),
                'forced_category': item.get('forced_category')
            })
        
        # üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º custom_logistics –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        custom_count = sum(1 for item in formatted_history if item.get('custom_logistics'))
        print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è V2: {len(formatted_history)} —Ä–∞—Å—á–µ—Ç–æ–≤, {custom_count} —Å custom_logistics")
        
        return formatted_history
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ V2: {e}")
        import traceback
        traceback.print_exc()
        return []

@app.get("/api/v2/calculation/{calculation_id}/raw")
async def get_calculation_raw_v2(calculation_id: int):
    """DEBUG: –ü–æ–ª—É—á–∏—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞ –∏–∑ –ë–î"""
    try:
        from database import get_database_connection
        
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        
        if db_type == 'postgres':
            cursor.execute('SELECT * FROM calculations WHERE id = %s', (calculation_id,))
        else:
            cursor.execute('SELECT * FROM calculations WHERE id = ?', (calculation_id,))
        row = cursor.fetchone()
        
        if not row:
            raise HTTPException(status_code=404, detail=f"–†–∞—Å—á–µ—Ç #{calculation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º endpoint
        if db_type == 'postgres':
            if hasattr(row, 'keys'):
                calculation = dict(row)
            else:
                columns = [desc[0] for desc in cursor.description]
                calculation = dict(zip(columns, row))
        else:
            columns = [desc[0] for desc in cursor.description]
            calculation = dict(zip(columns, row))
        
        cursor.close()
        conn.close()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç–∏–ø–∞–º–∏
        return {
            "id": calculation_id,
            "raw_data": {
                col: {
                    "value": str(calculation.get(col)),
                    "type": type(calculation.get(col)).__name__,
                    "repr": repr(calculation.get(col))
                }
                for col in ['product_name', 'price_yuan', 'quantity', 'weight_kg', 'markup', 
                           'calculation_type', 'packing_units_per_box', 'packing_box_weight']
            }
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@app.get("/api/v2/calculation/{calculation_id}")
async def get_calculation_by_id_v2(calculation_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç –ø–æ ID –¥–ª—è V2 (–¥–ª—è –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫)"""
    try:
        from database import get_database_connection
        
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—á–µ—Ç –∏–∑ –ë–î (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π placeholder –¥–ª—è —Ç–∏–ø–∞ –ë–î)
        if db_type == 'postgres':
            cursor.execute('SELECT * FROM calculations WHERE id = %s', (calculation_id,))
        else:
            cursor.execute('SELECT * FROM calculations WHERE id = ?', (calculation_id,))
        row = cursor.fetchone()
        
        if not row:
            raise HTTPException(status_code=404, detail=f"–†–∞—Å—á–µ—Ç #{calculation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ dict
        # –ö–†–ò–¢–ò–ß–ù–û: –¥–ª—è PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ–º column_names –∏–∑ cursor.description
        columns = [desc[0] for desc in cursor.description]  # –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        
        if db_type == 'postgres':
            # PostgreSQL cursor –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç RealDictRow –∏–ª–∏ –æ–±—ã—á–Ω—ã–π tuple
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å –Ω–∞–ø—Ä—è–º—É—é
            if hasattr(row, 'keys'):
                # –≠—Ç–æ —É–∂–µ —Å–ª–æ–≤–∞—Ä—å (RealDictRow)
                calculation = dict(row)
            else:
                # –û–±—ã—á–Ω—ã–π tuple - —Å–æ–∑–¥–∞–µ–º dict –≤—Ä—É—á–Ω—É—é
                calculation = dict(zip(columns, row))
        else:
            # SQLite –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple
            calculation = dict(zip(columns, row))
        
        print(f"\n{'='*60}")
        print(f"üìñ –ó–ê–ì–†–£–ñ–ï–ù –†–ê–°–ß–ï–¢ #{calculation_id}")
        print(f"{'='*60}")
        print(f"üè∑Ô∏è –¢–æ–≤–∞—Ä: {calculation.get('product_name')}")
        print(f"üìä –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ –ë–î: {columns}")
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–ò–ü–û–í –î–ê–ù–ù–´–•:")
        for col in ['price_yuan', 'weight_kg', 'quantity', 'markup', 'packing_units_per_box']:
            val = calculation.get(col)
            print(f"   {col:25} = {repr(val):20} | type: {type(val).__name__}")
        print(f"{'='*60}\n")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
        def safe_float(value, default=None):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
            print(f"üîÑ safe_float: –≤—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = {repr(value)} | —Ç–∏–ø = {type(value).__name__} | default = {default}")
            if value is None or value == '':
                print(f"   ‚Üí –í–æ–∑–≤—Ä–∞—â–∞–µ–º default: {default}")
                return default
            try:
                result = float(value)
                print(f"   ‚Üí ‚úÖ –£—Å–ø–µ—à–Ω–æ: {result}")
                return result
            except (ValueError, TypeError) as e:
                print(f"   ‚Üí ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {e}")
                print(f"   ‚Üí –í–æ–∑–≤—Ä–∞—â–∞–µ–º default: {default}")
                return default
        
        def safe_int(value, default=None):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
            print(f"üîÑ safe_int: –≤—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = {repr(value)} | —Ç–∏–ø = {type(value).__name__} | default = {default}")
            if value is None or value == '':
                print(f"   ‚Üí –í–æ–∑–≤—Ä–∞—â–∞–µ–º default: {default}")
                return default
            try:
                result = int(value)
                print(f"   ‚Üí ‚úÖ –£—Å–ø–µ—à–Ω–æ: {result}")
                return result
            except (ValueError, TypeError) as e:
                print(f"   ‚Üí ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {e}")
                print(f"   ‚Üí –í–æ–∑–≤—Ä–∞—â–∞–µ–º default: {default}")
                return default
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
        price_yuan = safe_float(calculation.get('price_yuan'), None)
        quantity = safe_int(calculation.get('quantity'), None)
        weight_kg = safe_float(calculation.get('weight_kg'), None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–æ–ª—è –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞
        if not price_yuan or price_yuan <= 0:
            raise HTTPException(
                status_code=400, 
                detail=f"‚ùå –†–∞—Å—á–µ—Ç #{calculation_id} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: —Ü–µ–Ω–∞ –≤ —é–∞–Ω—è—Ö = {calculation.get('price_yuan')} (—Ç–∏–ø: {type(calculation.get('price_yuan'))}). –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å."
            )
        
        if not quantity or quantity <= 0:
            raise HTTPException(
                status_code=400,
                detail=f"‚ùå –†–∞—Å—á–µ—Ç #{calculation_id} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = {calculation.get('quantity')}. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å."
            )
        
        # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º custom_logistics –µ—Å–ª–∏ –µ—Å—Ç—å
        custom_logistics = None
        custom_logistics_raw = calculation.get('custom_logistics')
        if custom_logistics_raw:
            import json
            try:
                if isinstance(custom_logistics_raw, str):
                    custom_logistics = json.loads(custom_logistics_raw)
                elif isinstance(custom_logistics_raw, dict):
                    custom_logistics = custom_logistics_raw
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏: {list(custom_logistics.keys()) if custom_logistics else 'None'}")
            except json.JSONDecodeError as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ custom_logistics: {e}")
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (—Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤)
        request_data = CalculationRequest(
            product_name=str(calculation.get('product_name', '')),
            product_url=str(calculation.get('product_url', '')),  # –°—Å—ã–ª–∫–∞ –∏–ª–∏ WeChat
            price_yuan=price_yuan,
            quantity=quantity,
            markup=safe_float(calculation.get('markup'), 1.4),
            weight_kg=weight_kg,
            is_precise_calculation=(calculation.get('calculation_type') == 'precise'),
            packing_units_per_box=safe_int(calculation.get('packing_units_per_box'), None),
            packing_box_weight=safe_float(calculation.get('packing_box_weight'), None),
            packing_box_length=safe_float(calculation.get('packing_box_length'), None),
            packing_box_width=safe_float(calculation.get('packing_box_width'), None),
            packing_box_height=safe_float(calculation.get('packing_box_height'), None),
            custom_logistics=custom_logistics,
            forced_category=calculation.get('forced_category') or calculation.get('category')
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î)
        result = await _calculate_price_logic(request_data)
        
        # –ö–†–ò–¢–ò–ß–ù–û: _calculate_price_logic –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Pydantic –º–æ–¥–µ–ª—å,
        # –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç item assignment (result['key'] = value)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ dict
        result_dict = result.dict() if hasattr(result, 'dict') else dict(result)
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID –∏ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        result_dict['id'] = calculation_id
        result_dict['created_at'] = calculation.get('created_at')
        
        print(f"‚úÖ –†–∞—Å—á–µ—Ç #{calculation_id} –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω")
        return result_dict
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ #{calculation_id}: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

async def _perform_calculation_and_save(request: CalculationRequest, calculation_id: Optional[int] = None):
    """
    –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç CalculationService)
    
    Args:
        request: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        calculation_id: ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è) –∏–ª–∏ None (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è)
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å ID
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å
    from services import get_calculation_service
    service = get_calculation_service()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    result = service.perform_calculation(
        product_name=request.product_name,
        price_yuan=request.price_yuan,
        weight_kg=request.weight_kg,
        quantity=request.quantity,
        custom_rate=request.custom_rate,
        delivery_type=request.delivery_type,
        markup=request.markup,
        product_url=request.product_url,
        packing_units_per_box=request.packing_units_per_box,
        packing_box_weight=request.packing_box_weight,
        packing_box_length=request.packing_box_length,
        packing_box_width=request.packing_box_width,
        packing_box_height=request.packing_box_height,
        custom_logistics=request.custom_logistics,
        forced_category=request.forced_category
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    if calculation_id:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        service.update_calculation(
            calculation_id,
            result,
            custom_logistics=request.custom_logistics,
            forced_category=request.forced_category
        )
        result['id'] = calculation_id
        print(f"‚úÖ –†–∞—Å—á–µ—Ç {calculation_id} –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å")
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        saved_id = service.create_calculation(
            result,
            custom_logistics=request.custom_logistics,
            forced_category=request.forced_category
        )
        if saved_id:
            result['id'] = saved_id
            result['created_at'] = datetime.now().isoformat()
            print(f"‚úÖ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å —Å ID: {saved_id}")
        else:
            result['id'] = None
            result['created_at'] = datetime.now().isoformat()
            print("‚ö†Ô∏è –†–∞—Å—á–µ—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î (ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
    
    return result

async def _calculate_price_logic(request: CalculationRequest):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print(f"üîç API CALCULATE REQUEST:")
        print(f"   product_name: {request.product_name}")
        print(f"   price_yuan: {request.price_yuan}")
        print(f"   weight_kg: {request.weight_kg}")
        print(f"   quantity: {request.quantity}")
        print(f"   is_precise_calculation: {request.is_precise_calculation}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not request.product_name or not request.product_name.strip():
            raise HTTPException(status_code=400, detail="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if request.price_yuan <= 0:
            raise HTTPException(status_code=400, detail="–¶–µ–Ω–∞ –≤ —é–∞–Ω—è—Ö –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        if request.quantity <= 0:
            raise HTTPException(status_code=400, detail="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        # –î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —É–ø–∞–∫–æ–≤–∫–∏
        if request.is_precise_calculation:
            if not request.packing_units_per_box or request.packing_units_per_box <= 0:
                raise HTTPException(status_code=400, detail="–î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–æ–±–∫–µ")
            if not request.packing_box_weight or request.packing_box_weight <= 0:
                raise HTTPException(status_code=400, detail="–î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —É–∫–∞–∂–∏—Ç–µ –≤–µ—Å –∫–æ—Ä–æ–±–∫–∏")
            if not request.packing_box_length or request.packing_box_length <= 0:
                raise HTTPException(status_code=400, detail="–î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —É–∫–∞–∂–∏—Ç–µ –¥–ª–∏–Ω—É –∫–æ—Ä–æ–±–∫–∏")
            if not request.packing_box_width or request.packing_box_width <= 0:
                raise HTTPException(status_code=400, detail="–î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —É–∫–∞–∂–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∫–æ—Ä–æ–±–∫–∏")
            if not request.packing_box_height or request.packing_box_height <= 0:
                raise HTTPException(status_code=400, detail="–î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —É–∫–∞–∂–∏—Ç–µ –≤—ã—Å–æ—Ç—É –∫–æ—Ä–æ–±–∫–∏")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–µ—Å 1 —à—Ç—É–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —É–ø–∞–∫–æ–≤–∫–∏ (–¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞)
        calculated_weight_kg = request.weight_kg
        if request.is_precise_calculation:
            if request.packing_box_weight and request.packing_units_per_box:
                calculated_weight_kg = request.packing_box_weight / request.packing_units_per_box
                print(f"üì¶ –í—ã—á–∏—Å–ª–µ–Ω –≤–µ—Å 1 —à—Ç –∏–∑ –ø–∞–∫–∏–Ω–≥–∞: {calculated_weight_kg:.3f} –∫–≥ (–≤–µ—Å –∫–æ—Ä–æ–±–∫–∏ {request.packing_box_weight} / {request.packing_units_per_box} —à—Ç)")
            else:
                raise HTTPException(status_code=400, detail="–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ —É–ø–∞–∫–æ–≤–∫–∏")
        else:
            # –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ weight_kg –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            if not calculated_weight_kg or calculated_weight_kg <= 0:
                raise HTTPException(status_code=400, detail="–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –≤–µ—Å 1 —à—Ç (weight_kg)")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
        calc = get_calculator()
        if not calc:
            raise HTTPException(status_code=500, detail="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        result = calc.calculate_cost(
            price_yuan=request.price_yuan,
            weight_kg=calculated_weight_kg,
            quantity=request.quantity,
            product_name=request.product_name,
            custom_rate=request.custom_rate,
            delivery_type=request.delivery_type,
            markup=request.markup,
            product_url=request.product_url,
            # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–ø–∞–∫–æ–≤–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∏ Prologix
            packing_units_per_box=request.packing_units_per_box,
            packing_box_weight=request.packing_box_weight,
            packing_box_length=request.packing_box_length,
            packing_box_width=request.packing_box_width,
            packing_box_height=request.packing_box_height,
            # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞!)
            custom_logistics_params=request.custom_logistics,
            # –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
            forced_category=request.forced_category
        )
        
        if not result:
            raise HTTPException(status_code=500, detail="–†–∞—Å—á–µ—Ç –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        
        print(f"‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è: {request.product_name}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–∏–Ω–≥–∞ –∏ —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if request.is_precise_calculation or (request.packing_units_per_box is not None and request.packing_units_per_box > 0):
            # –¢–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
            result['calculation_type'] = 'precise'
            packing_data = {
                'packing_units_per_box': request.packing_units_per_box or 0,
                'packing_box_weight': request.packing_box_weight or 0,
                'packing_box_length': request.packing_box_length or 0,
                'packing_box_width': request.packing_box_width or 0,
                'packing_box_height': request.packing_box_height or 0
            }
            result.update(packing_data)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
            if all([request.packing_units_per_box, request.packing_box_weight, 
                   request.packing_box_length, request.packing_box_width, request.packing_box_height]):
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∏–∑ –ø–∞–∫–∏–Ω–≥–∞
                box_volume = request.packing_box_length * request.packing_box_width * request.packing_box_height
                calculated_density = (request.packing_box_weight / box_volume) if box_volume > 0 else 0
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_density = result.get('category_density')
                
                if category_density and calculated_density > 0:
                    density_diff_percent = abs(calculated_density - category_density) / category_density * 100
                    
                    if density_diff_percent > 30:
                        result['density_warning'] = {
                            'message': f'–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ {density_diff_percent:.1f}%',
                            'calculated_density': round(calculated_density, 1),
                            'category_density': round(category_density, 1),
                            'difference_percent': round(density_diff_percent, 1)
                        }
            
        else:
            # –ë—ã—Å—Ç—Ä—ã–µ —Ä–∞—Å—á–µ—Ç—ã
            result['calculation_type'] = 'quick'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        if 'contract_cost' in result and result['contract_cost'] is not None:
            try:
                cost_per_unit = result['contract_cost']['per_unit']['rub']
                print(f"‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω: {cost_per_unit:.2f} —Ä—É–± –∑–∞ –µ–¥–∏–Ω–∏—Ü—É")
            except (KeyError, TypeError) as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ contract_cost: {e}")
        else:
            print("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º)")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—à–ª–∏–Ω–∞–º
        try:
            category_name = result.get('category', '')
            
            if category_name:
                customs_info = customs_loader.get_customs_info_by_category(category_name)
                if customs_info:
                    result['customs_info'] = customs_info
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∞–º–æ–∂–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
                    unit_price_usd = result.get('unit_price_yuan', 0) / 7.2  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
                    total_value_usd = unit_price_usd * request.quantity
                    
                    customs_calc = customs_loader.calculate_customs_cost(total_value_usd, customs_info)
                    result['customs_calculations'] = customs_calc
        except Exception as e:
            print(f"WARNING –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—à–ª–∏–Ω–∞–º: {e}")
            import traceback
            traceback.print_exc()
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—à–ª–∏–Ω–∞–º
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            print(f"üíæ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {request.product_name}")
            calculation_id = save_calculation(result, request)
            
            if calculation_id:
                result['id'] = calculation_id
                result['created_at'] = datetime.now().isoformat()
                print(f"‚úÖ –†–∞—Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î —Å ID: {calculation_id}")
            else:
                print(f"‚ùå save_calculation –≤–µ—Ä–Ω—É–ª None!")
                result['id'] = None
                result['created_at'] = datetime.now().isoformat()
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
            import traceback
            traceback.print_exc()
            result['id'] = None
            result['created_at'] = datetime.now().isoformat()
        
        return CalculationResponse(**result)
        
    except HTTPException:
        # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
        raise
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=400, detail=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {str(e)}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

# CATEGORIES API - moved to backend/api/categories.py
# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
try:
    from backend.api import categories
    app.include_router(categories.router)
    print("Categories router connected from backend/api/categories.py")
except Exception as e:
    print(f"WARNING: Could not load categories router: {e}")

# V3 API Routers
v3_routers_loaded = False
v3_error_message = None
try:
    from api.v3 import factories_router, positions_router, calculations_router
    app.include_router(factories_router)
    app.include_router(positions_router)
    app.include_router(calculations_router)
    v3_routers_loaded = True
    print("‚úÖ V3 API routers connected (factories, positions, calculations)")
except Exception as e:
    v3_error_message = str(e)
    print(f"‚ö†Ô∏è WARNING: Could not load V3 API routers: {e}")
    import traceback
    traceback.print_exc()

@app.get("/api/v3/status")
async def v3_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ V3 API"""
    return {
        "v3_loaded": v3_routers_loaded,
        "error": v3_error_message,
        "available_routes": [
            "/api/v3/factories",
            "/api/v3/positions",
            "/api/v3/calculations"
        ] if v3_routers_loaded else []
    }

@app.get("/debug/categories-without-customs")
async def debug_categories_without_customs():
    """Debug: –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—à–ª–∏–Ω–∞–º"""
    try:
        from database import get_database_connection
        import json
        
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cursor.execute("SELECT category, data FROM categories")
        all_categories = cursor.fetchall()
        cursor.close()
        
        categories_without_customs = []
        categories_with_tnved_but_no_customs = []
        
        for row in all_categories:
            try:
                if db_type == 'postgres':
                    category_name = row['category'] if isinstance(row, dict) else row[0]
                    category_data = row['data'] if isinstance(row, dict) else row[1]
                else:
                    category_name = row['category'] if hasattr(row, 'keys') else row[0]
                    category_data = row['data'] if hasattr(row, 'keys') else row[1]
                
                # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
                if isinstance(category_data, str):
                    category_json = json.loads(category_data)
                else:
                    category_json = category_data
                
                has_tnved = bool(category_json.get('tnved_code'))
                has_duty_rate = bool(category_json.get('duty_rate'))
                has_vat_rate = bool(category_json.get('vat_rate'))
                
                category_info = {
                    "name": category_name,
                    "tnved_code": category_json.get('tnved_code', ''),
                    "duty_rate": category_json.get('duty_rate', ''),
                    "vat_rate": category_json.get('vat_rate', ''),
                    "has_tnved": has_tnved,
                    "has_customs": has_duty_rate and has_vat_rate
                }
                
                if not (has_duty_rate and has_vat_rate):
                    categories_without_customs.append(category_info)
                    
                    if has_tnved:
                        categories_with_tnved_but_no_customs.append(category_info)
                        
            except Exception as e:
                categories_without_customs.append({
                    "name": category_name,
                    "error": str(e)
                })
        
        return {
            "total_categories": len(all_categories),
            "categories_without_customs": len(categories_without_customs),
            "categories_with_tnved_but_no_customs": len(categories_with_tnved_but_no_customs),
            "details": {
                "without_customs": categories_without_customs[:20],  # –ü–µ—Ä–≤—ã–µ 20
                "with_tnved_but_no_customs": categories_with_tnved_but_no_customs[:20]
            }
        }
        
    except Exception as e:
        import traceback
        traceback.print_exc()
        return {"error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}"}

@app.get("/debug/category/{product_name}")
async def debug_category_by_name(product_name: str):
    """Debug: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        calc = get_calculator()
        if not calc:
            return {"error": "Calculator not initialized"}
            
        category = calc.find_category_by_name(product_name)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üîç DEBUG: product_name='{product_name}'")
        print(f"üîç DEBUG: found_category='{category.get('category', 'None') if category else 'None'}'")
        
        if category:
            print(f"üîç DEBUG: duty_rate='{category.get('duty_rate', 'None')}'")
            print(f"üîç DEBUG: vat_rate='{category.get('vat_rate', 'None')}'")
            print(f"üîç DEBUG: tnved_code='{category.get('tnved_code', 'None')}'")
            
        return {
            "product_name": product_name,
            "category_found": category is not None,
            "category_data": category,
            "has_customs_data": bool(category and category.get('duty_rate') and category.get('vat_rate'))
        }
    except Exception as e:
        import traceback
        traceback.print_exc()
        return {"error": f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}"}

@app.get("/api/categories/names")
async def get_category_names():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è V2)"""
    try:
        calc = get_calculator()
        if not calc:
            print("‚ö†Ô∏è get_calculator() –≤–µ—Ä–Ω—É–ª None")
            return []
        
        if not hasattr(calc, 'categories'):
            print("‚ö†Ô∏è –£ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ 'categories'")
            return []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º
        category_names = []
        for cat in calc.categories:
            name = cat.get('category', '')
            material = cat.get('material', '')
            
            if not name:
                continue
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if material:
                display_name = f"{name} ({material})"
            else:
                display_name = name
            
            category_names.append({
                'value': name,  # –†–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API
                'label': display_name  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            })
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(category_names)}")
        return sorted(category_names, key=lambda x: x['label'])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        import traceback
        traceback.print_exc()
        return []

@app.get("/api/categories/combined-duties")
async def get_combined_duty_categories():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—à–ª–∏–Ω–∞–º–∏ (–ø—Ä–æ—Ü–µ–Ω—Ç –ò–õ–ò EUR/–∫–≥)"""
    try:
        calc = get_calculator()
        if not calc or not hasattr(calc, 'categories'):
            return {"categories": []}
        
        combined_duty_categories = []
        for cat in calc.categories:
            if cat.get('duty_type') == 'combined':
                combined_duty_categories.append({
                    'category': cat.get('category'),
                    'material': cat.get('material'),
                    'duty_type': 'combined',
                    'ad_valorem_rate': cat.get('ad_valorem_rate'),
                    'specific_rate': cat.get('specific_rate'),
                    'vat_rate': cat.get('vat_rate'),
                    'tnved_code': cat.get('tnved_code')
                })
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—à–ª–∏–Ω–∞–º–∏: {len(combined_duty_categories)}")
        return {
            "count": len(combined_duty_categories),
            "categories": sorted(combined_duty_categories, key=lambda x: x['category'])
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—à–ª–∏–Ω–∞–º–∏: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/category/{product_name}")
async def get_category_by_name(product_name: str, auth: bool = Depends(require_auth)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    try:
        calc = get_calculator()
        category = calc.find_category_by_name(product_name)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"DEBUG: product_name='{product_name}', result_category='{category['category']}'")
        
        return CategoryInfo(**category)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")

@app.get("/api/recommendations/{product_name}")
async def get_recommendations(product_name: str, auth: bool = Depends(require_auth)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ü–µ–Ω–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏ –≤–µ—Å—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        calc = get_calculator()
        recommendations = calc.get_recommendations(product_name)
        category = calc.find_category_by_name(product_name)
        
        return {
            "product_name": product_name,
            "category": category.get('category', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'),
            "material": category.get('material', ''),
            "tnved_code": category.get('tnved_code', ''),
            "recommendations": recommendations
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")

@app.get("/api/exchange-rates")
async def get_exchange_rates(auth: bool = Depends(require_auth)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    try:
        calc = get_calculator()
        return {
            "yuan_to_usd": calc.currencies["yuan_to_usd"],
            "usd_to_rub": calc.currencies["usd_to_rub"],
            "yuan_to_rub": calc.currencies["yuan_to_rub"]
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {str(e)}")

@app.get("/api/settings")
async def get_settings(auth: bool = Depends(require_auth)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        calc = get_calculator()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if hasattr(calc, 'formula_config') and calc.formula_config:
            formula = calc.formula_config
            settings = {
                "currencies": {
                    "yuan_to_usd": calc.currencies["yuan_to_usd"],
                    "usd_to_rub": calc.currencies["usd_to_rub"],
                    "yuan_to_rub": calc.currencies["yuan_to_rub"]
                },
                "formula": {
                    "toni_commission_percent": formula.toni_commission_percent,
                    "transfer_percent": formula.transfer_percent,
                    "local_delivery_rate_yuan_per_kg": formula.local_delivery_rate_yuan_per_kg,
                    "msk_pickup_total_rub": formula.msk_pickup_total_rub,
                    "other_costs_percent": formula.other_costs_percent
                }
            }
        else:
            # Fallback –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            settings = {
                "currencies": {
                    "yuan_to_usd": calc.currencies["yuan_to_usd"],
                    "usd_to_rub": calc.currencies["usd_to_rub"],
                    "yuan_to_rub": calc.currencies["yuan_to_rub"]
                },
                "formula": {
                    "toni_commission_percent": 5.0,
                    "transfer_percent": 18.0,
                    "local_delivery_rate_yuan_per_kg": 2.0,
                    "msk_pickup_total_rub": 1000.0,
                    "other_costs_percent": 2.5
                }
            }
        
        return settings
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")

@app.post("/api/settings")
async def update_settings(settings: dict, auth: bool = Depends(require_auth)):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ConfigLoader –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        from config.config_loader import get_config_loader
        
        config_loader = get_config_loader()
        success = config_loader.save_settings(settings)
        
        if success:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            global calculator
            calculator = None  # –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç get_calculator() —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            calc = get_calculator()
            
            return {"success": True, "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"}
        else:
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")

@app.get("/api/history")
async def get_history(auth: bool = Depends(require_auth)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤"""
    try:
        history = get_history_calculations()
        
        # üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º custom_logistics –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ frontend
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ frontend: {len(history)} –∑–∞–ø–∏—Å–µ–π")
        for item in history:
            if item.get('custom_logistics'):
                print(f"   ‚úÖ ID={item['id']}: custom_logistics –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–∏–ø={type(item['custom_logistics'])}")
        
        return {"history": history}
    except Exception as e:
        print(f"WARNING –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
        return {"history": [], "error": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}

@app.get("/api/calculation/{calculation_id}")
async def get_calculation(calculation_id: int, auth: bool = Depends(require_auth)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π database –º–æ–¥—É–ª—å
        history = get_history_calculations()
        
        # –ò—â–µ–º —Ä–∞—Å—á–µ—Ç –ø–æ ID
        for calc in history:
            if calc.get('id') == calculation_id:
                return calc
        
        raise HTTPException(status_code=404, detail="–†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    except HTTPException:
        raise  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º 404 –¥–∞–ª—å—à–µ
    except Exception as e:
        print(f"WARNING –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        raise HTTPException(status_code=503, detail="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


async def _update_calculation_logic(calculation_id: int, request: CalculationRequest):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)"""
    try:
        print(f"üîÑ _update_calculation_logic: ID={calculation_id}, product={request.product_name}")
        result = await _perform_calculation_and_save(request, calculation_id=calculation_id)
        print(f"‚úÖ _update_calculation_logic –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
        return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _update_calculation_logic: {e}")
        import traceback
        traceback.print_exc()
        raise

@app.put("/api/calculation/{calculation_id}")
async def update_calculation_endpoint(calculation_id: int, request: CalculationRequest, auth: bool = Depends(require_auth)):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ (endpoint /api/calculation/:id)"""
    try:
        return await _update_calculation_logic(calculation_id, request)
    except ValueError as e:
        print(f"ERROR –†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        raise HTTPException(status_code=404, detail="–†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"ERROR –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞")

@app.put("/api/history/{calculation_id}")
async def update_history_calculation(calculation_id: int, request: CalculationRequest, auth: bool = Depends(require_auth)):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ (endpoint /api/history/:id, –∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    try:
        print(f"üîÑ PUT /api/history/{calculation_id} - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞")
        return await _update_calculation_logic(calculation_id, request)
    except ValueError as e:
        print(f"ERROR –†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        raise HTTPException(status_code=404, detail="–†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"ERROR –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞")

@app.put("/api/v2/calculation/{calculation_id}")
async def update_calculation_v2(calculation_id: int, request: CalculationRequest):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ V2 (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    print(f"üì• PUT /api/v2/calculation/{calculation_id} - START")
    print(f"   product_name: {request.product_name}")
    print(f"   price_yuan: {request.price_yuan}")
    print(f"   quantity: {request.quantity}")
    print(f"   custom_logistics (—Ç–∏–ø: {type(request.custom_logistics)}): {request.custom_logistics}")
    print(f"   forced_category: {request.forced_category}")
    
    try:
        print(f"üîÑ –í—ã–∑–æ–≤ _update_calculation_logic...")
        result = await _update_calculation_logic(calculation_id, request)
        print(f"‚úÖ PUT /api/v2/calculation/{calculation_id} - SUCCESS")
        return result
    except ValueError as e:
        print(f"‚ùå ERROR –†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        raise HTTPException(status_code=404, detail="–†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå ERROR –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {str(e)}")

# ============================================================================
# V3 API - NEW ARCHITECTURE (State Machine + Strategy Pattern)
# ============================================================================

@app.post("/api/v3/calculate/start")
async def start_calculation_v3(request: CalculationRequest):
    """
    V3: –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - state: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—á—ë—Ç–∞ (READY, PENDING_PARAMS)
    - needs_user_input: –Ω—É–∂–µ–Ω –ª–∏ –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    - required_params: —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–±—É–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    - category: –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    """
    try:
        from services.calculation_orchestrator import CalculationOrchestrator
        import json
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Railway
        with open('config/categories_from_railway.json', 'r', encoding='utf-8') as f:
            categories_data = json.load(f)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å {category_name: category_data}
        categories = {cat['category']: cat for cat in categories_data['categories']}
        
        # –°–æ–∑–¥–∞—ë–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        orchestrator = CalculationOrchestrator(categories)
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á—ë—Ç
        response = orchestrator.start_calculation(
            product_name=request.product_name,
            quantity=request.quantity,
            weight_kg=request.weight_kg or 0.5,  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤–µ—Å
            unit_price_yuan=request.price_yuan,
            markup=request.markup,
            forced_category=request.forced_category
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º context info –¥–ª—è frontend
        context_info = orchestrator.get_context_info()
        response['context'] = context_info
        
        print(f"‚úÖ V3 START: {response['state']} | needs_input: {response['needs_user_input']}")
        
        return response
        
    except Exception as e:
        print(f"‚ùå V3 START ERROR: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/v3/calculate/params")
async def provide_custom_params_v3(request: Dict[str, Any]):
    """
    V3: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    
    Body:
    {
        "product_name": "...",
        "quantity": 100,
        "weight_kg": 0.5,
        "unit_price_yuan": 50,
        "markup": 1.7,
        "forced_category": "...",
        "custom_logistics": {
            "highway_rail": {"custom_rate": 8.5, "duty_rate": 10, "vat_rate": 20},
            "highway_air": {...},
            ...
        }
    }
    """
    try:
        from services.calculation_orchestrator import CalculationOrchestrator
        import json
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        with open('config/categories_from_railway.json', 'r', encoding='utf-8') as f:
            categories_data = json.load(f)
        categories = {cat['category']: cat for cat in categories_data['categories']}
        
        # –°–æ–∑–¥–∞—ë–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        orchestrator = CalculationOrchestrator(categories)
        
        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á—ë—Ç
        orchestrator.start_calculation(
            product_name=request.get('product_name'),
            quantity=request.get('quantity'),
            weight_kg=request.get('weight_kg', 0.5),
            unit_price_yuan=request.get('unit_price_yuan'),
            markup=request.get('markup', 1.7),
            forced_category=request.get('forced_category')
        )
        
        # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        custom_logistics = request.get('custom_logistics', {})
        result = orchestrator.provide_custom_params(custom_logistics)
        
        print(f"‚úÖ V3 PARAMS: valid={result['valid']} | can_calculate={result['can_calculate']}")
        
        return result
        
    except Exception as e:
        print(f"‚ùå V3 PARAMS ERROR: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/v3/calculate/execute", response_model=CalculationResultDTO)
async def execute_calculation_v3(request: ProductInputDTO):
    """
    V3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á—ë—Ç–∞ (State Machine + Strategy Pattern).
    
    **–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Pydantic DTO –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.**
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å—Ä–∞–∑—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è)
    - –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç—Ä–µ–±—É—é—Ç custom_logistics)
    - –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –õ–Æ–ë–û–ô –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    Args:
        request (ProductInputDTO): –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        
    Returns:
        CalculationResultDTO: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞
    """
    try:
        from services.calculation_orchestrator import CalculationOrchestrator
        
        print(f"üîµ V3 EXECUTE: {request.product_name}")
        print(f"   forced_category: {request.forced_category}")
        print(f"   custom_logistics: {bool(request.custom_logistics)}")
        if request.custom_logistics:
            print(f"   custom_logistics —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {request.custom_logistics}")
            print(f"   custom_logistics —Ç–∏–ø: {type(request.custom_logistics)}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î (–∫–∞–∫ –≤ V2)
        calc = get_calculator()
        if not calc or not hasattr(calc, 'categories'):
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        categories = {cat['category']: cat for cat in calc.categories}
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î: {len(categories)}")
        
        # –°–æ–∑–¥–∞—ë–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        orchestrator = CalculationOrchestrator(categories)
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á—ë—Ç
        orchestrator.start_calculation(
            product_name=request.product_name,
            quantity=request.quantity,
            weight_kg=request.weight_kg or 0.5,
            unit_price_yuan=request.price_yuan,
            markup=request.markup,
            forced_category=request.forced_category,
            product_url=request.product_url  # –ü–µ—Ä–µ–¥–∞—ë–º URL —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ WeChat
        )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö
        if request.custom_logistics:
            # request.custom_logistics —É–∂–µ Dict (–Ω–µ DTO), –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
            params_result = orchestrator.provide_custom_params(request.custom_logistics)
            if not params_result['valid']:
                print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params_result['errors']}")
                raise HTTPException(
                    status_code=400,
                    detail=f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(params_result['errors'])}"
                )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á—ë—Ç
        calc_result = orchestrator.calculate()
        
        if not calc_result['success']:
            print(f"‚ö†Ô∏è –†–∞—Å—á—ë—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: {calc_result['error']}")
            
            # –ï—Å–ª–∏ –ø—Ä–∏—á–∏–Ω–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç
            if '–û–∂–∏–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤' in calc_result.get('error', ''):
                # –°–æ–∑–¥–∞—ë–º –∑–∞–≥–ª—É—à–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ template
                placeholder_route = {
                    'per_unit': 0,
                    'cost_rub': 0,
                    'cost_usd': 0,
                    'total_cost_rub': 0,
                    'sale_per_unit_rub': 0,  # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
                    'cost_per_unit_rub': 0,  # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
                    'needs_params': True,
                    'placeholder': True
                }
                
                placeholder_routes = {
                    'highway_rail': placeholder_route.copy(),
                    'highway_air': placeholder_route.copy(),
                    'highway_contract': placeholder_route.copy(),
                    'prologix': placeholder_route.copy()
                }
                
                # –°–æ–∑–¥–∞—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è UI
                partial_result = {
            'product_name': request.product_name,
                    'category': request.forced_category or '–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
                    'unit_price_yuan': request.price_yuan,
            'quantity': request.quantity,
                    'weight_kg': request.weight_kg or 0.5,
            'markup': request.markup,
                    'needs_custom_params': True,  # üîë –§–ª–∞–≥ –¥–ª—è UI
                    'routes': placeholder_routes,  # –ó–∞–≥–ª—É—à–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
                    'message': '–î–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏'
                }
                print(f"üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤")
                return partial_result
            else:
                # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 400
                raise HTTPException(status_code=400, detail=calc_result['error'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
        from services import get_calculation_service
        service = get_calculation_service()
        
        # –í–ê–ñ–ù–û: –ï—Å–ª–∏ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –±–µ—Ä—ë–º –∏—Ö –∏–∑ request
        # (—Ç.–∫. calculate_cost() –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ)
        # request.custom_logistics —É–∂–µ Dict (–Ω–µ DTO)
        custom_logistics_dict = request.custom_logistics if request.custom_logistics else None
        if custom_logistics_dict:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
            calc_result['result']['custom_logistics'] = custom_logistics_dict
        
        saved_id = service.create_calculation(
            calc_result['result'],
            custom_logistics=custom_logistics_dict,
            forced_category=request.forced_category
        )
        
        if saved_id:
            orchestrator.mark_saved(saved_id)
            calc_result['result']['id'] = saved_id
            calc_result['result']['created_at'] = datetime.now().isoformat()
            print(f"‚úÖ V3 EXECUTE SUCCESS: ID={saved_id}")
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ "10%" –≤ float)
        result = calc_result['result']
        if 'customs_info' in result and result['customs_info']:
            customs = result['customs_info']
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º duty_rate –∏ vat_rate –∏–∑ "10%" –≤ 10.0
            if 'duty_rate' in customs and isinstance(customs['duty_rate'], str):
                if customs['duty_rate'].endswith('%'):
                    customs['duty_rate'] = float(customs['duty_rate'].rstrip('%'))
            if 'vat_rate' in customs and isinstance(customs['vat_rate'], str):
                if customs['vat_rate'].endswith('%'):
                    customs['vat_rate'] = float(customs['vat_rate'].rstrip('%'))
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º breakdown –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        if 'routes' in result:
            for route_key, route_data in result['routes'].items():
                print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ {route_key}:")
                print(f"  - name: {route_data.get('name')}")
                print(f"  - per_unit: {route_data.get('per_unit')}")
                print(f"  - sale_rub: {route_data.get('sale_rub')}")
                print(f"  - delivery_days: {route_data.get('delivery_days')}")
                
                # –ö–†–ò–¢–ò–ß–ù–û: –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–í–°–ï–ì–î–ê –∑–∞–ø–æ–ª–Ω—è–µ–º!)
                route_data['cost_per_unit_rub'] = route_data.get('per_unit', 0)  # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
                route_data['sale_per_unit_rub'] = route_data.get('sale_rub', 0) / result.get('quantity', 1) if route_data.get('sale_rub') else 0  # –ü—Ä–æ–¥–∞–∂–Ω–∞—è —Ü–µ–Ω–∞
                route_data['delivery_time'] = f"{route_data.get('delivery_days', 0)} –¥–Ω–µ–π"  # –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
                
                if 'breakdown' in route_data and route_data['breakdown']:
                    bd = route_data['breakdown']
                    print(f"‚úÖ Breakdown —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è {route_key}")
                    
                    # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –ö–∏—Ç–∞–µ (—Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏)
                    china_cost = bd.get('factory_price', 0)
                    route_data['china_cost_per_unit_rub'] = china_cost
                    route_data['price_rub_per_unit'] = bd.get('base_price_rub', 0)
                    route_data['sourcing_fee_per_unit'] = bd.get('toni_commission_rub', 0)
                    route_data['local_delivery_per_unit'] = bd.get('local_delivery', 0)
                    
                    # –õ–æ–≥–∏—Å—Ç–∏–∫–∞
                    route_data['logistics_per_unit_rub'] = bd.get('logistics', 0)
                    route_data['delivery_cost_per_unit'] = bd.get('logistics', 0)
                    
                    # –ü–æ—à–ª–∏–Ω—ã –∏ –ù–î–° (–±–µ—Ä–µ–º –∏–∑ customs_info –µ—Å–ª–∏ –µ—Å—Ç—å)
                    customs_calc = result.get('customs_calculation', {})
                    quantity = result.get('quantity', 1)
                    route_data['duty_per_unit'] = customs_calc.get('duty_amount_usd', 0) * calc.currencies.get("usd_to_rub", 105) / quantity if customs_calc.get('duty_amount_usd') else 0
                    route_data['vat_per_unit'] = customs_calc.get('vat_amount_usd', 0) * calc.currencies.get("usd_to_rub", 105) / quantity if customs_calc.get('vat_amount_usd') else 0
                    
                    # –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
                    other_costs = bd.get('msk_pickup', 0) + bd.get('other_costs', 0)
                    route_data['other_costs_per_unit'] = other_costs
                    route_data['moscow_pickup_per_unit'] = bd.get('msk_pickup', 0)
                    route_data['misc_costs_per_unit'] = bd.get('other_costs', 0) * 0.4  # 2.5% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                    route_data['fixed_costs_per_unit'] = bd.get('other_costs', 0) * 0.6
                    
                    # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
                    cost_per_unit = route_data.get('cost_per_unit_rub', 0) or route_data.get('per_unit', 0)
                    if cost_per_unit > 0:
                        route_data['china_cost_percentage'] = round((china_cost / cost_per_unit) * 100, 1)
                        route_data['logistics_percentage'] = round((route_data['logistics_per_unit_rub'] / cost_per_unit) * 100, 1)
                        route_data['other_costs_percentage'] = round((other_costs / cost_per_unit) * 100, 1)
                    else:
                        route_data['china_cost_percentage'] = 0
                        route_data['logistics_percentage'] = 0
                        route_data['other_costs_percentage'] = 0
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    route_data['price_yuan_display'] = bd.get('base_price_yuan', request.price_yuan)
                    route_data['weight_display'] = f"{bd.get('weight_kg', 0)} –∫–≥ √ó {bd.get('logistics_rate', 0)}$/–∫–≥"
                    route_data['duty_rate_display'] = f"{result.get('customs_info', {}).get('duty_rate', 9.6)}%"
                    route_data['vat_rate_display'] = f"{result.get('customs_info', {}).get('vat_rate', 20)}%"
                    route_data['logistics_type_display'] = route_data.get('name', '')
                else:
                    print(f"‚ö†Ô∏è Breakdown –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è {route_key}, –∑–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è")
                    # –ï—Å–ª–∏ breakdown –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ route_data
                    route_data['china_cost_per_unit_rub'] = 0
                    route_data['price_rub_per_unit'] = 0
                    route_data['sourcing_fee_per_unit'] = 0
                    route_data['local_delivery_per_unit'] = 0
                    route_data['logistics_per_unit_rub'] = 0
                    route_data['delivery_cost_per_unit'] = 0
                    route_data['duty_per_unit'] = 0
                    route_data['vat_per_unit'] = 0
                    route_data['other_costs_per_unit'] = 0
                    route_data['moscow_pickup_per_unit'] = 0
                    route_data['misc_costs_per_unit'] = 0
                    route_data['fixed_costs_per_unit'] = 0
                    route_data['china_cost_percentage'] = 0
                    route_data['logistics_percentage'] = 0
                    route_data['other_costs_percentage'] = 0
                    route_data['price_yuan_display'] = request.price_yuan
                    route_data['weight_display'] = f"{request.weight_kg or 0} –∫–≥"
                    route_data['duty_rate_display'] = f"{result.get('customs_info', {}).get('duty_rate', 9.6)}%"
                    route_data['vat_rate_display'] = f"{result.get('customs_info', {}).get('vat_rate', 20)}%"
                    route_data['logistics_type_display'] = route_data.get('name', '')
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(result.get('routes', {}))}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å V2
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå V3 EXECUTE ERROR: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))


# ============================================
# V3 CALCULATIONS ENDPOINTS (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–ø–µ—Ä–µ—Å—á–µ—Ç–∞)
# ============================================

@app.post("/api/v3/calculations", response_model=CalculationResultDTO)
async def create_calculation_v3(
    request: ProductInputDTO,
    position_id: int = None
):
    """
    –°–æ–∑–¥–∞—Ç—å –ù–û–í–´–ô —Ä–∞—Å—á–µ—Ç –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –∏ –°–û–•–†–ê–ù–ò–¢–¨ –≤ –ë–î
    
    Flow:
    1. –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç (—á–µ—Ä–µ–∑ execute_calculation_v3)
    2. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î (v3_calculations)
    3. –í–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç + calculation_id
    
    Args:
        request: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        position_id: ID –ø–æ–∑–∏—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ request)
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å calculation_id
    """
    try:
        from models_v3.calculation import Calculation
        from models_v3.position import Position
        
        # 1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å position_id
        pos_id = position_id or getattr(request, 'position_id', None)
        
        if not pos_id:
            raise HTTPException(
                status_code=400, 
                detail="position_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        position = db.query(Position).filter(Position.id == pos_id).first()
        if not position:
            raise HTTPException(status_code=404, detail=f"Position {pos_id} not found")
        
        print(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏: {position.name} (ID={pos_id})")
        
        # 2. –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
        result = await execute_calculation_v3(request)
        
        # 3. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        calc = Calculation(
            position_id=pos_id,
            quantity=request.quantity,
            markup=request.markup,
            price_yuan=request.price_yuan,
            
            # –í–µ—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            calculation_type='precise' if request.is_precise_calculation else 'quick',
            weight_kg=request.weight_kg,
            packing_units_per_box=request.packing_units_per_box,
            packing_box_weight=request.packing_box_weight,
            packing_box_length=request.packing_box_length,
            packing_box_width=request.packing_box_width,
            packing_box_height=request.packing_box_height,
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞
            forced_category=getattr(request, 'forced_category', None) or request.category if request.category != result.get('category') else None,
            custom_logistics=None,  # –ü–æ–∫–∞ –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            category=result.get('category'),
            routes=result.get('routes'),
            customs_calculation=result.get('customs_calculation')
        )
        
        db.add(calc)
        db.commit()
        db.refresh(calc)
        
        # 4. –î–æ–±–∞–≤–∏—Ç—å calculation_id –≤ –æ—Ç–≤–µ—Ç
        result['calculation_id'] = calc.id
        result['created_at'] = calc.created_at.isoformat()
        
        print(f"‚úÖ –†–∞—Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: calculation_id={calc.id}")
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))


class UpdateCalculationRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞"""
    quantity: Optional[int] = None
    markup: Optional[float] = None
    forced_category: Optional[str] = None
    custom_logistics: Optional[Dict[str, Any]] = None


@app.put("/api/v3/calculations/{calculation_id}", response_model=CalculationResultDTO)
async def update_calculation_v3(
    calculation_id: int,
    request: UpdateCalculationRequest
):
    """
    –ü–ï–†–ï–°–ß–ò–¢–ê–¢–¨ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞—Å—á–µ—Ç —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
    - –ò–∑–º–µ–Ω–µ–Ω–∏—è quantity/markup (–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
    - –ò–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –ª–æ–≥–∏—Å—Ç–∏–∫–∏ (RouteEditor)
    
    Flow:
    1. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞—Å—á–µ—Ç
    2. –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    3. –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ—Å—á–µ—Ç
    4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    5. –í–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    
    Args:
        calculation_id: ID —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
        quantity: –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        markup: –ù–æ–≤–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        forced_category: –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        custom_logistics: –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞
    """
    try:
        from models_v3.calculation import Calculation
        from models_v3.position import Position
        from price_calculator import PriceCalculator
        from strategies.calculation_orchestrator import CalculationOrchestrator
        
        # 1. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞—Å—á–µ—Ç
        calc = db.query(Calculation).filter(Calculation.id == calculation_id).first()
        
        if not calc:
            raise HTTPException(
                status_code=404, 
                detail=f"Calculation {calculation_id} not found"
            )
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é
        position = db.query(Position).filter(Position.id == calc.position_id).first()
        
        if not position:
            raise HTTPException(
                status_code=404, 
                detail=f"Position {calc.position_id} not found"
            )
        
        print(f"üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç calculation_id={calculation_id}")
        print(f"   –ü–æ–∑–∏—Ü–∏—è: {position.name}")
        print(f"   –°—Ç–∞—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: quantity={calc.quantity}, markup={calc.markup}")
        
        # 2. –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã)
        if request.quantity is not None:
            calc.quantity = request.quantity
            print(f"   –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {request.quantity}")
        
        if request.markup is not None:
            calc.markup = request.markup
            print(f"   –ù–æ–≤–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: {request.markup}")
        
        if request.forced_category is not None:
            calc.forced_category = request.forced_category
            print(f"   –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {request.forced_category}")
        
        if request.custom_logistics is not None:
            calc.custom_logistics = request.custom_logistics
            print(f"   –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {request.custom_logistics}")
        
        # 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
        recalc_request = ProductInputDTO(
            product_name=position.name,
            price_yuan=calc.price_yuan,
            quantity=calc.quantity,
            markup=calc.markup or 1.7,
            category=calc.forced_category or position.category,
            is_precise_calculation=calc.calculation_type == 'precise',
            weight_kg=calc.weight_kg,
            packing_units_per_box=calc.packing_units_per_box,
            packing_box_weight=calc.packing_box_weight,
            packing_box_length=calc.packing_box_length,
            packing_box_width=calc.packing_box_width,
            packing_box_height=calc.packing_box_height
        )
        
        # 4. –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ—Å—á–µ—Ç —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        calculator = PriceCalculator()
        categories_dict = {cat['category']: cat for cat in calculator.categories}
        
        orchestrator = CalculationOrchestrator(
            categories=categories_dict,
            price_calculator=calculator
        )
        
        result = orchestrator.calculate(
            product_name=recalc_request.product_name,
            price_yuan=recalc_request.price_yuan,
            quantity=recalc_request.quantity,
            markup=recalc_request.markup,
            weight_kg=recalc_request.weight_kg or 0.2,
            is_precise_calculation=recalc_request.is_precise_calculation,
            packing_units_per_box=recalc_request.packing_units_per_box,
            packing_box_weight=recalc_request.packing_box_weight,
            packing_box_length=recalc_request.packing_box_length,
            packing_box_width=recalc_request.packing_box_width,
            packing_box_height=recalc_request.packing_box_height,
            forced_category=recalc_request.category,
            custom_logistics_params=calc.custom_logistics  # ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!
        )
        
        # 5. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–∫–∞–∫ –≤ execute_calculation_v3)
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å breakdown –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        if 'routes' in result:
            for route_key, route_data in result['routes'].items():
                route_data['cost_per_unit_rub'] = route_data.get('per_unit', 0)
                route_data['sale_per_unit_rub'] = route_data.get('sale_rub', 0) / result.get('quantity', 1) if route_data.get('sale_rub') else 0
                route_data['delivery_time'] = f"{route_data.get('delivery_days', 0)} –¥–Ω–µ–π"
                
                # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ execute_calculation_v3 –¥–ª—è breakdown)
        
        # 6. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        calc.category = result.get('category')
        calc.routes = result.get('routes')
        calc.customs_calculation = result.get('customs_calculation')
        
        from datetime import datetime
        calc.updated_at = datetime.utcnow()
        
        db.commit()
        db.refresh(calc)
        
        # 7. –î–æ–±–∞–≤–∏—Ç—å calculation_id –≤ –æ—Ç–≤–µ—Ç
        result['calculation_id'] = calc.id
        result['created_at'] = calc.created_at.isoformat()
        result['updated_at'] = calc.updated_at.isoformat()
        
        print(f"‚úÖ –†–∞—Å—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: calculation_id={calc.id}")
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v3/calculations/{calculation_id}")
async def get_calculation_v3(calculation_id: int):
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ ID
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞)
    - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (routes, customs_calculation)
    - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏
    - Timestamps
    
    Args:
        calculation_id: ID —Ä–∞—Å—á–µ—Ç–∞
    
    Returns:
        –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—á–µ—Ç–µ
    """
    try:
        from models_v3.calculation import Calculation
        from models_v3.position import Position
        
        calc = db.query(Calculation).filter(Calculation.id == calculation_id).first()
        
        if not calc:
            raise HTTPException(
                status_code=404, 
                detail=f"Calculation {calculation_id} not found"
            )
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        position = db.query(Position).filter(Position.id == calc.position_id).first()
        
        response = {
            "calculation_id": calc.id,
            "position_id": calc.position_id,
            "position_name": position.name if position else None,
            
            # –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            "quantity": calc.quantity,
            "markup": calc.markup,
            "price_yuan": float(calc.price_yuan),
            "calculation_type": calc.calculation_type,
            "weight_kg": float(calc.weight_kg) if calc.weight_kg else None,
            
            # –ü–∞–∫–∫–∏–Ω–≥
            "packing_units_per_box": calc.packing_units_per_box,
            "packing_box_weight": float(calc.packing_box_weight) if calc.packing_box_weight else None,
            "packing_box_length": float(calc.packing_box_length) if calc.packing_box_length else None,
            "packing_box_width": float(calc.packing_box_width) if calc.packing_box_width else None,
            "packing_box_height": float(calc.packing_box_height) if calc.packing_box_height else None,
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞
            "forced_category": calc.forced_category,
            "custom_logistics": calc.custom_logistics,
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            "category": calc.category,
            "routes": calc.routes,
            "customs_calculation": calc.customs_calculation,
            "comment": calc.comment,
            
            # Timestamps
            "created_at": calc.created_at.isoformat() if calc.created_at else None,
            "updated_at": calc.updated_at.isoformat() if calc.updated_at else None
        }
        
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v3/categories")
async def get_categories_v3():
    """
    V3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å:
    - requirements (—á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥–∏—Ç—å)
    - needs_custom_params (—Ñ–ª–∞–≥ –¥–ª—è UI)
    - keywords, tnved_code, certificates
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î (–∫–∞–∫ –≤ V2)
        calc = get_calculator()
        if not calc or not hasattr(calc, 'categories'):
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞–ø—Ä—è–º—É—é (–∫–∞–∫ –≤ V2)
        return calc.categories
        
    except Exception as e:
        print(f"‚ùå V3 CATEGORIES ERROR: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v3/categories/statistics")
async def get_categories_statistics_v3():
    """
    V3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–∑ V3 calculations
    """
    try:
        from sqlalchemy import text
        
        query = text("""
            SELECT 
                c.category,
                COUNT(*) as count,
                MIN(c.sale_price_rub / NULLIF(p.quantity, 0)) as min_price,
                MAX(c.sale_price_rub / NULLIF(p.quantity, 0)) as max_price,
                AVG(c.sale_price_rub / NULLIF(p.quantity, 0)) as avg_price,
                PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY c.sale_price_rub / NULLIF(p.quantity, 0)) as median_price
            FROM v3_calculations c
            JOIN v3_positions p ON c.position_id = p.id
            WHERE c.category IS NOT NULL
            GROUP BY c.category
            ORDER BY count DESC
        """)
        
        result = db.execute(query)
        statistics = []
        
        for row in result:
            statistics.append({
                'category': row[0],
                'count': row[1],
                'min_price': float(row[2]) if row[2] else None,
                'max_price': float(row[3]) if row[3] else None,
                'avg_price': float(row[4]) if row[4] else None,
                'median_price': float(row[5]) if row[5] else None
            })
        
        return statistics
        
    except Exception as e:
        print(f"‚ùå V3 STATISTICS ERROR: {e}")
        import traceback
        traceback.print_exc()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (—Ç–∞–±–ª–∏—Ü—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏)
        return []


@app.put("/api/v3/categories/{category_id}")
async def update_category_v3(category_id: int, category_data: dict):
    """
    V3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    try:
        from sqlalchemy import text
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –ë–î
        query = text("""
            UPDATE categories 
            SET 
                category = :category,
                material = :material,
                tnved_code = :tnved_code,
                density = :density,
                duty_type = :duty_type,
                duty_rate = :duty_rate,
                specific_rate = :specific_rate,
                ad_valorem_rate = :ad_valorem_rate,
                vat_rate = :vat_rate,
                rail_base = :rail_base,
                air_base = :air_base,
                updated_at = NOW()
            WHERE id = :id
        """)
        
        db.execute(query, {
            'id': category_id,
            'category': category_data.get('category'),
            'material': category_data.get('material'),
            'tnved_code': category_data.get('tnved_code'),
            'density': category_data.get('density'),
            'duty_type': category_data.get('duty_type'),
            'duty_rate': category_data.get('duty_rate'),
            'specific_rate': category_data.get('specific_rate'),
            'ad_valorem_rate': category_data.get('ad_valorem_rate'),
            'vat_rate': category_data.get('vat_rate'),
            'rail_base': category_data.get('rates', {}).get('rail_base'),
            'air_base': category_data.get('rates', {}).get('air_base')
        })
        db.commit()
        
        return {"status": "success", "message": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞"}
        
    except Exception as e:
        print(f"‚ùå V3 UPDATE CATEGORY ERROR: {e}")
        import traceback
        traceback.print_exc()
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/v3/categories")
async def create_category_v3(category_data: dict):
    """
    V3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    try:
        from sqlalchemy import text
        
        query = text("""
            INSERT INTO categories 
            (category, material, tnved_code, density, duty_type, duty_rate, 
             specific_rate, ad_valorem_rate, vat_rate, rail_base, air_base)
            VALUES 
            (:category, :material, :tnved_code, :density, :duty_type, :duty_rate,
             :specific_rate, :ad_valorem_rate, :vat_rate, :rail_base, :air_base)
            RETURNING id
        """)
        
        result = db.execute(query, {
            'category': category_data.get('category'),
            'material': category_data.get('material'),
            'tnved_code': category_data.get('tnved_code'),
            'density': category_data.get('density'),
            'duty_type': category_data.get('duty_type'),
            'duty_rate': category_data.get('duty_rate'),
            'specific_rate': category_data.get('specific_rate'),
            'ad_valorem_rate': category_data.get('ad_valorem_rate'),
            'vat_rate': category_data.get('vat_rate'),
            'rail_base': category_data.get('rates', {}).get('rail_base'),
            'air_base': category_data.get('rates', {}).get('air_base')
        })
        
        new_id = result.fetchone()[0]
        db.commit()
        
        return {"status": "success", "id": new_id, "message": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞"}
        
    except Exception as e:
        print(f"‚ùå V3 CREATE CATEGORY ERROR: {e}")
        import traceback
        traceback.print_exc()
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))


@app.delete("/api/v3/categories/{category_id}")
async def delete_category_v3(category_id: int):
    """
    V3: –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    try:
        from sqlalchemy import text
        
        query = text("DELETE FROM categories WHERE id = :id")
        db.execute(query, {'id': category_id})
        db.commit()
        
        return {"status": "success", "message": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞"}
        
    except Exception as e:
        print(f"‚ùå V3 DELETE CATEGORY ERROR: {e}")
        import traceback
        traceback.print_exc()
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ lifespan

# üöÄ VUE ROUTER SUPPORT - –Ø–≤–Ω—ã–µ —Ä–æ—É—Ç—ã –¥–ª—è SPA (–≤–º–µ—Å—Ç–æ catch-all)
# –í–ê–ñ–ù–û: –≠—Ç–∏ —Ä–æ—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–û–°–õ–ï API endpoints –∏ –ü–ï–†–ï–î StaticFiles
async def serve_spa(request: Request):
    """
    –û–±—Å–ª—É–∂–∏–≤–∞–µ—Ç SPA –¥–ª—è Vue Router (history mode)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç index.html –¥–ª—è –≤—Å–µ—Ö SPA –º–∞—Ä—à—Ä—É—Ç–æ–≤
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ SPA
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º index.html –¥–ª—è Vue Router
    return FileResponse('index.html')

# –Ø–≤–Ω—ã–µ —Ä–æ—É—Ç—ã –¥–ª—è Vue Router (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å /static/)
@app.get("/", response_class=HTMLResponse)
async def root(request: Request):
    return await serve_spa(request)

# üÜï V2 - –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π)
@app.get("/v2", response_class=HTMLResponse)
async def v2_page(request: Request):
    """–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –¥–≤—É–º—è —ç—Ç–∞–ø–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    return FileResponse('index_v2.html')

# üÜï V3 - –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏ —Ä–∞—Å—á—ë—Ç–∞–º–∏
@app.get("/v3", response_class=HTMLResponse)
async def v3_page(request: Request):
    """V3 –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø–æ–∑–∏—Ü–∏—è–º–∏, —Ñ–∞–±—Ä–∏–∫–∞–º–∏ –∏ —Ä–∞—Å—á—ë—Ç–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    session_token = request.cookies.get("session_token")
    if not verify_session(session_token):
        return RedirectResponse(url="/login", status_code=302)
    
    return FileResponse('index_v3.html')

@app.get("/precise", response_class=HTMLResponse)
async def precise_page(request: Request):
    return await serve_spa(request)

@app.get("/history", response_class=HTMLResponse)
async def history_page(request: Request):
    return await serve_spa(request)

@app.get("/settings", response_class=HTMLResponse)
async def settings_page(request: Request):
    return await serve_spa(request)


# ==================== UPLOAD API ====================

@app.post("/api/sftp/upload")
@app.post("/api/v3/upload/photo")
async def upload_photo(
    file: UploadFile = File(...),
    folder: str = Form(default="calc"),
    position_id: int = Form(default=None)
):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –Ω–∞ S3 Beget Cloud Storage
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        allowed_types = ['image/jpeg', 'image/png', 'image/jpg', 'image/webp', 'image/gif']
        if file.content_type not in allowed_types:
            raise HTTPException(400, f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file.content_type}")
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        content = await file.read()
        print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ: {file.filename} ({len(content)} –±–∞–π—Ç)")
        
        # S3 –∑–∞–≥—Ä—É–∑–∫–∞
        import boto3
        from datetime import datetime
        import os
        
        s3_client = boto3.client(
            's3',
            endpoint_url='https://s3.ru1.storage.beget.cloud',
            aws_access_key_id=os.getenv('S3_ACCESS_KEY', 'RECD00AQJIM4300MLJ0W'),
            aws_secret_access_key=os.getenv('S3_SECRET_KEY', 'FIucJ3i9iIWZ5ieJvabvI0OxEn2Yv4gG5XRUeSNf')
        )
        
        bucket_name = os.getenv('S3_BUCKET', '73d16f7545b3-promogoods')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_%f')[:-3]
        ext = os.path.splitext(file.filename)[1].lower() or '.jpg'
        
        if position_id:
            s3_key = f"positions/pos_{position_id}_{timestamp}{ext}"
        else:
            s3_key = f"calc/calc_{timestamp}{ext}"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3 (–∏—Å–ø–æ–ª—å–∑—É–µ–º BytesIO –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏)
        from io import BytesIO
        
        s3_client.put_object(
            Bucket=bucket_name,
            Key=s3_key,
            Body=BytesIO(content),
            ContentType=file.content_type,
            ContentLength=len(content),
            ACL='public-read'
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        public_url = f"https://s3.ru1.storage.beget.cloud/{bucket_name}/{s3_key}"
        
        print(f"‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3: {public_url}")
        return {"url": public_url}
        
    except Exception as e:
        import traceback
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        print(traceback.format_exc())
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")


@app.post("/api/v3/upload/photos")
async def upload_multiple_photos(
    files: List[UploadFile] = File(...),
    position_id: int = Form(...)
):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ
    
    Args:
        files: —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        position_id: ID –ø–æ–∑–∏—Ü–∏–∏
        
    Returns:
        {"urls": ["https://...", ...]}
    """
    try:
        from services.sftp_uploader import SFTPUploader
        uploader = SFTPUploader()
        
        urls = []
        for file in files:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
            allowed_types = ['image/jpeg', 'image/png', 'image/jpg', 'image/webp']
            if file.content_type not in allowed_types:
                continue
            
            content = await file.read()
            url = uploader.upload_photo(content, file.filename, position_id)
            urls.append(url)
        
        return {"urls": urls}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")


if __name__ == "__main__":
    import uvicorn
    import os
    
    port = int(os.environ.get("PORT", 8000))
    print(f"INFO –ó–∞–ø—É—Å–∫ Price Calculator –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    
    uvicorn.run("main:app", host="0.0.0.0", port=port, reload=False)
