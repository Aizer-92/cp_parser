#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –º–æ–¥–µ–ª—è–º–∏ Category.

–ê–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ categories.yaml –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç,
—Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –∏ –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.
"""

import yaml
import json
from typing import Dict, List, Any
from models.category import Category, CategoryRequirements


def load_existing_categories() -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ YAML"""
    yaml_path = 'config/categories.yaml'
    
    with open(yaml_path, 'r', encoding='utf-8') as f:
        data = yaml.safe_load(f)
    
    categories = data.get('categories', [])
    print(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ {yaml_path}")
    
    return categories


def analyze_category(cat_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ—ë —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.
    
    Returns:
        Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    """
    name = cat_data.get('category', '')
    rates = cat_data.get('rates', {})
    rail_base = rates.get('rail_base', 0)
    air_base = rates.get('air_base', 0)
    
    analysis = {
        'name': name,
        'has_rail_rate': rail_base is not None and rail_base > 0,
        'has_air_rate': air_base is not None and air_base > 0,
        'needs_custom_params': False,
        'requirements': {
            'requires_logistics_rate': False,
            'requires_duty_rate': False,
            'requires_vat_rate': False
        },
        'notes': []
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if name == "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è":
        analysis['needs_custom_params'] = True
        analysis['requirements']['requires_logistics_rate'] = True
        analysis['notes'].append("–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
    
    elif not analysis['has_rail_rate'] or not analysis['has_air_rate']:
        analysis['needs_custom_params'] = True
        analysis['requirements']['requires_logistics_rate'] = True
        analysis['notes'].append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±–∞–∑–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏: rail={rail_base}, air={air_base}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—à–ª–∏–Ω
    duty_rate = cat_data.get('duty_rate')
    if duty_rate is None or (isinstance(duty_rate, str) and duty_rate == '0%'):
        analysis['notes'].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—à–ª–∏–Ω–µ")
    
    return analysis


def migrate_category(cat_data: Dict[str, Any], analysis: Dict[str, Any]) -> Category:
    """
    –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç Category.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ.
    """
    # –°–æ–∑–¥–∞—ë–º requirements –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    requirements = CategoryRequirements(
        requires_logistics_rate=analysis['requirements']['requires_logistics_rate'],
        requires_duty_rate=analysis['requirements']['requires_duty_rate'],
        requires_vat_rate=analysis['requirements']['requires_vat_rate']
    )
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞–≤–∫–∏
    rates = cat_data.get('rates', {})
    rail_base = rates.get('rail_base')
    air_base = rates.get('air_base')
    contract_base = rates.get('contract_base')
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—à–ª–∏–Ω—ã
    duty_rate = cat_data.get('duty_rate')
    if isinstance(duty_rate, str):
        if duty_rate.endswith('%'):
            duty_rate = float(duty_rate.rstrip('%'))
        else:
            try:
                duty_rate = float(duty_rate)
            except (ValueError, TypeError):
                duty_rate = None
    
    vat_rate = cat_data.get('vat_rate')
    if isinstance(vat_rate, str):
        if vat_rate.endswith('%'):
            vat_rate = float(vat_rate.rstrip('%'))
        else:
            try:
                vat_rate = float(vat_rate)
            except (ValueError, TypeError):
                vat_rate = None
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º keywords
    keywords = []
    material = cat_data.get('material', '')
    if material:
        # –†–∞–∑–±–∏–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞ keywords
        keywords = [m.strip() for m in material.split(',') if m.strip()]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ keyword
    category_name = cat_data.get('category', '')
    if category_name and category_name not in keywords:
        keywords.insert(0, category_name)
    
    # –°–æ–∑–¥–∞—ë–º Category
    category = Category(
        name=category_name,
        material=material,
        rail_base=rail_base,
        air_base=air_base,
        contract_base=contract_base,
        duty_rate=duty_rate,
        vat_rate=vat_rate,
        requirements=requirements,
        keywords=keywords,
        description=cat_data.get('description', ''),
        tnved_code=cat_data.get('tnved_code', ''),
        certificates=cat_data.get('certificates', [])
    )
    
    return category


def save_migrated_categories(categories: List[Category], output_file: str = 'config/categories_migrated.json'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ JSON"""
    data = {
        'version': '2.0',
        'description': 'Migrated categories with new Category model',
        'total_categories': len(categories),
        'categories': [cat.to_dict() for cat in categories]
    }
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ {output_file}")


def generate_migration_report(analyses: List[Dict[str, Any]]) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    total = len(analyses)
    needs_custom = sum(1 for a in analyses if a['needs_custom_params'])
    has_notes = sum(1 for a in analyses if a['notes'])
    
    report = f"""
# –û—Ç—á—ë—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:** {total}
- **–¢—Ä–µ–±—É—é—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:** {needs_custom} ({needs_custom/total*100:.1f}%)
- **–°–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏:** {has_notes} ({has_notes/total*100:.1f}%)

## –ö–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

"""
    
    for analysis in analyses:
        if analysis['needs_custom_params']:
            report += f"\n### {analysis['name']}\n"
            report += f"- –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏: rail={analysis['has_rail_rate']}, air={analysis['has_air_rate']}\n"
            for note in analysis['notes']:
                report += f"- {note}\n"
    
    report += "\n## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
    report += "1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –±–∞–∑–æ–≤—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏\n"
    report += "2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—à–ª–∏–Ω–∞—Ö –≥–¥–µ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
    report += "3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ '–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–º–µ—á–µ–Ω–∞\n"
    
    return report


def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("="*60)
    print("üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô –í –ù–û–í–´–ô –§–û–†–ú–ê–¢")
    print("="*60)
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    existing_cats = load_existing_categories()
    
    # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    print("\nüìä –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    analyses = []
    for cat_data in existing_cats:
        analysis = analyze_category(cat_data)
        analyses.append(analysis)
    
    # 3. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    print("\nüîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    migrated_categories = []
    for cat_data, analysis in zip(existing_cats, analyses):
        try:
            category = migrate_category(cat_data, analysis)
            migrated_categories.append(category)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if category.needs_custom_params():
                print(f"  ‚öôÔ∏è  {category.name} - —Ç—Ä–µ–±—É–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ {cat_data.get('category', 'UNKNOWN')}: {e}")
            import traceback
            traceback.print_exc()
    
    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    save_migrated_categories(migrated_categories)
    
    # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    print("\nüìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞...")
    report = generate_migration_report(analyses)
    
    with open('MIGRATION_REPORT.md', 'w', encoding='utf-8') as f:
        f.write(report)
    
    print("üìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ MIGRATION_REPORT.md")
    
    # 6. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*60)
    print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("="*60)
    print(f"–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(migrated_categories)}/{len(existing_cats)}")
    print(f"–¢—Ä–µ–±—É—é—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {sum(1 for c in migrated_categories if c.needs_custom_params())}")
    print(f"\n–§–∞–π–ª—ã:")
    print(f"  - config/categories_migrated.json (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)")
    print(f"  - MIGRATION_REPORT.md (–æ—Ç—á—ë—Ç)")
    print("="*60)
    
    # 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...")
    
    test_categories = ['–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', '—Å—É–º–∫–∞', '–§—É—Ç–±–æ–ª–∫–∏']
    for cat_name in test_categories:
        cat = next((c for c in migrated_categories if c.name == cat_name), None)
        if cat:
            print(f"\n‚úì {cat.name}:")
            print(f"  - –¢—Ä–µ–±—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {cat.needs_custom_params()}")
            print(f"  - –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏: rail={cat.rail_base}, air={cat.air_base}")
            print(f"  - Keywords: {', '.join(cat.keywords[:3])}...")
            
            # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            is_valid, errors = cat.validate_params({})
            if not is_valid and cat.needs_custom_params():
                print(f"  - –¢—Ä–µ–±—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(cat.get_required_params_names())}")
    
    return 0


if __name__ == '__main__':
    import sys
    sys.exit(main())





