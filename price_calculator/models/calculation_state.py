"""
Calculation State Machine for Price Calculator
Manages calculation lifecycle and state transitions
"""

from enum import Enum
from typing import Optional, Dict, Any, List, Callable
from datetime import datetime


class CalculationState(Enum):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞—Å—á—ë—Ç–∞.
    –ö–∞–∂–¥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —ç—Ç–∞–ø –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—á—ë—Ç–∞.
    """
    DRAFT = "draft"                    # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–æ–≤–∞—Ä –≤–≤–µ–¥—ë–Ω
    PENDING_PARAMS = "pending_params"  # –û–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    READY = "ready"                    # –ì–æ—Ç–æ–≤ –∫ —Ä–∞—Å—á—ë—Ç—É
    CALCULATED = "calculated"          # –†–∞—Å—á—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω
    SAVED = "saved"                    # –°–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î
    ERROR = "error"                    # –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    
    def __str__(self):
        return self.value


class StateTransitionError(Exception):
    """–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏"""
    pass


class CalculationStateMachine:
    """
    –ö–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç (FSM) –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ä–∞—Å—á—ë—Ç–∞.
    
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç:
    - –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    - –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    - –•—É–∫–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ/–≤—ã—Ö–æ–¥–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    - –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    """
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    TRANSITIONS = {
        CalculationState.DRAFT: [
            CalculationState.PENDING_PARAMS,
            CalculationState.READY,
            CalculationState.ERROR
        ],
        CalculationState.PENDING_PARAMS: [
            CalculationState.READY,
            CalculationState.DRAFT,
            CalculationState.ERROR
        ],
        CalculationState.READY: [
            CalculationState.CALCULATED,
            CalculationState.DRAFT,  # –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            CalculationState.ERROR
        ],
        CalculationState.CALCULATED: [
            CalculationState.SAVED,
            CalculationState.DRAFT,  # –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            CalculationState.ERROR
        ],
        CalculationState.SAVED: [
            CalculationState.DRAFT  # –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ],
        CalculationState.ERROR: [
            CalculationState.DRAFT  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
        ]
    }
    
    # –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    STATE_NAMES = {
        CalculationState.DRAFT: "–ß–µ—Ä–Ω–æ–≤–∏–∫",
        CalculationState.PENDING_PARAMS: "–û–∂–∏–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
        CalculationState.READY: "–ì–æ—Ç–æ–≤ –∫ —Ä–∞—Å—á—ë—Ç—É",
        CalculationState.CALCULATED: "–†–∞—Å—Å—á–∏—Ç–∞–Ω",
        CalculationState.SAVED: "–°–æ—Ö—Ä–∞–Ω—ë–Ω",
        CalculationState.ERROR: "–û—à–∏–±–∫–∞"
    }
    
    def __init__(self, initial_state: CalculationState = CalculationState.DRAFT):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç state machine.
        
        Args:
            initial_state: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é DRAFT)
        """
        self.state = initial_state
        self.history: List[Dict[str, Any]] = [{
            'state': initial_state,
            'timestamp': datetime.now(),
            'context': {}
        }]
        self._hooks: Dict[str, List[Callable]] = {
            'on_enter': {},
            'on_exit': {}
        }
    
    def can_transition_to(self, target_state: CalculationState) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ü–µ–ª–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
        
        Args:
            target_state: –¶–µ–ª–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω
        """
        allowed_states = self.TRANSITIONS.get(self.state, [])
        return target_state in allowed_states
    
    def get_allowed_transitions(self) -> List[CalculationState]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        
        Returns:
            List[CalculationState]: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        """
        return self.TRANSITIONS.get(self.state, [])
    
    def transition_to(self, target_state: CalculationState, context: Dict[str, Any] = None) -> bool:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
        
        Args:
            target_state: –¶–µ–ª–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
            
        Raises:
            StateTransitionError: –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
        """
        if not self.can_transition_to(target_state):
            allowed = [s.value for s in self.get_allowed_transitions()]
            raise StateTransitionError(
                f"–ù–µ–≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥: {self.state.value} ‚Üí {target_state.value}. "
                f"–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: {allowed}"
            )
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ö—É–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self._trigger_hooks('on_exit', self.state, context or {})
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        previous_state = self.state
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.state = target_state
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.history.append({
            'from': previous_state,
            'to': target_state,
            'timestamp': datetime.now(),
            'context': context or {}
        })
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ö—É–∫ –≤—Ö–æ–¥–∞ –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self._trigger_hooks('on_enter', target_state, context or {})
        
        # –í—ã–∑—ã–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._handle_state_enter(target_state, context or {})
        
        return True
    
    def register_hook(self, hook_type: str, state: CalculationState, callback: Callable):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö—É–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        
        Args:
            hook_type: –¢–∏–ø —Ö—É–∫–∞ ('on_enter' –∏–ª–∏ 'on_exit')
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—É–∫
            callback: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        """
        if hook_type not in self._hooks:
            self._hooks[hook_type] = {}
        
        if state not in self._hooks[hook_type]:
            self._hooks[hook_type][state] = []
        
        self._hooks[hook_type][state].append(callback)
    
    def _trigger_hooks(self, hook_type: str, state: CalculationState, context: Dict[str, Any]):
        """–í—ã–∑—ã–≤–∞–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö—É–∫–∏"""
        hooks = self._hooks.get(hook_type, {}).get(state, [])
        for hook in hooks:
            try:
                hook(self, context)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ö—É–∫–µ {hook_type} –¥–ª—è {state.value}: {e}")
    
    def _handle_state_enter(self, state: CalculationState, context: Dict[str, Any]):
        """
        –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Ö–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ç.–¥.
        """
        handlers = {
            CalculationState.PENDING_PARAMS: self._handle_pending_params,
            CalculationState.READY: self._handle_ready,
            CalculationState.CALCULATED: self._handle_calculated,
            CalculationState.SAVED: self._handle_saved,
            CalculationState.ERROR: self._handle_error
        }
        
        handler = handlers.get(state)
        if handler:
            handler(context)
    
    def _handle_pending_params(self, context: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        category = context.get('category', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è: {category}")
    
    def _handle_ready(self, context: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞—Å—á—ë—Ç—É"""
        print(f"‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞—Å—á—ë—Ç—É")
    
    def _handle_calculated(self, context: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞"""
        cost_price = context.get('cost_price_rub', '–ù/–î')
        print(f"üí∞ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost_price} ‚ÇΩ")
    
    def _handle_saved(self, context: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        calc_id = context.get('calculation_id', '–ù/–î')
        print(f"üíæ –†–∞—Å—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î. ID: {calc_id}")
    
    def _handle_error(self, context: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏"""
        error_message = context.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á—ë—Ç–µ: {error_message}")
    
    def get_state_name(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        
        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        """
        return self.STATE_NAMES.get(self.state, self.state.value)
    
    def get_history(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.
        
        Returns:
            List[Dict]: –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        return self.history.copy()
    
    def get_last_transition(self) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ—Ö–æ–¥.
        
        Returns:
            Optional[Dict]: –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–ª–∏ None
        """
        if len(self.history) > 1:
            return self.history[-1]
        return None
    
    def reset(self, initial_state: CalculationState = CalculationState.DRAFT):
        """
        –°–±—Ä–æ—Å–∏—Ç—å state machine –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
        
        Args:
            initial_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–±—Ä–æ—Å–∞
        """
        self.state = initial_state
        self.history = [{
            'state': initial_state,
            'timestamp': datetime.now(),
            'context': {}
        }]
    
    def to_dict(self) -> Dict[str, Any]:
        """
        –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è state machine –≤ —Å–ª–æ–≤–∞—Ä—å.
        
        Returns:
            Dict: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        return {
            'current_state': self.state.value,
            'state_name': self.get_state_name(),
            'allowed_transitions': [s.value for s in self.get_allowed_transitions()],
            'history': [
                {
                    'from': h.get('from').value if h.get('from') else None,
                    'to': h.get('to').value if h.get('to') else h.get('state').value,
                    'timestamp': h['timestamp'].isoformat(),
                    'context': h.get('context', {})
                }
                for h in self.history
            ]
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'CalculationStateMachine':
        """
        –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è state machine –∏–∑ —Å–ª–æ–≤–∞—Ä—è.
        
        Args:
            data: –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            CalculationStateMachine: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        """
        state_value = data.get('current_state', 'draft')
        state = CalculationState(state_value)
        
        machine = cls(initial_state=state)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'history' in data:
            machine.history = []
            for h in data['history']:
                machine.history.append({
                    'from': CalculationState(h['from']) if h.get('from') else None,
                    'to': CalculationState(h['to']) if h.get('to') else None,
                    'state': CalculationState(h['to']) if h.get('to') else CalculationState(h.get('state', 'draft')),
                    'timestamp': datetime.fromisoformat(h['timestamp']),
                    'context': h.get('context', {})
                })
        
        return machine
    
    def __repr__(self):
        return f"<CalculationStateMachine state={self.state.value} transitions={len(self.history)}>"
    
    def __str__(self):
        return f"State: {self.get_state_name()} ({self.state.value})"






