#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è 001: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π custom_logistics –∏ forced_category –≤ —Ç–∞–±–ª–∏—Ü—É calculations

–î–æ–±–∞–≤–ª—è–µ—Ç:
- custom_logistics: JSONB (PostgreSQL) / TEXT (SQLite) - —Ö—Ä–∞–Ω–∏—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
- forced_category: TEXT - —Ö—Ä–∞–Ω–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

–î–∞—Ç–∞: 2025-10-10
"""

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ database.py
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import get_database_connection, close_database_connection

def run_migration():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é"""
    print("üîÑ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ 001: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ custom_logistics –∏ forced_category")
    
    conn, db_type = get_database_connection()
    cursor = conn.cursor()
    
    try:
        if db_type == 'postgres':
            print("üêò PostgreSQL: –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏...")
            
            # –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å custom_logistics (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å - –ø–æ–ª—É—á–∏–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–ø—É—Å—Ç–∏–º)
            try:
                print("   ‚Üí –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É custom_logistics...")
                cursor.execute("""
                    ALTER TABLE calculations 
                    ADD COLUMN custom_logistics JSONB
                """)
                conn.commit()
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ custom_logistics (JSONB)")
            except Exception as e:
                if 'already exists' in str(e) or 'duplicate column' in str(e).lower():
                    print("‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ custom_logistics —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    conn.rollback()
                else:
                    raise
            
            # –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å forced_category
            try:
                print("   ‚Üí –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É forced_category...")
                cursor.execute("""
                    ALTER TABLE calculations 
                    ADD COLUMN forced_category TEXT
                """)
                conn.commit()
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ forced_category (TEXT)")
            except Exception as e:
                if 'already exists' in str(e) or 'duplicate column' in str(e).lower():
                    print("‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ forced_category —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    conn.rollback()
                else:
                    raise
                
        else:  # SQLite
            print("üì¶ SQLite: –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("PRAGMA table_info(calculations)")
            columns = [row[1] for row in cursor.fetchall()]
            
            if 'custom_logistics' not in columns:
                cursor.execute("""
                    ALTER TABLE calculations 
                    ADD COLUMN custom_logistics TEXT
                """)
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ custom_logistics (TEXT)")
            else:
                print("‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ custom_logistics —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            if 'forced_category' not in columns:
                cursor.execute("""
                    ALTER TABLE calculations 
                    ADD COLUMN forced_category TEXT
                """)
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ forced_category (TEXT)")
            else:
                print("‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ forced_category —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è 001 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        conn.rollback()
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        cursor.close()
        close_database_connection()

if __name__ == "__main__":
    success = run_migration()
    sys.exit(0 if success else 1)

