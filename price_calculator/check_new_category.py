#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è" –≤ –ë–î
"""

import os
import sys

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Railway (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ)
# os.environ["DATABASE_URL"] = "postgresql://..."

from database import load_categories_from_db

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î...")
    print("="*60)
    
    try:
        categories = load_categories_from_db()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
        
        # –ò—â–µ–º "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
        new_category = None
        for cat in categories:
            if cat.get('category') == '–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è':
                new_category = cat
                break
        
        if new_category:
            print("\n‚úÖ '–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è' –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î!")
            print("\n–î–∞–Ω–Ω—ã–µ:")
            print(f"  - category: {new_category.get('category')}")
            print(f"  - material: '{new_category.get('material', '')}'")
            print(f"  - rail_base: {new_category.get('rates', {}).get('rail_base', '–ù/–î')}")
            print(f"  - air_base: {new_category.get('rates', {}).get('air_base', '–ù/–î')}")
            print(f"  - description: {new_category.get('description', '–ù/–î')}")
        else:
            print("\n‚ùå '–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è' –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î!")
            print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            for cat in categories[:10]:  # –ü–µ—Ä–≤—ã–µ 10
                print(f"  - {cat.get('category')} ({cat.get('material', '–±–µ–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞')})")
            
            if len(categories) > 10:
                print(f"  ... –∏ –µ—â–µ {len(categories) - 10} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        print("\n" + "="*60)
        return 0 if new_category else 1
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == '__main__':
    sys.exit(main())





