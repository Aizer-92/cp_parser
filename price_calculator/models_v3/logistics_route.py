"""
LogisticsRoute Model - –ú–∞—Ä—à—Ä—É—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏ —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
"""

from sqlalchemy import Column, Integer, String, DECIMAL, DateTime, ForeignKey, UniqueConstraint
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from .base import Base


class LogisticsRoute(Base):
    """
    –ú–∞—Ä—à—Ä—É—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏ - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞
    
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (Highway –ñ–î, –ê–≤–∏–∞, Contract –∏ —Ç.–¥.).
    –•—Ä–∞–Ω–∏—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.
    """
    
    __tablename__ = 'logistics_routes'
    
    # Primary Key
    id = Column(Integer, primary_key=True, autoincrement=True)
    
    # Foreign Keys
    calculation_id = Column(
        Integer,
        ForeignKey('calculations.id', ondelete='CASCADE'),
        nullable=False,
        index=True,
        comment="ID —Ä–∞—Å—á—ë—Ç–∞"
    )
    
    # –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
    route_name = Column(
        String(50),
        nullable=False,
        comment="–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞: highway_rail, highway_air, highway_contract, prologix, sea_container"
    )
    
    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏
    custom_rate = Column(
        DECIMAL(10, 2),
        comment="–ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∏ ($/–∫–≥)"
    )
    duty_rate = Column(
        DECIMAL(5, 2),
        comment="–ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ—à–ª–∏–Ω—ã (%)"
    )
    vat_rate = Column(
        DECIMAL(5, 2),
        comment="–ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –ù–î–° (%)"
    )
    specific_rate = Column(
        DECIMAL(10, 2),
        comment="–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)"
    )
    
    # üí∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã (–∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞)
    cost_price_rub = Column(
        DECIMAL(10, 2),
        comment="–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (‚ÇΩ)"
    )
    cost_price_usd = Column(
        DECIMAL(10, 2),
        comment="–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É ($)"
    )
    sale_price_rub = Column(
        DECIMAL(10, 2),
        comment="–ü—Ä–æ–¥–∞–∂–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (‚ÇΩ)"
    )
    sale_price_usd = Column(
        DECIMAL(10, 2),
        comment="–ü—Ä–æ–¥–∞–∂–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É ($)"
    )
    profit_rub = Column(
        DECIMAL(10, 2),
        comment="–ü—Ä–∏–±—ã–ª—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (‚ÇΩ)"
    )
    profit_usd = Column(
        DECIMAL(10, 2),
        comment="–ü—Ä–∏–±—ã–ª—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É ($)"
    )
    
    # –û–±—â–∏–µ —Å—É–º–º—ã (–Ω–∞ –≤–µ—Å—å —Ç–∏—Ä–∞–∂)
    total_cost_rub = Column(
        DECIMAL(12, 2),
        comment="–û–±—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)"
    )
    total_cost_usd = Column(
        DECIMAL(12, 2),
        comment="–û–±—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å ($)"
    )
    total_sale_rub = Column(
        DECIMAL(12, 2),
        comment="–û–±—â–∞—è –ø—Ä–æ–¥–∞–∂–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)"
    )
    total_sale_usd = Column(
        DECIMAL(12, 2),
        comment="–û–±—â–∞—è –ø—Ä–æ–¥–∞–∂–Ω–∞—è —Ü–µ–Ω–∞ ($)"
    )
    total_profit_rub = Column(
        DECIMAL(12, 2),
        comment="–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å (‚ÇΩ)"
    )
    total_profit_usd = Column(
        DECIMAL(12, 2),
        comment="–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å ($)"
    )
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_at = Column(
        DateTime(timezone=True),
        server_default=func.now(),
        nullable=False
    )
    updated_at = Column(
        DateTime(timezone=True),
        server_default=func.now(),
        onupdate=func.now(),
        nullable=False
    )
    
    # Relationships
    calculation = relationship("Calculation", back_populates="logistics_routes")
    
    # Constraints
    __table_args__ = (
        UniqueConstraint('calculation_id', 'route_name', name='unique_calc_route'),
    )
    
    def __repr__(self):
        return f"<LogisticsRoute(id={self.id}, calc={self.calculation_id}, route={self.route_name})>"
    
    def to_dict(self):
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è API"""
        return {
            'id': self.id,
            'calculation_id': self.calculation_id,
            'route_name': self.route_name,
            # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            'custom_rate': float(self.custom_rate) if self.custom_rate else None,
            'duty_rate': float(self.duty_rate) if self.duty_rate else None,
            'vat_rate': float(self.vat_rate) if self.vat_rate else None,
            'specific_rate': float(self.specific_rate) if self.specific_rate else None,
            # –¶–µ–Ω—ã –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
            'cost_price_rub': float(self.cost_price_rub) if self.cost_price_rub else None,
            'cost_price_usd': float(self.cost_price_usd) if self.cost_price_usd else None,
            'sale_price_rub': float(self.sale_price_rub) if self.sale_price_rub else None,
            'sale_price_usd': float(self.sale_price_usd) if self.sale_price_usd else None,
            'profit_rub': float(self.profit_rub) if self.profit_rub else None,
            'profit_usd': float(self.profit_usd) if self.profit_usd else None,
            # –û–±—â–∏–µ —Å—É–º–º—ã
            'total_cost_rub': float(self.total_cost_rub) if self.total_cost_rub else None,
            'total_cost_usd': float(self.total_cost_usd) if self.total_cost_usd else None,
            'total_sale_rub': float(self.total_sale_rub) if self.total_sale_rub else None,
            'total_sale_usd': float(self.total_sale_usd) if self.total_sale_usd else None,
            'total_profit_rub': float(self.total_profit_rub) if self.total_profit_rub else None,
            'total_profit_usd': float(self.total_profit_usd) if self.total_profit_usd else None,
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None,
        }



