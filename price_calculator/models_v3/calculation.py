"""
Calculation Model - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç –æ—Ç —Ñ–∞–±—Ä–∏–∫–∏ –¥–ª—è —Ç–∏—Ä–∞–∂–∞

–û–ë–ù–û–í–õ–ï–ù–û: 14.10.2025
- –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞ (routes, customs_calculation)
- –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (custom_logistics, forced_category)
- –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ markup –¥–ª—è –Ω–∞—Ü–µ–Ω–∫–∏
- –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ comment –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

from sqlalchemy import Column, Integer, Float, String, Text, DECIMAL, DateTime, ForeignKey, CheckConstraint, JSON
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from .base import Base


class Calculation(Base):
    """
    –†–∞—Å—á—ë—Ç - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç —Ñ–∞–±—Ä–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ç–∏—Ä–∞–∂–∞
    
    –ü—Ä–∏–º–µ—Ä: "–ë—É—Ç—ã–ª–∫–∞" –æ—Ç "–§–∞–±—Ä–∏–∫–∏ –ê" –Ω–∞ —Ç–∏—Ä–∞–∂ 500 —à—Ç - —ç—Ç–æ –æ–¥–∏–Ω —Ä–∞—Å—á—ë—Ç.
            "–ë—É—Ç—ã–ª–∫–∞" –æ—Ç "–§–∞–±—Ä–∏–∫–∏ –ë" –Ω–∞ —Ç–∏—Ä–∞–∂ 500 —à—Ç - —ç—Ç–æ –¥—Ä—É–≥–æ–π —Ä–∞—Å—á—ë—Ç.
            "–ë—É—Ç—ã–ª–∫–∞" –æ—Ç "–§–∞–±—Ä–∏–∫–∏ –ê" –Ω–∞ —Ç–∏—Ä–∞–∂ 1000 —à—Ç - —ç—Ç–æ —Ç—Ä–µ—Ç–∏–π —Ä–∞—Å—á—ë—Ç.
    """
    
    __tablename__ = 'v3_calculations'
    
    # Primary Key
    id = Column(Integer, primary_key=True, autoincrement=True)
    
    # Foreign Keys
    position_id = Column(
        Integer,
        ForeignKey('v3_positions.id', ondelete='CASCADE'),
        nullable=False,
        index=True,
        comment="ID –ø–æ–∑–∏—Ü–∏–∏"
    )
    factory_id = Column(
        Integer,
        ForeignKey('v3_factories.id', ondelete='SET NULL'),
        index=True,
        comment="ID —Ñ–∞–±—Ä–∏–∫–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    )
    
    # –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ (–µ—Å–ª–∏ –Ω–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞)
    factory_custom_name = Column(
        String(255),
        comment="–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ (–µ—Å–ª–∏ –Ω–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞)"
    )
    factory_custom_url = Column(
        Text,
        comment="–°—Å—ã–ª–∫–∞/WeChat —Ñ–∞–±—Ä–∏–∫–∏ (–µ—Å–ª–∏ –Ω–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞)"
    )
    
    # –£—Å–ª–æ–≤–∏—è –æ—Ç —Ñ–∞–±—Ä–∏–∫–∏ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –¥–µ—Ñ–æ–ª—Ç—ã –∏–∑ Factory)
    sample_time_days = Column(
        Integer,
        comment="–°—Ä–æ–∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–∑—Ü–∞ (–¥–Ω–µ–π)"
    )
    production_time_days = Column(
        Integer,
        comment="–°—Ä–æ–∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Ç–∏—Ä–∞–∂–∞ (–¥–Ω–µ–π)"
    )
    sample_price_yuan = Column(
        DECIMAL(10, 2),
        comment="–¶–µ–Ω–∞ –æ–±—Ä–∞–∑—Ü–∞ (—é–∞–Ω–µ–π)"
    )
    factory_comment = Column(
        Text,
        comment="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —ç—Ç–æ–º—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ä–∞—Å—á—ë—Ç—É"
    )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á—ë—Ç–∞
    quantity = Column(
        Integer,
        nullable=False,
        index=True,
        comment="–¢–∏—Ä–∞–∂ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü)"
    )
    price_yuan = Column(
        DECIMAL(10, 2),
        nullable=False,
        comment="–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –≤ —é–∞–Ω—è—Ö"
    )
    
    # –í–µ—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    calculation_type = Column(
        String(20),
        nullable=False,
        default='quick',
        comment="–¢–∏–ø —Ä–∞—Å—á—ë—Ç–∞: quick (–ø—Ä–æ—Å—Ç–æ–π –≤–µ—Å) –∏–ª–∏ precise (–ø–∞–∫–∏–Ω–≥)"
    )
    weight_kg = Column(
        DECIMAL(10, 3),
        comment="–í–µ—Å –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ (–∫–≥) –¥–ª—è quick —Ä–∞—Å—á—ë—Ç–∞"
    )
    
    # üì¶ –ü–ê–ö–ò–ù–ì (–¥–ª—è precise —Ä–∞—Å—á—ë—Ç–∞)
    packing_units_per_box = Column(
        Integer,
        comment="–ï–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ –≤ –æ–¥–Ω–æ–π –∫–æ—Ä–æ–±–∫–µ"
    )
    packing_box_weight = Column(
        DECIMAL(10, 3),
        comment="–í–µ—Å –æ–¥–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏ (–∫–≥)"
    )
    packing_box_length = Column(
        DECIMAL(10, 2),
        comment="–î–ª–∏–Ω–∞ –∫–æ—Ä–æ–±–∫–∏ (—Å–º)"
    )
    packing_box_width = Column(
        DECIMAL(10, 2),
        comment="–®–∏—Ä–∏–Ω–∞ –∫–æ—Ä–æ–±–∫–∏ (—Å–º)"
    )
    packing_box_height = Column(
        DECIMAL(10, 2),
        comment="–í—ã—Å–æ—Ç–∞ –∫–æ—Ä–æ–±–∫–∏ (—Å–º)"
    )
    packing_total_boxes = Column(
        Integer,
        comment="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–∫"
    )
    packing_total_volume = Column(
        DECIMAL(10, 3),
        comment="–û–±—â–∏–π –æ–±—ä—ë–º (–º¬≥)"
    )
    packing_total_weight = Column(
        DECIMAL(10, 3),
        comment="–û–±—â–∏–π –≤–µ—Å (–∫–≥)"
    )
    
    # ============================================
    # –ü–ê–†–ê–ú–ï–¢–†–´ –†–ê–°–ß–ï–¢–ê (–¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞)
    # ============================================
    markup = Column(
        Float,
        nullable=True,
        comment="–ù–∞—Ü–µ–Ω–∫–∞ (–º–Ω–æ–∂–∏—Ç–µ–ª—å, –Ω–∞–ø—Ä–∏–º–µ—Ä 1.4 = 40% –ø—Ä–∏–±—ã–ª–∏)"
    )
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª)
    forced_category = Column(
        String(100),
        nullable=True,
        comment="–ö–∞—Ç–µ–≥–æ—Ä–∏—è, –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—Ä—É—á–Ω—É—é (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)"
    )
    
    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏ (JSON)
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {
    #   "highway_rail": {"custom_rate": 3.5, "duty_rate": 15, "vat_rate": 20},
    #   "highway_contract": {"duty_type": "combined", "duty_rate": 10, "specific_rate": 5, "vat_rate": 20}
    # }
    custom_logistics = Column(
        JSON,
        nullable=True,
        comment="–ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ (–¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞)"
    )
    
    # ============================================
    # –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–ê (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    # ============================================
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é)
    category = Column(
        String(100),
        nullable=True,
        index=True,
        comment="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∏–ª–∏ forced_category)"
    )
    
    # –ú–∞—Ä—à—Ä—É—Ç—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏ (JSON)
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {
    #   "highway_rail": {
    #     "name": "Highway –ñ–î",
    #     "cost_per_unit_rub": 450.50,
    #     "sale_per_unit_rub": 765.85,
    #     "profit_per_unit_rub": 315.35,
    #     "cost_price_rub": 450500,
    #     "sale_price_rub": 765850,
    #     "profit_rub": 315350,
    #     "delivery_days": 25,
    #     "delivery_time": "25 –¥–Ω–µ–π",
    #     "breakdown": {
    #       "factory_price": 100.0,
    #       "logistics": 150.0,
    #       "duty": 50.0,
    #       "vat": 80.0,
    #       ...
    #     }
    #   },
    #   "highway_air": {...},
    #   ...
    # }
    routes = Column(
        JSON,
        nullable=True,
        comment="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ª–æ–≥–∏—Å—Ç–∏–∫–∏"
    )
    
    # –¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã (JSON)
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {
    #   "duty_amount_usd": 150.0,
    #   "duty_amount_rub": 12600.0,
    #   "vat_amount_usd": 450.0,
    #   "vat_amount_rub": 37800.0,
    #   "duty_rate": 9.6,
    #   "vat_rate": 20,
    #   "duty_type": "percent"
    # }
    customs_calculation = Column(
        JSON,
        nullable=True,
        comment="–î–µ—Ç–∞–ª–∏ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ (–ø–æ—à–ª–∏–Ω—ã, –ù–î–°)"
    )
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    comment = Column(
        Text,
        nullable=True,
        comment="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —ç—Ç–æ–º—É —Ä–∞—Å—á–µ—Ç—É"
    )
    
    # ============================================
    # –ú–ï–¢–ê–î–ê–ù–ù–´–ï
    # ============================================
    created_at = Column(
        DateTime(timezone=True),
        server_default=func.now(),
        nullable=False,
        index=True,
        comment="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞"
    )
    updated_at = Column(
        DateTime(timezone=True),
        server_default=func.now(),
        onupdate=func.now(),
        nullable=False,
        comment="–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–µ—Ä–µ—Å—á–µ—Ç–∞)"
    )
    
    # Relationships
    position = relationship("Position", back_populates="calculations")
    factory = relationship("Factory", back_populates="calculations")
    logistics_routes = relationship(
        "LogisticsRoute",
        back_populates="calculation",
        cascade="all, delete-orphan"
    )
    
    # Constraints
    __table_args__ = (
        CheckConstraint(
            '(factory_id IS NOT NULL OR factory_custom_name IS NOT NULL)',
            name='factory_required'
        ),
    )
    
    def __repr__(self):
        factory_name = self.factory.name if self.factory else self.factory_custom_name
        return f"<Calculation(id={self.id}, position={self.position.name}, factory={factory_name}, qty={self.quantity})>"
    
    def to_dict(self, include_routes=False):
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è API"""
        data = {
            'id': self.id,
            'position_id': self.position_id,
            'factory_id': self.factory_id,
            'factory_custom_name': self.factory_custom_name,
            'factory_custom_url': self.factory_custom_url,
            'sample_time_days': self.sample_time_days,
            'production_time_days': self.production_time_days,
            'sample_price_yuan': float(self.sample_price_yuan) if self.sample_price_yuan else None,
            'factory_comment': self.factory_comment,
            'quantity': self.quantity,
            'price_yuan': float(self.price_yuan),
            'calculation_type': self.calculation_type,
            'weight_kg': float(self.weight_kg) if self.weight_kg else None,
            'packing_units_per_box': self.packing_units_per_box,
            'packing_box_weight': float(self.packing_box_weight) if self.packing_box_weight else None,
            'packing_box_length': float(self.packing_box_length) if self.packing_box_length else None,
            'packing_box_width': float(self.packing_box_width) if self.packing_box_width else None,
            'packing_box_height': float(self.packing_box_height) if self.packing_box_height else None,
            'packing_total_boxes': self.packing_total_boxes,
            'packing_total_volume': float(self.packing_total_volume) if self.packing_total_volume else None,
            'packing_total_weight': float(self.packing_total_weight) if self.packing_total_weight else None,
            
            # ‚úÖ NEW: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞
            'markup': self.markup,
            'forced_category': self.forced_category,
            'custom_logistics': self.custom_logistics,
            
            # ‚úÖ NEW: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞
            'category': self.category,
            'routes': self.routes,
            'customs_calculation': self.customs_calculation,
            'comment': self.comment,
            
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None,
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–±—Ä–∏–∫–µ
        if self.factory:
            data['factory_info'] = self.factory.to_dict()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏ (—Å—Ç–∞—Ä—ã–µ LogisticsRoute –µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
        if include_routes and self.logistics_routes:
            data['logistics_routes'] = [route.to_dict() for route in self.logistics_routes]
        
        return data



