import os
import json
from typing import List, Dict, Any

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î (PostgreSQL –∏–ª–∏ SQLite)

def get_database_connection():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (PostgreSQL –∏–ª–∏ SQLite)"""
    database_url = os.environ.get('DATABASE_URL') or os.environ.get('POSTGRES_URL')
    database_public_url = os.environ.get('DATABASE_PUBLIC_URL')
    
    if database_url or database_public_url:
        # PostgreSQL
        try:
            import psycopg2
            from urllib.parse import urlparse
            
            # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π URL, –ø–æ—Ç–æ–º –ø—É–±–ª–∏—á–Ω—ã–π
            url_to_try = database_url or database_public_url
            print(f"üîó –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL: {url_to_try[:50]}...")
            
            # –ü–∞—Ä—Å–∏–º URL
            parsed = urlparse(url_to_try)
            conn = psycopg2.connect(
                host=parsed.hostname,
                port=parsed.port,
                database=parsed.path[1:],  # —É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π /
                user=parsed.username,
                password=parsed.password,
                sslmode='require'
            )
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ PostgreSQL")
            return conn, 'postgres'
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É: {e}")
            
            # –ü—Ä–æ–±—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL –µ—Å–ª–∏ –µ—Å—Ç—å
            if database_public_url and database_public_url != url_to_try:
                try:
                    print(f"üîó –ü—Ä–æ–±—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π PostgreSQL URL...")
                    parsed = urlparse(database_public_url)
                    conn = psycopg2.connect(
                        host=parsed.hostname,
                        port=parsed.port,
                        database=parsed.path[1:],
                        user=parsed.username,
                        password=parsed.password,
                        sslmode='require'
                    )
                    print("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ PostgreSQL (–ø—É–±–ª–∏—á–Ω—ã–π URL)")
                    return conn, 'postgres'
                except Exception as e2:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –ø—É–±–ª–∏—á–Ω–æ–º—É: {e2}")
            
            print("‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ SQLite")
    
    # Fallback –∫ SQLite
    import sqlite3
    conn = sqlite3.connect('calculations.db')
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ SQLite")
    return conn, 'sqlite'

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î"""
    conn, db_type = get_database_connection()
    cursor = conn.cursor()
    
    if db_type == 'postgres':
        # PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS calculations (
                id SERIAL PRIMARY KEY,
                product_name TEXT NOT NULL,
                category TEXT,
                price_yuan REAL NOT NULL,
                weight_kg REAL NOT NULL,
                quantity INTEGER NOT NULL,
                markup REAL NOT NULL,
                custom_rate REAL,
                product_url TEXT,
                cost_price_rub REAL NOT NULL,
                cost_price_usd REAL NOT NULL,
                sale_price_rub REAL NOT NULL,
                sale_price_usd REAL NOT NULL,
                profit_rub REAL NOT NULL,
                profit_usd REAL NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
    else:
        # SQLite —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS calculations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                product_name TEXT NOT NULL,
                category TEXT,
                price_yuan REAL NOT NULL,
                weight_kg REAL NOT NULL,
                quantity INTEGER NOT NULL,
                markup REAL NOT NULL,
                custom_rate REAL,
                product_url TEXT,
                cost_price_rub REAL NOT NULL,
                cost_price_usd REAL NOT NULL,
                sale_price_rub REAL NOT NULL,
                sale_price_usd REAL NOT NULL,
                profit_rub REAL NOT NULL,
                profit_usd REAL NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
    
    conn.commit()
    conn.close()
    print(f"‚úÖ –¢–∞–±–ª–∏—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã ({db_type})")

def save_calculation_to_db(data: Dict[str, Any]) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—á–µ—Ç –≤ –ë–î"""
    conn, db_type = get_database_connection()
    cursor = conn.cursor()
    
    if db_type == 'postgres':
        cursor.execute('''
            INSERT INTO calculations 
            (product_name, category, price_yuan, weight_kg, quantity, markup, custom_rate, 
             product_url, cost_price_rub, cost_price_usd, sale_price_rub, sale_price_usd, 
             profit_rub, profit_usd) 
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) 
            RETURNING id
        ''', (
            data['product_name'], data['category'], data['price_yuan'], data['weight_kg'],
            data['quantity'], data['markup'], data.get('custom_rate'), data.get('product_url'),
            data['cost_price_total_rub'], data['cost_price_total_usd'],
            data['sale_price_total_rub'], data['sale_price_total_usd'],
            data['profit_total_rub'], data['profit_total_usd']
        ))
        calculation_id = cursor.fetchone()[0]
    else:
        cursor.execute('''
            INSERT INTO calculations 
            (product_name, category, price_yuan, weight_kg, quantity, markup, custom_rate, 
             product_url, cost_price_rub, cost_price_usd, sale_price_rub, sale_price_usd, 
             profit_rub, profit_usd) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            data['product_name'], data['category'], data['price_yuan'], data['weight_kg'],
            data['quantity'], data['markup'], data.get('custom_rate'), data.get('product_url'),
            data['cost_price_total_rub'], data['cost_price_total_usd'],
            data['sale_price_total_rub'], data['sale_price_total_usd'],
            data['profit_total_rub'], data['profit_total_usd']
        ))
        calculation_id = cursor.lastrowid
    
    conn.commit()
    conn.close()
    return calculation_id

def get_calculation_history() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–∑ –ë–î"""
    conn, db_type = get_database_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, product_name, category, price_yuan, weight_kg, quantity, markup, 
               custom_rate, product_url, cost_price_rub, cost_price_usd, 
               sale_price_rub, sale_price_usd, profit_rub, profit_usd, created_at 
        FROM calculations 
        ORDER BY created_at DESC 
        LIMIT 50
    ''')
    
    rows = cursor.fetchall()
    conn.close()
    
    history = []
    for row in rows:
        history.append({
            'id': row[0],
            'product_name': row[1],
            'category': row[2],
            'price_yuan': row[3],
            'weight_kg': row[4],
            'quantity': row[5],
            'markup': row[6],
            'custom_rate': row[7],
            'product_url': row[8],
            'cost_price_rub': row[9],
            'cost_price_usd': row[10],
            'sale_price_rub': row[11],
            'sale_price_usd': row[12],
            'profit_rub': row[13],
            'profit_usd': row[14],
            'created_at': str(row[15])
        })
    
    return history

def restore_from_backup():
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–∞–ø–∞ –ø—Ä–∏ –ø—É—Å—Ç–æ–π –ë–î"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞ –ª–∏ –ë–î
        history = get_calculation_history()
        if len(history) > 0:
            print(f"‚úÖ –ë–î —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(history)} –∑–∞–ø–∏—Å–µ–π")
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞
        try:
            with open('calculations_backup.json', 'r', encoding='utf-8') as f:
                backup_data = json.load(f)
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {len(backup_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –±—ç–∫–∞–ø–∞...")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
        for record in backup_data:
            try:
                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                data = {
                    'product_name': record.get('product_name', ''),
                    'category': record.get('category', ''),
                    'price_yuan': record.get('price_yuan', 0),
                    'weight_kg': record.get('weight_kg', 0),
                    'quantity': record.get('quantity', 0),
                    'markup': record.get('markup', 1.7),
                    'custom_rate': record.get('custom_rate'),
                    'product_url': record.get('product_url'),
                    'cost_price_total_rub': record.get('cost_price_rub', 0),
                    'cost_price_total_usd': record.get('cost_price_usd', 0),
                    'sale_price_total_rub': record.get('sale_price_rub', 0),
                    'sale_price_total_usd': record.get('sale_price_usd', 0),
                    'profit_total_rub': record.get('profit_rub', 0),
                    'profit_total_usd': record.get('profit_usd', 0)
                }
                save_calculation_to_db(data)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
                continue
        
        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(backup_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –±—ç–∫–∞–ø–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞: {e}")

