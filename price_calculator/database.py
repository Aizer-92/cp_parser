import os
import json
from typing import List, Dict, Any, Optional, Tuple
import threading

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î (PostgreSQL –∏–ª–∏ SQLite)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è singleton –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
_db_connection = None
_db_type = None
_connection_lock = threading.Lock()

def get_database_connection() -> Tuple[any, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
    global _db_connection, _db_type, _connection_lock
    
    with _connection_lock:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if _db_connection is not None and _db_type is not None:
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                if _db_type == 'postgres':
                    cursor = _db_connection.cursor()
                    cursor.execute('SELECT 1')
                    cursor.close()
                    if not _db_connection.closed:
                        return _db_connection, _db_type
                else:
                    _db_connection.cursor().execute('SELECT 1').fetchone()
                    return _db_connection, _db_type
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ: {e}")
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                try:
                    _db_connection.close()
                except:
                    pass
                _db_connection = None
                _db_type = None
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("üîå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
        
        # –ü—Ä–æ–±—É–µ–º PostgreSQL (Railway)
        for url_env in ['DATABASE_PUBLIC_URL', 'DATABASE_URL']:
            database_url = os.environ.get(url_env)
            if database_url:
                try:
                    import psycopg2
                    from psycopg2.extras import RealDictCursor
                    
                    print(f"üêò –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è PostgreSQL —á–µ—Ä–µ–∑ {url_env}")
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL –¥–ª—è psycopg2
                    if database_url.startswith('postgres://'):
                        database_url = database_url.replace('postgres://', 'postgresql://', 1)
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è Railway
                    _db_connection = psycopg2.connect(
                        database_url,
                        cursor_factory=RealDictCursor,
                        connect_timeout=10,
                        application_name='price_calculator'
                    )
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    _db_connection.autocommit = False
                    
                    _db_type = 'postgres'
                    print(f"‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ {url_env}")
                    return _db_connection, _db_type
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ PostgreSQL {url_env}: {e}")
                    continue
        
        # Fallback –∫ SQLite
        print("‚ö†Ô∏è PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ SQLite")
        try:
            import sqlite3
            _db_connection = sqlite3.connect(
                'calculations.db', 
                check_same_thread=False,
                timeout=20.0
            )
            _db_connection.row_factory = sqlite3.Row  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å PostgreSQL
            _db_type = 'sqlite'
            print("‚úÖ SQLite –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return _db_connection, _db_type
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ SQLite: {e}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ PostgreSQL, –Ω–∏ –∫ SQLite: {e}")

def close_database_connection():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
    global _db_connection, _db_type, _connection_lock
    
    with _connection_lock:
        if _db_connection:
            try:
                _db_connection.close()
                print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
            except:
                pass
            finally:
                _db_connection = None
                _db_type = None

def reconnect_database():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ë–î"""
    print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
    close_database_connection()
    return get_database_connection()

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î"""
    conn, db_type = get_database_connection()
    cursor = conn.cursor()
    
    if db_type == 'postgres':
        # PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS calculations (
                id SERIAL PRIMARY KEY,
                product_name TEXT NOT NULL,
                category TEXT,
                price_yuan REAL NOT NULL,
                weight_kg REAL NOT NULL,
                quantity INTEGER NOT NULL,
                markup REAL NOT NULL,
                custom_rate REAL,
                product_url TEXT,
                cost_price_rub REAL NOT NULL,
                cost_price_usd REAL NOT NULL,
                sale_price_rub REAL NOT NULL,
                sale_price_usd REAL NOT NULL,
                profit_rub REAL NOT NULL,
                profit_usd REAL NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS categories (
                id SERIAL PRIMARY KEY,
                category TEXT NOT NULL,
                material TEXT NOT NULL,
                data JSONB NOT NULL,
                UNIQUE (category, material)
            )
        ''')
    else:
        # SQLite —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS calculations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                product_name TEXT NOT NULL,
                category TEXT,
                price_yuan REAL NOT NULL,
                weight_kg REAL NOT NULL,
                quantity INTEGER NOT NULL,
                markup REAL NOT NULL,
                custom_rate REAL,
                product_url TEXT,
                cost_price_rub REAL NOT NULL,
                cost_price_usd REAL NOT NULL,
                sale_price_rub REAL NOT NULL,
                sale_price_usd REAL NOT NULL,
                profit_rub REAL NOT NULL,
                profit_usd REAL NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS categories (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                category TEXT NOT NULL,
                material TEXT NOT NULL,
                data TEXT NOT NULL,
                UNIQUE (category, material)
            )
        ''')
    
    conn.commit()
    
    # –ú–ò–ì–†–ê–¶–ò–Ø –û–¢–ö–õ–Æ–ß–ï–ù–ê: init_db.py —É–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    # migrate_database_schema(conn, cursor, db_type)  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
    
    # –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    print(f"–¢–∞–±–ª–∏—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã ({db_type})")

def migrate_database_schema(conn, cursor, db_type):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        new_columns = [
            ('calculation_type', 'TEXT DEFAULT "quick"'),
            ('packing_units_per_box', 'INTEGER'),
            ('packing_box_weight', 'REAL'),
            ('packing_box_length', 'REAL'),
            ('packing_box_width', 'REAL'),
            ('packing_box_height', 'REAL'),
            ('packing_total_boxes', 'INTEGER'),
            ('packing_total_volume', 'REAL'),
            ('packing_total_weight', 'REAL'),
            ('tnved_code', 'TEXT'),
            ('duty_rate', 'TEXT'),
            ('vat_rate', 'TEXT'),
            ('duty_amount_usd', 'REAL'),
            ('vat_amount_usd', 'REAL'),
            ('total_customs_cost_usd', 'REAL'),
            ('certificates', 'TEXT'),
            ('customs_notes', 'TEXT'),
            ('density_warning_message', 'TEXT'),
            ('calculated_density', 'REAL'),
            ('category_density', 'REAL')
        ]
        
        for column_name, column_type in new_columns:
            try:
                if db_type == 'postgres':
                    cursor.execute(f'ALTER TABLE calculations ADD COLUMN {column_name} {column_type}')
                else:
                    cursor.execute(f'ALTER TABLE calculations ADD COLUMN {column_name} {column_type}')
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü: {column_name}")
            except Exception as e:
                # –°—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                conn.rollback()  # –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è PostgreSQL: –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∞–±–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                if "already exists" in str(e).lower() or "duplicate column" in str(e).lower():
                    continue  # –°—Ç–æ–ª–±–µ—Ü —É–∂–µ –µ—Å—Ç—å, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                else:
                    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü {column_name}: {e}")
        
        conn.commit()
        print("–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

def save_calculation_to_db(data: Dict[str, Any]) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—á–µ—Ç –≤ –ë–î"""
    try:
        conn, db_type = get_database_connection()  # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        cursor = conn.cursor()
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –≤ –ë–î ({db_type}): {data['product_name']}")
        
        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º custom_logistics –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        custom_logistics_json = None
        if data.get('custom_logistics'):
            custom_logistics_json = json.dumps(data['custom_logistics'])
        
        if db_type == 'postgres':
            cursor.execute('''
                INSERT INTO calculations 
                (product_name, category, price_yuan, weight_kg, quantity, markup, custom_rate, 
                 product_url, cost_price_rub, cost_price_usd, sale_price_rub, sale_price_usd, 
                 profit_rub, profit_usd, calculation_type,
                 packing_units_per_box, packing_box_weight, packing_box_length, packing_box_width, packing_box_height,
                 packing_total_boxes, packing_total_volume, packing_total_weight,
                 tnved_code, duty_rate, vat_rate, duty_amount_usd, vat_amount_usd, total_customs_cost_usd,
                 certificates, customs_notes, density_warning_message, calculated_density, category_density,
                 custom_logistics, forced_category) 
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) 
                RETURNING id
            ''', (
                data['product_name'], data['category'], data['price_yuan'], data['weight_kg'],
                data['quantity'], data['markup'], data.get('custom_rate'), data.get('product_url'),
                data['cost_price_total_rub'], data['cost_price_total_usd'],
                data['sale_price_total_rub'], data['sale_price_total_usd'],
                data['profit_total_rub'], data['profit_total_usd'],
                data.get('calculation_type', 'quick'),
                data.get('packing_units_per_box'), data.get('packing_box_weight'), 
                data.get('packing_box_length'), data.get('packing_box_width'), data.get('packing_box_height'),
                data.get('packing_total_boxes'), data.get('packing_total_volume'), data.get('packing_total_weight'),
                # –î–∞–Ω–Ω—ã–µ –æ –ø–æ—à–ª–∏–Ω–∞—Ö
                data.get('tnved_code'), data.get('duty_rate'), data.get('vat_rate'),
                data.get('duty_amount_usd'), data.get('vat_amount_usd'), data.get('total_customs_cost_usd'),
                data.get('certificates'), data.get('customs_notes'),
                # –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
                data.get('density_warning_message'), data.get('calculated_density'), data.get('category_density'),
                # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                custom_logistics_json, data.get('forced_category')
            ))
            result = cursor.fetchone()
            calculation_id = result['id'] if isinstance(result, dict) else result[0]
            print(f"‚úÖ PostgreSQL: –†–∞—Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID {calculation_id}")
        else:
            cursor.execute('''
                INSERT INTO calculations 
                (product_name, category, price_yuan, weight_kg, quantity, markup, custom_rate, 
                 product_url, cost_price_rub, cost_price_usd, sale_price_rub, sale_price_usd, 
                 profit_rub, profit_usd, calculation_type,
                 packing_units_per_box, packing_box_weight, packing_box_length, packing_box_width, packing_box_height,
                 packing_total_boxes, packing_total_volume, packing_total_weight,
                 tnved_code, duty_rate, vat_rate, duty_amount_usd, vat_amount_usd, total_customs_cost_usd,
                 certificates, customs_notes, density_warning_message, calculated_density, category_density,
                 custom_logistics, forced_category) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                data['product_name'], data['category'], data['price_yuan'], data['weight_kg'],
                data['quantity'], data['markup'], data.get('custom_rate'), data.get('product_url'),
                data['cost_price_total_rub'], data['cost_price_total_usd'],
                data['sale_price_total_rub'], data['sale_price_total_usd'],
                data['profit_total_rub'], data['profit_total_usd'],
                data.get('calculation_type', 'quick'),
                data.get('packing_units_per_box'), data.get('packing_box_weight'), 
                data.get('packing_box_length'), data.get('packing_box_width'), data.get('packing_box_height'),
                data.get('packing_total_boxes'), data.get('packing_total_volume'), data.get('packing_total_weight'),
                # –î–∞–Ω–Ω—ã–µ –æ –ø–æ—à–ª–∏–Ω–∞—Ö
                data.get('tnved_code'), data.get('duty_rate'), data.get('vat_rate'),
                data.get('duty_amount_usd'), data.get('vat_amount_usd'), data.get('total_customs_cost_usd'),
                data.get('certificates'), data.get('customs_notes'),
                # –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
                data.get('density_warning_message'), data.get('calculated_density'), data.get('category_density'),
                # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                custom_logistics_json, data.get('forced_category')
            ))
            calculation_id = cursor.lastrowid
            print(f"‚úÖ SQLite: –†–∞—Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID {calculation_id}")
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        print(f"‚úÖ COMMIT –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è ID {calculation_id}")
        
        # –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        cursor.close()
        return calculation_id
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        import traceback
        traceback.print_exc()
        # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            conn.rollback()
            print("‚ö†Ô∏è ROLLBACK –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except:
            pass
        raise e


def upsert_category(category_data: Dict[str, Any]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Ç–∞–±–ª–∏—Ü–µ categories"""
    conn, db_type = get_database_connection()
    cursor = conn.cursor()

    category = category_data.get('category')
    material = category_data.get('material', '')

    serialized = json.dumps(category_data, ensure_ascii=False)

    if db_type == 'postgres':
        cursor.execute('''
            INSERT INTO categories (category, material, data)
            VALUES (%s, %s, %s)
            ON CONFLICT (category, material) DO UPDATE SET data = EXCLUDED.data
        ''', (category, material, serialized))
    else:
        cursor.execute('''
            INSERT INTO categories (category, material, data)
            VALUES (?, ?, ?)
            ON CONFLICT(category, material) DO UPDATE SET data = ?
        ''', (category, material, serialized, serialized))

    conn.commit()


def load_categories_from_db() -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã categories"""
    conn, db_type = get_database_connection()
    cursor = conn.cursor()

    cursor.execute('SELECT data FROM categories ORDER BY category')
    rows = cursor.fetchall()

    categories = []
    for row in rows:
        try:
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            if db_type == 'postgres':
                # PostgreSQL —Å RealDictCursor - –¥–æ—Å—Ç—É–ø –ø–æ –∫–ª—é—á—É
                raw = row['data'] if isinstance(row, dict) else row[0]
            else:
                # SQLite —Å row_factory - –¥–æ—Å—Ç—É–ø –ø–æ –∫–ª—é—á—É –∏–ª–∏ –∏–Ω–¥–µ–∫—Å—É
                raw = row['data'] if hasattr(row, 'keys') else row[0]

            # JSONB –≤ Postgres –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ dict, –∞ –≤ SQLite ‚Äî –∫–∞–∫ str/bytes
            if isinstance(raw, (dict, list)):
                categories.append(raw)
                continue

            if isinstance(raw, bytes):
                raw = raw.decode('utf-8')

            if isinstance(raw, str):
                try:
                    categories.append(json.loads(raw))
                except json.JSONDecodeError:
                    continue
                    
        except (KeyError, IndexError, TypeError) as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            continue

    return categories

def get_calculation_history() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–∑ –ë–î —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
    try:
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id, product_name, category, price_yuan, weight_kg, quantity, markup, 
                   custom_rate, product_url, cost_price_rub, cost_price_usd, 
                   sale_price_rub, sale_price_usd, profit_rub, profit_usd, created_at,
                   calculation_type,
                   packing_units_per_box, packing_box_weight, packing_box_length, packing_box_width, packing_box_height,
                   packing_total_boxes, packing_total_volume, packing_total_weight,
                   custom_logistics, forced_category
            FROM calculations 
            ORDER BY created_at DESC 
            LIMIT 50
        ''')
        
        rows = cursor.fetchall()
        cursor.close()
        
        history = []
        for row in rows:
            if db_type == 'postgres':
                # PostgreSQL —Å RealDictCursor –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict-like –æ–±—ä–µ–∫—Ç—ã
                item = dict(row)
            else:
                # SQLite —Å row_factory = sqlite3.Row
                item = dict(row)
            
            # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º custom_logistics –∏–∑ JSON –µ—Å–ª–∏ –µ—Å—Ç—å
            if item.get('custom_logistics'):
                if isinstance(item['custom_logistics'], str):
                    try:
                        item['custom_logistics'] = json.loads(item['custom_logistics'])
                    except json.JSONDecodeError:
                        item['custom_logistics'] = None
            
            history.append(item)
        
        print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(history)} –∑–∞–ø–∏—Å–µ–π")
        return history
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑
        try:
            print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
            conn, db_type = reconnect_database()
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT id, product_name, category, price_yuan, weight_kg, quantity, markup, 
                       custom_rate, product_url, cost_price_rub, cost_price_usd, 
                       sale_price_rub, sale_price_usd, profit_rub, profit_usd, created_at,
                       calculation_type,
                       packing_units_per_box, packing_box_weight, packing_box_length, packing_box_width, packing_box_height,
                       packing_total_boxes, packing_total_volume, packing_total_weight,
                       custom_logistics, forced_category
                FROM calculations 
                ORDER BY created_at DESC 
                LIMIT 50
            ''')
            
            rows = cursor.fetchall()
            cursor.close()
            
            history = []
            for row in rows:
                item = dict(row)
                
                # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º custom_logistics –∏–∑ JSON –µ—Å–ª–∏ –µ—Å—Ç—å
                if item.get('custom_logistics'):
                    if isinstance(item['custom_logistics'], str):
                        try:
                            item['custom_logistics'] = json.loads(item['custom_logistics'])
                        except json.JSONDecodeError:
                            item['custom_logistics'] = None
                
                history.append(item)
            
            print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {len(history)} –∑–∞–ø–∏—Å–µ–π")
            return history
            
        except Exception as retry_error:
            print(f"‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {retry_error}")
            return []

def update_calculation(calculation_id: int, data: dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞—Å—á–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        
        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º custom_logistics –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        custom_logistics_json = None
        if data.get('custom_logistics'):
            custom_logistics_json = json.dumps(data['custom_logistics'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        if db_type == 'postgres':
            cursor.execute('''
                UPDATE calculations 
                SET product_name = %s, category = %s, price_yuan = %s, weight_kg = %s, 
                    quantity = %s, markup = %s, custom_rate = %s, product_url = %s,
                    cost_price_rub = %s, cost_price_usd = %s, sale_price_rub = %s, 
                    sale_price_usd = %s, profit_rub = %s, profit_usd = %s,
                    packing_units_per_box = %s, packing_box_weight = %s, 
                    packing_box_length = %s, packing_box_width = %s, packing_box_height = %s,
                    packing_total_boxes = %s, packing_total_volume = %s, packing_total_weight = %s,
                    custom_logistics = %s, forced_category = %s
                WHERE id = %s
                RETURNING id
            ''', (
                data['product_name'], data['category'], data['price_yuan'], data['weight_kg'],
                data['quantity'], data['markup'], data.get('custom_rate'),
                data.get('product_url', ''), data['cost_price_rub'], data['cost_price_usd'],
                data['sale_price_rub'], data['sale_price_usd'], data['profit_rub'],
                data['profit_usd'],
                # –î–∞–Ω–Ω—ã–µ –ø–∞–∫–∏–Ω–≥–∞
                data.get('packing_units_per_box'), data.get('packing_box_weight'),
                data.get('packing_box_length'), data.get('packing_box_width'), data.get('packing_box_height'),
                data.get('packing_total_boxes'), data.get('packing_total_volume'), data.get('packing_total_weight'),
                # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                custom_logistics_json, data.get('forced_category'),
                calculation_id
            ))
            
            if not cursor.fetchone():
                raise ValueError("–†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        else:  # SQLite
            cursor.execute('''
                UPDATE calculations 
                SET product_name = ?, category = ?, price_yuan = ?, weight_kg = ?, 
                    quantity = ?, markup = ?, custom_rate = ?, product_url = ?,
                    cost_price_rub = ?, cost_price_usd = ?, sale_price_rub = ?, 
                    sale_price_usd = ?, profit_rub = ?, profit_usd = ?,
                    packing_units_per_box = ?, packing_box_weight = ?, 
                    packing_box_length = ?, packing_box_width = ?, packing_box_height = ?,
                    packing_total_boxes = ?, packing_total_volume = ?, packing_total_weight = ?,
                    custom_logistics = ?, forced_category = ?
                WHERE id = ?
            ''', (
                data['product_name'], data['category'], data['price_yuan'], data['weight_kg'],
                data['quantity'], data['markup'], data.get('custom_rate'),
                data.get('product_url', ''), data['cost_price_rub'], data['cost_price_usd'],
                data['sale_price_rub'], data['sale_price_usd'], data['profit_rub'],
                data['profit_usd'],
                # –î–∞–Ω–Ω—ã–µ –ø–∞–∫–∏–Ω–≥–∞
                data.get('packing_units_per_box'), data.get('packing_box_weight'),
                data.get('packing_box_length'), data.get('packing_box_width'), data.get('packing_box_height'),
                data.get('packing_total_boxes'), data.get('packing_total_volume'), data.get('packing_total_weight'),
                # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                custom_logistics_json, data.get('forced_category'),
                calculation_id
            ))
            
            if cursor.rowcount == 0:
                raise ValueError("–†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        conn.commit()
        print(f"‚úÖ –†–∞—Å—á–µ—Ç {calculation_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
        return True
        
    except ValueError as e:
        print(f"‚ùå {e}")
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {e}")
        raise

def restore_from_backup():
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–∞–ø–∞ –ø—Ä–∏ –ø—É—Å—Ç–æ–π –ë–î"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞ –ª–∏ –ë–î
        conn, db_type = get_database_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM calculations')
        count = cursor.fetchone()[0]
        # –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        
        if count > 0:
            print(f"‚úÖ –ë–î —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {count} –∑–∞–ø–∏—Å–µ–π")
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞
        try:
            with open('calculations_backup.json', 'r', encoding='utf-8') as f:
                backup_data = json.load(f)
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {len(backup_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –±—ç–∫–∞–ø–∞...")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
        for record in backup_data:
            try:
                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                data = {
                    'product_name': record.get('product_name', ''),
                    'category': record.get('category', ''),
                    'price_yuan': record.get('price_yuan', 0),
                    'weight_kg': record.get('weight_kg', 0),
                    'quantity': record.get('quantity', 0),
                    'markup': record.get('markup', 1.7),
                    'custom_rate': record.get('custom_rate'),
                    'product_url': record.get('product_url'),
                    'cost_price_total_rub': record.get('cost_price_rub', 0),
                    'cost_price_total_usd': record.get('cost_price_usd', 0),
                    'sale_price_total_rub': record.get('sale_price_rub', 0),
                    'sale_price_total_usd': record.get('sale_price_usd', 0),
                    'profit_total_rub': record.get('profit_rub', 0),
                    'profit_total_usd': record.get('profit_usd', 0)
                }
                save_calculation_to_db(data)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
                continue
        
        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(backup_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –±—ç–∫–∞–ø–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞: {e}")

