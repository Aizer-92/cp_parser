#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ categories.yaml –≤ PostgreSQL –ë–î.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    py sync_categories.py              # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    py sync_categories.py --force      # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    py sync_categories.py --check      # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
"""

import yaml
import json
import sys
import os
from typing import Dict, List, Any
from database import get_database_connection, upsert_category, load_categories_from_db


def load_yaml_categories() -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ categories.yaml"""
    yaml_path = os.path.join(os.path.dirname(__file__), 'config', 'categories.yaml')
    
    if not os.path.exists(yaml_path):
        print(f"‚ùå –§–∞–π–ª {yaml_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    
    with open(yaml_path, 'r', encoding='utf-8') as f:
        data = yaml.safe_load(f)
    
    categories = data.get('categories', [])
    print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ YAML: {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    return categories


def compare_categories(yaml_cats: List[Dict], db_cats: List[Dict]) -> Dict[str, Any]:
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ YAML –∏ –ë–î
    
    Returns:
        {
            'only_in_yaml': [...],
            'only_in_db': [...],
            'different': [...]
        }
    """
    yaml_dict = {
        (cat['category'], cat.get('material', '')): cat 
        for cat in yaml_cats
    }
    db_dict = {
        (cat['category'], cat.get('material', '')): cat 
        for cat in db_cats
    }
    
    yaml_keys = set(yaml_dict.keys())
    db_keys = set(db_dict.keys())
    
    only_in_yaml = yaml_keys - db_keys
    only_in_db = db_keys - yaml_keys
    both = yaml_keys & db_keys
    
    different = []
    for key in both:
        yaml_cat = yaml_dict[key]
        db_cat = db_dict[key]
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è
        if (yaml_cat.get('rail_base') != db_cat.get('rail_base') or
            yaml_cat.get('air_base') != db_cat.get('air_base') or
            yaml_cat.get('duty') != db_cat.get('duty')):
            different.append({
                'key': key,
                'yaml': yaml_cat,
                'db': db_cat
            })
    
    return {
        'only_in_yaml': [yaml_dict[k] for k in only_in_yaml],
        'only_in_db': [db_dict[k] for k in only_in_db],
        'different': different
    }


def sync_categories_to_db(yaml_cats: List[Dict], force: bool = False) -> Dict[str, int]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ YAML –≤ –ë–î
    
    Args:
        yaml_cats: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ YAML
        force: –ï—Å–ª–∏ True, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    Returns:
        { 'added': N, 'updated': N, 'skipped': N }
    """
    db_cats = load_categories_from_db()
    
    if not force:
        comparison = compare_categories(yaml_cats, db_cats)
        to_sync = comparison['only_in_yaml'] + [d['yaml'] for d in comparison['different']]
    else:
        to_sync = yaml_cats
    
    stats = {'added': 0, 'updated': 0, 'skipped': 0}
    
    for cat in to_sync:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ –ë–î
            existing = any(
                (c['category'] == cat['category'] and 
                 c.get('material', '') == cat.get('material', ''))
                for c in db_cats
            )
            
            upsert_category(cat)
            
            if existing:
                stats['updated'] += 1
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {cat['category']} ({cat.get('material', '–±–µ–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞')})")
            else:
                stats['added'] += 1
                print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {cat['category']} ({cat.get('material', '–±–µ–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞')})")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {cat['category']}: {e}")
            stats['skipped'] += 1
    
    return stats


def print_comparison_report(comparison: Dict[str, Any]):
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á—ë—Ç –æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è—Ö"""
    print("\n" + "="*60)
    print("–û–¢–ß–Å–¢ –û –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø–•")
    print("="*60)
    
    if comparison['only_in_yaml']:
        print(f"\nüìÑ –¢–æ–ª—å–∫–æ –≤ YAML ({len(comparison['only_in_yaml'])} —à—Ç.):")
        for cat in comparison['only_in_yaml']:
            print(f"  - {cat['category']} ({cat.get('material', '–±–µ–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞')})")
    
    if comparison['only_in_db']:
        print(f"\nüíæ –¢–æ–ª—å–∫–æ –≤ –ë–î ({len(comparison['only_in_db'])} —à—Ç.):")
        for cat in comparison['only_in_db']:
            print(f"  - {cat['category']} ({cat.get('material', '–±–µ–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞')})")
    
    if comparison['different']:
        print(f"\n‚ö†Ô∏è –†–∞–∑–ª–∏—á–∞—é—Ç—Å—è ({len(comparison['different'])} —à—Ç.):")
        for diff in comparison['different']:
            cat_name, material = diff['key']
            print(f"\n  {cat_name} ({material or '–±–µ–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞'}):")
            yaml_cat = diff['yaml']
            db_cat = diff['db']
            
            if yaml_cat.get('rail_base') != db_cat.get('rail_base'):
                print(f"    rail_base: {yaml_cat.get('rail_base')} (YAML) vs {db_cat.get('rail_base')} (DB)")
            if yaml_cat.get('air_base') != db_cat.get('air_base'):
                print(f"    air_base: {yaml_cat.get('air_base')} (YAML) vs {db_cat.get('air_base')} (DB)")
            if yaml_cat.get('duty') != db_cat.get('duty'):
                print(f"    duty: {yaml_cat.get('duty')} (YAML) vs {db_cat.get('duty')} (DB)")
    
    if not any([comparison['only_in_yaml'], comparison['only_in_db'], comparison['different']]):
        print("\n‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
    
    print("\n" + "="*60)


def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π YAML ‚Üí PostgreSQL')
    parser.add_argument('--force', action='store_true', help='–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    parser.add_argument('--check', action='store_true', help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è')
    
    args = parser.parse_args()
    
    print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    print("="*60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ YAML
    yaml_cats = load_yaml_categories()
    if not yaml_cats:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ YAML")
        return 1
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
    db_cats = load_categories_from_db()
    print(f"üíæ –í –ë–î —Å–µ–π—á–∞—Å: {len(db_cats)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
    comparison = compare_categories(yaml_cats, db_cats)
    
    if args.check:
        # –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
        print_comparison_report(comparison)
        return 0
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
    print(f"\n{'üîÑ –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...' if args.force else 'üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π...'}")
    stats = sync_categories_to_db(yaml_cats, force=args.force)
    
    print("\n" + "="*60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("="*60)
    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {stats['added']}")
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['updated']}")
    print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}")
    print("="*60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    db_cats_after = load_categories_from_db()
    print(f"\nüíæ –í –ë–î —Ç–µ–ø–µ—Ä—å: {len(db_cats_after)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    
    return 0


if __name__ == '__main__':
    sys.exit(main())





