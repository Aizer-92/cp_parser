"""
SFTP Uploader –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ Beget Cloud
"""
import os
import paramiko
from typing import List, Optional
from datetime import datetime
import io


class SFTPUploader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞ SFTP —Å–µ—Ä–≤–µ—Ä"""
    
    def __init__(self):
        self.host = os.getenv('SFTP_HOST', 'sftp.ru1.storage.beget.cloud')
        self.username = os.getenv('SFTP_USER', 'RECD00AQJIM4300MLJ0W')
        self.password = os.getenv('SFTP_PASSWORD', 'FIucJ3i9iIWZ5ieJvabvI0OxEn2Yv4gG5XRUeSNf')
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É (–Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∞–ø–æ–∫)
        self.base_path = ''
        
    def _get_connection(self):
        """–°–æ–∑–¥–∞—Ç—å SFTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        transport = paramiko.Transport((self.host, 22))
        transport.connect(username=self.username, password=self.password)
        sftp = paramiko.SFTPClient.from_transport(transport)
        return sftp, transport
    
    def upload_photo(self, file_content: bytes, filename: str, position_id: int = None) -> str:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ SFTP
        
        Args:
            file_content: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
            filename: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            position_id: ID –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–ø–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        """
        sftp = None
        transport = None
        
        try:
            sftp, transport = self._get_connection()
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_%f')[:-3]  # –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É)
            import re
            ext = os.path.splitext(filename)[1].lower()
            if not ext or len(ext) > 5:
                ext = '.jpg'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–Ω–æ–µ
            
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ ASCII)
            if position_id:
                new_filename = f"pos_{position_id}_{timestamp}{ext}"
            else:
                new_filename = f"calc_{timestamp}{ext}"
            
            # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–ø—Ä–æ—Å—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞)
            remote_path = new_filename
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É
            print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {remote_path}")
            with io.BytesIO(file_content) as file_obj:
                sftp.putfo(file_obj, remote_path)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ HTTP
            public_url = f"https://ru1.storage.beget.cloud/{self.username}/{remote_path}"
            
            return public_url
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ SFTP: {e}")
            raise
            
        finally:
            if sftp:
                sftp.close()
            if transport:
                transport.close()
    
    def upload_multiple_photos(
        self, 
        files: List[tuple], 
        position_id: int
    ) -> List[str]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        
        Args:
            files: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (file_content, filename)
            position_id: ID –ø–æ–∑–∏—Ü–∏–∏
            
        Returns:
            —Å–ø–∏—Å–æ–∫ URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        urls = []
        for file_content, filename in files:
            try:
                url = self.upload_photo(file_content, filename, position_id)
                urls.append(url)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {filename}: {e}")
                continue
        
        return urls
    
    def delete_photo(self, url: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ URL
        
        Args:
            url: URL —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
        """
        sftp = None
        transport = None
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∏–∑ URL
            if '/calc/' not in url:
                return False
            
            path = url.split('/calc/')[1]
            remote_path = f"{self.base_path}{path}"
            
            sftp, transport = self._get_connection()
            sftp.remove(remote_path)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å SFTP: {e}")
            return False
            
        finally:
            if sftp:
                sftp.close()
            if transport:
                transport.close()


