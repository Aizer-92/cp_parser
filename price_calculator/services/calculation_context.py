"""
Calculation Context
Manages calculation state, strategy selection, and parameters
"""

from typing import Dict, Any, Optional, List
from models.category import Category
from models.calculation_state import CalculationState, CalculationStateMachine
from strategies import CalculationStrategy, StandardCategoryStrategy, CustomCategoryStrategy


class CalculationContext:
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å—á—ë—Ç–∞.
    
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç:
    - Category (–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞)
    - CalculationStateMachine (—Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—á—ë—Ç–∞)
    - CalculationStrategy (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞—Å—á—ë—Ç–∞)
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç:
    - –í—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    - –ü–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    - –ü–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ä–∞—Å—á—ë—Ç–∞
    - –í–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        self.category: Optional[Category] = None
        self.state_machine: CalculationStateMachine = CalculationStateMachine()
        self.strategy: Optional[CalculationStrategy] = None
        
        self.base_params: Dict[str, Any] = {}
        self.custom_logistics: Dict[str, Any] = {}
        self.result: Optional[Dict[str, Any]] = None
    
    def set_category(self, category: Category, base_params: Dict[str, Any]):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
        
        Args:
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞
            base_params: –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (quantity, weight, price, markup)
        """
        self.category = category
        self.base_params = base_params
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category.needs_custom_params():
            self.strategy = CustomCategoryStrategy()
        else:
            self.strategy = StandardCategoryStrategy()
        
        print(f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}")
        print(f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {self.strategy.get_strategy_name()}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if self.strategy.requires_user_input(category):
            # –¢—Ä–µ–±—É—é—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self.state_machine.transition_to(
                CalculationState.PENDING_PARAMS,
                context={'category': category.name}
            )
        else:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è, –º–æ–∂–µ–º —Å—Ä–∞–∑—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å
            self.state_machine.transition_to(CalculationState.READY)
    
    def needs_user_input(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Returns:
            bool: True –µ—Å–ª–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        if not self.strategy or not self.category:
            return False
        
        return self.strategy.requires_user_input(self.category)
    
    def get_required_params(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–±—É–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        """
        if not self.strategy or not self.category:
            return []
        
        return self.strategy.get_required_params(self.category)
    
    def provide_custom_logistics(self, custom_logistics: Dict[str, Any]) -> tuple[bool, List[str]]:
        """
        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
        
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ READY –µ—Å–ª–∏ –≤–∞–ª–∏–¥–Ω—ã.
        
        Args:
            custom_logistics: –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            tuple[bool, List[str]]: (is_valid, errors)
        """
        if not self.strategy or not self.category:
            return False, ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"]
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        is_valid, errors = self.strategy.validate_params(self.category, custom_logistics)
        
        if not is_valid:
            return False, errors
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.custom_logistics = custom_logistics
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ READY
        if self.state_machine.state == CalculationState.PENDING_PARAMS:
            self.state_machine.transition_to(CalculationState.READY)
        
        return True, []
    
    def can_calculate(self) -> tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á—ë—Ç.
        
        Returns:
            tuple[bool, str]: (can_calculate, reason)
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if self.state_machine.state != CalculationState.READY:
            return False, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state_machine.get_state_name()}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if not self.category:
            return False, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if not self.strategy:
            return False, "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not self.base_params:
            return False, "–ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –µ—Å–ª–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è
        if self.strategy.requires_user_input(self.category):
            if not self.custom_logistics:
                return False, "–¢—Ä–µ–±—É—é—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
        
        return True, "OK"
    
    def prepare_calculation_params(self) -> Dict[str, Any]:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ calculator.
        
        Returns:
            Dict: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–æ—Ç–æ–≤—ã–µ –¥–ª—è calculator.calculate_cost()
            
        Raises:
            ValueError: –ï—Å–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        can_calc, reason = self.can_calculate()
        if not can_calc:
            raise ValueError(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {reason}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        calc_params = self.strategy.prepare_calculation_params(
            self.category,
            self.base_params,
            self.custom_logistics if self.custom_logistics else None
        )
        
        return calc_params
    
    def mark_calculated(self, result: Dict[str, Any]):
        """
        –ü–æ–º–µ—á–∞–µ—Ç —Ä–∞—Å—á—ë—Ç –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞
        """
        self.result = result
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º cost_price –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        cost_price_rub = None
        if 'cost_price' in result:
            cost_price_total = result['cost_price'].get('total', {})
            cost_price_rub = cost_price_total.get('rub')
        
        self.state_machine.transition_to(
            CalculationState.CALCULATED,
            context={'cost_price_rub': cost_price_rub}
        )
    
    def mark_saved(self, calculation_id: int):
        """
        –ü–æ–º–µ—á–∞–µ—Ç —Ä–∞—Å—á—ë—Ç –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≤ –ë–î.
        
        Args:
            calculation_id: ID —Ä–∞—Å—á—ë—Ç–∞ –≤ –ë–î
        """
        self.state_machine.transition_to(
            CalculationState.SAVED,
            context={'calculation_id': calculation_id}
        )
    
    def mark_error(self, error_message: str):
        """
        –ü–æ–º–µ—á–∞–µ—Ç —Ä–∞—Å—á—ë—Ç –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π—Å—è —Å –æ—à–∏–±–∫–æ–π.
        
        Args:
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        self.state_machine.transition_to(
            CalculationState.ERROR,
            context={'error': error_message}
        )
    
    def reset(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        self.category = None
        self.strategy = None
        self.base_params = {}
        self.custom_logistics = {}
        self.result = None
        self.state_machine.reset()
    
    def get_current_state(self) -> CalculationState:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
        
        Returns:
            CalculationState: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        """
        return self.state_machine.state
    
    def get_state_name(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        
        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        """
        return self.state_machine.get_state_name()
    
    def to_dict(self) -> Dict[str, Any]:
        """
        –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å–ª–æ–≤–∞—Ä—å.
        
        Returns:
            Dict: –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        """
        return {
            'category': self.category.to_dict() if self.category else None,
            'state': self.state_machine.to_dict(),
            'strategy': self.strategy.get_strategy_name() if self.strategy else None,
            'base_params': self.base_params,
            'custom_logistics': self.custom_logistics,
            'needs_user_input': self.needs_user_input(),
            'required_params': self.get_required_params(),
            'can_calculate': self.can_calculate()[0],
            'has_result': self.result is not None
        }
    
    def __repr__(self):
        cat_name = self.category.name if self.category else 'None'
        state_name = self.state_machine.get_state_name()
        strategy_name = self.strategy.get_strategy_name() if self.strategy else 'None'
        return f"<CalculationContext category={cat_name} state={state_name} strategy={strategy_name}>"

