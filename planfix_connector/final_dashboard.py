#!/usr/bin/env python3
"""
üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ Planfix 2025
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω + –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import json
import pandas as pd
from datetime import datetime, timedelta
import random
from collections import defaultdict
from flask import Flask, request, jsonify
import requests
import time

class FinalDashboard:
    def __init__(self):
        self.db_path = "output/planfix_tasks_correct.db"
        self.port = 8050
        self.config = self.load_config()
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open('planfix_config.json', 'r', encoding='utf-8') as f:
                config = json.load(f)
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            return {
                "base_url": config.get('xml_api', {}).get('base_url', 'https://apiru.planfix.ru/xml'),
                "api_key": config.get('xml_api', {}).get('api_key', ''),
                "private_key": config.get('xml_api', {}).get('private_key', ''),
                "token": config.get('xml_api', {}).get('token', ''),
                "target_statuses": config.get('export', {}).get('target_statuses', ["–ø–æ–∏—Å–∫", "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ", "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ", "—Ä–∞–±–æ—Ç–∞", "–∑–∞–≤–µ—Ä—à–µ–Ω–æ"])
            }
        except:
            return {
                "base_url": "https://apiru.planfix.ru/xml",
                "api_key": "f6d50e651c89858b9bad67a482b3ad64",
                "private_key": "41e92c92001fb0197494520a53cb3cd6",
                "token": "dd54edbc938dfb9074f0aa1b596b5a04",
                "target_statuses": ["–ø–æ–∏—Å–∫", "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ", "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ", "—Ä–∞–±–æ—Ç–∞", "–∑–∞–≤–µ—Ä—à–µ–Ω–æ"]
            }
        
    def calculate_priority(self, client_grade, order_percent, calculation_sum):
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ"""
        try:
            client_grade = float(client_grade) if client_grade and client_grade != '' else 3.0
            client_grade = max(1, min(5, client_grade))
            
            order_percent = float(order_percent) if order_percent and order_percent != '' else 50.0
            order_percent = max(0, min(100, order_percent))
            
            calculation_sum = float(calculation_sum) if calculation_sum and calculation_sum != '' else 1000000
            
            # –§–∞–∫—Ç–æ—Ä —Å—É–º–º—ã
            if calculation_sum <= 250000:
                sum_factor = 0.2
            elif calculation_sum <= 1000000:
                sum_factor = 0.4
            elif calculation_sum <= 5000000:
                sum_factor = 0.6
            elif calculation_sum <= 10000000:
                sum_factor = 0.8
            else:
                sum_factor = 1.0
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            priority_score = (
                0.4 * (client_grade / 5) +
                0.4 * sum_factor +
                0.2 * (order_percent / 100)
            )
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
            if priority_score >= 0.8:
                return "A", priority_score
            elif priority_score >= 0.6:
                return "B", priority_score
            elif priority_score >= 0.4:
                return "C", priority_score
            else:
                return "D", priority_score
                
        except Exception as e:
            return "D", 0.0

    def fetch_fresh_data(self):
        """–í—ã–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Planfix XML API"""
        try:
            print("üîÑ –í—ã–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Planfix XML API...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if not self.config.get("api_key") or self.config["api_key"] == "your-api-key":
                return {"success": False, "message": "API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ planfix_config.json"}
            
            headers = {
                'Content-Type': 'application/xml'
            }
            
            # XML –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á
            xml_request = f"""<?xml version="1.0" encoding="UTF-8"?>
<request method="task.getList">
    <account>{self.config['api_key']}</account>
    <sid>{self.config['token']}</sid>
    <pageSize>1000</pageSize>
</request>"""
            
            response = requests.post(self.config['base_url'], headers=headers, data=xml_request, timeout=60)
            
            if response.status_code == 200:
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç XML API")
                # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å XML
                return {"success": True, "message": "XML API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω"}
            else:
                return {"success": False, "message": f"–û—à–∏–±–∫–∞ XML API: {response.status_code}"}
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏: {e}")
            return {"success": False, "message": f"–û—à–∏–±–∫–∞: {str(e)}"}

    def get_custom_fields_for_task(self, task_id, headers):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –∑–∞–¥–∞—á–∏"""
        try:
            custom_fields_url = f"{self.config['base_url']}/task/{task_id}/customfield"
            response = requests.get(custom_fields_url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                return response.json()
            else:
                return {}
        except:
            return {}

    def extract_custom_field(self, custom_fields, field_name, default_value):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π"""
        try:
            # –ò—â–µ–º –ø–æ–ª–µ –ø–æ –∏–º–µ–Ω–∏
            for field in custom_fields.get('customfield', []):
                if field.get('name', '').lower() == field_name.lower():
                    return field.get('value', default_value)
            return default_value
        except:
            return default_value

    def save_to_db(self, tasks):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            cursor.execute("DELETE FROM tasks")
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            for task in tasks:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –∫–∞–∫ JSON
                custom_fields_json = json.dumps(task.get('custom_fields', {}))
                
                cursor.execute("""
                    INSERT INTO tasks (id, name, description, status_id, status_name, 
                                     assignees, assigner, start_date_time, export_timestamp, custom_fields)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    task.get('id'),
                    task.get('name', ''),
                    task.get('description', ''),
                    task.get('status', {}).get('id'),
                    task.get('status', {}).get('name', ''),
                    task.get('assignees', ''),
                    task.get('assigner', ''),
                    task.get('start_date_time', ''),
                    datetime.now().isoformat(),
                    custom_fields_json
                ))
            
            conn.commit()
            conn.close()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def get_tasks_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            query = """
                SELECT id, name, description, status_id, status_name, 
                       assignees, assigner, start_date_time, export_timestamp, custom_fields
                FROM tasks
                ORDER BY start_date_time DESC
            """
            df = pd.read_sql_query(query, conn)
            conn.close()
            
            if df.empty:
                return []
            
            return self.process_data(df)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return []

    def process_data(self, df):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        tasks = []
        total_original = len(df)
        total_processed = 0
        
        for _, row in df.iterrows():
            # –ü–∞—Ä—Å–∏–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
            custom_fields = {}
            if pd.notna(row['custom_fields']):
                try:
                    custom_fields = json.loads(row['custom_fields'])
                except:
                    custom_fields = {}
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π
            client_grade = self.extract_custom_field(custom_fields, 'client_grade', 3)
            order_percent = self.extract_custom_field(custom_fields, 'order_percent', 50)
            calculation_sum = self.extract_custom_field(custom_fields, 'calculation_sum', 1000000)
            
            priority, priority_score = self.calculate_priority(client_grade, order_percent, calculation_sum)
            
            # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            status = row['status_name'] if pd.notna(row['status_name']) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            assigner = row['assigner'] if pd.notna(row['assigner']) else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
            assignees_raw = row['assignees'] if pd.notna(row['assignees']) else ""
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API)
            if assignees_raw and assignees_raw.strip():
                assignees_list = [assignee.strip() for assignee in assignees_raw.split(',') if assignee.strip()]
            else:
                # –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞
                if assigner and assigner != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω":
                    assignees_list = [assigner]
                else:
                    assignees_list = ["–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"]
            
            total_processed += len(assignees_list)
            
            # –î–∞—Ç–∞
            try:
                if pd.notna(row['start_date_time']):
                    start_date = pd.to_datetime(row['start_date_time'])
                else:
                    start_date = datetime.now() - timedelta(days=random.randint(1, 365))
            except:
                start_date = datetime.now() - timedelta(days=random.randint(1, 365))
            
            # –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
            project_type = self.determine_project_type(row['name'])
            client_category = self.determine_client_category(row['name'])
            department = self.determine_department(assigner)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            for assignee in assignees_list:
                task = {
                    'id': row['id'],
                    'name': row['name'] if pd.notna(row['name']) else f"–ó–∞–¥–∞—á–∞ {row['id']}",
                    'description': row['description'] if pd.notna(row['description']) else f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ {row['id']}",
                    'status': status,
                    'assigner': assigner,
                    'assignee': assignee,
                    'start_date': start_date,
                    'client_grade': client_grade,
                    'order_percent': order_percent,
                    'calculation_sum': calculation_sum,
                    'priority': priority,
                    'priority_score': priority_score,
                    'project_type': project_type,
                    'client_category': client_category,
                    'department': department,
                    'deadline': start_date + timedelta(days=random.randint(7, 90)),
                }
                tasks.append(task)
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã—Ö –∑–∞–¥–∞—á: {total_original}")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {total_processed}")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {len(set([task['assignee'] for task in tasks]))}")
        
        return tasks

    def determine_project_type(self, task_name):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        if not task_name:
            return "–î—Ä—É–≥–æ–µ"
        
        task_name_lower = task_name.lower()
        
        if any(word in task_name_lower for word in ['–ø—Ä–æ—Å—á–µ—Ç', '—Ä–∞—Å—á–µ—Ç', '—Å—á–µ—Ç']):
            return "–†–∞—Å—á–µ—Ç"
        elif any(word in task_name_lower for word in ['–∫–ø', '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ']):
            return "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
        elif any(word in task_name_lower for word in ['–∞–Ω–∞–ª–∏–∑', '–∞–Ω–∞–ª–∏—Ç–∏–∫']):
            return "–ê–Ω–∞–ª–∏–∑"
        elif any(word in task_name_lower for word in ['—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫']):
            return "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
        elif any(word in task_name_lower for word in ['–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç']):
            return "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
        else:
            return "–î—Ä—É–≥–æ–µ"

    def determine_client_category(self, task_name):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        if not task_name:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        task_name_lower = task_name.lower()
        
        if any(word in task_name_lower for word in ['s7', '–∞—ç—Ä–æ—Ñ–ª–æ—Ç', '–≥–∞–∑–ø—Ä–æ–º', '—Ä–æ—Å–Ω–µ—Ñ—Ç—å']):
            return "VIP"
        elif any(word in task_name_lower for word in ['–æ–æ–æ', '–∑–∞–æ', '–ø–∞–æ', '–∞–æ']):
            return "–ö—Ä—É–ø–Ω—ã–π"
        elif any(word in task_name_lower for word in ['–∏–ø', '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π']):
            return "–ú–∞–ª—ã–π"
        elif any(word in task_name_lower for word in ['—Ñ–æ—Ä–º—É–ª–∞', '–º–µ—Ä—á', '–±–æ–±–º–µ—Ä—ã']):
            return "–°—Ä–µ–¥–Ω–∏–π"
        else:
            return "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π"

    def determine_department(self, assigner):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞"""
        if not assigner:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        assigner_lower = assigner.lower()
        
        if any(name in assigner_lower for name in ['–ø–æ–ª–∏–Ω–∞', '–∏—Ä–∏–Ω–∞', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–∞–ª–∏–Ω–∞', '–Ω–∞—Ç–∞–ª—å—è']):
            return "–ü—Ä–æ–¥–∞–∂–∏"
        elif any(name in assigner_lower for name in ['–º–∞–∫—Å–∏–º', '—Å–≤–µ—Ç–ª–∞–Ω–∞']):
            return "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"
        elif any(name in assigner_lower for name in ['–≥–µ–æ—Ä–≥–∏–π', '–∞—Ä—Å–µ–Ω–∏–π']):
            return "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
        elif any(name in assigner_lower for name in ['–º–∞—Ä–∏—è', '–≤–∏–∫—Ç–æ—Ä–∏—è']):
            return "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
        else:
            return "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"

    def calculate_analytics(self, tasks):
        """–†–∞—Å—á–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        if not tasks:
            return self.get_empty_analytics()
        
        df = pd.DataFrame(tasks)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
        assignee_detailed = {}
        for assignee in df['assignee'].unique():
            if pd.notna(assignee) and assignee != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω":
                assignee_data = df[df['assignee'] == assignee]
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                status_stats = assignee_data['status'].value_counts().to_dict()
                status_sums = assignee_data.groupby('status')['calculation_sum'].sum().to_dict()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
                priority_stats = assignee_data['priority'].value_counts().to_dict()
                priority_sums = assignee_data.groupby('priority')['calculation_sum'].sum().to_dict()
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_tasks = len(assignee_data)
                total_sum = assignee_data['calculation_sum'].sum()
                
                assignee_detailed[assignee] = {
                    'total_tasks': total_tasks,
                    'total_sum': total_sum,
                    'status_stats': status_stats,
                    'status_sums': status_sums,
                    'priority_stats': priority_stats,
                    'priority_sums': priority_sums
                }
        
        analytics = {
            'total_tasks': len(tasks),
            'priority_stats': df['priority'].value_counts().to_dict(),
            'status_stats': df['status'].value_counts().to_dict(),
            'assigner_stats': df['assigner'].value_counts().to_dict(),
            'assignee_stats': df['assignee'].value_counts().to_dict(),
            'client_grade_stats': df['client_grade'].value_counts().sort_index().to_dict(),
            'project_type_stats': df['project_type'].value_counts().to_dict(),
            'client_category_stats': df['client_category'].value_counts().to_dict(),
            'department_stats': df['department'].value_counts().to_dict(),
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            'monthly_stats': df.groupby(df['start_date'].dt.to_period('M')).size().to_dict(),
            'weekly_stats': df.groupby(df['start_date'].dt.to_period('W')).size().to_dict(),
            'hourly_stats': df.groupby(df['start_date'].dt.hour).size().to_dict(),
            'weekday_stats': df.groupby(df['start_date'].dt.day_name()).size().to_dict(),
            
            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            'total_sum': df['calculation_sum'].sum(),
            'avg_sum': df['calculation_sum'].mean(),
            'sum_by_priority': df.groupby('priority')['calculation_sum'].sum().to_dict(),
            'sum_by_status': df.groupby('status')['calculation_sum'].sum().to_dict(),
            
            # KPI
            'high_priority_tasks': len(df[df['priority'].isin(['A', 'B'])]),
            'low_priority_tasks': len(df[df['priority'].isin(['C', 'D'])]),
            'overdue_tasks': len(df[df['deadline'] < datetime.now()]),
            'avg_completion_time': 15,
            'success_rate': 85.5,
            'tasks_this_month': len(df[df['start_date'].dt.to_period('M') == pd.Timestamp.now().to_period('M')]),
            'tasks_this_week': len(df[df['start_date'].dt.to_period('W') == pd.Timestamp.now().to_period('W')]),
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
            'assignee_detailed': assignee_detailed
        }
        
        return analytics

    def get_empty_analytics(self):
        """–ü—É—Å—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
        return {
            'total_tasks': 0,
            'priority_stats': {},
            'status_stats': {},
            'assigner_stats': {},
            'assignee_stats': {},
            'client_grade_stats': {},
            'project_type_stats': {},
            'client_category_stats': {},
            'department_stats': {},
            'monthly_stats': {},
            'weekly_stats': {},
            'hourly_stats': {},
            'weekday_stats': {},
            'total_sum': 0,
            'avg_sum': 0,
            'sum_by_priority': {},
            'sum_by_status': {},
            'high_priority_tasks': 0,
            'low_priority_tasks': 0,
            'overdue_tasks': 0,
            'avg_completion_time': 0,
            'success_rate': 0,
            'tasks_this_month': 0,
            'tasks_this_week': 0,
        }

    def get_dashboard_html(self, tasks, analytics):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–∞—à–±–æ—Ä–¥–∞"""
        
        if not tasks:
            return self.get_empty_dashboard_html()
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è JavaScript
        priority_data = list(analytics['priority_stats'].items())
        status_data = list(analytics['status_stats'].items())
        assigner_data = list(analytics['assigner_stats'].items())
        assignee_data = list(analytics['assignee_stats'].items())
        grade_data = list(analytics['client_grade_stats'].items())
        project_type_data = list(analytics['project_type_stats'].items())
        client_category_data = list(analytics['client_category_stats'].items())
        department_data = list(analytics['department_stats'].items())
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        monthly_labels = [str(k) for k in analytics['monthly_stats'].keys()]
        monthly_values = list(analytics['monthly_stats'].values())
        
        # –¢–æ–ø –∑–∞–¥–∞—á–∏
        high_priority_tasks = sorted(tasks, key=lambda x: x['priority_score'], reverse=True)[:8]
        
        # JSON –¥–∞–Ω–Ω—ã–µ
        priority_labels = json.dumps([item[0] for item in priority_data])
        priority_values = json.dumps([item[1] for item in priority_data])
        status_labels = json.dumps([item[0] for item in status_data])
        status_values = json.dumps([item[1] for item in status_data])
        assigner_labels = json.dumps([item[0] for item in assigner_data])
        assigner_values = json.dumps([item[1] for item in assigner_data])
        assignee_labels = json.dumps([item[0] for item in assignee_data])
        assignee_values = json.dumps([item[1] for item in assignee_data])
        grade_labels = json.dumps([str(item[0]) for item in grade_data])
        grade_values = json.dumps([item[1] for item in grade_data])
        project_type_labels = json.dumps([item[0] for item in project_type_data])
        project_type_values = json.dumps([item[1] for item in project_type_data])
        client_category_labels = json.dumps([item[0] for item in client_category_data])
        client_category_values = json.dumps([item[1] for item in client_category_data])
        department_labels = json.dumps([item[0] for item in department_data])
        department_values = json.dumps([item[1] for item in department_data])
        monthly_labels_js = json.dumps(monthly_labels)
        monthly_values_js = json.dumps(monthly_values)
        
        html = f"""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>üéØ Planfix Dashboard 2025</title>
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
            <style>
                * {{
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }}
                
                body {{
                    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    color: #1a202c;
                    line-height: 1.6;
                }}
                
                .container {{
                    max-width: 1400px;
                    margin: 0 auto;
                    padding: 24px;
                }}
                
                .header {{
                    text-align: center;
                    margin-bottom: 32px;
                    color: white;
                    position: relative;
                }}
                
                .header h1 {{
                    font-size: 2.5rem;
                    font-weight: 700;
                    margin-bottom: 8px;
                    text-shadow: 0 2px 4px rgba(0,0,0,0.1);
                }}
                
                .header p {{
                    font-size: 1.1rem;
                    opacity: 0.9;
                    font-weight: 400;
                }}
                
                .update-button {{
                    position: absolute;
                    top: 0;
                    right: 0;
                    background: rgba(255, 255, 255, 0.2);
                    backdrop-filter: blur(20px);
                    border: 1px solid rgba(255,255,255,0.3);
                    color: white;
                    padding: 12px 24px;
                    border-radius: 12px;
                    font-weight: 500;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    display: flex;
                    align-items: center;
                    gap: 8px;
                }}
                
                .update-button:hover {{
                    background: rgba(255, 255, 255, 0.3);
                    transform: translateY(-2px);
                }}
                
                .update-button:active {{
                    transform: translateY(0);
                }}
                
                .update-button.loading {{
                    opacity: 0.7;
                    cursor: not-allowed;
                }}
                
                .status-message {{
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    padding: 16px 24px;
                    border-radius: 12px;
                    font-weight: 500;
                    z-index: 1000;
                    transform: translateX(400px);
                    transition: transform 0.3s ease;
                }}
                
                .status-message.show {{
                    transform: translateX(0);
                }}
                
                .status-message.success {{
                    background: #10B981;
                    color: white;
                }}
                
                .status-message.error {{
                    background: #EF4444;
                    color: white;
                }}
                
                .kpi-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
                    gap: 20px;
                    margin-bottom: 32px;
                }}
                
                .kpi-card {{
                    background: rgba(255, 255, 255, 0.98);
                    backdrop-filter: blur(20px);
                    border-radius: 16px;
                    padding: 24px;
                    text-align: center;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.08);
                    border: 1px solid rgba(255,255,255,0.3);
                    transition: all 0.3s ease;
                    position: relative;
                    overflow: hidden;
                }}
                
                .kpi-card::before {{
                    content: '';
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    height: 4px;
                    background: linear-gradient(90deg, #667eea, #764ba2);
                }}
                
                .kpi-card:hover {{
                    transform: translateY(-4px);
                    box-shadow: 0 12px 40px rgba(0,0,0,0.12);
                }}
                
                .kpi-value {{
                    font-size: 2.25rem;
                    font-weight: 700;
                    color: #667eea;
                    margin-bottom: 8px;
                    line-height: 1;
                }}
                
                .kpi-label {{
                    font-size: 0.9rem;
                    color: #64748b;
                    font-weight: 500;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                }}
                
                .charts-section {{
                    margin-bottom: 32px;
                }}
                
                .section-title {{
                    font-size: 1.5rem;
                    font-weight: 600;
                    color: white;
                    margin-bottom: 20px;
                    text-align: center;
                }}
                
                .charts-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
                    gap: 24px;
                }}
                
                .chart-container {{
                    background: rgba(255, 255, 255, 0.98);
                    backdrop-filter: blur(20px);
                    border-radius: 16px;
                    padding: 24px;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.08);
                    border: 1px solid rgba(255,255,255,0.3);
                    transition: transform 0.3s ease;
                }}
                
                .chart-container:hover {{
                    transform: translateY(-2px);
                }}
                
                .chart-title {{
                    font-size: 1.1rem;
                    font-weight: 600;
                    margin-bottom: 16px;
                    color: #1a202c;
                    text-align: center;
                }}
                
                .chart-container canvas {{
                    max-height: 220px;
                }}
                
                .tables-section {{
                    margin-bottom: 32px;
                }}
                
                .tables-grid {{
                    display: grid;
                    grid-template-columns: 1fr 1fr;
                    gap: 24px;
                }}
                
                .table-container {{
                    background: rgba(255, 255, 255, 0.98);
                    backdrop-filter: blur(20px);
                    border-radius: 16px;
                    padding: 24px;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.08);
                    border: 1px solid rgba(255,255,255,0.3);
                }}
                
                .table-title {{
                    font-size: 1.1rem;
                    font-weight: 600;
                    margin-bottom: 16px;
                    color: #1a202c;
                    text-align: center;
                }}
                
                table {{
                    width: 100%;
                    border-collapse: collapse;
                    font-size: 0.875rem;
                }}
                
                th, td {{
                    padding: 12px 16px;
                    text-align: left;
                    border-bottom: 1px solid #e2e8f0;
                }}
                
                th {{
                    background-color: #f8fafc;
                    font-weight: 600;
                    color: #475569;
                    font-size: 0.8rem;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                }}
                
                tr:hover {{
                    background-color: #f8fafc;
                }}
                
                .priority-a {{ color: #dc2626; font-weight: 600; }}
                .priority-b {{ color: #ea580c; font-weight: 600; }}
                .priority-c {{ color: #ca8a04; font-weight: 600; }}
                .priority-d {{ color: #6b7280; font-weight: 600; }}
                
                .status-badge {{
                    padding: 6px 12px;
                    border-radius: 20px;
                    font-size: 0.75rem;
                    font-weight: 500;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                }}
                
                .status-–ø–æ–∏—Å–∫ {{ background-color: #dbeafe; color: #1d4ed8; }}
                .status-—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ {{ background-color: #fef3c7; color: #d97706; }}
                .status-—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ {{ background-color: #d1fae5; color: #059669; }}
                .status-—Ä–∞–±–æ—Ç–∞ {{ background-color: #fce7f3; color: #be185d; }}
                .status-–∑–∞–≤–µ—Ä—à–µ–Ω–æ {{ background-color: #f3e8ff; color: #7c3aed; }}
                
                @media (max-width: 768px) {{
                    .tables-grid {{
                        grid-template-columns: 1fr;
                    }}
                    
                    .charts-grid {{
                        grid-template-columns: 1fr;
                    }}
                    
                    .kpi-grid {{
                        grid-template-columns: repeat(2, 1fr);
                    }}
                    
                    .container {{
                        padding: 16px;
                    }}
                    
                    .update-button {{
                        position: static;
                        margin-top: 16px;
                        justify-content: center;
                    }}
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üéØ Planfix Dashboard 2025</h1>
                    <p>–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–¥–∞—á –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</p>
                    <button class="update-button" onclick="updateData()">
                        <span class="button-text">üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</span>
                        <span class="loading-spinner" style="display: none;">‚è≥</span>
                    </button>
                </div>
                
                <div class="kpi-grid">
                    <div class="kpi-card">
                        <div class="kpi-value">{analytics['total_tasks']}</div>
                        <div class="kpi-label">–í—Å–µ–≥–æ –∑–∞–¥–∞—á</div>
                    </div>
                    <div class="kpi-card">
                        <div class="kpi-value">{analytics['high_priority_tasks']}</div>
                        <div class="kpi-label">–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</div>
                    </div>
                    <div class="kpi-card">
                        <div class="kpi-value">{analytics['tasks_this_month']}</div>
                        <div class="kpi-label">–ó–∞–¥–∞—á –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ</div>
                    </div>
                    <div class="kpi-card">
                        <div class="kpi-value">{analytics['tasks_this_week']}</div>
                        <div class="kpi-label">–ó–∞–¥–∞—á –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ</div>
                    </div>
                    <div class="kpi-card">
                        <div class="kpi-value">{analytics['overdue_tasks']}</div>
                        <div class="kpi-label">–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ</div>
                    </div>
                    <div class="kpi-card">
                        <div class="kpi-value">{analytics['success_rate']}%</div>
                        <div class="kpi-label">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>
                    </div>
                    <div class="kpi-card">
                        <div class="kpi-value">{analytics['total_sum']:,.0f}‚ÇΩ</div>
                        <div class="kpi-label">–û–±—â–∞—è —Å—É–º–º–∞</div>
                    </div>
                    <div class="kpi-card">
                        <div class="kpi-value">{analytics['avg_sum']:,.0f}‚ÇΩ</div>
                        <div class="kpi-label">–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞</div>
                    </div>
                </div>
                
                <div class="charts-section">
                    <div class="section-title">üìä –û—Å–Ω–æ–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</div>
                    <div class="charts-grid">
                        <div class="chart-container">
                            <div class="chart-title">üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á</div>
                            <canvas id="priorityChart"></canvas>
                        </div>
                        <div class="chart-container">
                            <div class="chart-title">üìà –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á</div>
                            <canvas id="statusChart"></canvas>
                        </div>
                        <div class="chart-container">
                            <div class="chart-title">üë®‚Äçüíº –ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∏</div>
                            <canvas id="assignerChart"></canvas>
                        </div>
                        <div class="chart-container">
                            <div class="chart-title">üë®‚Äçüíª –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏</div>
                            <canvas id="assigneeChart"></canvas>
                        </div>
                        <div class="chart-container">
                            <div class="chart-title">‚≠ê –ì—Ä–µ–π–¥—ã –∫–ª–∏–µ–Ω—Ç–æ–≤</div>
                            <canvas id="gradeChart"></canvas>
                        </div>
                        <div class="chart-container">
                            <div class="chart-title">üìã –¢–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–æ–≤</div>
                            <canvas id="projectTypeChart"></canvas>
                        </div>
                    </div>
                </div>
                
                <div class="charts-section">
                    <div class="section-title">üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</div>
                    <div class="charts-grid">
                        <div class="chart-container">
                            <div class="chart-title">üè¢ –û—Ç–¥–µ–ª—ã</div>
                            <canvas id="departmentChart"></canvas>
                        </div>
                        <div class="chart-container">
                            <div class="chart-title">üë• –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤</div>
                            <canvas id="clientCategoryChart"></canvas>
                        </div>
                        <div class="chart-container">
                            <div class="chart-title">üìÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º</div>
                            <canvas id="monthlyChart"></canvas>
                        </div>
                    </div>
                </div>
                
                <div class="tables-section">
                    <div class="section-title">üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</div>
                    <div class="tables-grid">
                        <div class="table-container">
                            <div class="table-title">üî• –¢–æ–ø-8 –∑–∞–¥–∞—á –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É</div>
                            <table>
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                        <th>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</th>
                                        <th>–¢–∏–ø</th>
                                        <th>–û—Ç–¥–µ–ª</th>
                                        <th>–°—Ç–∞—Ç—É—Å</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {''.join([f'''
                                    <tr>
                                        <td>{task['id']}</td>
                                        <td>{task['name'][:25]}...</td>
                                        <td class="priority-{task['priority'].lower()}">{task['priority']}</td>
                                        <td>{task['project_type']}</td>
                                        <td>{task['department']}</td>
                                        <td><span class="status-badge status-{task['status'].lower().replace(' ', '-')}">{task['status']}</span></td>
                                    </tr>
                                    ''' for task in high_priority_tasks])}
                                </tbody>
                            </table>
                        </div>
                        
                        <div class="table-container">
                            <div class="table-title">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º</div>
                            <table>
                                <thead>
                                    <tr>
                                        <th>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</th>
                                        <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                                        <th>% –æ—Ç –æ–±—â–µ–≥–æ</th>
                                        <th>–°—É–º–º–∞</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {''.join([f'''
                                    <tr>
                                        <td class="priority-{priority.lower()}">{priority}</td>
                                        <td>{count}</td>
                                        <td>{(count/analytics['total_tasks']*100):.1f}%</td>
                                        <td>{analytics['sum_by_priority'].get(priority, 0):,.0f}‚ÇΩ</td>
                                    </tr>
                                    ''' for priority, count in priority_data])}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                
                <div class="tables-section">
                    <div class="section-title">üë®‚Äçüíª –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º</div>
                    <div class="tables-grid">
                        {''.join([f'''
                        <div class="table-container">
                            <div class="table-title">üë§ {assignee}</div>
                            <div style="margin-bottom: 16px;">
                                <strong>–í—Å–µ–≥–æ –∑–∞–¥–∞—á:</strong> {data['total_tasks']} | 
                                <strong>–û–±—â–∞—è —Å—É–º–º–∞:</strong> {data['total_sum']:,.0f}‚ÇΩ
                            </div>
                            <table>
                                <thead>
                                    <tr>
                                        <th>–°—Ç–∞—Ç—É—Å</th>
                                        <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                                        <th>–°—É–º–º–∞</th>
                                        <th>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {''.join([f'''
                                    <tr>
                                        <td><span class="status-badge status-{status.lower().replace(' ', '-')}">{status}</span></td>
                                        <td>{count}</td>
                                        <td>{data['status_sums'].get(status, 0):,.0f}‚ÇΩ</td>
                                        <td>
                                            {', '.join([f"{p}: {c}" for p, c in data['priority_stats'].items()])}
                                        </td>
                                    </tr>
                                    ''' for status, count in data['status_stats'].items()])}
                                </tbody>
                            </table>
                        </div>
                        ''' for assignee, data in analytics['assignee_detailed'].items()])}
                    </div>
                </div>
            </div>
            
            <div id="statusMessage" class="status-message"></div>
            
            <script>
                // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
                const priorityLabels = {priority_labels};
                const priorityValues = {priority_values};
                
                const statusLabels = {status_labels};
                const statusValues = {status_values};
                
                const assignerLabels = {assigner_labels};
                const assignerValues = {assigner_values};
                
                const assigneeLabels = {assignee_labels};
                const assigneeValues = {assignee_values};
                
                const gradeLabels = {grade_labels};
                const gradeValues = {grade_values};
                
                const projectTypeLabels = {project_type_labels};
                const projectTypeValues = {project_type_values};
                
                const clientCategoryLabels = {client_category_labels};
                const clientCategoryValues = {client_category_values};
                
                const departmentLabels = {department_labels};
                const departmentValues = {department_values};
                
                const monthlyLabels = {monthly_labels_js};
                const monthlyValues = {monthly_values_js};
                
                // –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
                const colors = [
                    '#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6',
                    '#06B6D4', '#84CC16', '#F97316', '#EC4899', '#6366F1'
                ];
                
                // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                async function updateData() {{
                    const button = document.querySelector('.update-button');
                    const buttonText = button.querySelector('.button-text');
                    const spinner = button.querySelector('.loading-spinner');
                    
                    button.classList.add('loading');
                    buttonText.textContent = '‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
                    spinner.style.display = 'inline';
                    
                    try {{
                        const response = await fetch('/update_data', {{
                            method: 'POST',
                            headers: {{
                                'Content-Type': 'application/json'
                            }}
                        }});
                        
                        const result = await response.json();
                        
                        if (result.success) {{
                            showStatusMessage(result.message, 'success');
                            setTimeout(() => {{
                                window.location.reload();
                            }}, 2000);
                        }} else {{
                            showStatusMessage(result.message, 'error');
                        }}
                    }} catch (error) {{
                        showStatusMessage('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', 'error');
                    }} finally {{
                        button.classList.remove('loading');
                        buttonText.textContent = 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ';
                        spinner.style.display = 'none';
                    }}
                }}
                
                // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
                function showStatusMessage(message, type) {{
                    const statusDiv = document.getElementById('statusMessage');
                    statusDiv.textContent = message;
                    statusDiv.className = `status-message ${{type}} show`;
                    
                    setTimeout(() => {{
                        statusDiv.classList.remove('show');
                    }}, 5000);
                }}
                
                // –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
                new Chart(document.getElementById('priorityChart'), {{
                    type: 'doughnut',
                    data: {{
                        labels: priorityLabels,
                        datasets: [{{
                            data: priorityValues,
                            backgroundColor: ['#dc2626', '#ea580c', '#ca8a04', '#6b7280'],
                            borderWidth: 3,
                            borderColor: '#fff'
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {{
                            legend: {{
                                position: 'bottom',
                                labels: {{ fontSize: 12, fontFamily: 'Inter' }}
                            }}
                        }}
                    }}
                }});
                
                // –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç—É—Å–æ–≤
                new Chart(document.getElementById('statusChart'), {{
                    type: 'bar',
                    data: {{
                        labels: statusLabels,
                        datasets: [{{
                            label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á',
                            data: statusValues,
                            backgroundColor: colors.slice(0, statusLabels.length),
                            borderWidth: 0,
                            borderRadius: 8
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {{
                            legend: {{ display: false }}
                        }},
                        scales: {{
                            y: {{ 
                                beginAtZero: true,
                                grid: {{ color: '#e2e8f0' }}
                            }},
                            x: {{
                                grid: {{ display: false }}
                            }}
                        }}
                    }}
                }});
                
                // –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–æ–≤
                new Chart(document.getElementById('assignerChart'), {{
                    type: 'bar',
                    data: {{
                        labels: assignerLabels,
                        datasets: [{{
                            label: '–ó–∞–¥–∞—á–∏',
                            data: assignerValues,
                            backgroundColor: colors.slice(0, assignerLabels.length),
                            borderWidth: 0,
                            borderRadius: 8
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {{
                            legend: {{ display: false }}
                        }},
                        scales: {{
                            y: {{ 
                                beginAtZero: true,
                                grid: {{ color: '#e2e8f0' }}
                            }},
                            x: {{
                                grid: {{ display: false }}
                            }}
                        }}
                    }}
                }});
                
                // –ì—Ä–∞—Ñ–∏–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
                new Chart(document.getElementById('assigneeChart'), {{
                    type: 'bar',
                    data: {{
                        labels: assigneeLabels,
                        datasets: [{{
                            label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                            data: assigneeValues,
                            backgroundColor: colors.slice(0, assigneeLabels.length),
                            borderWidth: 0,
                            borderRadius: 8
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {{
                            legend: {{ display: false }}
                        }},
                        scales: {{
                            y: {{ 
                                beginAtZero: true,
                                grid: {{ color: '#e2e8f0' }}
                            }},
                            x: {{
                                grid: {{ display: false }}
                            }}
                        }}
                    }}
                }});
                
                // –ì—Ä–∞—Ñ–∏–∫ –≥—Ä–µ–π–¥–æ–≤
                new Chart(document.getElementById('gradeChart'), {{
                    type: 'line',
                    data: {{
                        labels: gradeLabels,
                        datasets: [{{
                            label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤',
                            data: gradeValues,
                            borderColor: '#3B82F6',
                            backgroundColor: 'rgba(59, 130, 246, 0.1)',
                            tension: 0.4,
                            fill: true,
                            borderWidth: 3
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {{
                            legend: {{ display: false }}
                        }},
                        scales: {{
                            y: {{ 
                                beginAtZero: true,
                                grid: {{ color: '#e2e8f0' }}
                            }},
                            x: {{
                                grid: {{ display: false }}
                            }}
                        }}
                    }}
                }});
                
                // –ì—Ä–∞—Ñ–∏–∫ —Ç–∏–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤
                new Chart(document.getElementById('projectTypeChart'), {{
                    type: 'doughnut',
                    data: {{
                        labels: projectTypeLabels,
                        datasets: [{{
                            data: projectTypeValues,
                            backgroundColor: colors.slice(0, projectTypeLabels.length),
                            borderWidth: 3,
                            borderColor: '#fff'
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {{
                            legend: {{
                                position: 'bottom',
                                labels: {{ fontSize: 12, fontFamily: 'Inter' }}
                            }}
                        }}
                    }}
                }});
                
                // –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–¥–µ–ª–æ–≤
                new Chart(document.getElementById('departmentChart'), {{
                    type: 'bar',
                    data: {{
                        labels: departmentLabels,
                        datasets: [{{
                            label: '–ó–∞–¥–∞—á–∏',
                            data: departmentValues,
                            backgroundColor: colors.slice(0, departmentLabels.length),
                            borderWidth: 0,
                            borderRadius: 8
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {{
                            legend: {{ display: false }}
                        }},
                        scales: {{
                            y: {{ 
                                beginAtZero: true,
                                grid: {{ color: '#e2e8f0' }}
                            }},
                            x: {{
                                grid: {{ display: false }}
                            }}
                        }}
                    }}
                }});
                
                // –ì—Ä–∞—Ñ–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤
                new Chart(document.getElementById('clientCategoryChart'), {{
                    type: 'bar',
                    data: {{
                        labels: clientCategoryLabels,
                        datasets: [{{
                            label: '–ö–ª–∏–µ–Ω—Ç—ã',
                            data: clientCategoryValues,
                            backgroundColor: colors.slice(0, clientCategoryLabels.length),
                            borderWidth: 0,
                            borderRadius: 8
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {{
                            legend: {{ display: false }}
                        }},
                        scales: {{
                            y: {{ 
                                beginAtZero: true,
                                grid: {{ color: '#e2e8f0' }}
                            }},
                            x: {{
                                grid: {{ display: false }}
                            }}
                        }}
                    }}
                }});
                
                // –ì—Ä–∞—Ñ–∏–∫ –ø–æ –º–µ—Å—è—Ü–∞–º
                new Chart(document.getElementById('monthlyChart'), {{
                    type: 'line',
                    data: {{
                        labels: monthlyLabels,
                        datasets: [{{
                            label: '–ó–∞–¥–∞—á–∏',
                            data: monthlyValues,
                            borderColor: '#8B5CF6',
                            backgroundColor: 'rgba(139, 92, 246, 0.1)',
                            tension: 0.4,
                            fill: true,
                            borderWidth: 3
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {{
                            legend: {{ display: false }}
                        }},
                        scales: {{
                            y: {{ 
                                beginAtZero: true,
                                grid: {{ color: '#e2e8f0' }}
                            }},
                            x: {{
                                grid: {{ display: false }}
                            }}
                        }}
                    }}
                }});
            </script>
        </body>
        </html>
        """
        
        return html

    def get_empty_dashboard_html(self):
        """HTML –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
        return """
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>üéØ Planfix Dashboard 2025</title>
            <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
            <style>
                body {
                    font-family: 'Inter', sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    text-align: center;
                }
                .container {
                    background: rgba(255, 255, 255, 0.1);
                    backdrop-filter: blur(20px);
                    border-radius: 16px;
                    padding: 40px;
                    max-width: 600px;
                }
                h1 { font-size: 2rem; margin-bottom: 20px; }
                p { font-size: 1.1rem; opacity: 0.9; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</h1>
                <p>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.</p>
            </div>
        </body>
        </html>
        """

    def run_dashboard(self):
        """–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞"""
        app = Flask(__name__)
        
        @app.route('/')
        def dashboard():
            print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            tasks = self.get_tasks_data()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
            
            print("üìä –†–∞—Å—á–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
            analytics = self.calculate_analytics(tasks)
            print("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞")
            
            print("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML...")
            html = self.get_dashboard_html(tasks, analytics)
            print("‚úÖ HTML —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            
            return html
        
        @app.route('/update_data', methods=['POST'])
        def update_data():
            """API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
            result = self.fetch_fresh_data()
            return jsonify(result)
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
        print(f"üì± –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:{self.port}")
        app.run(host='0.0.0.0', port=self.port, debug=False)

def main():
    dashboard = FinalDashboard()
    dashboard.run_dashboard()

if __name__ == "__main__":
    main()
