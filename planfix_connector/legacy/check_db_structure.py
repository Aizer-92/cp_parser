#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Planfix Connector
"""

import sqlite3
import os

def analyze_database():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    db_path = 'output/planfix_tasks_correct.db'
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        print(f"üìÅ –§–∞–π–ª: {db_path}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(db_path)
        print(f"üìè –†–∞–∑–º–µ—Ä: {file_size / (1024*1024):.2f} MB")
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        print(f"\nüóÑÔ∏è –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã ({len(tables)}):")
        for table in tables:
            table_name = table[0]
            print(f"  üìã {table_name}")
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
            try:
                cursor.execute(f"PRAGMA table_info({table_name})")
                columns = cursor.fetchall()
                print(f"    –°—Ç—Ä—É–∫—Ç—É—Ä–∞:")
                for col in columns:
                    col_id, col_name, col_type, not_null, default_val, pk = col
                    pk_mark = " üîë" if pk else ""
                    print(f"      - {col_name}: {col_type}{pk_mark}")
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                count = cursor.fetchone()[0]
                print(f"    üìä –ó–∞–ø–∏—Å–µ–π: {count}")
                
                # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏)
                if count > 0:
                    cursor.execute(f"SELECT * FROM {table_name} LIMIT 3")
                    sample_data = cursor.fetchall()
                    print(f"    üìù –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
                    for i, row in enumerate(sample_data, 1):
                        print(f"      {i}. {row[:3]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–æ–ª—è
                
                print()
                
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã tasks
        print("üéØ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã tasks:")
        try:
            # –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á
            cursor.execute("SELECT status_id, COUNT(*) FROM tasks GROUP BY status_id ORDER BY COUNT(*) DESC")
            statuses = cursor.fetchall()
            print(f"  üìä –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á:")
            for status_id, count in statuses:
                print(f"    - –°—Ç–∞—Ç—É—Å {status_id}: {count} –∑–∞–¥–∞—á")
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á
            cursor.execute("SELECT priority, COUNT(*) FROM tasks GROUP BY priority ORDER BY COUNT(*) DESC")
            priorities = cursor.fetchall()
            print(f"  ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á:")
            for priority, count in priorities:
                print(f"    - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority}: {count} –∑–∞–¥–∞—á")
            
            # –ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∏ –∑–∞–¥–∞—á
            cursor.execute("SELECT owner_id, COUNT(*) FROM tasks GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 5")
            owners = cursor.fetchall()
            print(f"  üë§ –¢–æ–ø –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–æ–≤:")
            for owner_id, count in owners:
                print(f"    - ID {owner_id}: {count} –∑–∞–¥–∞—á")
            
            # –ü—Ä–æ–µ–∫—Ç—ã –∑–∞–¥–∞—á
            cursor.execute("SELECT project_id, COUNT(*) FROM tasks GROUP BY project_id ORDER BY COUNT(*) DESC LIMIT 5")
            projects = cursor.fetchall()
            print(f"  üèóÔ∏è –¢–æ–ø –ø—Ä–æ–µ–∫—Ç–æ–≤:")
            for project_id, count in projects:
                print(f"    - ID {project_id}: {count} –∑–∞–¥–∞—á")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ tasks: {e}")
        
        # –ê–Ω–∞–ª–∏–∑ custom_field_values
        print("\nüéØ –ê–Ω–∞–ª–∏–∑ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π:")
        try:
            cursor.execute("SELECT * FROM custom_field_values LIMIT 5")
            cf_values = cursor.fetchall()
            if cf_values:
                print(f"  üìä –ù–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π: {len(cf_values)}")
                for i, row in enumerate(cf_values, 1):
                    print(f"    {i}. {row}")
            else:
                print("  ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ custom_field_values –ø—É—Å—Ç–∞")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π: {e}")
        
        conn.close()
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    analyze_database()
