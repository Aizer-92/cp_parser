#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã Planfix
"""

import sqlite3
import pandas as pd
from datetime import datetime
import json

def analyze_real_data():
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
    db_path = "output/planfix_tasks_correct.db"
    
    try:
        conn = sqlite3.connect(db_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor = conn.cursor()
        cursor.execute("PRAGMA table_info(tasks)")
        columns = cursor.fetchall()
        print("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã tasks:")
        for col in columns:
            print(f"   {col[1]} ({col[2]})")
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute("SELECT COUNT(*) FROM tasks")
        total_tasks = cursor.fetchone()[0]
        print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: {total_tasks}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        cursor.execute("SELECT status_name, COUNT(*) FROM tasks GROUP BY status_name ORDER BY COUNT(*) DESC")
        status_stats = cursor.fetchall()
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        for status, count in status_stats:
            percentage = (count / total_tasks) * 100
            print(f"   {status}: {count} ({percentage:.1f}%)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞–º
        cursor.execute("SELECT assigner, COUNT(*) FROM tasks WHERE assigner IS NOT NULL GROUP BY assigner ORDER BY COUNT(*) DESC LIMIT 10")
        assigner_stats = cursor.fetchall()
        print("\nüë®‚Äçüíº –¢–æ–ø-10 –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–æ–≤:")
        for assigner, count in assigner_stats:
            percentage = (count / total_tasks) * 100
            print(f"   {assigner}: {count} ({percentage:.1f}%)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
        cursor.execute("SELECT assignees, COUNT(*) FROM tasks WHERE assignees IS NOT NULL GROUP BY assignees ORDER BY COUNT(*) DESC LIMIT 10")
        assignee_stats = cursor.fetchall()
        print("\nüë®‚Äçüíª –¢–æ–ø-10 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:")
        for assignee, count in assignee_stats:
            percentage = (count / total_tasks) * 100
            print(f"   {assignee}: {count} ({percentage:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç
        cursor.execute("SELECT start_date_time FROM tasks WHERE start_date_time IS NOT NULL ORDER BY start_date_time")
        dates = cursor.fetchall()
        
        if dates:
            print(f"\nüìÖ –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç:")
            print(f"   –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞: {dates[0][0]}")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞: {dates[-1][0]}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ datetime –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            date_objects = []
            for date_str in [d[0] for d in dates]:
                try:
                    date_obj = pd.to_datetime(date_str)
                    date_objects.append(date_obj)
                except:
                    continue
            
            if date_objects:
                df_dates = pd.DataFrame(date_objects, columns=['date'])
                print(f"   –í—Å–µ–≥–æ –¥–∞—Ç: {len(df_dates)}")
                print(f"   –ü–µ—Ä–∏–æ–¥: {df_dates['date'].min()} - {df_dates['date'].max()}")
                
                # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º
                monthly_stats = df_dates.groupby(df_dates['date'].dt.to_period('M')).size()
                print(f"\nüìä –ó–∞–¥–∞—á–∏ –ø–æ –º–µ—Å—è—Ü–∞–º:")
                for month, count in monthly_stats.items():
                    print(f"   {month}: {count}")
        
        # –ê–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π
        cursor.execute("SELECT LENGTH(description) as desc_length FROM tasks WHERE description IS NOT NULL")
        desc_lengths = cursor.fetchall()
        if desc_lengths:
            lengths = [l[0] for l in desc_lengths]
            print(f"\nüìù –ê–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π:")
            print(f"   –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {sum(lengths)/len(lengths):.1f} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {min(lengths)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {max(lengths)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á
        cursor.execute("SELECT id, name, status_name, assigner, assignees, start_date_time FROM tasks ORDER BY start_date_time DESC LIMIT 5")
        recent_tasks = cursor.fetchall()
        print(f"\nüÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–¥–∞—á:")
        for task in recent_tasks:
            print(f"   ID: {task[0]}, –ù–∞–∑–≤–∞–Ω–∏–µ: {task[1][:50]}..., –°—Ç–∞—Ç—É—Å: {task[2]}, –ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫: {task[3]}, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task[4]}, –î–∞—Ç–∞: {task[5]}")
        
        conn.close()
        
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        print(f"   - –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
        print(f"   - –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ–±–æ–≥–∞—â–µ–Ω—ã –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–ª—è–º–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    analyze_real_data()
