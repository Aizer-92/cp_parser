import requests
import json
import xml.etree.ElementTree as ET

def check_xml_api():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç XML API –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø–æ–ª—è–º"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open('planfix_config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º XML API:")
        print(f"  Base URL: {config['xml_api']['base_url']}")
        print(f"  API Key: {config['xml_api']['api_key'][:10]}...")
        
        # –°–æ–∑–¥–∞–µ–º XML –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á
        xml_request = f"""<?xml version="1.0" encoding="UTF-8"?>
<request method="task.getList">
    <api_key>{config['xml_api']['api_key']}</api_key>
    <token>{config['xml_api']['token']}</token>
    <pageSize>2</pageSize>
    <filters>
        <filter>
            <type>10</type>
            <operator>equal</operator>
            <value>127</value>
        </filter>
    </filters>
</request>"""
        
        print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º XML –∑–∞–ø—Ä–æ—Å:")
        print(xml_request)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            config['xml_api']['base_url'],
            data=xml_request.encode('utf-8'),
            headers={'Content-Type': 'application/xml'},
            timeout=30
        )
        
        print(f"\nüì• –û—Ç–≤–µ—Ç XML API:")
        print(f"  –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"  –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(response.headers)}")
        
        if response.status_code == 200:
            try:
                # –ü–∞—Ä—Å–∏–º XML –æ—Ç–≤–µ—Ç
                root = ET.fromstring(response.text)
                print(f"  ‚úÖ XML —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
                print(f"  –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç: {root.tag}")
                
                # –ò—â–µ–º –∑–∞–¥–∞—á–∏
                tasks = root.findall('.//task')
                print(f"  üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
                
                if tasks:
                    task = tasks[0]
                    print(f"\n  üîç –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞:")
                    print(f"    ID: {task.find('id').text if task.find('id') is not None else '–ù/–î'}")
                    print(f"    –ù–∞–∑–≤–∞–Ω–∏–µ: {task.find('name').text if task.find('name') is not None else '–ù/–î'}")
                    
                    # –ò—â–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
                    custom_fields = task.findall('.//customField')
                    if custom_fields:
                        print(f"    ‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è: {len(custom_fields)}")
                        for cf in custom_fields[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                            name = cf.find('name').text if cf.find('name') is not None else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
                            value = cf.find('value').text if cf.find('value') is not None else '–ù/–î'
                            print(f"      {name}: {value}")
                    else:
                        print(f"    ‚ùå –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        
            except ET.ParseError as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
                print(f"  –û—Ç–≤–µ—Ç: {response.text[:500]}...")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ API: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    check_xml_api()

