#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á Planfix
–†–∞–±–æ—Ç–∞–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import json
import os
import pandas as pd
from datetime import datetime, timedelta
from collections import defaultdict

class SimpleDateAnalyzer:
    def __init__(self):
        self.db_path = 'output/planfix_tasks_correct.db'
        self.output_dir = 'output'
        
    def get_tasks_from_db(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å –¥–∞—Ç–∞–º–∏
            cursor.execute('''
                SELECT id, name, status_name, assigner, assignees, 
                       start_date_time, export_timestamp
                FROM tasks 
                WHERE start_date_time IS NOT NULL
                ORDER BY start_date_time DESC
            ''')
            
            tasks = cursor.fetchall()
            conn.close()
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á —Å –¥–∞—Ç–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return tasks
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
            return []
    
    def analyze_creation_dates(self, tasks):
        """–ê–Ω–∞–ª–∏–∑ –¥–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á"""
        print("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á...")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        processed_tasks = []
        for task in tasks:
            task_id, name, status, assigner, assignees, start_date, export_timestamp = task
            
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º start_date_time –∫–∞–∫ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è)
                if start_date:
                    create_date_parsed = datetime.fromisoformat(start_date.replace('Z', '+00:00'))
                    create_date_only = create_date_parsed.date()
                else:
                    create_date_parsed = None
                    create_date_only = None
                
                processed_tasks.append({
                    'id': task_id,
                    'name': name,
                    'status': status,
                    'assigner': assigner,
                    'assignees': assignees,
                    'create_date_parsed': create_date_parsed,
                    'create_date_only': create_date_only,
                    'export_timestamp': export_timestamp
                })
            except Exception as e:
                print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")
                continue
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
        valid_tasks = [t for t in processed_tasks if t['create_date_parsed'] is not None]
        print(f"‚úÖ –ó–∞–¥–∞—á —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è: {len(valid_tasks)}")
        
        if not valid_tasks:
            print("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è")
            return None
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º
        daily_stats = defaultdict(int)
        for task in valid_tasks:
            date_key = task['create_date_only']
            daily_stats[date_key] += 1
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–µ–¥–µ–ª—è–º
        weekly_stats = defaultdict(int)
        for task in valid_tasks:
            week_start = task['create_date_parsed'] - timedelta(days=task['create_date_parsed'].weekday())
            week_key = week_start.date()
            weekly_stats[week_key] += 1
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_stats = defaultdict(int)
        for task in valid_tasks:
            month_key = task['create_date_parsed'].replace(day=1).date()
            monthly_stats[month_key] += 1
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å–∞–º –¥–Ω—è
        hourly_stats = defaultdict(int)
        for task in valid_tasks:
            hour = task['create_date_parsed'].hour
            hourly_stats[hour] += 1
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        weekday_stats = defaultdict(int)
        for task in valid_tasks:
            weekday = task['create_date_parsed'].weekday()
            weekday_stats[weekday] += 1
        
        return {
            'daily_stats': dict(daily_stats),
            'weekly_stats': dict(weekly_stats),
            'monthly_stats': dict(monthly_stats),
            'hourly_stats': dict(hourly_stats),
            'weekday_stats': dict(weekday_stats),
            'valid_tasks': valid_tasks
        }
    
    def create_date_analysis_report(self, analysis_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞—Ç"""
        print("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞—Ç...")
        
        valid_tasks = analysis_data['valid_tasks']
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        df = pd.DataFrame(valid_tasks)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        df = df.sort_values('create_date_parsed')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_tasks = len(valid_tasks)
        date_range = df['create_date_parsed'].max() - df['create_date_parsed'].min()
        avg_tasks_per_day = total_tasks / max(date_range.days, 1)
        
        # –¢–æ–ø –¥–Ω–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞—á
        daily_df = pd.DataFrame(list(analysis_data['daily_stats'].items()), 
                              columns=['date', 'count'])
        daily_df = daily_df.sort_values('count', ascending=False)
        
        # –¢–æ–ø –Ω–µ–¥–µ–ª—å
        weekly_df = pd.DataFrame(list(analysis_data['weekly_stats'].items()), 
                               columns=['week_start', 'count'])
        weekly_df = weekly_df.sort_values('count', ascending=False)
        
        # –¢–æ–ø –º–µ—Å—è—Ü–µ–≤
        monthly_df = pd.DataFrame(list(analysis_data['monthly_stats'].items()), 
                                columns=['month_start', 'count'])
        monthly_df = monthly_df.sort_values('count', ascending=False)
        
        # –°–æ–∑–¥–∞–µ–º HTML –æ—Ç—á–µ—Ç
        html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üìÖ –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á Planfix</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
        }}
        .container {{
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }}
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 40px;
            text-align: center;
        }}
        .header h1 {{
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }}
        .header p {{
            margin: 10px 0 0 0;
            font-size: 1.2em;
            opacity: 0.9;
        }}
        .content {{
            padding: 40px;
        }}
        .stats-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }}
        .stat-card {{
            background: #f8f9fa;
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            border-left: 5px solid #667eea;
        }}
        .stat-number {{
            font-size: 2.5em;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 10px;
        }}
        .stat-label {{
            font-size: 1.1em;
            color: #666;
        }}
        .section {{
            margin-bottom: 40px;
        }}
        .section h2 {{
            color: #667eea;
            border-bottom: 2px solid #667eea;
            padding-bottom: 10px;
        }}
        .table-container {{
            overflow-x: auto;
            margin-top: 20px;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }}
        th {{
            background: #667eea;
            color: white;
            padding: 15px;
            text-align: left;
        }}
        td {{
            padding: 15px;
            border-bottom: 1px solid #eee;
        }}
        tr:hover {{
            background: #f8f9fa;
        }}
        .highlight {{
            background: #fff3cd;
            padding: 15px;
            border-radius: 10px;
            border-left: 4px solid #ffc107;
            margin: 20px 0;
        }}
        .summary {{
            background: #d1ecf1;
            padding: 15px;
            border-radius: 10px;
            border-left: 4px solid #17a2b8;
            margin: 20px 0;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìÖ –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á</h1>
            <p>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –¥–∞—Ç–∞–º –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –ø—Ä–æ—Å—á–µ—Ç</p>
        </div>
        
        <div class="content">
            <div class="summary">
                <h3>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                <p><strong>–í—Å–µ–≥–æ –∑–∞–¥–∞—á:</strong> {total_tasks}</p>
                <p><strong>–ü–µ—Ä–∏–æ–¥:</strong> {date_range.days} –¥–Ω–µ–π</p>
                <p><strong>–°—Ä–µ–¥–Ω–µ–µ –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å:</strong> {avg_tasks_per_day:.1f}</p>
                <p><strong>–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:</strong> —Å {df['create_date_parsed'].min().strftime('%d.%m.%Y')} –ø–æ {df['create_date_parsed'].max().strftime('%d.%m.%Y')}</p>
            </div>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number">{total_tasks}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ –∑–∞–¥–∞—á</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{date_range.days}</div>
                    <div class="stat-label">–î–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{avg_tasks_per_day:.1f}</div>
                    <div class="stat-label">–°—Ä–µ–¥–Ω–µ–µ –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{daily_df['count'].max() if not daily_df.empty else 0}</div>
                    <div class="stat-label">–ú–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å</div>
                </div>
            </div>
            
            <div class="section">
                <h2>üìä –¢–æ–ø –¥–Ω–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞—á</h2>
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>–î–∞—Ç–∞</th>
                                <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á</th>
                                <th>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ</th>
                            </tr>
                        </thead>
                        <tbody>
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –¥–Ω–µ–π
        for _, row in daily_df.head(20).iterrows():
            date_str = row['date'].strftime('%d.%m.%Y')
            count = row['count']
            percentage = (count / total_tasks) * 100
            html_content += f"""
                            <tr>
                                <td><strong>{date_str}</strong></td>
                                <td>{count}</td>
                                <td>{percentage:.1f}%</td>
                            </tr>
            """
        
        html_content += """
                        </tbody>
                    </table>
                </div>
            </div>
            
            <div class="section">
                <h2>üìà –¢–æ–ø –Ω–µ–¥–µ–ª—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞—á</h2>
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>–ù–µ–¥–µ–ª—è (–Ω–∞—á–∞–ª–æ)</th>
                                <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á</th>
                                <th>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ</th>
                            </tr>
                        </thead>
                        <tbody>
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –Ω–µ–¥–µ–ª—å
        for _, row in weekly_df.head(15).iterrows():
            week_str = row['week_start'].strftime('%d.%m.%Y')
            count = row['count']
            percentage = (count / total_tasks) * 100
            html_content += f"""
                            <tr>
                                <td><strong>{week_str}</strong></td>
                                <td>{count}</td>
                                <td>{percentage:.1f}%</td>
                            </tr>
            """
        
        html_content += """
                        </tbody>
                    </table>
                </div>
            </div>
            
            <div class="section">
                <h2>üìÖ –¢–æ–ø –º–µ—Å—è—Ü–µ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞—á</h2>
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>–ú–µ—Å—è—Ü</th>
                                <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á</th>
                                <th>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ</th>
                            </tr>
                        </thead>
                        <tbody>
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –º–µ—Å—è—Ü–µ–≤
        for _, row in monthly_df.head(12).iterrows():
            month_str = row['month_start'].strftime('%B %Y')
            count = row['count']
            percentage = (count / total_tasks) * 100
            html_content += f"""
                            <tr>
                                <td><strong>{month_str}</strong></td>
                                <td>{count}</td>
                                <td>{percentage:.1f}%</td>
                            </tr>
            """
        
        html_content += """
                        </tbody>
                    </table>
                </div>
            </div>
            
            <div class="section">
                <h2>üïê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º –¥–Ω—è</h2>
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>–ß–∞—Å</th>
                                <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á</th>
                                <th>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ</th>
                            </tr>
                        </thead>
                        <tbody>
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º
        for hour in range(24):
            count = analysis_data['hourly_stats'].get(hour, 0)
            percentage = (count / total_tasks) * 100 if total_tasks > 0 else 0
            html_content += f"""
                            <tr>
                                <td><strong>{hour:02d}:00</strong></td>
                                <td>{count}</td>
                                <td>{percentage:.1f}%</td>
                            </tr>
            """
        
        html_content += """
                        </tbody>
                    </table>
                </div>
            </div>
            
            <div class="section">
                <h2>üìÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏</h2>
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏</th>
                                <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á</th>
                                <th>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ</th>
                            </tr>
                        </thead>
                        <tbody>
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        weekdays = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        for i, weekday in enumerate(weekdays):
            count = analysis_data['weekday_stats'].get(i, 0)
            percentage = (count / total_tasks) * 100 if total_tasks > 0 else 0
            html_content += f"""
                            <tr>
                                <td><strong>{weekday}</strong></td>
                                <td>{count}</td>
                                <td>{percentage:.1f}%</td>
                            </tr>
            """
        
        html_content += """
                        </tbody>
                    </table>
                </div>
            </div>
            
            <div class="section">
                <h2>üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏</h2>
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                <th>–°—Ç–∞—Ç—É—Å</th>
                                <th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                                <th>–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫</th>
                            </tr>
                        </thead>
                        <tbody>
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏
        recent_tasks = sorted(valid_tasks, key=lambda x: x['create_date_parsed'], reverse=True)[:20]
        for task in recent_tasks:
            create_date_str = task['create_date_parsed'].strftime('%d.%m.%Y %H:%M')
            html_content += f"""
                            <tr>
                                <td><strong>{task['id']}</strong></td>
                                <td>{task['name'][:50]}{'...' if len(task['name']) > 50 else ''}</td>
                                <td>{task['status']}</td>
                                <td>{create_date_str}</td>
                                <td>{task['assigner']}</td>
                            </tr>
            """
        
        html_content += """
                        </tbody>
                    </table>
                </div>
            </div>
            
            <div class="highlight">
                <h3>üí° –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:</h3>
                <ul>
                    <li><strong>–ü–∏–∫–æ–≤—ã–µ –¥–Ω–∏:</strong> –ù–∞–∏–±–æ–ª—å—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á</li>
                    <li><strong>–†–∞–±–æ—á–∏–µ —á–∞—Å—ã:</strong> –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫</li>
                    <li><strong>–ù–µ–¥–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞:</strong> –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏</li>
                    <li><strong>–ú–µ—Å—è—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã:</strong> –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –≤ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á</li>
                </ul>
            </div>
        </div>
    </div>
</body>
</html>
        """
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –æ—Ç—á–µ—Ç
        html_path = os.path.join(self.output_dir, 'simple_date_analysis_report.html')
        with open(html_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"‚úÖ HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {html_path}")
        
        # –°–æ–∑–¥–∞–µ–º Excel –æ—Ç—á–µ—Ç
        excel_path = os.path.join(self.output_dir, 'simple_date_analysis_report.xlsx')
        with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            df[['id', 'name', 'status', 'create_date_parsed', 'assigner', 'export_timestamp']].to_excel(
                writer, sheet_name='–í—Å–µ –∑–∞–¥–∞—á–∏', index=False)
            
            # –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            daily_df.to_excel(writer, sheet_name='–ü–æ –¥–Ω—è–º', index=False)
            
            # –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            weekly_df.to_excel(writer, sheet_name='–ü–æ –Ω–µ–¥–µ–ª—è–º', index=False)
            
            # –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            monthly_df.to_excel(writer, sheet_name='–ü–æ –º–µ—Å—è—Ü–∞–º', index=False)
            
            # –ü–æ —á–∞—Å–∞–º
            hourly_df = pd.DataFrame(list(analysis_data['hourly_stats'].items()), 
                                   columns=['hour', 'count'])
            hourly_df = hourly_df.sort_values('hour')
            hourly_df.to_excel(writer, sheet_name='–ü–æ —á–∞—Å–∞–º', index=False)
            
            # –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            weekday_df = pd.DataFrame(list(analysis_data['weekday_stats'].items()), 
                                    columns=['weekday_num', 'count'])
            weekday_df['weekday_name'] = weekday_df['weekday_num'].map({
                0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 1: '–í—Ç–æ—Ä–Ω–∏–∫', 2: '–°—Ä–µ–¥–∞', 
                3: '–ß–µ—Ç–≤–µ—Ä–≥', 4: '–ü—è—Ç–Ω–∏—Ü–∞', 5: '–°—É–±–±–æ—Ç–∞', 6: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
            })
            weekday_df = weekday_df.sort_values('weekday_num')
            weekday_df.to_excel(writer, sheet_name='–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏', index=False)
        
        print(f"‚úÖ Excel –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {excel_path}")
        
        return html_path, excel_path
    
    def run_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á")
        print("=" * 80)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î
        tasks = self.get_tasks_from_db()
        
        if not tasks:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—Ç—ã
        analysis_data = self.analyze_creation_dates(tasks)
        
        if not analysis_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç—ã
        html_path, excel_path = self.create_date_analysis_report(analysis_data)
        
        print("\nüéâ –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {len(analysis_data['valid_tasks'])}")
        print(f"üìÑ HTML –æ—Ç—á–µ—Ç: {html_path}")
        print(f"üìä Excel –æ—Ç—á–µ—Ç: {excel_path}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        daily_stats = analysis_data['daily_stats']
        if daily_stats:
            max_day = max(daily_stats.items(), key=lambda x: x[1])
            print(f"üìÖ –ú–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å: {max_day[1]} ({max_day[0].strftime('%d.%m.%Y')})")
        
        return html_path, excel_path

def main():
    analyzer = SimpleDateAnalyzer()
    analyzer.run_analysis()

if __name__ == "__main__":
    main()
