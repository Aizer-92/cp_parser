#!/usr/bin/env python3
"""
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–∞—Ç –¥–ª—è Planfix Connector
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑–Ω—ã–º–∏ —Å—Ä–µ–∑–∞–º–∏
"""

import sqlite3
import json
import requests
from datetime import datetime, timedelta
import os
import pandas as pd
from collections import defaultdict

class ProfessionalDatesParser:
    def __init__(self):
        self.config = self.load_config()
        self.db_path = 'output/planfix_tasks_correct.db'
        self.output_dir = 'output'
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open('planfix_config.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return None
    
    def get_all_tasks_with_dates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å –¥–∞—Ç–∞–º–∏ –∏–∑ API"""
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å –¥–∞—Ç–∞–º–∏ –∏–∑ API...")
        
        headers = {
            'Authorization': f'Bearer {self.config["rest_api"]["auth_token"]}',
            'Content-Type': 'application/json'
        }
        
        url = f"{self.config['rest_api']['base_url']}/task/list"
        
        all_tasks = []
        offset = 0
        page_size = 100
        
        while True:
            request_data = {
                "offset": offset,
                "pageSize": page_size,
                "filters": [
                    {
                        "type": 10,  # –°—Ç–∞—Ç—É—Å
                        "operator": "equal",
                        "value": [127, 128, 129]  # –°—Ç–∞—Ç—É—Å—ã: –ü–æ–∏—Å–∫, –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ, –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ
                    }
                ],
                "fields": "id,name,description,status,startDateTime,endDateTime,deadline,assigner,assignees,priority,importance,workTime,planTime,factTime,createDate,modifyDate,closeDate,startDate,finishDate"
            }
            
            try:
                print(f"  üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á (offset: {offset}, pageSize: {page_size})...")
                
                response = requests.post(url, headers=headers, json=request_data)
                response.raise_for_status()
                
                data = response.json()
                if 'tasks' in data:
                    tasks = data['tasks']
                    print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
                    
                    if not tasks:
                        break
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
                    for task in tasks:
                        task_data = self.extract_task_data(task)
                        if task_data:
                            all_tasks.append(task_data)
                    
                    if len(tasks) < page_size:
                        break
                    
                    offset += page_size
                    
                    if offset > 1000:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                        print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç offset (1000)")
                        break
                else:
                    print(f"    ‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—è 'tasks' –≤ –æ—Ç–≤–µ—Ç–µ")
                    break
                    
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
                break
        
        print(f"üìÖ –í—Å–µ–≥–æ –∑–∞–¥–∞—á —Å –¥–∞–Ω–Ω—ã–º–∏: {len(all_tasks)}")
        return all_tasks
    
    def extract_task_data(self, task):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–¥–∞—á–∏"""
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
        date_value = None
        date_source = None
        
        if task.get('endDateTime') and isinstance(task['endDateTime'], dict):
            date_value = task['endDateTime'].get('datetime')
            date_source = 'endDateTime'
        elif task.get('startDateTime') and isinstance(task['startDateTime'], dict):
            date_value = task['startDateTime'].get('datetime')
            date_source = 'startDateTime'
        elif task.get('createDate'):
            date_value = task['createDate']
            date_source = 'createDate'
        elif task.get('modifyDate'):
            date_value = task['modifyDate']
            date_source = 'modifyDate'
        
        if date_value:
            return {
                'id': task.get('id'),
                'name': task.get('name', ''),
                'description': task.get('description', ''),
                'dateTime': date_value,
                'date_source': date_source,
                'status_id': task.get('status', {}).get('id', 0),
                'status_name': task.get('status', {}).get('name', ''),
                'priority': task.get('priority', 'NotUrgent'),
                'importance': task.get('importance'),
                'assigner': task.get('assigner', {}).get('name', '') if isinstance(task.get('assigner'), dict) else str(task.get('assigner', '')),
                'assignees': self.extract_assignees(task.get('assignees')),
                'work_time': task.get('workTime'),
                'plan_time': task.get('planTime'),
                'fact_time': task.get('factTime')
            }
        return None
    
    def extract_assignees(self, assignees):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        if not assignees:
            return ''
        
        if isinstance(assignees, list):
            names = []
            for assignee in assignees:
                if isinstance(assignee, dict):
                    names.append(assignee.get('name', ''))
                else:
                    names.append(str(assignee))
            return ', '.join(filter(None, names))
        elif isinstance(assignees, dict):
            return assignees.get('name', '')
        else:
            return str(assignees)
    
    def update_database_dates(self, tasks_with_dates):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        print("üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        if not os.path.exists(self.db_path):
            print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.db_path}")
            return False
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ start_date_time
            cursor.execute("PRAGMA table_info(tasks)")
            columns = [col[1] for col in cursor.fetchall()]
            
            if 'start_date_time' not in columns:
                print("‚ùå –ü–æ–ª–µ start_date_time –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ tasks")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—ã
            updated_count = 0
            for task in tasks_with_dates:
                try:
                    if task['dateTime']:
                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ ISO —Ñ–æ—Ä–º–∞—Ç–∞
                        date_str = task['dateTime'].split('+')[0].split('T')[0]
                        
                        cursor.execute("""
                            UPDATE tasks 
                            SET start_date_time = ? 
                            WHERE id = ?
                        """, (date_str, task['id']))
                        
                        if cursor.rowcount > 0:
                            updated_count += 1
                            
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task['id']}: {e}")
            
            conn.commit()
            conn.close()
            
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–∞—Ç: {updated_count}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def calculate_priorities(self, tasks_with_dates):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á"""
        print("üéØ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤...")
        
        for task in tasks_with_dates:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            name = task['name'].lower()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            priority = 'D'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            if any(word in name for word in ['—Å—Ä–æ—á–Ω–æ', 'urgent', '–∫—Ä–∏—Ç–∏—á–Ω–æ', 'critical']):
                priority = 'A'
            elif any(word in name for word in ['–≤–∞–∂–Ω–æ', 'important', '–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', 'priority']):
                priority = 'B'
            elif any(word in name for word in ['–æ–±—ã—á–Ω–æ', 'normal', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç', 'standard']):
                priority = 'C'
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            description = task['description'].lower() if task['description'] else ''
            if any(word in description for word in ['—Å—Ä–æ—á–Ω–æ', 'urgent', '–∫—Ä–∏—Ç–∏—á–Ω–æ', 'critical', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ']):
                priority = 'A'
            elif any(word in description for word in ['–≤–∞–∂–Ω–æ', 'important', '–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', 'priority']):
                if priority == 'D':
                    priority = 'B'
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
            status_id = task['status_id']
            if status_id == 127:  # –ü–æ–∏—Å–∫ –∏ —Ä–∞—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–∞
                if priority == 'D':
                    priority = 'C'
            elif status_id == 128:  # –ö–ü –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
                if priority == 'D':
                    priority = 'B'
            elif status_id == 129:  # –ö–ü –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ
                if priority == 'D':
                    priority = 'A'
            
            task['calculated_priority'] = priority
        
        print(f"‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤—ã—á–∏—Å–ª–µ–Ω—ã –¥–ª—è {len(tasks_with_dates)} –∑–∞–¥–∞—á")
        return tasks_with_dates
    
    def create_comprehensive_report(self, tasks_with_dates):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        df = pd.DataFrame(tasks_with_dates)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_analysis = df.groupby('status_name').agg({
            'id': 'count',
            'calculated_priority': lambda x: x.value_counts().to_dict()
        }).reset_index()
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        priority_analysis = df['calculated_priority'].value_counts()
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∞—Ç–∞–º
        df['date'] = pd.to_datetime(df['dateTime'].str.split('T').str[0])
        df['month'] = df['date'].dt.to_period('M')
        monthly_analysis = df.groupby('month').size()
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
        assignee_analysis = df['assignees'].value_counts().head(10)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞–º
        assigner_analysis = df['assigner'].value_counts().head(10)
        
        # –°–æ–∑–¥–∞–µ–º HTML –æ—Ç—á–µ—Ç
        html_content = self.generate_html_report(
            df, status_analysis, priority_analysis, 
            monthly_analysis, assignee_analysis, assigner_analysis
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        output_path = os.path.join(self.output_dir, 'comprehensive_analysis_report.html')
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {output_path}")
        
        # –°–æ–∑–¥–∞–µ–º Excel –æ—Ç—á–µ—Ç
        excel_path = os.path.join(self.output_dir, 'comprehensive_analysis_report.xlsx')
        with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–í—Å–µ –∑–∞–¥–∞—á–∏', index=False)
            status_analysis.to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º', index=False)
            priority_analysis.to_frame('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ').to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º')
            monthly_analysis.to_frame('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á').to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º')
            assignee_analysis.to_frame('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á').to_excel(writer, sheet_name='–¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π')
            assigner_analysis.to_frame('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á').to_excel(writer, sheet_name='–¢–æ–ø –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–æ–≤')
        
        print(f"‚úÖ Excel –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {excel_path}")
        
        return output_path, excel_path
    
    def generate_html_report(self, df, status_analysis, priority_analysis, 
                           monthly_analysis, assignee_analysis, assigner_analysis):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞"""
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_tasks = len(df)
        tasks_with_dates = df['dateTime'].notna().sum()
        coverage_percentage = round(tasks_with_dates / total_tasks * 100, 1) if total_tasks > 0 else 0
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        priority_stats = priority_analysis.to_dict()
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤
        status_stats = []
        for _, row in status_analysis.iterrows():
            status_stats.append({
                'name': row['status_name'],
                'count': row['id'],
                'priorities': row['calculated_priority']
            })
        
        html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üéØ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Planfix Connector</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
        }}
        .container {{
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }}
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 40px;
            text-align: center;
        }}
        .header h1 {{
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }}
        .header p {{
            margin: 10px 0 0 0;
            font-size: 1.2em;
            opacity: 0.9;
        }}
        .content {{
            padding: 40px;
        }}
        .stats-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }}
        .stat-card {{
            background: #f8f9fa;
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            border-left: 5px solid #667eea;
        }}
        .stat-number {{
            font-size: 2.5em;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 10px;
        }}
        .stat-label {{
            font-size: 1.1em;
            color: #666;
        }}
        .priority-a {{ color: #dc3545; font-weight: bold; }}
        .priority-b {{ color: #fd7e14; font-weight: bold; }}
        .priority-c {{ color: #ffc107; font-weight: bold; }}
        .priority-d {{ color: #6c757d; font-weight: bold; }}
        .section {{
            margin-bottom: 40px;
        }}
        .section h2 {{
            color: #667eea;
            border-bottom: 2px solid #667eea;
            padding-bottom: 10px;
        }}
        .table-container {{
            overflow-x: auto;
            margin-top: 20px;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }}
        th {{
            background: #667eea;
            color: white;
            padding: 15px;
            text-align: left;
        }}
        td {{
            padding: 15px;
            border-bottom: 1px solid #eee;
        }}
        tr:hover {{
            background: #f8f9fa;
        }}
        .chart-container {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 30px;
            margin-top: 30px;
        }}
        .chart {{
            background: #f8f9fa;
            padding: 20px;
            border-radius: 15px;
            text-align: center;
        }}
        .footer {{
            background: #f8f9fa;
            padding: 20px;
            text-align: center;
            color: #666;
            border-top: 1px solid #eee;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üéØ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</h1>
            <p>Planfix Connector - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏</p>
        </div>
        
        <div class="content">
            <!-- –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number">{total_tasks}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ –∑–∞–¥–∞—á</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{tasks_with_dates}</div>
                    <div class="stat-label">–ó–∞–¥–∞—á —Å –¥–∞—Ç–∞–º–∏</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{coverage_percentage}%</div>
                    <div class="stat-label">–ü–æ–∫—Ä—ã—Ç–∏–µ –¥–∞—Ç–∞–º–∏</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{len(df['assignees'].unique())}</div>
                    <div class="stat-label">–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</div>
                </div>
            </div>
            
            <!-- –ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º -->
            <div class="section">
                <h2>üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º</h2>
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number priority-a">{priority_stats.get('A', 0)}</div>
                        <div class="stat-label">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç A (–ö—Ä–∏—Ç–∏—á–Ω–æ)</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number priority-b">{priority_stats.get('B', 0)}</div>
                        <div class="stat-label">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç B (–í–∞–∂–Ω–æ)</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number priority-c">{priority_stats.get('C', 0)}</div>
                        <div class="stat-label">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç C (–û–±—ã—á–Ω–æ)</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number priority-d">{priority_stats.get('D', 0)}</div>
                        <div class="stat-label">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç D (–ù–∏–∑–∫–∏–π)</div>
                    </div>
                </div>
            </div>
            
            <!-- –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º -->
            <div class="section">
                <h2>üéØ –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º</h2>
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>–°—Ç–∞—Ç—É—Å</th>
                                <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á</th>
                                <th>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç A</th>
                                <th>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç B</th>
                                <th>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç C</th>
                                <th>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç D</th>
                            </tr>
                        </thead>
                        <tbody>
        """
        
        for status in status_stats:
            priorities = status['priorities']
            html_content += f"""
                            <tr>
                                <td><strong>{status['name']}</strong></td>
                                <td>{status['count']}</td>
                                <td class="priority-a">{priorities.get('A', 0)}</td>
                                <td class="priority-b">{priorities.get('B', 0)}</td>
                                <td class="priority-c">{priorities.get('C', 0)}</td>
                                <td class="priority-d">{priorities.get('D', 0)}</td>
                            </tr>
            """
        
        html_content += """
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- –¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π -->
            <div class="section">
                <h2>üë• –¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</h2>
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</th>
                                <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á</th>
                            </tr>
                        </thead>
                        <tbody>
        """
        
        for assignee, count in assignee_analysis.items():
            html_content += f"""
                            <tr>
                                <td>{assignee}</td>
                                <td>{count}</td>
                            </tr>
            """
        
        html_content += """
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- –¢–æ–ø –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–æ–≤ -->
            <div class="section">
                <h2>üìù –¢–æ–ø –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–æ–≤</h2>
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫</th>
                                <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á</th>
                            </tr>
                        </thead>
                        <tbody>
        """
        
        for assigner, count in assigner_analysis.items():
            html_content += f"""
                            <tr>
                                <td>{assigner}</td>
                                <td>{count}</td>
                            </tr>
            """
        
        html_content += """
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º -->
            <div class="section">
                <h2>üìÖ –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º</h2>
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>–ú–µ—Å—è—Ü</th>
                                <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á</th>
                            </tr>
                        </thead>
                        <tbody>
        """
        
        for month, count in monthly_analysis.items():
            html_content += f"""
                            <tr>
                                <td>{month}</td>
                                <td>{count}</td>
                            </tr>
            """
        
        html_content += f"""
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ -->
            <div class="section">
                <h2>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é</h2>
                <div style="background: #e8f5e8; padding: 20px; border-radius: 15px;">
                    <h3 style="color: #28a745; margin-top: 0;">üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
                    <ul>
                        <li><strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç A ({priority_stats.get('A', 0)} –∑–∞–¥–∞—á):</strong> –¢—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω—ã —Å—Ä–æ—á–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã</li>
                        <li><strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç B ({priority_stats.get('B', 0)} –∑–∞–¥–∞—á):</strong> –í–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏, –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Ä–µ—Å—É—Ä—Å—ã –∑–∞—Ä–∞–Ω–µ–µ</li>
                        <li><strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç C ({priority_stats.get('C', 0)} –∑–∞–¥–∞—á):</strong> –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏, –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ</li>
                        <li><strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç D ({priority_stats.get('D', 0)} –∑–∞–¥–∞—á):</strong> –ù–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ, –º–æ–∂–Ω–æ –æ—Ç–ª–æ–∂–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏</li>
                    </ul>
                    
                    <h3 style="color: #17a2b8; margin-top: 20px;">üìä –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
                    <ul>
                        <li><strong>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏:</strong> –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á</li>
                        <li><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤:</strong> –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ç–∞—Ç—É—Å–∞–º–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —É–∑–∫–∏—Ö –º–µ—Å—Ç</li>
                        <li><strong>–í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤</li>
                    </ul>
                </div>
            </div>
        </div>
        
        <div class="footer">
            <p>üéØ Planfix Connector - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ | –°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </div>
    </div>
</body>
</html>
        """
        
        return html_content
    
    def run_full_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ Planfix Connector")
        print("=" * 80)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å –¥–∞—Ç–∞–º–∏
        tasks_with_dates = self.get_all_tasks_with_dates()
        if not tasks_with_dates:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ —Å –¥–∞—Ç–∞–º–∏")
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        tasks_with_priorities = self.calculate_priorities(tasks_with_dates)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if self.update_database_dates(tasks_with_priorities):
            print("‚úÖ –î–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç
            html_path, excel_path = self.create_comprehensive_report(tasks_with_priorities)
            
            print("\nüéâ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {len(tasks_with_priorities)}")
            print(f"üìÑ HTML –æ—Ç—á–µ—Ç: {html_path}")
            print(f"üìä Excel –æ—Ç—á–µ—Ç: {excel_path}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç—ã
            os.startfile(html_path)
            os.startfile(excel_path)
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = ProfessionalDatesParser()
    parser.run_full_analysis()

if __name__ == "__main__":
    main()

