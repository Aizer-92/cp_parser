#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
"""

def calculate_priority(client_grade, order_percent, calculation_sum):
    """–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ"""
    try:
        client_grade = float(client_grade) if client_grade and client_grade != '' else 3.0
        client_grade = max(1, min(5, client_grade))
        
        order_percent = float(order_percent) if order_percent and order_percent != '' else 50.0
        order_percent = max(0, min(100, order_percent))
        
        calculation_sum = float(calculation_sum) if calculation_sum and calculation_sum != '' else 1000000
        
        # –§–∞–∫—Ç–æ—Ä —Å—É–º–º—ã –ø—Ä–æ—Å—á–µ—Ç–∞
        if calculation_sum <= 250000:
            sum_factor = 0.2
        elif calculation_sum <= 1000000:
            sum_factor = 0.4
        elif calculation_sum <= 5000000:
            sum_factor = 0.6
        elif calculation_sum <= 10000000:
            sum_factor = 0.8
        else:
            sum_factor = 1.0
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        priority_score = (
            0.4 * (client_grade / 5) +
            0.4 * sum_factor +
            0.2 * (order_percent / 100)
        )
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        if priority_score >= 0.8:
            return "A", priority_score
        elif priority_score >= 0.6:
            return "B", priority_score
        elif priority_score >= 0.4:
            return "C", priority_score
        else:
            return "D", priority_score
            
    except Exception as e:
        return "D", 0.0

def test_priorities():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π"""
    print("üß™ –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤")
    print("=" * 60)
    
    test_cases = [
        # (–ì—Ä–µ–π–¥, % –∑–∞–∫–∞–∑–∞, –°—É–º–º–∞, –û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        (5, 100, 20000000, "A"),  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        (4, 80, 8000000, "A"),    # –í—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        (3, 60, 3000000, "B"),    # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        (2, 40, 500000, "C"),     # –ù–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        (1, 20, 100000, "D"),     # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        (5, 50, 1000000, "B"),    # –í—ã—Å–æ–∫–∏–π –≥—Ä–µ–π–¥, —Å—Ä–µ–¥–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        (1, 100, 20000000, "A"),  # –ù–∏–∑–∫–∏–π –≥—Ä–µ–π–¥, –Ω–æ –≤—ã—Å–æ–∫–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        (5, 20, 100000, "C"),     # –í—ã—Å–æ–∫–∏–π –≥—Ä–µ–π–¥, –Ω–æ –Ω–∏–∑–∫–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    ]
    
    results = {'A': 0, 'B': 0, 'C': 0, 'D': 0}
    
    for i, (grade, percent, sum_val, expected) in enumerate(test_cases, 1):
        priority, score = calculate_priority(grade, percent, sum_val)
        results[priority] += 1
        
        status = "‚úÖ" if priority == expected else "‚ùå"
        print(f"{status} –¢–µ—Å—Ç {i}: –ì—Ä–µ–π–¥={grade}, %={percent}, –°—É–º–º–∞={sum_val:,}‚ÇΩ")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {priority} (—Å—á–µ—Ç: {score:.3f}), –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
        print()
    
    print("üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    for priority, count in results.items():
        print(f"   {priority}: {count}")
    
    print("\nüéØ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—à–±–æ—Ä–¥: http://localhost:8055")
    print("   –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ A/B/C/D, –∞ –Ω–µ –≤—Å–µ C!")

if __name__ == "__main__":
    test_priorities()
